#Если Клиент Тогда

// Процедура заполняет построитель отчета.
//
Процедура ЗаполнитьПостроительОтчета() Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА КАК Печать,
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СпрНоменклатура.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	0 КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпрНоменклатура.Ссылка КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
	|	ИЗ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ГДЕ НЕ СпрНоменклатура.ЭтоГруппа
	|	{ГДЕ
	|		СпрНоменклатура.Ссылка.* КАК Номенклатура}
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		СпрХарактеристики.Владелец,
	|		СпрХарактеристики.Ссылка
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|	{ГДЕ
	|		СпрХарактеристики.Владелец.* КАК Номенклатура,
	|		СпрХарактеристики.Ссылка.* КАК ХарактеристикаНоменклатуры}
	|	) КАК СпрНоменклатура
	|";
	
	Если ТолькоИмеющиесяВНаличии Тогда
		
		//// < 08.11.16 Вялов - Задача 3934 п.5 - только по номенклатуре находящейся на остатках в магазине
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1 КАК Количество", "НаСкладе.Количество КАК Количество");
		//// 08.11.16 Вялов - Задача 3934 п.5 - только по номенклатуре находящейся на остатках в магазине >		
		//
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		НаСкладе.Номенклатура,
		|		НаСкладе.ХарактеристикаНоменклатуры,
		|		СУММА(НаСкладе.Количество) КАК Количество
		|	ИЗ
		|		(ВЫБРАТЬ
		|			НаСкладе.Номенклатура,
		|			НаСкладе.ХарактеристикаНоменклатуры,
		|			НаСкладе.КоличествоОстаток КАК Количество
		|		ИЗ
		|			РегистрНакопления.ТоварыНаСкладах.Остатки(, {Номенклатура.* КАК Номенклатура,
		|			   ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
		|			   Склад.* КАК Склад}) КАК НаСкладе
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			ВРознице.Номенклатура,
		|			ВРознице.ХарактеристикаНоменклатуры,
		|			ВРознице.КоличествоОстаток КАК Количество
		|		ИЗ
		|			РегистрНакопления.ТоварыВРознице.Остатки(, {Номенклатура.* КАК Номенклатура,
		|			   ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
		|			   Склад.* КАК Склад}) КАК ВРознице
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			ВНТТ.Номенклатура,
		|			ВНТТ.ХарактеристикаНоменклатуры,
		|			ВНТТ.КоличествоОстаток КАК Количество
		|		ИЗ
		|			РегистрНакопления.ТоварыВНТТ.Остатки(, {Номенклатура.* КАК Номенклатура,
		|			   ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
		|			   Склад.* КАК Склад}) КАК ВНТТ
		|		) КАК НаСкладе
		|	СГРУППИРОВАТЬ ПО
		|		НаСкладе.Номенклатура,
		|		НаСкладе.ХарактеристикаНоменклатуры
		|	) КАК НаСкладе
		|ПО
		|	СпрНоменклатура.Номенклатура = НаСкладе.Номенклатура
		|	И СпрНоменклатура.ХарактеристикаНоменклатуры = НаСкладе.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ЕСТЬNULL(НаСкладе.Количество, 0) > 0
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	СпрНоменклатура.Номенклатура.Наименование,
	|	СпрНоменклатура.ХарактеристикаНоменклатуры.Наименование
	|";

	// Соответствие имен полей в запросе и их представлений в отчете.
	СтруктураПредставлениеПолей = Новый Структура(
	"Номенклатура,   ХарактеристикаНоменклатуры,    Склад",
	"Номенклатура", "Характеристика номенклатуры", "Склад");

	ПостроительОтчета.Текст = ТекстЗапроса;

	ПостроительОтчета.ЗаполнитьНастройки();

	// Создадим список доступных отборов.
	СоответствиеДоступныхОтборов = Новый Соответствие;
	СоответствиеДоступныхОтборов.Вставить("Номенклатура", 0);
	СоответствиеДоступныхОтборов.Вставить("ХарактеристикаНоменклатуры", 0);
	СоответствиеДоступныхОтборов.Вставить("Склад", 0);

	Для Каждого ДоступноеПоле Из ПостроительОтчета.ДоступныеПоля Цикл
		Если СоответствиеДоступныхОтборов[ДоступноеПоле.Имя] = Неопределено Тогда
			ДоступноеПоле.Отбор = Ложь;
		Иначе
			ДоступноеПоле.Отбор = Истина;
		КонецЕсли;
	КонецЦикла;

	// Создадим массив отборов.
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("ХарактеристикаНоменклатуры");

	Если ТолькоИмеющиесяВНаличии Тогда
		МассивОтбора.Добавить("Склад");
	КонецЕсли;

	Для Каждого ЭлементОтбора Из МассивОтбора Цикл
		Если ПостроительОтчета.Отбор.Найти(ЭлементОтбора) = Неопределено Тогда   			
			ПостроительОтчета.Отбор.Добавить(ЭлементОтбора);	
		КонецЕсли;
	КонецЦикла;
	
	//// < 08.11.16 Вялов - Задача 3934 п.5 - только по номенклатуре находящейся на остатках в магазине
	////поОтбор = ПостроительОтчета.Отбор; 
	//Если ЗначениеЗаполнено(ЭтотОбъект.Склад) Тогда	
	//	поОтборСклад = ПостроительОтчета.Отбор["Склад"];	
	//	//поОтбор.Добавить(ЭлементОтбора);
	//	поОтборСклад.Использование	= Истина;
	//	поОтборСклад.ВидСравнения 	= ВидСравнения.Равно;
	//	поОтборСклад.Значение 		= ЭтотОбъект.Склад;	
	//КонецЕсли;	
	//// 08.11.16 Вялов - Задача 3934 п.5 - только по номенклатуре находящейся на остатках в магазине >

	// Вызовем стандартную процедуру заполнения представлений.
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);

КонецПроцедуры // ЗаполнитьПостроительОтчета()


// < 10.11.16 Вялов - Мегаплан № 3934 
Процедура ЗаполнитьПостроительОтчетаДляМагазина(ВариантОтбора=0) Экспорт

	Запрос = Новый Запрос;		
		
	Товары.Очистить();
	
	Если ВариантОтбора = -1 Тогда
		Возврат;
	ИначеЕсли ВариантОтбора = 0 Тогда // всю номенклатуру					
		ЗапросТекст = "ВЫБРАТЬ
		              |	Т.Ссылка КАК Номенклатура
		              |ИЗ
		              |	Справочник.Номенклатура КАК Т
		              |ГДЕ
		              |		НЕ Т.ПометкаУдаления
					  |		И НЕ Т.ЭтоГруппа
					  |";  			
	ИначеЕсли ВариантОтбора = 1 Тогда     	// только на остатке в компании
		ЗапросТекст = "ВЫБРАТЬ 
					|	Т.Номенклатура КАК Номенклатура
					|ИЗ
					|	РегистрНакопления.ТоварыНаСкладах.Остатки(&НаДату, ) КАК Т
				    |";  	
	ИначеЕсли ВариантОтбора = 2 Тогда   	// в наличии на складе
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Склад) Тогда 
			Сообщить("Не задан склад магазина!");
			Возврат;
		Иначе
			ЗапросТекст = "ВЫБРАТЬ 
					|	Т.Номенклатура КАК Номенклатура
					|ИЗ
					|	РегистрНакопления.ТоварыНаСкладах.Остатки(&НаДату, Склад = &Склад) КАК Т
				    |";  	
			Запрос.УстановитьПараметр("Склад", 			ЭтотОбъект.Склад);		
		КонецЕсли;
		
	ИначеЕсли ВариантОтбора = 3 Тогда   	// только по номенклатуре или бренду
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Номенклатура) Тогда 
			Сообщить("Не задан товар (бренд)!");
			Возврат;
		Иначе
			ЗапросТекст = "ВЫБРАТЬ 
				    |	Т.Ссылка КАК Номенклатура
		            |ИЗ
		            |	Справочник.Номенклатура КАК Т
		            |ГДЕ
		            |	Т.Ссылка " + ?(ЭтотОбъект.Номенклатура.ЭтоГруппа, "В ИЕРАРХИИ(&Номенклатура)", " = &Номенклатура")  + "
				//  |		НЕ Номенклатура.ПометкаУдаления
					|	И НЕ Т.ЭтоГруппа	
					|";  	
			Если ЭтотОбъект.Номенклатура.ЭтоГруппа Тогда
				Массив = Новый Массив;
				Массив.Очистить();
				Массив.Добавить(ЭтотОбъект.Номенклатура);
				Запрос.УстановитьПараметр("Номенклатура", 		Массив);
			Иначе						                        
				Запрос.УстановитьПараметр("Номенклатура", 		ЭтотОбъект.Номенклатура);					
			КонецЕсли;	
		КонецЕсли;
	Иначе  			// без вараинтов
		Возврат;
		
	КонецЕсли;
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "ИЗ", "ПОМЕСТИТЬ втТовар
			|ИЗ");			

	ЗапросТекст	= ЗапросТекст + "
			|;
			|////////////////////////////////////
			|";
			
			
	// только имеющиеся в наличии
	//Если (ВариантОтбора = 1 ИЛИ (ВариантОтбора = 2) Тогда 	
	Если ТолькоИзменившиесяЦены Тогда
		
		ЗапросТекст = ЗапросТекст + "			
			|ВЫБРАТЬ
			|	ЦеныНоменклатурыВчера.Номенклатура,
			|	ЦеныНоменклатурыВчера.Цена,
			|	ЦеныНоменклатурыВчера.ЕдиницаИзмерения
			|ПОМЕСТИТЬ втЦеныВчера
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НаДату, ДЕНЬ), СЕКУНДА, -1),
			|		ТипЦен = &ТипЦен
			|		И Номенклатура В (ВЫБРАТЬ Т1.Номенклатура ИЗ втТовар КАК Т1)
			|		) КАК ЦеныНоменклатурыВчера
			|;
			|////////////////////////////////////		
			|ВЫБРАТЬ
			|	ЦеныНоменклатурыСегодня.Номенклатура,
			|	ЦеныНоменклатурыСегодня.Цена,
			|	ЦеныНоменклатурыСегодня.ЕдиницаИзмерения
			|ПОМЕСТИТЬ втЦеныСегодня
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ),
			|		ТипЦен = &ТипЦен
			|		И Номенклатура В (ВЫБРАТЬ Т2.Номенклатура ИЗ втТовар КАК Т2)
			|		) КАК ЦеныНоменклатурыСегодня	
			|;
			|////////////////////////////////////		
			|ВЫБРАТЬ
			|	ИСТИНА КАК Печать,
			|	ЦеныСегодня.Номенклатура КАК Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
			//|	ЦеныСегодня.Цена,
			|	0 КАК Цена,
			//|	ЦеныСегодня.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЦеныСегодня.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|	1 КАК Количество                                  	
		//	|ПОМЕСТИТЬ втЦеныВчера
			|ИЗ
			|	втЦеныСегодня КАК ЦеныСегодня
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЦеныВчера КАК ЦеныВчера
			|	ПО ЦеныСегодня.Номенклатура = ЦеныВчера.Номенклатура
			|		И ЦеныСегодня.Цена <> ЦеныВчера.Цена
			|";	
			
	Иначе
			
		ЗапросТекст = ЗапросТекст + "			
			|ВЫБРАТЬ
			|	ИСТИНА КАК Печать,
			|	Товар.Номенклатура КАК Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
			//|	ЦеныСегодня.Цена,
			|	0 КАК Цена,
			//|	ЦеныСегодня.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	Товар.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|	1 КАК Количество      			
			//|	ЦеныНоменклатурыСегодня.Номенклатура,
			//|	ЦеныНоменклатурыСегодня.Цена,
			//|	ЦеныНоменклатурыСегодня.ЕдиницаИзмерения
			|ИЗ
			|	втТовар КАК Товар
			//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ),
			//|		ТипЦен = &ТипЦен
			//|		И Номенклатура В (ВЫБРАТЬ Т2.Номенклатура ИЗ втТовар КАК Т2)
			//|		) КАК ЦеныНоменклатурыСегодня	
			|";
		
	КонецЕсли;
		
	//ТекДт = ТекущаяДата();
	//Запрос.УстановитьПараметр("ДатаВчера",		КонецДня(НачалоДня(ТекДт) - 1));		
	//Запрос.УстановитьПараметр("ДатаНачало", 	НачалоДня(ТекДт));
	//Запрос.УстановитьПараметр("ДатаОкончание", 	КонецДня(ТекДт));
	
	Запрос.Текст = ЗапросТекст;
	Запрос.УстановитьПараметр("НаДату", 		ЭтотОбъект.ДатаДанных);
	//Если ЗначениеЗаполнено(ЭтотОбъект.Склад) Тогда	     		
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОТБОР%", "Склад = &Склад");
	//	Запрос.УстановитьПараметр("Склад", 			ЭтотОбъект.Склад);
	//ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.Склад) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОТБОР%", "Склад = &Склад");
	//	Запрос.УстановитьПараметр("Склад", 			ЭтотОбъект.Склад);
	//КонецЕсли;
	Запрос.УстановитьПараметр("ТипЦен", 		Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"));
	
	Запрос.Текст = 	ЗапросТекст;
	
	ЭтотОбъект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());  
	ЭтотОбъект.ДатаДока = ЭтотОбъект.ДатаДанных;		
	ЭтотОбъект.ТипЦен = ЭтотОбъект.Склад.ТипЦенРозничнойТорговли;
	
	ЗаполнитьПостроительОтчета();

КонецПроцедуры // ЗаполнитьПостроительОтчета()


Процедура ПерезаполнитьЦеныДляМагазина(ЦеныНаДату) Экспорт

	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("НовыйТипЦен", ТипЦен);

	ЗапросПоЦенам = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначений,
	   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
	   Товары.ВыгрузитьКолонку("Номенклатура"),
	   ЦеныНаДату,
	   Неопределено).Выгрузить();
	ЗапросПоЦенам.Индексы.Добавить("Номенклатура");

	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ТипЦенРассчитывается = ТипЦен.Рассчитывается;

	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, РабочаяДата);
	Курс = СтруктураКурса.Курс;
	Кратность = СтруктураКурса.Кратность;

	Для Каждого СтрокаТовара Из Товары Цикл
		ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;

		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);

		СтрокиЦен = ЗапросПоЦенам.НайтиСтроки(СтруктураПоиска);

		СтрокаБезХарактеристики = Неопределено;
		СтрокаСХарактеристикой = Неопределено;

		Для Каждого СтрокаЦен Из СтрокиЦен Цикл
			Если СтрокаЦен.ХарактеристикаНоменклатуры = ПустаяХарактеристика Тогда
				СтрокаБезХарактеристики = СтрокаЦен;
			ИначеЕсли СтрокаЦен.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры Тогда
				СтрокаСХарактеристикой = СтрокаЦен;
			КонецЕсли;
		КонецЦикла;

		Если СтрокаСХарактеристикой <> Неопределено Тогда
			НайденнаяСтрока = СтрокаСХарактеристикой;
		ИначеЕсли СтрокаБезХарактеристики <> Неопределено Тогда
			НайденнаяСтрока = СтрокаБезХарактеристики;
		Иначе
			НайденнаяСтрока = Неопределено;
		КонецЕсли;

		Если (НайденнаяСтрока <> Неопределено) И (НайденнаяСтрока.Цена <> 0) Тогда
			Цена = НайденнаяСтрока.Цена * (1 + ?(ТипЦенРассчитывается, НайденнаяСтрока.ПроцентСкидкиНаценки / 100, 0));
			Цена = Ценообразование.ОкруглитьЦену(Цена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, НайденнаяСтрока.ВалютаЦены, Валюта, Курс, Кратность);			

			коэф = 0;
			Если СтрокаТовара.Номенклатура.БазоваяЕдиницаИзмерения=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
				ВыбЕд = Справочники.ЕдиницыИзмерения.Выбрать(,СтрокаТовара.Номенклатура);
				Пока ВыбЕд.Следующий() Цикл
					Если ВыбЕд.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
						коэф = ВыбЕд.Коэффициент;
					КонецЕсли;
				КонецЦикла;
				Попытка
					Цена = Цена/коэф;
					Цена = Ценообразование.ОкруглитьЦену(Цена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
					СтрокаТовара.Количество = СтрокаТовара.Количество/коэф;
					// 11.11.16 Вялов
					СтрокаТовара.Количество = ?(СтрокаТовара.Количество < 1, 1, СтрокаТовара.Количество);
				Исключение
					Сообщить ("Для товара "+СтрокаТовара.Номенклатура.Наименование+" с базовой ед.измерения ""упак"" не задан коэфициент!",СтатусСообщения.Важное);
				КонецПопытки;
			КонецЕсли;			

			// 14.11.16 Вялов - не упаковки, а шт! (ед.хр.остатков)
			//СтрокаТовара.ЕдиницаИзмерения = НайденнаяСтрока.ЕдиницаИзмеренияЦены;
			
		Иначе
			Цена = 0;
		КонецЕсли;

		СтрокаТовара.Цена = Цена;
	КонецЦикла;

КонецПроцедуры // ПерезаполнитьЦены()

// 10.11.16 Вялов - Мегаплан № 3934 >

// Процедура перезаполняет цены в табличной части.
//
Процедура ПерезаполнитьЦены() Экспорт

	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("НовыйТипЦен", ТипЦен);

	ЗапросПоЦенам = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначений,
	   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
	   Товары.ВыгрузитьКолонку("Номенклатура"),
	   РабочаяДата,
	   Неопределено).Выгрузить();
	ЗапросПоЦенам.Индексы.Добавить("Номенклатура");

	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ТипЦенРассчитывается = ТипЦен.Рассчитывается;

	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, РабочаяДата);
	Курс = СтруктураКурса.Курс;
	Кратность = СтруктураКурса.Кратность;

	Для Каждого СтрокаТовара Из Товары Цикл
		ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;

		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);

		СтрокиЦен = ЗапросПоЦенам.НайтиСтроки(СтруктураПоиска);

		СтрокаБезХарактеристики = Неопределено;
		СтрокаСХарактеристикой = Неопределено;

		Для Каждого СтрокаЦен Из СтрокиЦен Цикл
			Если СтрокаЦен.ХарактеристикаНоменклатуры = ПустаяХарактеристика Тогда
				СтрокаБезХарактеристики = СтрокаЦен;
			ИначеЕсли СтрокаЦен.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры Тогда
				СтрокаСХарактеристикой = СтрокаЦен;
			КонецЕсли;
		КонецЦикла;

		Если СтрокаСХарактеристикой <> Неопределено Тогда
			НайденнаяСтрока = СтрокаСХарактеристикой;
		ИначеЕсли СтрокаБезХарактеристики <> Неопределено Тогда
			НайденнаяСтрока = СтрокаБезХарактеристики;
		Иначе
			НайденнаяСтрока = Неопределено;
		КонецЕсли;

		Если (НайденнаяСтрока <> Неопределено) И (НайденнаяСтрока.Цена <> 0) Тогда
			Цена = НайденнаяСтрока.Цена * (1 + ?(ТипЦенРассчитывается, НайденнаяСтрока.ПроцентСкидкиНаценки / 100, 0));
			Цена = Ценообразование.ОкруглитьЦену(Цена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, НайденнаяСтрока.ВалютаЦены, Валюта, Курс, Кратность);			

			коэф = 0;
			Если СтрокаТовара.Номенклатура.БазоваяЕдиницаИзмерения=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
				ВыбЕд = Справочники.ЕдиницыИзмерения.Выбрать(,СтрокаТовара.Номенклатура);
				Пока ВыбЕд.Следующий() Цикл
					Если ВыбЕд.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
						коэф = ВыбЕд.Коэффициент;
					КонецЕсли;
				КонецЦикла;
				Попытка
					Цена = Цена/коэф;
					Цена = Ценообразование.ОкруглитьЦену(Цена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
					СтрокаТовара.Количество = СтрокаТовара.Количество/коэф;
					// 11.11.16 Вялов
					СтрокаТовара.Количество = ?(СтрокаТовара.Количество < 1, 1, СтрокаТовара.Количество);
				Исключение
					Сообщить ("Для товара "+СтрокаТовара.Номенклатура.Наименование+" с базовой ед.измерения ""упак"" не задан коэфициент!",СтатусСообщения.Важное);
				КонецПопытки;
			КонецЕсли;			

			// 14.11.16 Вялов - не упаковки, а шт! (ед.хр.остатков)
			//СтрокаТовара.ЕдиницаИзмерения = НайденнаяСтрока.ЕдиницаИзмеренияЦены;
			
		Иначе
			Цена = 0;
		КонецЕсли;

		СтрокаТовара.Цена = Цена;
	КонецЦикла;

КонецПроцедуры // ПерезаполнитьЦены()

// Функция формирует табличный документ - печатная форма ценника.
//
// Возвращаемое значение:
//  ТабличныйДокумент - сформированный табличный документ или Неопределено, если есть ошибки.
//
Функция ПечатьЦенника() Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не выбрана организация!");
		Возврат Неопределено;
	КонецЕсли;

	ТабДокумент                     = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Ценник";
//pryan@inbox.ru
Если РольДоступна(Метаданные.Роли.КладOFFщик) Тогда
	ТабДокумент.ИмяПринтера = "ZDesigner GK420d";
Иначе
	ТабДокумент.ИмяПринтера="";
КонецЕсли;
	Макет                           = ПолучитьМакет("Ценник");
	ОбластьЦенника                  = Макет.ПолучитьОбласть("Строка|Столбец");

	НомНакл = 0;
	//Попытка
	//	Если ЭтотОбъект.ПолучитьФорму("Форма").ЭлементыФормы.ПолеВвода1.Значение = 0 Тогда
	//		ДатаПечати = РабочаяДата;
	//	Иначе
	//		НомНакл = ЭтотОбъект.ПолучитьФорму("Форма").ЭлементыФормы.ПолеВвода1.Значение;
	//		ДатаПечати = ДатаДока;
	//	КонецЕсли;
	//Исключение
		ДатаПечати = Формат(ТекущаяДата(),"ДЛФ=Д");
	//КонецПопытки;

	ТекСтолбец = 0;
	ТекСтрока  = 0;
	
	ТабЕдФасовки = ПолучитьЕдФасовки();

	Для Каждого СтрокаТаблицы Из Товары Цикл
		Если (СтрокаТаблицы.Печать) И (СтрокаТаблицы.Цена>0) Тогда
			Для Тмп = 1 По СтрокаТаблицы.Количество Цикл
				поз = 0;
				ОбластьЦенника.Параметры.Заполнить(СтрокаТаблицы);
				ОбластьЦенника.Параметры.НоменклатураНаименование        = СтрокаТаблицы.Номенклатура.Комментарий;
				Если ТабЕдФасовки.Найти(СтрокаТаблицы.Номенклатура,"Объект")<>Неопределено Тогда
					ОбластьЦенника.Параметры.Вес                             = СтрокаТаблицы.Номенклатура.Фасовка+" "+ТабЕдФасовки.Найти(СтрокаТаблицы.Номенклатура,"Объект").Значение;
				Иначе
					ОбластьЦенника.Параметры.Вес                             = СтрокаТаблицы.Номенклатура.Фасовка;
				КонецЕсли;
				Если Найти (СтрокаТаблицы.Номенклатура.Родитель,"_")>0 Тогда
					поз = Найти (СтрокаТаблицы.Номенклатура.Родитель,"_");
					ОбластьЦенника.Параметры.Производитель                   = Сред(СтрокаТаблицы.Номенклатура.Родитель,поз+1);
				Иначе
					ОбластьЦенника.Параметры.Производитель                   ="";
				КонецЕсли;
				//ОбластьЦенника.Параметры.ЕдиницаНаименование             = СтрокаТаблицы.ЕдиницаИзмерения;
				
				// < 09.09.16 Вялов - Мегаплан 3739 "...в пересчете на ампулу это- 107,5 а ценник печатается как 107 руб"
//				ОбластьЦенника.Параметры.Цена                            = ""+Цел(СтрокаТаблицы.Цена)+Строка(" руб");//+Прав(ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.Цена,, "00"),2)+" коп ";
				Разница = СтрокаТаблицы.Цена - Цел(СтрокаТаблицы.Цена);
				Если Разница = 0 Тогда 
					СтрокаТаблицыЦена                           = Формат(Цел(СтрокаТаблицы.Цена), "ЧЦ=5; ЧДЦ=; ЧН=-; ЧГ=0");
				Иначе
					Разница = ?(Разница <= 0.5, 0.5, 1);
					СтрокаТаблицыЦена							= Формат(Цел(СтрокаТаблицы.Цена) + Разница, "ЧЦ=5; ЧДЦ=2; ЧН=-; ЧГ=0");
				КонецЕсли;
				ОбластьЦенника.Параметры.Цена                   = СтрокаТаблицыЦена + " руб";
				// 09.09.16 Вялов - Мегаплан 3739 >
				
				// < 11.11.16 Вялов - Магаплан № 3934 - добавить ед.в ценники
				ОбластьЦенника.Параметры.ЕдиницаИзм				= ?(ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения), 
					"за " + Строка(СтрокаТаблицы.ЕдиницаИзмерения), "");
				// 11.11.16 Вялов - Магаплан № 3934 - добавить ед.в ценники >
	
				//ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.Цена, Валюта, "00");
				ОбластьЦенника.Параметры.ДатаПечати                      = ДатаПечати;
				//ОбластьЦенника.Параметры.НомерНакладной                  = "Накладная № "+НомНакл;
				//ОбластьЦенника.Параметры.Организация                     = Организация;
				ОбластьЦенника.Параметры.ОрганизацияНаименование         = Организация;
				ОбластьЦенника.Параметры.НоменклатураСтранаПроисхождения = СтрокаТаблицы.Номенклатура.СтранаПроисхождения;
				
				
				Если ЭтотОбъект.ДляМагазина Тогда
					ЗнФорматЭтикетки = ЭтотОбъект.ПолучитьФорму("ФормаМагазин").ЭлементыФормы.ФорматЭтикетки.Значение;
				Иначе
					ЗнФорматЭтикетки = ЭтотОбъект.ПолучитьФорму("Форма").ЭлементыФормы.ФорматЭтикетки.Значение;
				КонецЕсли;
				
				//Если ЭтотОбъект.ПолучитьФорму("Форма").ЭлементыФормы.ФорматЭтикетки.Значение  = 1 Тогда
				Если ЗнФорматЭтикетки  = 1 Тогда
					//ОбластьЦенника.Область("Столбец").ШиринаКолонки = ЭтотОбъект.ПолучитьФорму("Форма").ЭлементыФормы.ШиринаЭтикетки.Значение*0.53;
					ТабДокумент.Вывести(ОбластьЦенника);
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				Иначе	
					Если ТекСтолбец = 0 Тогда
						ТабДокумент.Вывести(ОбластьЦенника);
					Иначе
						ТабДокумент.Присоединить(ОбластьЦенника);
					КонецЕсли;
					
					ТекСтолбец = ТекСтолбец + 1;
					
					Если ТекСтолбец = 5 Тогда
						ТекСтрока  = ТекСтрока + 1;
						ТекСтолбец = 0;
					КонецЕсли;
					
					Если ТекСтрока = 10 Тогда
						ТекСтрока = 0;
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ТабДокумент.ТолькоПросмотр = Истина;

	Возврат ТабДокумент;

КонецФункции // ПечатьЦенника()

// Функция выполняет проверку параметров для заполнения цен.
//
// Возвращаемое значение:
//  Булево - Истина, если все параметры заданы.
//
Функция ПроверитьПараметрыЗаполненияЦен() Экспорт

	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран тип цен! Укажите тип цен и повторите перезаполнение цен.");
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрана валюта!  Укажите валюту и повторите перезаполнение цен.");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции // ПроверитьПараметрыЗаполненияЦен()

Функция ПолучитьЕдФасовки() 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Р.Значение,
	               |	Р.Объект
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК Р
	               |ГДЕ
	               |	Р.Объект В(&Объекты)
	               |	И Р.Свойство = &Св";
	 Запрос.УстановитьПараметр("Объекты",Товары.ВыгрузитьКолонку("Номенклатура"));
	 Запрос.УстановитьПараметр("Св",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ЕдиницаФасовки"));
	 
	 Возврат Запрос.Выполнить().Выгрузить();


КонецФункции


#КонецЕсли

