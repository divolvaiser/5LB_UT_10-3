

// Процедура заполняет построитель отчета.
//
Процедура ЗаполнитьПостроительОтчета() Экспорт
	
	Если ТолькоИмеющиесяВНаличии Тогда
		//определяем гамаз
		Запрос = Новый Запрос;
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ЗначениеНастроек.Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
		|ГДЕ
		|   ЗначениеНастроек.Пользователь = &Юзер
		|И  ЗначениеНастроек.Настройка = &Скл";
		Запрос.УстановитьПараметр("Юзер", ПараметрыСеанса.ТекущийПользователь.Ссылка);
		Запрос.УстановитьПараметр("Скл", ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойСклад);
		
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Сообщить ("Пользователь не прикреплён к магазину!");
			Сообщить ("Выполнение невозможно!");
			возврат;
		КонецЕсли;
		
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			СкладТекЮзера = Выборка.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА КАК Печать,
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	0 КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпрНоменклатура.Ссылка КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
	|	ИЗ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ГДЕ НЕ СпрНоменклатура.ЭтоГруппа
	|	{ГДЕ
	|		СпрНоменклатура.Ссылка.* КАК Номенклатура}
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		СпрХарактеристики.Владелец,
	|		СпрХарактеристики.Ссылка
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|	{ГДЕ
	|		СпрХарактеристики.Владелец.* КАК Номенклатура,
	|		СпрХарактеристики.Ссылка.* КАК ХарактеристикаНоменклатуры}
	|	) КАК СпрНоменклатура
	|";
	
	Если ТолькоИмеющиесяВНаличии Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		НаСкладе.Номенклатура,
		|		СУММА(НаСкладе.Количество) КАК Количество
		|	ИЗ
		|		(ВЫБРАТЬ
		|			НаСкладе.Номенклатура,
		|			НаСкладе.КоличествоОстаток КАК Количество
		|		ИЗ
		|			РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад=&Скл) КАК НаСкладе
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			ВРознице.Номенклатура,
		|			ВРознице.КоличествоОстаток КАК Количество
		|		ИЗ
		|			РегистрНакопления.ТоварыВРознице.Остатки(, Склад=&Скл) КАК ВРознице
		|	 ) КАК НаСкладе
		|	СГРУППИРОВАТЬ ПО
		|		НаСкладе.Номенклатура
		|	) КАК НаСкладе
		|ПО
		|	СпрНоменклатура.Номенклатура = НаСкладе.Номенклатура
		|ГДЕ
		|	ЕСТЬNULL(НаСкладе.Количество, 0) > 0
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	СпрНоменклатура.Номенклатура.Наименование,
	|	СпрНоменклатура.ХарактеристикаНоменклатуры.Наименование
	|";
	
	// Соответствие имен полей в запросе и их представлений в отчете.
	СтруктураПредставлениеПолей = Новый Структура(
	"Номенклатура,   ХарактеристикаНоменклатуры,    Склад",
	"Номенклатура", "Характеристика номенклатуры", "Склад");
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	Если ТолькоИмеющиесяВНаличии Тогда
		ПостроительОтчета.Параметры.Вставить("Скл",СкладТекЮзера);
	КонецЕсли;
	
	ПостроительОтчета.ЗаполнитьНастройки();
	
	// Создадим список доступных отборов.
	СоответствиеДоступныхОтборов = Новый Соответствие;
	СоответствиеДоступныхОтборов.Вставить("Номенклатура", 0);
	СоответствиеДоступныхОтборов.Вставить("ХарактеристикаНоменклатуры", 0);
	СоответствиеДоступныхОтборов.Вставить("Склад", 0);
	
	Для Каждого ДоступноеПоле Из ПостроительОтчета.ДоступныеПоля Цикл
		Если СоответствиеДоступныхОтборов[ДоступноеПоле.Имя] =Неопределено Тогда
			ДоступноеПоле.Отбор = Ложь;
		Иначе
			ДоступноеПоле.Отбор = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Создадим массив отборов.
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Номенклатура");
	//МассивОтбора.Добавить("ХарактеристикаНоменклатуры");
	
	//Если ТолькоИмеющиесяВНаличии Тогда
	//	МассивОтбора.Добавить("Склад");
	//КонецЕсли;
	
	Для Каждого ЭлементОтбора Из МассивОтбора Цикл
		Если ПостроительОтчета.Отбор.Найти(ЭлементОтбора) = Неопределено Тогда
			ПостроительОтчета.Отбор.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	ПостроительОтчета.Отбор.Номенклатура.Использование=Истина;
	
	// Вызовем стандартную процедуру заполнения представлений.
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
КонецПроцедуры // ЗаполнитьПостроительОтчета()

// Процедура перезаполняет цены в табличной части.
//
Процедура ПерезаполнитьЦены() Экспорт
	
	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("НовыйТипЦен", ТипЦен);
	
	ЗапросПоЦенам = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначений,
	Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
	Товары.ВыгрузитьКолонку("Номенклатура"),
	РабочаяДата,
	Неопределено).Выгрузить();
	ЗапросПоЦенам.Индексы.Добавить("Номенклатура");
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ТипЦенРассчитывается = ТипЦен.Рассчитывается;
	
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, РабочаяДата);
	Курс = СтруктураКурса.Курс;
	Кратность = СтруктураКурса.Кратность;
	
	Для Каждого СтрокаТовара Из Товары Цикл
		ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;
		
		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);
		
		СтрокиЦен = ЗапросПоЦенам.НайтиСтроки(СтруктураПоиска);
		
		СтрокаБезХарактеристики = Неопределено;
		СтрокаСХарактеристикой = Неопределено;
		
		Для Каждого СтрокаЦен Из СтрокиЦен Цикл
			Если СтрокаЦен.ХарактеристикаНоменклатуры = ПустаяХарактеристика Тогда
				СтрокаБезХарактеристики = СтрокаЦен;
			ИначеЕсли СтрокаЦен.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры Тогда
				СтрокаСХарактеристикой = СтрокаЦен;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСХарактеристикой <> Неопределено Тогда
			НайденнаяСтрока = СтрокаСХарактеристикой;
		ИначеЕсли СтрокаБезХарактеристики <> Неопределено Тогда
			НайденнаяСтрока = СтрокаБезХарактеристики;
		Иначе
			НайденнаяСтрока = Неопределено;
		КонецЕсли;
		
		Если (НайденнаяСтрока <> Неопределено) И (НайденнаяСтрока.Цена <> 0) Тогда
			Цена = НайденнаяСтрока.Цена * (1 + ?(ТипЦенРассчитывается, НайденнаяСтрока.ПроцентСкидкиНаценки / 100, 0));
			Цена = Ценообразование.ОкруглитьЦену(Цена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, НайденнаяСтрока.ВалютаЦены, Валюта, Курс, Кратность);
			
			СтрокаТовара.ЕдиницаИзмерения = НайденнаяСтрока.ЕдиницаИзмеренияЦены;
		Иначе
			Цена = 0;
		КонецЕсли;
		
		СтрокаТовара.Цена = Цена;
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦены()

// Функция формирует табличный документ - печатная форма ценника.
//
// Возвращаемое значение:
//  ТабличныйДокумент - сформированный табличный документ или Неопределено, если есть ошибки.
//
Функция ПечатьЦенника() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не выбрана организация!");
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент                     = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Описание";
	Макет                           = ПолучитьМакет("Ценник");
	
	ОбластьЦенника                  = Макет.ПолучитьОбласть("Строка|Столбец");
	
	ДатаПечати = РабочаяДата;
	
	ТекСтолбец = 0;
	ТекСтрока  = 0;
	
	ТМПТаб = Новый ТаблицаЗначений;
	ТМПТаб.Колонки.Добавить("Номенклатура");
	ТМПТаб.Колонки.Добавить("Колво");
	ТМПТаб.Колонки.Добавить("Высота");
	ТМПТаб.Колонки.Добавить("Ширина");
	ТМПТаб.Колонки.Добавить("СуммаРазмера");
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		Если СтрокаТаблицы.Печать Тогда
			//Отбор = Новый Структура("Объект");
			//Отбор.Объект = СтрокаТаблицы.Номенклатура.НоменклатурнаяГруппа.Ссылка; 
			//Рег = РегистрыСведений.ЗначенияСвойствОбъектов.Выбрать(Отбор);
			//Пока Рег.Следующий() Цикл
			//	Если СокрЛП(Рег.Свойство.Наименование) = "Размер" Тогда
			//		Попытка
			//			Умножить = Найти(Рег.Значение,"*");
			//			ЛевЧ = Число(Лев (Рег.Значение,Умножить-1));
			//			ПравЧ = Число(Сред (Рег.Значение,Умножить+1));
			//			СуммаРазмера = ЛевЧ*ПравЧ;
			//		Исключение
			//			Сообщить ("Проблемы с размерами для номенклатуры Код: "+СтрокаТаблицы.Номенклатура.Код+ " "+СтрокаТаблицы.Номенклатура.Наименование+" "+ОписаниеОшибки());
			//			продолжить;
			//		КонецПопытки;
					НовСтр = ТМПТаб.Добавить();
					НовСтр.Номенклатура = СтрокаТаблицы.Номенклатура.Ссылка;
					НовСтр.Колво = СтрокаТаблицы.Количество;
					НовСтр.Высота = 92.7;
					НовСтр.Ширина = 24;
					НовСтр.СуммаРазмера = 2224.8; 
			//	КонецЕсли;	
			//КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ТМПТаб.Сортировать("СуммаРазмера Убыв");
	
	Для Каждого СтрокаТаблицы из ТМПТаб Цикл
		ОбластьЦенника.Область("R2C3").ВысотаСтроки = СтрокаТаблицы.Высота;
		ОбластьЦенника.Область("R2C3").ШиринаКолонки = СтрокаТаблицы.Ширина;
		Для Тмп = 1 По СтрокаТаблицы.Колво Цикл
			
			Если СтрокаТаблицы.Номенклатура.РусификацияНеТребуется Тогда 
				Продолжить;
			КонецЕсли;
			
			Если СтрДлина (СтрокаТаблицы.Номенклатура.ДополнительноеОписаниеНоменклатуры)>2 Тогда
				ОбластьЦенника.Параметры.Описание        = СтрокаТаблицы.Номенклатура.ДополнительноеОписаниеНоменклатуры;
				
				ОбластьЦенника.Параметры.Наименование        = СтрокаТаблицы.Номенклатура.Наименование;
				
				Если ЭтотОбъект.ПолучитьФорму("Форма").ЭлементыФормы.ФорматЭтикетки.Значение  = 1 Тогда
					ТабДокумент.Вывести(ОбластьЦенника);
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				Иначе
					Если ТекСтолбец = 0 Тогда
						ТабДокумент.Вывести(ОбластьЦенника);
					Иначе
						ТабДокумент.Присоединить(ОбластьЦенника);
					КонецЕсли;
					
					ТекСтолбец = ТекСтолбец + 1;
					
					Если ТекСтолбец = 3 Тогда
						ТекСтрока  = ТекСтрока + 1;
						ТекСтолбец = 0;
					КонецЕсли;
					
					Если ТекСтрока = 8 Тогда
						ТекСтрока = 0;
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТабДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьЦенника()

// Функция выполняет проверку параметров для заполнения цен.
//
// Возвращаемое значение:
//  Булево - Истина, если все параметры заданы.
//
Функция ПроверитьПараметрыЗаполненияЦен() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран тип цен! Укажите тип цен и повторите перезаполнение цен.");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрана валюта!  Укажите валюту и повторите перезаполнение цен.");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПараметрыЗаполненияЦен()



