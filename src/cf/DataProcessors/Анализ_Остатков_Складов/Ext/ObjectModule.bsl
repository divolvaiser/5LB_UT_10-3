
Функция ПолучитьТаблицуДанныхПоОтборам() Экспорт	
	
	тзРез = Новый ТаблицаЗначений;
	
	СКД = ЭтотОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
 	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 	
 	МакетКомпоновкиДанныхТЗ = КомпоновщикМакета.Выполнить(СКД, 
    	ЭтотОбъект.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
 
    ПроцессорКомпоновкиТЗ = Новый ПроцессорКомпоновкиДанных;
 	ПроцессорКомпоновкиТЗ.Инициализировать(МакетКомпоновкиДанныхТЗ);
    
 	ПроцессорВыводаВТаблицу = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
 	ПроцессорВыводаВТаблицу.УстановитьОбъект(тзРез);
    ПроцессорВыводаВТаблицу.ОтображатьПроцентВывода = Истина; 
 	ПроцессорВыводаВТаблицу.Вывести(ПроцессорКомпоновкиТЗ);

	Возврат тзРез;
	
КонецФункции


// возвращает т.з. с товарами перезатаренности
Функция ПолучитьТаблицуПерезатаренностиТоваров(Склад=Неопределено) Экспорт	
	
	// т.з. возращаемое функцией значение
	тзРез = Новый ТаблицаЗначений;
	
	
	СКД = ЭтотОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	КомпоновщикНастроекСКД = ЭтотОбъект.КомпоновщикНастроек;	
	
	// 1 - Инициализация объектов
	КомпоновщикНастроекСКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));  
	КомпоновщикНастроекСКД.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);		
	
	// настройки для заполнения отборами
	Настройки = КомпоновщикНастроекСКД.ПолучитьНастройки();
	Настройки.Отбор.Элементы.Очистить();                   	
	
	// 2 - Установка параметров
	ПарамНаДату = Настройки.ПараметрыДанных.Элементы.Найти("НаДату");
	Если ПарамНаДату <> Неопределено Тогда
//		ПарамНаДату.Значение = ТекущаяДата();
		ПарамНаДату.Значение = КонецДня(ТекущаяДата()) + 1;
		ПарамНаДату.Использование = Истина; 
	КонецЕсли;          	
	
	
	 // 3 - Установка (добавление) отборов 	 
	Если Склад <> Неопределено Тогда   	// если склад выбран
		
		КонтрагентПоСкладу = Справочники.Контрагенты.НайтиПоНаименованию(Склад.Наименование);
		Если ЗначениеЗаполнено(КонтрагентПоСкладу) Тогда
			
			//бСкладОтбор = Ложь;			
			бСкладОтбор = Истина;			

			//// т.к. может быть несколько отборов с магазином (1-й <> 5LB!)
			//Для Каждого ТекЭлемОтбора Из Настройки.Отбор.Элементы Цикл
			//	Если ТипЗнч(ТекЭлемОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			//		Если ТекЭлемОтбора.ЛевоеЗначение = новый ПолеКомпоновкиДанных("Магазин") Тогда		
			//			Если ТекЭлемОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			//				ТекЭлемОтбора.ПравоеЗначение = КонтрагентПоСкладу;
			//				ТекЭлемОтбора.Использование = Истина; 
			//				бСкладОтбор = Истина;
			//				Прервать;
			//			КонецЕсли;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЦикла;
			
			Если бСкладОтбор Тогда
				НовыйОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));		
				НовыйОтбор.ЛевоеЗначение 	= новый ПолеКомпоновкиДанных("Магазин");
				НовыйОтбор.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
				НовыйОтбор.ПравоеЗначение 	= КонтрагентПоСкладу;
				НовыйОтбор.Использование 	= Истина; 
			КонецЕсли;
			
	
			 
		Иначе
		    Возврат тзРез;	// если магазин не нашли по имени склада - возвращаем пустую таблицу
		КонецЕсли;
		
	КонецЕсли;
	
	// Только перезатаренный товар (2-й элемент отбора)
	//НовыйОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));		
	//НовыйОтбор.ЛевоеЗначение 	= новый ПолеКомпоновкиДанных("Перезатаренность");
	//НовыйОтбор.ВидСравнения		= ВидСравненияКомпоновкиДанных.Больше;
	//НовыйОтбор.ПравоеЗначение 	= 0;
	//НовыйОтбор.Использование 	= Истина; 
	
	
	// загрузить обратно отборы
	КомпоновщикНастроекСКД.ЗагрузитьНастройки(Настройки);

			
	// 4 - программное получение данных в т.з.	
 	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 	
 	МакетКомпоновкиДанныхТЗ = КомпоновщикМакета.Выполнить(СКД, 
    	КомпоновщикНастроекСКД.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
 
    ПроцессорКомпоновкиТЗ = Новый ПроцессорКомпоновкиДанных;
 	ПроцессорКомпоновкиТЗ.Инициализировать(МакетКомпоновкиДанныхТЗ);
    
 	ПроцессорВыводаВТаблицу = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
 	ПроцессорВыводаВТаблицу.УстановитьОбъект(тзРез);
    ПроцессорВыводаВТаблицу.ОтображатьПроцентВывода = Истина; 
 	ПроцессорВыводаВТаблицу.Вывести(ПроцессорКомпоновкиТЗ);

	// удаление "лишних" строк (группировки)
	ТекИндекс = тзРез.Количество() - 1; 
	Пока ТекИндекс >= 0 Цикл 			
		ТекСтрока = тзРез.Получить(ТекИндекс);
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			тзРез.Удалить(ТекИндекс); 
		КонецЕсли;   
		ТекИндекс = ТекИндекс - 1; 
	КонецЦикла; 	
	
	Возврат тзРез;
	
КонецФункции

// возвращает т.з. перезатаренности с 1 товаром (перерасчет строки)
Процедура ПересчетСтроки(Стр) Экспорт	
	
	Номенклатура = Стр.Номенклатура;
	Склад = Стр.СкладОтправитель;
	Если ЗначениеЗаполнено(Склад) Тогда
		КонтрагентПоСкладу = Справочники.Контрагенты.НайтиПоНаименованию(Склад.Наименование);
	КонецЕсли;                                                                               
	
	бПроверка = Ложь;                                                                        
	
	Если ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(КонтрагентПоСкладу) Тогда
		бПроверка = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	
	// т.з. возращаемое функцией значение
	тзРез = Новый ТаблицаЗначений;
	
	
	СКД = ЭтотОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	Настройки = СКД.НастройкиПоУмолчанию;
	// ЗаполнитьЭлементы(Настройки.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);
	// СкопироватьЭлементы(Настройки.Отбор, НастройкиИсточник.Отбор);
	Настройки.Отбор.Элементы.Очистить();                   	
	
	// 2 - Установка параметров
	ПарамНаДату = Настройки.ПараметрыДанных.Элементы.Найти("НаДату");
	Если ПарамНаДату <> Неопределено Тогда
		ПарамНаДату.Значение = КонецДня(ТекущаяДата()) + 1;
		ПарамНаДату.Использование = Истина; 
	КонецЕсли;      
	
	НовыйОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));		
	НовыйОтбор.ЛевоеЗначение 	= новый ПолеКомпоновкиДанных("Номенклатура");
	НовыйОтбор.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение 	= Номенклатура;
	НовыйОтбор.Использование 	= Истина; 
	
	НовыйОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));		
	НовыйОтбор.ЛевоеЗначение 	= новый ПолеКомпоновкиДанных("Магазин");
	НовыйОтбор.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение 	= КонтрагентПоСкладу;
	НовыйОтбор.Использование 	= Истина;	
	
	//// Только перезатаренный товар (2-й элемент отбора)
	//НовыйОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));		
	//НовыйОтбор.ЛевоеЗначение 	= новый ПолеКомпоновкиДанных("Перезатаренность");
	//НовыйОтбор.ВидСравнения		= ВидСравненияКомпоновкиДанных.Больше;
	//НовыйОтбор.ПравоеЗначение 	= 0;
	//НовыйОтбор.Использование 	= Истина; 
	
	
	// загрузить обратно отборы
	//КомпоновщикНастроекСКД.ЗагрузитьНастройки(Настройки);

			
	// 4 - программное получение данных в т.з.	
 	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 	
 	МакетКомпоновкиДанныхТЗ = КомпоновщикМакета.Выполнить(СКД, 
    	Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
 
    ПроцессорКомпоновкиТЗ = Новый ПроцессорКомпоновкиДанных;
 	ПроцессорКомпоновкиТЗ.Инициализировать(МакетКомпоновкиДанныхТЗ);
    
 	ПроцессорВыводаВТаблицу = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
 	ПроцессорВыводаВТаблицу.УстановитьОбъект(тзРез);
    ПроцессорВыводаВТаблицу.ОтображатьПроцентВывода = Истина; 
 	ПроцессорВыводаВТаблицу.Вывести(ПроцессорКомпоновкиТЗ);

	// удаление "лишних" строк (группировки)
	ТекИндекс = тзРез.Количество() - 1; 
	Пока ТекИндекс >= 0 Цикл 			
		ТекСтрока = тзРез.Получить(ТекИндекс);
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			тзРез.Удалить(ТекИндекс); 
		КонецЕсли;   
		ТекИндекс = ТекИндекс - 1; 
	КонецЦикла; 	
	
	//Возврат тзРез;
	
	Если тзРез.Количество() > 0 Тогда
		
		ТекСтр = тзРез[0]; 							
		//НоваяСтрока.Номенклатура			= ТекСтр.Номенклатура;
		//НоваяСтрока.СкладОтправитель		= НайденСклад;
		//НоваяСтрока.СкладПолучатель			= СкладПолучатель;
		Стр.Количество						= ТекСтр.Перезатаренность;						
		Стр.ЕдиницыИзмеренияБазовая			= ТекСтр.ЕдиницаХранения;			
		Стр.КоличествоУпак					= ТекСтр.ПерезатаренностьУпакОкрДоМинЦелых;
		Стр.ЕдиницыИзмеренияУпак			= ТекСтр.ЕдиницыИзмеренияБазовая;							
	Иначе
		Стр.Количество				= 0;						
		Стр.КоличествоУпак			= 0;
		//Стр.ЕдиницыИзмеренияБазовая = Стр.Номенклатура.БазоваяЕдиницаИзмерения.
	КонецЕсли;	
	
	
КонецПроцедуры
