
Перем Узел_УТ10, Узел_УТ11;

////////////////////////////////////////////////////////////////////////


Процедура ВключитьВыгрузкуПоИмениПравила(ТекСтрПравила)
	
	ИмяПравила = ТекСтрПравила.Имя;

	Включить = 0;
	Если ИмяПравила = "Номенклатура" 
		ИЛИ ИмяПравила = "ХарактеристикиНоменклатуры"
		ИЛИ ИмяПравила = "УпаковкиЕдиницыИзмерения"
		ИЛИ ИмяПравила = "ЗначенияСвойствОбъектов"
		ИЛИ ИмяПравила = "ДополнительныеСведения"
		ИЛИ ИмяПравила = "ШтрихкодыНоменклатуры"
	Тогда
		Включить = 1; 
		ТекСтрПравила.СсылкаНаУзелОбмена = Узел_УТ11;
	КонецЕсли;
	
	ТекСтрПравила.Включить = Включить;
	//Возврат Рез;
	
КонецПроцедуры



Процедура ВыполнитьВыгрузку() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Узел_УТ11) Тогда
		Возврат;
	КонецЕсли;
	
	
	УниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML_218.Создать();

	ИмяКаталогаВыгрузки = "\\1cserv\1C_shared\Exchange\";
	ИмяФайлаВыгрузки = "Message_" + Строка(Узел_УТ10) + "_" + Строка(Узел_УТ11) + ".xml";
	
	ИмяКаталогаПротокола = "\\1cserv\1C_shared\Exchange\";
	ИмяФайлаПротокола = "Log_" + Строка(Узел_УТ10) + "_" + Строка(Узел_УТ11) 
		//" + Формат(ТекущаяДата(), "ДФ='yyMMdd_HHmm'") 
		+ ".txt";	
	
	// Получение измененнных объектов
	СтруктураОтбор = ПланыОбмена.ОбменУправлениеТорговлей11.ПолучитьСписокИзменений();	
	
	
	// Универсальный обмена данными xml   	
	

	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";
	МакетПравилОбмена = ЭтотОбъект.ПолучитьМакет("ПравилаОбменаТекст");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена); 
	
	Если ПустаяСтрока(ИмяВременногоФайлаПравилОбмена) Тогда
   // 	Предупреждение("Не выбран файл правил обмена!");
    	Возврат;
	КонецЕсли;

	
	УниверсальнаяВыгрузкаДанных.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;	
	УниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена();	
	Попытка
		УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);  // Удаляем временный файл правил
	Исключение КонецПопытки;


   // 
   //ВыполнитьЗагрузкуПравилОбмена();
	УниверсальнаяВыгрузкаДанных.ВыгружатьТолькоРазрешенные = Истина;
	УниверсальнаяВыгрузкаДанных.НепосредственноеЧтениеВИБПриемнике = Ложь;
	
	// Удалять регситрацию после выгрузки!
	// все
	//УниверсальнаяВыгрузкаДанных.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 1;
	// удаление изменений только для метаданныех выгруженных объектов первого уровня 
	УниверсальнаяВыгрузкаДанных.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 2;
	
	// Протокол
	УниверсальнаяВыгрузкаДанных.ВыводВПротоколИнформационныхСообщений = Истина;
	УниверсальнаяВыгрузкаДанных.ВыводВПротоколСообщенийОбОшибках = Истина;

	УниверсальнаяВыгрузкаДанных.ИмяФайлаПротоколаОбмена = ИмяКаталогаПротокола + ИмяФайлаПротокола;

	//ИмяКаталогаВыгрузки = "d:\!UT11\_TEST\";	
	УниверсальнаяВыгрузкаДанных.ИмяФайлаОбмена = ИмяКаталогаВыгрузки + ИмяФайлаВыгрузки;
	
   // ЭтаФорма.
   // ВыгружатьТолькоРазрешенные		Истина	Булево
   // НепосредственноеЧтениеВИБПриемнике	Ложь	Булево
   // ИмяФайлаОбмена				"D:\!UT11\Conversion\Выгрузка_5LB.xml"	Строка

   УниверсальнаяВыгрузкаДанных.РежимОбмена = "Выгрузка";
   
   //  установить флаги выггрузки для правил
	ТаблицаПравилВыгрузки = УниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки;	
	Для Каждого ТекСтр Из ТаблицаПравилВыгрузки.Строки Цикл
		
		Если ТекСтр.ЭтоГруппа Тогда
			Для Каждого ТекСтрПодч Из ТекСтр.Строки Цикл	// 2 уровня - Справочники, Регистры + элементы (правила)
				Если ТекСтрПодч.ЭтоГруппа Тогда
					ТекСтрПодч.Включить = 0;
				Иначе
					ВключитьВыгрузкуПоИмениПравила(ТекСтрПодч);					
				КонецЕсли;			
			КонецЦикла;
		Иначе
			ТекСтр.Включить = 0;
		КонецЕсли;
		
	КонецЦикла;

   // ЭтаФорма.Построитель.Отбор[0].

   // ЭтаФорма.ТаблицаПравилВыгрузки.Строки[1].Имя
	//мУниверсальнаяВыгрузкаДанных.ПостроительОтчета = Построитель;
	//мУниверсальнаяВыгрузкаДанных.ДатаНачала     = ДатаНач;
	//мУниверсальнаяВыгрузкаДанных.ДатаОкончания  = ?(НЕ ЗначениеЗаполнено(ДатаКон), ДатаКон, КонецДня(ДатаКон));
	//мУниверсальнаяВыгрузкаДанных.РежимОбмена    = "Выгрузка";
	//мУниверсальнаяВыгрузкаДанных.ВыводВОкноСообщенийИнформационныхСообщений = ФлагКомментироватьОбработкуОбъектов;
	//
	//
	//мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("НеЗамещатьДокументыПриЗагрузке",   НеЗамещатьДокументыПриЗагрузке);
	//мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("НеЗамещатьСправочникиПриЗагрузке", НеЗамещатьСправочникиПриЗагрузке);
	//
	//мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("ВыгружатьАналитикуПоСкладам",      ВыгружатьАналитикуПоСкладам);
	//мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("Организация",                      Организация);
	//мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("БазоваяВерсия",                    БазоваяВерсия);
	//
	//СписокСкладов       = Новый СписокЗначений;
	//СписокПодразделений = Новый СписокЗначений;

	//Для Каждого СтрокаФильтры Из ФильтрыОтчета Цикл

	//	Если НЕ ЗначениеЗаполнено(СтрокаФильтры.ЗначениеФильтра) Тогда
	//		Продолжить;
	//	КонецЕсли;

	//	Если СтрокаФильтры.ИмяФильтра="Подразделение" Тогда
	//		СписокПодразделений.Добавить(СтрокаФильтры.ЗначениеФильтра);
	//	ИначеЕсли СтрокаФильтры.ИмяФильтра="Склад" Тогда
	//		СписокСкладов.Добавить(СтрокаФильтры.ЗначениеФильтра);
	//	КонецЕсли;

	//КонецЦикла;
	//	
	//мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("СписокСкладов"		,СписокСкладов);
	//мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("СписокПодразделений",СписокПодразделений);

	//мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки = ТаблицаПравилВыгрузки.Скопировать();
	
	// Выгружаем данные	
	УниверсальнаяВыгрузкаДанных.ВыполнитьВыгрузку();
	
	
КонецПроцедуры

Процедура ВыполнитьЗагрузку() Экспорт
	
КонецПроцедуры


Процедура ВыполнитьОбмен() Экспорт
	
	ВыполнитьВыгрузку();	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////


Узел_УТ10 = ПланыОбмена.ОбменУправлениеТорговлей11.НайтиПоНаименованию("УТ10");
Узел_УТ11 = ПланыОбмена.ОбменУправлениеТорговлей11.НайтиПоНаименованию("УТ11");