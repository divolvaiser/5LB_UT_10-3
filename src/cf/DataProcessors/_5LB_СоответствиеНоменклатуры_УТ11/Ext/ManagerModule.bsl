
//////////////////////////////////////////////////////////////////
// Модуль для синхронизации объектов Номенклатуры УТ-10 -> УТ-11
//////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////
// Номенклатура

Процедура НайтиСинхронизироватьГруппу(Группа) Экспорт
	
	ЗаписьСоотв = РегистрыСведений._СоответствияНоменклатуры.СоздатьМенеджерЗаписи();
	ЗаписьСоотв.Номенклатура = Группа;
	ЗаписьСоотв.Прочитать();
	
	НайденаГруппа_УТ11 = Справочники._Номенклатура_УТ11.ПустаяСсылка(); 
	
	//Если НЕ ЗначениеЗаполнено(ЗаписьСоотв) Тогда
	Если Группа <> Справочники.Номенклатура.ПустаяСсылка() Тогда
		// если не найдено соответствие группы - попытаться найти в справочнике
		ЗаписьСоотв.Номенклатура = Группа;		
		стрГруппа_УТ11 = СокрЛП(Группа.Наименование);				
		НайденаГруппа_УТ11 = Справочники._Номенклатура_УТ11.НайтиПоНаименованию(стрГруппа_УТ11, Истина);
		Если НЕ ЗначениеЗаполнено(НайденаГруппа_УТ11) Тогда
			// если нет в справочнике - создать
			СтруктураПоиска = НайтиСоответствиеНоменклатуры(Группа.Родитель);
			НайденРодительГруппы_УТ11 = СтруктураПоиска.Номенклатура;
			
			НоваяГруппа = Справочники._Номенклатура_УТ11.СоздатьГруппу();
			НоваяГруппа.Наименование = стрГруппа_УТ11;
			НоваяГруппа.Родитель = НайденРодительГруппы_УТ11;
			
			Попытка
				НоваяГруппа.Записать();	
				НайденаГруппа_УТ11 = НоваяГруппа.Ссылка;
			Исключение
				//Возврат Ложь;
				НайденаГруппа_УТ11 = Справочники._Номенклатура_УТ11.ПустаяСсылка(); 
			КонецПопытки;
		КонецЕсли;
	Иначе
		НайденаГруппа_УТ11 = ЗаписьСоотв.Номенклатура_УТ11; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденаГруппа_УТ11) Тогда
		
		ЗаписьСоотв.Номенклатура_УТ11 = НайденаГруппа_УТ11;	
		Попытка
			ЗаписьСоотв.Записать(Истина);	
			//Возврат Истина;
		Исключение
			//Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	
КонецПроцедуры	


// получение номенклатуры УТ-11 (если нет - пустая ссылка) : поиск 1) по соотв. РС 2) по наименованию
Функция ПолучитьНоменклатуру(НоменклатураИсходная) Экспорт
	
	НоменклатураНайдена = Справочники._Номенклатура_УТ11.ПустаяСсылка();
	
	Если ЕстьСоответствиеНоменклатуры(НоменклатураИсходная) Тогда
		// 1) по соотв. РС
		СтруктураПоиска = НайтиСоответствиеНоменклатуры(НоменклатураИсходная);
		НоменклатураНайдена = СтруктураПоиска.Номенклатура;
	Иначе
		// 2) по наименованию
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	_Номенклатура_УТ11.Ссылка
		|ИЗ
		|	Справочник._Номенклатура_УТ11 КАК _Номенклатура_УТ11
		|ГДЕ
		|	_Номенклатура_УТ11.Наименование = &Наименование
		// 30.05.17 Вялов
		|	И НЕ _Номенклатура_УТ11.ПометкаУдаления
		|";	
		Запрос.УстановитьПараметр("Наименование", НоменклатураИсходная.Наименование);	
		РезультатЗапроса = Запрос.Выполнить();	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоменклатураНайдена = ВыборкаДетальныеЗаписи.Ссылка;
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НоменклатураНайдена;
	
КонецФункции

// создание новой номенклатуры УТ-11 и характеристики УТ-11 - на основании номенклатуры УТ-10
Функция СоздатьНоменклатуруСРеквизитамиПоУмолчанию(НоменклатураИсходная, Номенклатура_УТ11_Наименование, Характеристика_УТ11_Наименование="", бСообщать=Истина) Экспорт
	
	НоваяНоменклатураПустая = Справочники._ВидыНоменклатуры_УТ11.ПустаяСсылка();
	
	
	// Проверка 
	бПроверка = Истина;
	Если НЕ ЗначениеЗаполнено(НоменклатураИсходная) Тогда
		Если бСообщать Тогда Сообщить("Не задана старая номенклатура УТ-10 на основании который происходит попытка создать новый объект в УТ-11!"); КонецЕсли;		
		бПроверка = Ложь;
	КонецЕсли;	
	стрНаименование = СокрЛП(Номенклатура_УТ11_Наименование);
	Если стрНаименование = "" Тогда
		Если бСообщать Тогда Сообщить("Не задано наименование новой номенклатуры в УТ-11!"); КонецЕсли;
		//Возврат НоваяНоменклатураПустая;
		бПроверка = Ложь;		
	КонецЕсли;	
	
	// вид номенклатуры
	//стрВидНоменклатуры = НоменклатураИсходная.ВидНоменклатуры.Наименование;
	//{+НАЧАЛО+Редактирования} Автор: Тасмаджиев 02/03/2018//=============================================================================================
	//================================================!{БЫЛО}!=====================================================
	//Если СокрЛП(Характеристика_УТ11_Наименование) = "" Тогда
	//	стрВидНоменклатуры = "Товар без характеристик";
	//Иначе
	//	стрВидНоменклатуры = "Товар с характеристиками";   	
	//КонецЕсли;	
	//НайденВидНоменклатуры = Справочники._ВидыНоменклатуры_УТ11.НайтиПоНаименованию(стрВидНоменклатуры, Истина);		
	//Если НЕ ЗначениеЗаполнено(НайденВидНоменклатуры) Тогда
	//	Если бСообщать Тогда 
	//		Сообщить("Не найден вид номенклатуры УТ-11 """ + стрВидНоменклатуры + """!");
	//	КонецЕсли;
	//	бПроверка = Ложь;
	//КонецЕсли;
	//==============================================================================================================================
	//================================================!{Стало}!=====================================================
	Если СокрЛП(Характеристика_УТ11_Наименование) = "" Тогда
		ИспользоватьХарактеристики = Истина;
		ИспользоватьСерии = Ложь;
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	Иначе
		ИспользоватьХарактеристики = Истина;
		ИспользоватьСерии = Истина;
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_ВидыНоменклатуры_УТ11.Ссылка
	|ИЗ
	|	Справочник._ВидыНоменклатуры_УТ11 КАК _ВидыНоменклатуры_УТ11
	|ГДЕ
	|	_ВидыНоменклатуры_УТ11.ИспользоватьХарактеристики = &ИспользоватьХарактеристики
	|	И _ВидыНоменклатуры_УТ11.ИспользоватьСерии = &ИспользоватьСерии
	|	И _ВидыНоменклатуры_УТ11.ТипНоменклатуры = &ТипНоменклатуры";
	
	Запрос.УстановитьПараметр("ИспользоватьСерии",ИспользоватьСерии);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики",ИспользоватьХарактеристики );
	Запрос.УстановитьПараметр("ТипНоменклатуры",ТипНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕСли Выборка.Следующий()Тогда
		НайденВидНоменклатуры = Выборка.Ссылка;
	Иначе
		Если бСообщать Тогда 
			Сообщить("Не найден вид номенклатуры УТ-11  !");
		КонецЕсли;
		бПроверка = Ложь;
	КонецЕсли;
	//{-КОНЕЦ-Редактирования} Автор: Тасмаджиев 02/03/2018//==============================================================================================
	
	
	Если НЕ бПроверка Тогда		
		Возврат НоваяНоменклатураПустая;
	КонецЕсли;
	
	НоваяНоменклатураССылка = НоваяНоменклатураПустая;
	
	
	// Поиск элемента по наименованию
	//НайденЭлемент = Справочники._Номенклатура_УТ11.НайтиПоНаименованию(стрНаименование, Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура_УТ11.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник._Номенклатура_УТ11 КАК Номенклатура_УТ11
	|ГДЕ
	|	Номенклатура_УТ11.Наименование = &Наименование
	|	И НЕ Номенклатура_УТ11.ПометкаУдаления";	
	Запрос.УстановитьПараметр("Наименование", стрНаименование);	
	РезультатЗапроса = Запрос.Выполнить();                     	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();       	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденЭлемент = ВыборкаДетальныеЗаписи.Ссылка;
		Прервать;
	КонецЦикла;
	
	
	// Группа
	Если ЗначениеЗаполнено(НоменклатураИсходная.Родитель) Тогда
		НоменклатураНоваяГруппа = НайтиКаталогУТПоГруппеНоменклатуры(НоменклатураИсходная.Родитель);
		Если НЕ ЗначениеЗаполнено(НоменклатураНоваяГруппа) Тогда	
			Если бСообщать Тогда Сообщить("Не задано соответствие для группы в УТ-11 """ +
				НоменклатураИсходная.Родитель.Наименование + """!");
			КонецЕсли;
			Возврат НоваяНоменклатураПустая;
		КонецЕсли;		
	КонецЕсли;	
	
	// Создание нового элемента  
	
	// если уже есть - используем (обновляем) его
	Если ЗначениеЗаполнено(НайденЭлемент) Тогда	
		бЭтоНовый = Ложь;	
		НовыйЭлемент = НайденЭлемент.Ссылка.ПолучитьОбъект();		
	Иначе
		// если новый элемент - создать
		бЭтоНовый = Истина;
		НовыйЭлемент = Справочники._Номенклатура_УТ11.СоздатьЭлемент();	
	КонецЕсли;
	
	_Рекв(НовыйЭлемент, "Наименование", стрНаименование);
	
	//НовыйЭлемент.НаименованиеПолное = НоменклатураИсходная.Комментарий;  
	стрДляПечатиКомментарий = СокрЛП(НоменклатураИсходная.Комментарий);
	стрДляПечати = стрДляПечатиКомментарий;
	Если стрДляПечати <> "" Тогда
		стрУбратьИзНаим = СтрЗаменить(НоменклатураИсходная.Наименование, стрНаименование, "");	
		Если стрУбратьИзНаим <> "" Тогда  
			стрДляПечати = СтрЗаменить(стрДляПечатиКомментарий, стрУбратьИзНаим, "");
			// для случая " шоколад"
			Если стрДляПечати = стрДляПечатиКомментарий Тогда 
				// для случая " - шоколад (09.16)" - если после замены ничего не изменилось - попробовать убрать характеристику				
				ЕстьХ = Найти(стрДляПечатиКомментарий, Характеристика_УТ11_Наименование);
				Если ЕстьХ > 0 Тогда
					стрДляПечати = Лев(стрДляПечати, ЕстьХ - 1);
					// подчищаем с конца
					ВсегоПоз = СтрДлина(стрДляПечати);
					ТекПоз = ВсегоПоз;
					Для Поз = 1 По ВсегоПоз Цикл
						ТекСимв = Сред(стрДляПечати, ТекПоз, 1);
						Если (ТекСимв = " " ИЛИ ТекСимв = "-") Тогда
							
						Иначе
							Прервать;
						КонецЕсли;
						ТекПоз = ТекПоз - 1;
					КонецЦикла;
					стрДляПечати = Лев(стрДляПечати, ТекПоз);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если стрДляПечати = "" Тогда
		стрДляПечати = стрНаименование;
	КонецЕсли;
	
	_Рекв(НовыйЭлемент, "НаименованиеПолное", стрДляПечати);	
	_Рекв(НовыйЭлемент, "Производитель", Строка(НоменклатураИсходная.СтранаПроисхождения));
	
	
	
	Если ЗначениеЗаполнено(НайденВидНоменклатуры) Тогда
		_Рекв(НовыйЭлемент, "ВидНоменклатуры", НайденВидНоменклатуры);
		_Рекв(НовыйЭлемент, "ТипНоменклатуры", НайденВидНоменклатуры.ТипНоменклатуры);
		_Рекв(НовыйЭлемент, "ВариантОформленияПродажи", НайденВидНоменклатуры.ВариантОказанияУслуг);
		_Рекв(НовыйЭлемент, "ИспользованиеХарактеристик", НайденВидНоменклатуры.ИспользованиеХарактеристик);
		_Рекв(НовыйЭлемент, "ВладелецХарактеристик", НайденВидНоменклатуры.ВладелецХарактеристик);
		_Рекв(НовыйЭлемент, "ВладелецТоварныхКатегорий", НайденВидНоменклатуры.ВладелецТоварныхКатегорий);
	КонецЕсли;	
	
	_Рекв(НовыйЭлемент, "Качество", Перечисления._ГрадацииКачества_УТ11.Новый);
	_Рекв(НовыйЭлемент, "СтавкаНДС", Перечисления.СтавкиНДС.НДС18);
	
	_Рекв(НовыйЭлемент, "Артикул", НоменклатураИсходная.Артикул);
	
	//НовыйЭлемент.Родитель = НоменклатураНоваяГруппа.Ссылка;
	_Рекв(НовыйЭлемент, "Родитель", НоменклатураНоваяГруппа.Ссылка);
	
	// если есть вес
	Если НоменклатураИсходная.Вес >  0 Тогда		
		НовыйЭлемент.ВесИспользовать = Истина;
		НовыйЭлемент.ВесЗнаменатель = 1;
		НовыйЭлемент.ВесЧислитель = НоменклатураИсходная.Вес / 1000;
	КонецЕсли;	
	
	// если есть объем
	Если НоменклатураИсходная.Объем >  0 Тогда		
		НовыйЭлемент.ОбъемИспользовать = Истина;
		НовыйЭлемент.ОбъемЗнаменатель = 1;
		НовыйЭлемент.ОбъемЧислитель = НоменклатураИсходная.Объем; // / 1000;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НоменклатураИсходная.БазоваяЕдиницаИзмерения) Тогда		
	КонецЕсли;	
	
	
	// Единицы измерения		
	// Базовая
	
	БазоваяЕдИзм = НоменклатураИсходная.БазоваяЕдиницаИзмерения; ///Справочники.ЕдиницыИзмерения.ПустаяСсылка();	
	БазоваяЕдИзмНаименование = СокрЛП(Строка(БазоваяЕдИзм));
	//БазоваяЕдИзм_УТ11 = Справочники._УпаковкиЕдиницыИзмерения_УТ11.ПустаяСсылка();	
	// заплатка для исправления упак в кач-ве базовых!
	Если БазоваяЕдИзмНаименование <> "шт" Тогда
		Сообщить("Базовая ед.изм. не может быть """ + БазоваяЕдИзмНаименование + """! исправлено на ""шт""", СтатусСообщения.Важное);
		БазоваяЕдИзмНаименование = "шт";
	КонецЕсли;
	//БазоваяЕдИзм_УТ11 = НайтиСоздатьБазовуюЕдИзм(НоменклатураИсходная.БазоваяЕдиницаИзмерения);
	БазоваяЕдИзм_УТ11 = НайтиСоздатьБазовуюЕдИзм(БазоваяЕдИзмНаименование);                        
	
	Если ЗначениеЗаполнено(БазоваяЕдИзм_УТ11) Тогда
		//		НовыйЭлемент.ЕдиницаИзмерения = БазоваяЕдИзм_УТ11;
		_Рекв(НовыйЭлемент, "ЕдиницаИзмерения", БазоваяЕдИзм_УТ11);	
	КонецЕсли;
	
	
	// описание товара
	стрОписание = СокрЛП(НоменклатураИсходная.ДополнительноеОписаниеНоменклатуры);	
	Если стрОписание <> "" Тогда
		//НовыйЭлемент.ОписаниеТовара = СокрЛП(НоменклатураИсходная.ДополнительноеОписаниеНоменклатуры);
		//НовыйЭлемент._5LB_ДополнительноеОписаниеНоменклатуры = СокрЛП(НоменклатураИсходная.ДополнительноеОписаниеНоменклатуры);		
		_Рекв(НовыйЭлемент, "ОписаниеТовара", стрОписание);	
		_Рекв(НовыйЭлемент, "_5LB_ДополнительноеОписаниеНоменклатуры", стрОписание);	
	КонецЕсли;	
	
	
	// ***********************
	// Перед заполнением ед.изм. и доп.реквзитов записать новый объект!	
	Попытка
		НовыйЭлемент.Записать();
		//Если бСообщать Тогда Сообщить("Создана новая номенклатура УТ-11 """ + стрНаименование + """!"); КонецЕсли;
		НоваяНоменклатураССылка	= НовыйЭлемент.Ссылка;	
	Исключение
		//Сообщить("Не удалось создать новую номенклатуру  УТ-11 """ + стрНаименование + """!", СтатусСообщения.Важное);	
		Если бСообщать Тогда Сообщить("Не удалось создать новую номенклатуру  УТ-11 """ + стрНаименование + """!", СтатусСообщения.Важное); КонецЕсли;
		Возврат НоваяНоменклатураПустая;		
	КонецПопытки;   	
	
	
	// ***********************
	// Единицы измерения		
	// Индивидуальные 	
	
	НайтиСоздатьЕдиницыИзмерения(НоменклатураИсходная, НоваяНоменклатураССылка, бСообщать);
	
	//чФасовка = 0;
	стрЕдиницаФасовки = "";
	стрКатегория = "";
	стрПодкатегория = "";
	
	// ***********************
	// Доп.реквизиты и свойства (исходной номенклатуры)
	// **********************
	Запрос = Новый Запрос;	 	   	   
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	//|	НЕ ЗначенияСвойствОбъектов.Свойство.ПометкаУдаления 
	|	ЗначенияСвойствОбъектов.Объект = &Владелец";	
	Запрос.УстановитьПараметр("Владелец", НоменклатураИсходная);	
	РезультатЗапроса = Запрос.Выполнить();                                    		
	ВыборкаЗначенияСвойств = РезультатЗапроса.Выбрать();  	
	
	НовыйЭлемент.ДополнительныеРеквизиты.Очистить();
	//НовыйЭлемент.ДополнительныеСвойства	
	
	
	Пока ВыборкаЗначенияСвойств.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаЗначенияСвойств.Свойство) Тогда			 
			СвойствоНаименование = ВыборкаЗначенияСвойств.Свойство.Наименование;			 
			НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СвойствоНаименование);			 
			
			//Если СвойствоНаименование = "Выгружать в Мегатропин" Тогда
			//	
			//ИначеЕсли СвойствоНаименование = "ДатаДействияСертификата" Тогда        // Дата
			//	
			Если СвойствоНаименование = "ЕдиницаФасовки" Тогда                 // Классификатор единиц измерения
				стрЕдиницаФасовки = СокрЛП(Строка(ВыборкаЗначенияСвойств.Значение)); 
			ИначеЕсли СвойствоНаименование = "Подкатегория" Тогда					// Строка
				стрПодкатегория	= СокрЛП(ВыборкаЗначенияСвойств.Значение);
				//ИначеЕсли СвойствоНаименование = "Сроки годности" Тогда         		//
				//	
				//ИначеЕсли СвойствоНаименование = "цена" Тогда      						
			КонецЕсли;
			
			//Если НайденоСвойство_УТ11.Пустая() Тогда
			//	//Сообщить("Не удалось найти доп.реквизит (свойство) """ + СвойствоНаименование + """!", СтатусСообщения.Важное);
			//	Если бСообщать Тогда 
			//		Сообщить("Не удалось найти доп.реквизит (свойство) """ + СвойствоНаименование + """!", СтатусСообщения.Важное);
			//	КонецЕсли;
			//	Продолжить;
			//Иначе
			//	Если НайденоСвойство_УТ11.ЭтоДополнительноеСведение Тогда	// доп.реквизит 
			//		Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, ВыборкаЗначенияСвойств.Значение) Тогда
			//			Продолжить;
			//		КонецЕсли;
			//	Иначе	// доп.свойство					
			//		Если НЕ ЗаписатьДопРеквизит(НоваяНоменклатураССылка, НайденоСвойство_УТ11, ВыборкаЗначенияСвойств.Значение) Тогда
			//			Продолжить;
			//		КонецЕсли;                 
			//	КонецЕсли;  // доп.реквизит или свойство 
			//	
			//КонецЕсли;
			
			
		КонецЕсли;
	КонецЦикла;
	
	
	
	//// Описание
	//Если СтрДлина(СокрЛП(НоменклатураИсходная.ДополнительноеОписаниеНоменклатуры)) > 0  Тогда
	//	СвойствоНаименование = "";
	//	НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СвойствоНаименование);			 		
	//	Если НайденоСвойство_УТ11.Пустая() Тогда
	//		Сообщить("Не удалось найти доп.реквизит (свойство) """ + СвойствоНаименование + """!", СтатусСообщения.Важное);
	//		//Продолжить;
	//	Иначе
	//		Если НЕ ЗаписатьДопРеквизит(НоваяНоменклатураССылка, НайденоСвойство_УТ11, НоменклатураИсходная.ДополнительноеОписаниеНоменклатуры) Тогда
	//		//	Продолжить;
	//			Сообщить("Не удалось записать доп.реквизит (свойство) """ + СвойствоНаименование + """!", СтатусСообщения.Важное);		
	//		КонецЕсли;                 
	//	КонецЕсли;				
	//КонецЕсли;
	
	
	// **************
	// ФАСОВКА
	// **************
	Если ЗначениеЗаполнено(НоменклатураИсходная.Фасовка) Тогда
		
		ИмяФасовка = "Фасовка";			 
		СвойствоФасовка = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяФасовка);			 
		ИмяПсевдонима = "ЕдиницаФасовки";			 
		ИмяЕдиницаФасовки = ОбщегоНазначения5LB.ПолучитьПсевдоним(ИмяПсевдонима, "Интеграция", ИмяПсевдонима); 						
		СвойствоЕдиницаФасовки = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяЕдиницаФасовки);			 
		
		Если СвойствоФасовка.Пустая() Тогда
			//Сообщить("Не удалось найти доп.реквизит (свойство) """ + ИмяФасовка + """!", СтатусСообщения.Важное);
			Если бСообщать Тогда 
				Сообщить("Не удалось найти доп.реквизит (свойство) """ + ИмяФасовка + """!", СтатусСообщения.Важное);
			КонецЕсли;
			//Продолжить;
		Иначе	
			//НоваяСтрокаДопРекв 					= НовыйЭлемент.ДополнительныеРеквизиты.Добавить();				 
			//НоваяСтрокаДопРекв.Свойство        	= НайденоСвойство_УТ11;
			//НоваяСтрокаДопРекв.Значение        	= НоменклатураИсходная.Фасовка;
			Если НЕ ЗаписатьДопРеквизит(НовыйЭлемент, СвойствоФасовка, НоменклатураИсходная.Фасовка) Тогда
				//			Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, НоменклатураИсходная.Фасовка) Тогда
				Если бСообщать Тогда 
					Сообщить("Не удалось записать доп.реквизит (свойство) """ + ИмяФасовка + """ со значением """ + Строка(ВыборкаЗначенияСвойств.Значение) + """!", СтатусСообщения.Важное);		
				КонецЕсли;
				//	Продолжить;
			КонецЕсли;  
		КонецЕсли;  		
		
		Если СвойствоЕдиницаФасовки.Пустая() Тогда
			//Сообщить("Не удалось найти доп.реквизит (свойство) """ + ИмяЕдиницаФасовки + """!", СтатусСообщения.Важное);
			Если бСообщать Тогда 
				Сообщить("Не удалось найти доп.реквизит (свойство) """ + ИмяЕдиницаФасовки + """!", СтатусСообщения.Важное);
			КонецЕсли;
			//Продолжить;
		Иначе	
			Если стрЕдиницаФасовки <> "" Тогда 
				Если НЕ ЗаписатьДопРеквизит(НовыйЭлемент, СвойствоЕдиницаФасовки, стрЕдиницаФасовки) Тогда
					//			Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, НоменклатураИсходная.Фасовка) Тогда
					Если бСообщать Тогда 
						Сообщить("Не удалось записать доп.реквизит (свойство) """ + ИмяЕдиницаФасовки + """ со значением """ + Строка(ВыборкаЗначенияСвойств.Значение) + """!", СтатусСообщения.Важное);		
					КонецЕсли;
					//	Продолжить;
				КонецЕсли;  
			КонецЕсли; 			
		КонецЕсли;
		
		
	КонецЕсли;		
	
	// **************
	// РусификацияНеТребуется	
	// **************
	ИмяПсевдонима = "РусификацияНеТребуется";	
	ИмяСвойства = ОбщегоНазначения5LB.ПолучитьПсевдоним(ИмяПсевдонима, "Интеграция", ИмяПсевдонима); 
	
	СвойствоРус = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства);			 
	Если СвойствоРус.Пустая() Тогда
		Если бСообщать Тогда 
			Сообщить("Не удалось найти доп.реквизит (свойство) """ + ИмяСвойства + """!", СтатусСообщения.Важное);
		КонецЕсли;
	Иначе	
		Если НЕ ЗаписатьДопРеквизит(НовыйЭлемент, СвойствоРус, НоменклатураИсходная.РусификацияНеТребуется) Тогда
			Если бСообщать Тогда 
				Сообщить("Не удалось записать доп.реквизит (свойство) """ + ИмяСвойства + """ со значением """ + Строка(НоменклатураИсходная.РусификацияНеТребуется) + """!", СтатусСообщения.Важное);		
			КонецЕсли;
			//	Продолжить;
		КонецЕсли;  
	КонецЕсли;  			
	
	// **************
	// КАТЕГОРИИ	
	// **************
	Запрос = Новый Запрос;	 	   	   
	Запрос.Текст = "ВЫБРАТЬ
	|	КатегорииОбъектов.Ссылка
	|ПОМЕСТИТЬ втКатегории
	|ИЗ
	|	Справочник.КатегорииОбъектов КАК КатегорииОбъектов
	|ГДЕ
	//    |	КатегорииОбъектов.Наименование = &Наименование
	|	КатегорииОбъектов.НазначениеКатегории = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура)
	|;
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	//				   |	КатегорииОбъектов.Объект ,
	|	КатегорииОбъектов.Категория
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	|ГДЕ
	|	КатегорииОбъектов.Объект = &Владелец
	|	И КатегорииОбъектов.Категория В (ВЫБРАТЬ * ИЗ втКатегории)
	|//////////////////////////////////////////////
	|";
	Запрос.УстановитьПараметр("Владелец", НоменклатураИсходная);	
	РезультатЗапроса = Запрос.Выполнить();                                    		
	ВыборкаКатегории = РезультатЗапроса.Выбрать(); 
	
	Пока ВыборкаКатегории.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаКатегории.Категория) Тогда	
			
			стрКатегория = СокрЛП(Строка(ВыборкаКатегории.Категория));
			//НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Категории");			 
			//Если НайденоСвойство_УТ11.Пустая() Тогда
			//	
			//Иначе
			
			//	Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, ВыборкаКатегории.Категория) Тогда
			//	//	//Продолжить;
			//	КонецЕсли;
			//КонецЕсли;
			
			
		КонецЕсли;
	КонецЦикла;
	
	Если стрКатегория <> "" Тогда
		
		СтруктураКатегория = Новый Структура("Категория, Подкатегория");
		СтруктураКатегория.Категория = стрКатегория;
		СтруктураКатегория.Подкатегория = стрКатегория;       
		//	_Рекв(НовыйЭлемент, "_5LB_Категория", стрКатегория);
		Если стрПодкатегория <> "" Тогда
			СтруктураКатегория.Подкатегория = стрПодкатегория;
		КонецЕсли;
		
		ЗначСвойства = "Категория";
		НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЗначСвойства);			 
		Если НайденоСвойство_УТ11.Пустая() Тогда
			Если бСообщать Тогда 
				Сообщить("Не удалось найти доп.реквизит (свойство) """ + ЗначСвойства + """!", СтатусСообщения.Важное);
			КонецЕсли;		
		Иначе	
			Если НЕ ЗаписатьДопРеквизит(НовыйЭлемент, НайденоСвойство_УТ11, СтруктураКатегория) Тогда
				//		Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, НоменклатураИсходная.Фасовка) Тогда
				Если бСообщать Тогда 
					Сообщить("Не удалось записать доп.реквизит (свойство) """ + ЗначСвойства + """ со значением """ + стрКатегория + """!", СтатусСообщения.Важное);		
				КонецЕсли;
				//	Продолжить;
			КонецЕсли;  
		КонецЕсли; 
		
		
	КонецЕсли;  // Категория
	
	
	// **************
	// БрендДляПечати	
	// **************
	стрБрендДляПечати = "";	
	стрРодитель = Строка(НоменклатураИсходная.Родитель);
	позРазд = Найти (стрРодитель, "_");
	Если позРазд > 0 Тогда
		стрБрендДляПечати = Сред(стрРодитель, позРазд + 1);
	КонецЕсли;
	Если стрБрендДляПечати <> "" Тогда
		//ЗначСвойства = "БрендДляПечати";
		ИмяПсевдонима = "БрендДляПечати";			 
		ЗначСвойства = ОбщегоНазначения5LB.ПолучитьПсевдоним(ИмяПсевдонима, "Интеграция", ИмяПсевдонима); 	
		НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЗначСвойства);			 
		Если НайденоСвойство_УТ11.Пустая() Тогда
			Если бСообщать Тогда 
				Сообщить("Не удалось найти доп.реквизит (свойство) """ + ЗначСвойства + """!", СтатусСообщения.Важное);
			КонецЕсли;		
		Иначе	
			Если НЕ ЗаписатьДопРеквизит(НовыйЭлемент, НайденоСвойство_УТ11, стрБрендДляПечати) Тогда
				//		Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, НоменклатураИсходная.Фасовка) Тогда
				Если бСообщать Тогда 
					Сообщить("Не удалось записать доп.реквизит (свойство) """ + ЗначСвойства + """ со значением """ + стрБрендДляПечати + """!", СтатусСообщения.Важное);		
				КонецЕсли;
				//	Продолжить;
			КонецЕсли;  
		КонецЕсли;  
	КонецЕсли;
	
	
	// Страна происхождения	
	стрСтрана = ВРег(СокрЛП(Строка(НоменклатураИсходная.СтранаПроисхождения)));	 
	Если стрСтрана <> "" Тогда
		//ЗначСвойства = "СтранаПроисхождения";
		ИмяПсевдонима = "СтранаПроисхождения";			 
		ЗначСвойства = ОбщегоНазначения5LB.ПолучитьПсевдоним(ИмяПсевдонима, "Интеграция", ИмяПсевдонима); 
		НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЗначСвойства);			 
		Если НайденоСвойство_УТ11.Пустая() Тогда
			Если бСообщать Тогда 
				Сообщить("Не удалось найти доп.реквизит (свойство) """ + ЗначСвойства + """!", СтатусСообщения.Важное);
			КонецЕсли;		
		Иначе	
			Если НЕ ЗаписатьДопРеквизит(НовыйЭлемент, НайденоСвойство_УТ11, стрСтрана) Тогда
				//		Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, НоменклатураИсходная.Фасовка) Тогда
				Если бСообщать Тогда 
					Сообщить("Не удалось записать доп.реквизит (свойство) """ + ЗначСвойства + """ со значением """ + стрБрендДляПечати + """!", СтатусСообщения.Важное);		
				КонецЕсли;
				//	Продолжить;
			КонецЕсли;  
		КонецЕсли;  
	КонецЕсли;
	
	
	// 02.02.17
	Если НовыйЭлемент._5LB_ДатаСоздания = Дата(1,1,1) Тогда
		_Рекв(НовыйЭлемент, "_5LB_ДатаСоздания", ТекущаяДата(), Истина);
	КонецЕсли;
	_Рекв(НовыйЭлемент, "_5LB_ДатаИзменения", ТекущаяДата(), Истина);
	_Рекв(НовыйЭлемент, "_5LB_Пользователь", ПараметрыСеанса.ТекущийПользователь, Истина);
	_Рекв(НовыйЭлемент, "_5LB_ПоследнееИзменение", "Создана новая номенклатура", Истина);
	
	
	
	// финальная запись
	Попытка
		НовыйЭлемент.Записать();
		Если бСообщать Тогда 
			Сообщить("Создана новая номенклатура УТ-11 """ + стрНаименование + """!");
		КонецЕсли;	
		НоваяНоменклатураССылка	= НовыйЭлемент.Ссылка;	
	Исключение
		НоваяНоменклатураССылка = НоваяНоменклатураПустая;
		Если бСообщать Тогда 
			Сообщить("Не удалось создать новую номенклатуру  УТ-11 """ + стрНаименование + """!", СтатусСообщения.Важное);	
		КонецЕсли;
		//	Сообщить("Не удалось создать новую номенклатуру  УТ-11 """ + стрНаименование + """!", СтатусСообщения.Важное);	
	КонецПопытки; 
	
	
	//	КонецЕсли;
	//	// если новый элемент - создать
	
	
	// характеристика
	//{+НАЧАЛО+Редактирования} Автор: Тасмаджиев 02/03/2018//=============================================================================================
	//================================================!{Было}!=====================================================
	//НоваяХарактеристика = Неопределено;
	//стрХарактеристика = СокрЛП(Характеристика_УТ11_Наименование);
	//Если стрХарактеристика <> "" Тогда		
	//	Если ЗначениеЗаполнено(НоваяНоменклатураССылка) Тогда 				
	//		//		Характеристика_УТ11_Наименование                  
	//		НоваяХарактеристика = НайтиСоздатьХарактеристику(НоваяНоменклатураССылка, стрХарактеристика, бСообщать);
	//	КонецЕсли;
	//КонецЕсли;
	//==============================================================================================================================
	//================================================!{Стало}!=====================================================
	НоваяХарактеристика = Неопределено;
	стрХарактеристика = СокрЛП(Характеристика_УТ11_Наименование);
	Если стрХарактеристика <> "" Тогда		
		Если ЗначениеЗаполнено(НоваяНоменклатураССылка) Тогда 				
			//		Характеристика_УТ11_Наименование                  
			НоваяХарактеристика = НайтиСоздатьХарактеристику(НоваяНоменклатураССылка, стрХарактеристика, бСообщать,НоменклатураИсходная);
		КонецЕсли;
	КонецЕсли;

	   
	//{-КОНЕЦ-Редактирования} Автор: Тасмаджиев 02/03/2018//==============================================================================================
	
	
	// штрих-код
	бСинхронизироватьШК = Ложь;
	Если НоваяХарактеристика <> Неопределено Тогда
		бСинхронизироватьШК = Истина;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрСведенийШтрихкод.Штрихкод
		|ИЗ
		|	РегистрСведений._ШтрихкодыНоменклатуры КАК РегистрСведенийШтрихкод
		|ГДЕ
		|	РегистрСведенийШтрихкод.Номенклатура = &НоменклатураССылка
		|	И РегистрСведенийШтрихкод.Характеристика = &Характеристика
		//|	И _ШтрихкодыНоменклатуры.Упаковка = &Упаковка
		|";        		
		Запрос.УстановитьПараметр("НоменклатураССылка", 	НоваяНоменклатураССылка);
		//Запрос.УстановитьПараметр("Упаковка", 		Упаковка);
		Запрос.УстановитьПараметр("Характеристика", НоваяХарактеристика);	
		РезультатЗапроса = Запрос.Выполнить();	
		Если РезультатЗапроса.Пустой() Тогда
			бСинхронизироватьШК = Истина;	
		КонецЕсли;
	КонецЕсли;
	Если бСинхронизироватьШК Тогда
		СинхронизироватьШтрихКод(НоменклатураИсходная, НоваяНоменклатураССылка, НоваяХарактеристика);
	КонецЕсли;
	
	
	Возврат НоваяНоменклатураССылка;
	
КонецФункции

// обновление реквизитов номенклатуры УТ-11 уже ранее созданной (с подч.справочниками и р.с!)
Функция ОбновитьНоменклатуруСРеквизитами(НоменклатураИсходная, Номенклатура_УТ11, Характеристика_УТ11=Неопределено, 
	бСообщать=Истина, стрСодержаниеИзменения = "", бСинхронизироватьНаименование=Ложь) Экспорт
	
	РезОбновления = Истина;
	
	// Проверка 
	бПроверка = Истина;
	Если НЕ ЗначениеЗаполнено(НоменклатураИсходная) Тогда
		Если бСообщать Тогда Сообщить("Не задана старая номенклатура УТ-10 на основании который происходит попытка обновления номенклатуры УТ-11!"); КонецЕсли;		
		РезОбновления = Ложь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Номенклатура_УТ11) Тогда
		Если бСообщать Тогда Сообщить("Не задана ссылка на новую номенклатуру в УТ-11!"); КонецЕсли;
		//Возврат НоваяНоменклатураПустая;
		РезОбновления = Ложь;		
	КонецЕсли;	
	
	Если НЕ РезОбновления Тогда		
		Возврат РезОбновления;
	КонецЕсли;
	
	// Группа
	Если ЗначениеЗаполнено(НоменклатураИсходная.Родитель) Тогда
		НоменклатураНоваяГруппа = НайтиКаталогУТПоГруппеНоменклатуры(НоменклатураИсходная.Родитель);
		Если НЕ ЗначениеЗаполнено(НоменклатураНоваяГруппа) Тогда	
			Если бСообщать Тогда Сообщить("Не задано соответствие для группы в УТ-11 """ +
				НоменклатураИсходная.Родитель.Наименование + """!");
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;		
	КонецЕсли;	
	
	НоменклатураУТ11Объект = Номенклатура_УТ11.Ссылка.ПолучитьОбъект();				
	
	стрНаименование = СокрЛП(НоменклатураИсходная.Наименование);
	
	Если бСинхронизироватьНаименование Тогда
		_Рекв(НоменклатураУТ11Объект, "НаименованиеПолное", стрНаименование, Истина);
		_Рекв(НоменклатураУТ11Объект, "Наименование", стрНаименование, Истина);
	КонецЕсли;	
	
	//
	////НовыйЭлемент.НаименованиеПолное = НоменклатураИсходная.Комментарий;  
	//стрДляПечати = "";
	//стрДляПечатиКомментарий = СокрЛП(НоменклатураИсходная.Комментарий);
	//стрДляПечати = стрДляПечатиКомментарий;
	//Если стрДляПечати <> "" Тогда
	//	стрУбратьИзНаим = СтрЗаменить(НоменклатураИсходная.Наименование, стрНаименование, "");	
	//	Если стрУбратьИзНаим <> "" Тогда  
	//    	стрДляПечати = СтрЗаменить(стрДляПечатиКомментарий, стрУбратьИзНаим, "");
	//		// для случая " шоколад"
	//		Если стрДляПечати = стрДляПечатиКомментарий Тогда 
	//		// для случая " - шоколад (09.16)" - если после замены ничего не изменилось - попробовать убрать характеристику				
	//			ЕстьХ = Найти(стрДляПечатиКомментарий, Характеристика_УТ11_Наименование);
	//			Если ЕстьХ > 0 Тогда
	//				стрДляПечати = Лев(стрДляПечати, ЕстьХ - 1);
	//				// подчищаем с конца
	//				ВсегоПоз = СтрДлина(стрДляПечати);
	//				ТекПоз = ВсегоПоз;
	//				Для Поз = 1 По ВсегоПоз Цикл
	//					ТекСимв = Сред(стрДляПечати, ТекПоз, 1);
	//					Если (ТекСимв = " " ИЛИ ТекСимв = "-") Тогда
	//						
	//					Иначе
	//						Прервать;
	//					КонецЕсли;
	//					ТекПоз = ТекПоз - 1;
	//				КонецЦикла;
	//				стрДляПечати = Лев(стрДляПечати, ТекПоз);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//Если стрДляПечати = "" Тогда
	//	стрДляПечати = стрНаименование;
	//КонецЕсли;		
	//
	//Если НоменклатураУТ11Объект.НаименованиеПолное <> стрДляПечати Тогда	
	//	_Рекв(НоменклатураУТ11Объект, "НаименованиеПолное", стрДляПечати);
	//КонецЕсли;                                                           
	
	стрСтранаПроисхождения = Строка(НоменклатураИсходная.СтранаПроисхождения);	
	Если ВРег(НоменклатураУТ11Объект.Производитель) <> ВРег(стрСтранаПроисхождения) Тогда
		_Рекв(НоменклатураУТ11Объект, "Производитель", стрСтранаПроисхождения, Истина);
	КонецЕсли; 	
	
	//Если ЗначениеЗаполнено(НайденВидНоменклатуры) Тогда
	//	_Рекв(НовыйЭлемент, "ВидНоменклатуры", НайденВидНоменклатуры);
	//	_Рекв(НовыйЭлемент, "ТипНоменклатуры", НайденВидНоменклатуры.ТипНоменклатуры);
	//	_Рекв(НовыйЭлемент, "ВариантОформленияПродажи", НайденВидНоменклатуры.ВариантОказанияУслуг);
	//	_Рекв(НовыйЭлемент, "ИспользованиеХарактеристик", НайденВидНоменклатуры.ИспользованиеХарактеристик);
	//	_Рекв(НовыйЭлемент, "ВладелецХарактеристик", НайденВидНоменклатуры.ВладелецХарактеристик);
	//	_Рекв(НовыйЭлемент, "ВладелецТоварныхКатегорий", НайденВидНоменклатуры.ВладелецТоварныхКатегорий);
	//КонецЕсли;	
	//_Рекв(НовыйЭлемент, "Качество", Перечисления._ГрадацииКачества_УТ11.Новый);
	//_Рекв(НовыйЭлемент, "СтавкаНДС", Перечисления.СтавкиНДС.НДС18);
	
	Если НоменклатураУТ11Объект.СтавкаНДС <> НоменклатураИсходная.СтавкаНДС Тогда
		_Рекв(НоменклатураУТ11Объект, "СтавкаНДС", НоменклатураИсходная.СтавкаНДС, Истина);
	КонецЕсли;
	
	//_Рекв(НовыйЭлемент, "Артикул", НоменклатураИсходная.Артикул);
	Если ВРег(СокрЛП(НоменклатураУТ11Объект.Артикул)) <> ВРег(СокрЛП(НоменклатураИсходная.Артикул)) Тогда
		_Рекв(НоменклатураУТ11Объект, "Артикул", СокрЛП(НоменклатураИсходная.Артикул), Истина);
	КонецЕсли;
	
	Если НоменклатураУТ11Объект.Родитель.Наименование <> НоменклатураИсходная.Родитель.Наименование Тогда
		_Рекв(НоменклатураУТ11Объект, "Родитель", НоменклатураИсходная.Родитель, Истина);
	КонецЕсли;
	
	// если есть вес
	Если НоменклатураИсходная.Вес >  0 Тогда
		Если НоменклатураУТ11Объект.ВесЗнаменатель = 0 Тогда
			НоменклатураУТ11Объект.ВесИспользовать = Истина;
			НоменклатураУТ11Объект.ВесЗнаменатель = 1;
			НоменклатураУТ11Объект.ВесЧислитель = НоменклатураИсходная.Вес / 1000;
		КонецЕсли;	
	КонецЕсли;	
	
	// если есть объем
	Если НоменклатураИсходная.Объем >  0 Тогда		
		Если НоменклатураУТ11Объект.ОбъемЗнаменатель = 0 Тогда
			НоменклатураУТ11Объект.ОбъемИспользовать = Истина;
			НоменклатураУТ11Объект.ОбъемЗнаменатель = 1;
			НоменклатураУТ11Объект.ОбъемЧислитель = НоменклатураИсходная.Объем; // / 1000;
		КонецЕсли;	
	КонецЕсли;	
	
	//Если ЗначениеЗаполнено(НоменклатураИсходная.БазоваяЕдиницаИзмерения) Тогда		
	//КонецЕсли;		
	//	Справочники._Номенклатура_УТ11._ЗаполнитьРеквизитыПоВидуНоменклатуры(НоменклатураУТ11Объект);
	
	// Единицы измерения		
	// Базовая
	
	БазоваяЕдИзм = Справочники.ЕдиницыИзмерения.ПустаяСсылка();	
	//БазоваяЕдИзм_УТ11 = Справочники._УпаковкиЕдиницыИзмерения_УТ11.ПустаяСсылка();
	БазоваяЕдИзм_УТ11 = НайтиСоздатьБазовуюЕдИзм(НоменклатураИсходная.БазоваяЕдиницаИзмерения);	
	Если ЗначениеЗаполнено(БазоваяЕдИзм_УТ11) Тогда
		Если БазоваяЕдИзм_УТ11 <> НоменклатураУТ11Объект.ЕдиницаИзмерения Тогда	
			_Рекв(НоменклатураУТ11Объект, "ЕдиницаИзмерения", БазоваяЕдИзм_УТ11);	
		КонецЕсли;			
	КонецЕсли;
	
	
	//// описание товара
	//стрОписание = СокрЛП(НоменклатураИсходная.ДополнительноеОписаниеНоменклатуры);	
	//Если стрОписание <> "" Тогда
	//	//НовыйЭлемент.ОписаниеТовара = СокрЛП(НоменклатураИсходная.ДополнительноеОписаниеНоменклатуры);
	//	//НовыйЭлемент._5LB_ДополнительноеОписаниеНоменклатуры = СокрЛП(НоменклатураИсходная.ДополнительноеОписаниеНоменклатуры);		
	//	_Рекв(НоменклатураУТ11Объект, "ОписаниеТовара", стрОписание);	
	//	_Рекв(НоменклатураУТ11Объект, "_5LB_ДополнительноеОписаниеНоменклатуры", стрОписание);	
	//КонецЕсли;	
	
	
	//// ***********************
	//// Перед заполнением ед.изм. и доп.реквзитов записать новый объект!	
	Попытка
		НоменклатураУТ11Объект.Записать();
		//	Если бСообщать Тогда Сообщить("Создана новая номенклатура УТ-11 """ + стрНаименование + """!"); КонецЕсли;
		//	НоменклатураУТ11ССылка	= НоменклатураУТ11Объект.Ссылка;	
	Исключение
		//	//Сообщить("Не удалось создать новую номенклатуру  УТ-11 """ + стрНаименование + """!", СтатусСообщения.Важное);	
		Если бСообщать Тогда Сообщить("Не удалось обновить номенклатуру  УТ-11 """ + Строка(Номенклатура_УТ11) + """!", СтатусСообщения.Важное); КонецЕсли;
		РезОбновления = Ложь;
		Возврат РезОбновления;
	КонецПопытки;   	
	
	
	// ***********************
	// Единицы измерения		
	// Индивидуальные 	
	
	стрЕдиницаФасовки = "";
	стрКатегория = "";
	стрПодкатегория = "";
	
	
	НайтиСоздатьЕдиницыИзмерения(НоменклатураИсходная, Номенклатура_УТ11, бСообщать);
	
	// ***********************
	// Доп.реквизиты и свойства
	
	//Запрос = Новый Запрос;	 	   	   
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗначенияСвойствОбъектов.Свойство,
	//               |	ЗначенияСвойствОбъектов.Значение
	//               |ИЗ
	//               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//               |ГДЕ
	//               |	НЕ ЗначенияСвойствОбъектов.Свойство.ПометкаУдаления 
	//			   |	И ЗначенияСвойствОбъектов.Объект = &Владелец
	//			   |";	
	//Запрос.УстановитьПараметр("Владелец", НоменклатураИсходная);	
	//РезультатЗапроса = Запрос.Выполнить();                                    		
	//ВыборкаЗначенияСвойств = РезультатЗапроса.Выбрать();  	
	//
	//НоменклатураУТ11Объект.ДополнительныеРеквизиты.Очистить();
	////НовыйЭлемент.ДополнительныеСвойства	
	//
	//
	//Пока ВыборкаЗначенияСвойств.Следующий() Цикл
	//	 Если ЗначениеЗаполнено(ВыборкаЗначенияСвойств.Свойство) Тогда			 
	//		СвойствоНаименование = ВыборкаЗначенияСвойств.Свойство.Наименование;			 
	//		НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СвойствоНаименование);			 
	//		//Если НайденоСвойство_УТ11.Пустая() Тогда
	//		Если НЕ ЗначениеЗаполнено(НайденоСвойство_УТ11) Тогда				
	//			//Сообщить("Не удалось найти доп.реквизит (свойство) """ + СвойствоНаименование + """!", СтатусСообщения.Важное);
	//			//Если бСообщать Тогда 
	//			//	Сообщить("Не удалось найти доп.реквизит (свойство) """ + СвойствоНаименование + """!", СтатусСообщения.Важное);
	//			//КонецЕсли;
	//			Продолжить;
	//		Иначе
	//			Если НайденоСвойство_УТ11.ЭтоДополнительноеСведение Тогда	// доп.реквизит 
	//				Если НЕ ЗаписатьДопСвойство(НоменклатураУТ11Объект, НайденоСвойство_УТ11, ВыборкаЗначенияСвойств.Значение) Тогда
	//					Продолжить;
	//				КонецЕсли;
	//			Иначе	// доп.свойство					
	//				Если НЕ ЗаписатьДопРеквизит(НоменклатураУТ11Объект, НайденоСвойство_УТ11, ВыборкаЗначенияСвойств.Значение) Тогда
	//					Продолжить;
	//				КонецЕсли;                 
	//			КонецЕсли;  // доп.реквизит или свойство 
	//			
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;	
	
	
	стрЕдиницаФасовки = "";
	стрКатегория = "";
	стрПодкатегория = "";
	
	
	// ***********************
	// Доп.реквизиты и свойства (исходной номенклатуры)
	// **********************
	Запрос = Новый Запрос;	 	   	   
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	//|	НЕ ЗначенияСвойствОбъектов.Свойство.ПометкаУдаления 
	|	ЗначенияСвойствОбъектов.Объект = &Владелец";	
	Запрос.УстановитьПараметр("Владелец", НоменклатураИсходная);	
	РезультатЗапроса = Запрос.Выполнить();                                    		
	ВыборкаЗначенияСвойств = РезультатЗапроса.Выбрать();  	
	
	//НовыйЭлемент.ДополнительныеРеквизиты.Очистить();
	////НовыйЭлемент.ДополнительныеСвойства		
	Пока ВыборкаЗначенияСвойств.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаЗначенияСвойств.Свойство) Тогда			 
			СвойствоНаименование = ВыборкаЗначенияСвойств.Свойство.Наименование;			 
			НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СвойствоНаименование);			 
			
			//Если СвойствоНаименование = "Выгружать в Мегатропин" Тогда		
			//ИначеЕсли СвойствоНаименование = "ДатаДействияСертификата" Тогда        // Дата				
			Если СвойствоНаименование = "ЕдиницаФасовки" Тогда                 // Классификатор единиц измерения
				стрЕдиницаФасовки = СокрЛП(Строка(ВыборкаЗначенияСвойств.Значение)); 
			ИначеЕсли СвойствоНаименование = "Подкатегория" Тогда					// Строка
				стрПодкатегория	= СокрЛП(ВыборкаЗначенияСвойств.Значение);
				//ИначеЕсли СвойствоНаименование = "Сроки годности" Тогда         		//
				//	
				//ИначеЕсли СвойствоНаименование = "цена" Тогда      						
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;     
	
	
	
	
	
	
	// **************
	// ФАСОВКА
	// **************
	Если ЗначениеЗаполнено(НоменклатураИсходная.Фасовка) Тогда
		
		ИмяФасовка = "Фасовка";			 
		СвойствоФасовка = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяФасовка);			 
		//ИмяЕдиницаФасовки = "ЕдиницаФасовки";			 
		ИмяПсевдонима = "ЕдиницаФасовки";			 
		ИмяЕдиницаФасовки = ОбщегоНазначения5LB.ПолучитьПсевдоним(ИмяПсевдонима, "Интеграция", ИмяПсевдонима); 	
		СвойствоЕдиницаФасовки = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяЕдиницаФасовки);			 
		
		Если СвойствоФасовка.Пустая() Тогда
			//Сообщить("Не удалось найти доп.реквизит (свойство) """ + ИмяФасовка + """!", СтатусСообщения.Важное);
			Если бСообщать Тогда 
				Сообщить("Не удалось найти доп.реквизит (свойство) """ + ИмяФасовка + """!", СтатусСообщения.Важное);
			КонецЕсли;
			//Продолжить;
		Иначе	
			//НоваяСтрокаДопРекв 					= НовыйЭлемент.ДополнительныеРеквизиты.Добавить();				 
			//НоваяСтрокаДопРекв.Свойство        	= НайденоСвойство_УТ11;
			//НоваяСтрокаДопРекв.Значение        	= НоменклатураИсходная.Фасовка;
			Если НЕ ЗаписатьДопРеквизит(НоменклатураУТ11Объект, СвойствоФасовка, НоменклатураИсходная.Фасовка) Тогда
				//			Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, НоменклатураИсходная.Фасовка) Тогда
				Если бСообщать Тогда 
					Сообщить("Не удалось записать доп.реквизит (свойство) """ + ИмяФасовка + """ со значением """ + Строка(ВыборкаЗначенияСвойств.Значение) + """!", СтатусСообщения.Важное);		
				КонецЕсли;
				//	Продолжить;
			КонецЕсли;  
		КонецЕсли;  		
		
		Если СвойствоЕдиницаФасовки.Пустая() Тогда
			//Сообщить("Не удалось найти доп.реквизит (свойство) """ + ИмяЕдиницаФасовки + """!", СтатусСообщения.Важное);
			Если бСообщать Тогда 
				Сообщить("Не удалось найти доп.реквизит (свойство) """ + ИмяЕдиницаФасовки + """!", СтатусСообщения.Важное);
			КонецЕсли;
			//Продолжить;
		Иначе	
			Если стрЕдиницаФасовки <> "" Тогда 
				Если НЕ ЗаписатьДопРеквизит(НоменклатураУТ11Объект, СвойствоЕдиницаФасовки, стрЕдиницаФасовки) Тогда
					//			Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, НоменклатураИсходная.Фасовка) Тогда
					Если бСообщать Тогда 
						Сообщить("Не удалось записать доп.реквизит (свойство) """ + ИмяЕдиницаФасовки + """ со значением """ + Строка(ВыборкаЗначенияСвойств.Значение) + """!", СтатусСообщения.Важное);		
					КонецЕсли;
					//	Продолжить;
				КонецЕсли;  
			КонецЕсли; 			
		КонецЕсли;
		
		
	КонецЕсли;		
	
	// **************
	// РусификацияНеТребуется	
	// **************
	//ИмяСвойства = "РусификацияНеТребуется";			 
	ИмяПсевдонима = "РусификацияНеТребуется";	
	ИмяСвойства = ОбщегоНазначения5LB.ПолучитьПсевдоним(ИмяПсевдонима, "Интеграция", ИмяПсевдонима); 
	СвойствоРус = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства);			 
	Если СвойствоРус.Пустая() Тогда
		Если бСообщать Тогда 
			Сообщить("Не удалось найти доп.реквизит (свойство) """ + ИмяСвойства + """!", СтатусСообщения.Важное);
		КонецЕсли;
	Иначе	
		Если НЕ ЗаписатьДопРеквизит(НоменклатураУТ11Объект, СвойствоРус, НоменклатураИсходная.РусификацияНеТребуется) Тогда
			Если бСообщать Тогда 
				Сообщить("Не удалось записать доп.реквизит (свойство) """ + ИмяСвойства + """ со значением """ + Строка(НоменклатураИсходная.РусификацияНеТребуется) + """!", СтатусСообщения.Важное);		
			КонецЕсли;
			//	Продолжить;
		КонецЕсли;  
	КонецЕсли;  			
	
	// **************
	// КАТЕГОРИИ	
	// **************
	Запрос = Новый Запрос;	 	   	   
	Запрос.Текст = "ВЫБРАТЬ
	|	КатегорииОбъектов.Ссылка
	|ПОМЕСТИТЬ втКатегории
	|ИЗ
	|	Справочник.КатегорииОбъектов КАК КатегорииОбъектов
	|ГДЕ
	//    |	КатегорииОбъектов.Наименование = &Наименование
	|	КатегорииОбъектов.НазначениеКатегории = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура)
	|;
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	//				   |	КатегорииОбъектов.Объект ,
	|	КатегорииОбъектов.Категория
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	|ГДЕ
	|	КатегорииОбъектов.Объект = &Владелец
	|	И КатегорииОбъектов.Категория В (ВЫБРАТЬ * ИЗ втКатегории)
	|//////////////////////////////////////////////
	|";
	Запрос.УстановитьПараметр("Владелец", НоменклатураИсходная);	
	РезультатЗапроса = Запрос.Выполнить();                                    		
	ВыборкаКатегории = РезультатЗапроса.Выбрать(); 
	
	Пока ВыборкаКатегории.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаКатегории.Категория) Тогда	
			
			стрКатегория = СокрЛП(Строка(ВыборкаКатегории.Категория));
			//НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Категории");			 
			//Если НайденоСвойство_УТ11.Пустая() Тогда
			//	
			//Иначе
			
			//	Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, ВыборкаКатегории.Категория) Тогда
			//	//	//Продолжить;
			//	КонецЕсли;
			//КонецЕсли;
			
			
		КонецЕсли;
	КонецЦикла;
	
	Если стрКатегория <> "" Тогда
		
		СтруктураКатегория = Новый Структура("Категория, Подкатегория");
		СтруктураКатегория.Категория = стрКатегория;
		СтруктураКатегория.Подкатегория = стрКатегория;       
		//	_Рекв(НовыйЭлемент, "_5LB_Категория", стрКатегория);
		Если стрПодкатегория <> "" Тогда
			СтруктураКатегория.Подкатегория = стрПодкатегория;
		КонецЕсли;
		
		ЗначСвойства = "Категория";
		НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЗначСвойства);			 
		Если НайденоСвойство_УТ11.Пустая() Тогда
			Если бСообщать Тогда 
				Сообщить("Не удалось найти доп.реквизит (свойство) """ + ЗначСвойства + """!", СтатусСообщения.Важное);
			КонецЕсли;		
		Иначе	
			Если НЕ ЗаписатьДопРеквизит(НоменклатураУТ11Объект, НайденоСвойство_УТ11, СтруктураКатегория) Тогда
				//		Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, НоменклатураИсходная.Фасовка) Тогда
				Если бСообщать Тогда 
					Сообщить("Не удалось записать доп.реквизит (свойство) """ + ЗначСвойства + """ со значением """ + стрКатегория + """!", СтатусСообщения.Важное);		
				КонецЕсли;
				//	Продолжить;
			КонецЕсли;  
		КонецЕсли; 
		
		
	КонецЕсли;  // Категория
	
	
	// **************
	// БрендДляПечати	
	// **************
	стрБрендДляПечати = "";	
	стрРодитель = Строка(НоменклатураИсходная.Родитель);
	позРазд = Найти (стрРодитель, "_");
	Если позРазд > 0 Тогда
		стрБрендДляПечати = Сред(стрРодитель, позРазд + 1);
	КонецЕсли;
	Если стрБрендДляПечати <> "" Тогда
		//ЗначСвойства = "БрендДляПечати";
		ИмяПсевдонима = "БрендДляПечати";			 
		ЗначСвойства = ОбщегоНазначения5LB.ПолучитьПсевдоним(ИмяПсевдонима, "Интеграция", ИмяПсевдонима); 
		НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЗначСвойства);			 
		Если НайденоСвойство_УТ11.Пустая() Тогда
			Если бСообщать Тогда 
				Сообщить("Не удалось найти доп.реквизит (свойство) """ + ЗначСвойства + """!", СтатусСообщения.Важное);
			КонецЕсли;		
		Иначе	
			Если НЕ ЗаписатьДопРеквизит(НоменклатураУТ11Объект, НайденоСвойство_УТ11, стрБрендДляПечати) Тогда
				//		Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, НоменклатураИсходная.Фасовка) Тогда
				Если бСообщать Тогда 
					Сообщить("Не удалось записать доп.реквизит (свойство) """ + ЗначСвойства + """ со значением """ + стрБрендДляПечати + """!", СтатусСообщения.Важное);		
				КонецЕсли;
				//	Продолжить;
			КонецЕсли;  
		КонецЕсли;  
	КонецЕсли;
	
	
	// Страна происхождения	
	стрСтрана = ВРег(СокрЛП(Строка(НоменклатураИсходная.СтранаПроисхождения)));	 
	Если стрСтрана <> "" Тогда
		//ЗначСвойства = "СтранаПроисхождения";
		ИмяПсевдонима = "СтранаПроисхождения";			 
		ЗначСвойства = ОбщегоНазначения5LB.ПолучитьПсевдоним(ИмяПсевдонима, "Интеграция", ИмяПсевдонима); 
		НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЗначСвойства);			 
		Если НайденоСвойство_УТ11.Пустая() Тогда
			Если бСообщать Тогда 
				Сообщить("Не удалось найти доп.реквизит (свойство) """ + ЗначСвойства + """!", СтатусСообщения.Важное);
			КонецЕсли;		
		Иначе	
			Если НЕ ЗаписатьДопРеквизит(НоменклатураУТ11Объект, НайденоСвойство_УТ11, стрСтрана) Тогда
				//		Если НЕ ЗаписатьДопСвойство(НоваяНоменклатураССылка, НайденоСвойство_УТ11, НоменклатураИсходная.Фасовка) Тогда
				Если бСообщать Тогда 
					Сообщить("Не удалось записать доп.реквизит (свойство) """ + ЗначСвойства + """ со значением """ + стрБрендДляПечати + """!", СтатусСообщения.Важное);		
				КонецЕсли;
				//	Продолжить;
			КонецЕсли;  
		КонецЕсли;  
	КонецЕсли;
	
	
	// 02.02.17
	Если НоменклатураУТ11Объект._5LB_ДатаСоздания = Дата(1,1,1) Тогда
		_Рекв(НоменклатураУТ11Объект, "_5LB_ДатаСоздания", ТекущаяДата(), Истина);
	КонецЕсли;
	_Рекв(НоменклатураУТ11Объект, "_5LB_ДатаИзменения", ТекущаяДата(), Истина);
	_Рекв(НоменклатураУТ11Объект, "_5LB_Пользователь", ПараметрыСеанса.ТекущийПользователь, Истина);
	
	Если СокрЛП(НоменклатураУТ11Объект._5LB_ПоследнееИзменение) <> "" Тогда
		//Если СтрДлина(СокрЛП(НоменклатураУТ11Объект._5LB_ПоследнееИзменение)) <= 180 Тогда			
		стрСодержаниеИзменения = стрСодержаниеИзменения + " (" + Строка(ПараметрыСеанса.ТекущийПользователь) + ")"			
		+ Символы.ПС 
		+ СокрЛП(НоменклатураУТ11Объект._5LB_ПоследнееИзменение);
		//КонецЕсли;	
	КонецЕсли;
	_Рекв(НоменклатураУТ11Объект, "_5LB_ПоследнееИзменение", стрСодержаниеИзменения, Истина);
	
	
	
	// финальная запись
	Попытка
		НоменклатураУТ11Объект.Записать();
		Если бСообщать Тогда 
			Сообщить("Обновлена номенклатура УТ-11 """ + Строка(НоменклатураУТ11Объект) + """!");
		КонецЕсли;	
		//НоваяНоменклатураССылка	= НовыйЭлемент.Ссылка;
		РезОбновления = Истина;
	Исключение
		//НоваяНоменклатураССылка = НоваяНоменклатураПустая;
		Если бСообщать Тогда 
			Сообщить("Не удалось обновить номенклатуру  УТ-11 """ + Строка(НоменклатураУТ11Объект) + """!", СтатусСообщения.Важное);	
		КонецЕсли;
		//	Сообщить("Не удалось создать новую номенклатуру  УТ-11 """ + стрНаименование + """!", СтатусСообщения.Важное);	
	КонецПопытки; 
	
	
	//	КонецЕсли;
	//	// если новый элемент - создать
	
	//	Если РезОбновления Тогда 	// если н-ра УТ-11 обновлена
	//	
	//	//	// характеристика
	//	//	НоваяХарактеристика = Неопределено;
	//	//	стрХарактеристика = СокрЛП(Характеристика_УТ11_Наименование);
	//	//	Если стрХарактеристика <> "" Тогда		
	//	//		Если ЗначениеЗаполнено(НоваяНоменклатураССылка) Тогда 				
	//	////		Характеристика_УТ11_Наименование                  
	//	//			НоваяХарактеристика = НайтиСоздатьХарактеристику(НоваяНоменклатураССылка, стрХарактеристика, бСообщать);
	//	//		КонецЕсли;
	//	//	КонецЕсли;
	//		
	//		// штрих-код
	//		бСинхронизироватьШК = Ложь;
	//		Если НоваяХарактеристика <> Неопределено Тогда
	//			бСинхронизироватьШК = Истина;
	//		Иначе
	//			Запрос = Новый Запрос;
	//			Запрос.Текст = 
	//				"ВЫБРАТЬ
	//				|	РегистрСведенийШтрихкод.Штрихкод
	//				|ИЗ
	//				|	РегистрСведений._ШтрихкодыНоменклатуры КАК РегистрСведенийШтрихкод
	//				|ГДЕ
	//				|	РегистрСведенийШтрихкод.Номенклатура = &НоменклатураССылка
	//				|	И РегистрСведенийШтрихкод.Характеристика = &Характеристика
	//				//|	И _ШтрихкодыНоменклатуры.Упаковка = &Упаковка
	//				|";        		
	//			Запрос.УстановитьПараметр("НоменклатураССылка", 	НоваяНоменклатураССылка);
	//			//Запрос.УстановитьПараметр("Упаковка", 		Упаковка);
	//			Запрос.УстановитьПараметр("Характеристика", НоваяХарактеристика);	
	//			РезультатЗапроса = Запрос.Выполнить();	
	//			Если РезультатЗапроса.Пустой() Тогда
	//				бСинхронизироватьШК = Истина;	
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если бСинхронизироватьШК Тогда
	//			СинхронизироватьШтрихКод(НоменклатураИсходная, НоваяНоменклатураССылка, НоваяХарактеристика);
	//		КонецЕсли;
	//		
	//	КонецЕсли;              // если н-ра УТ-11 обновлена
	
	//ОбрСоотв.СинхронизироватьШтрихКод(НоменклатураУТ11Объект, Номенклатура_УТ11, ХарактеристикаУТ11);
	
	//	Возврат НоваяНоменклатураССылка;
	
	
	Возврат РезОбновления;
	
КонецФункции

// обновление реквизитов номенклатуры УТ-11 уже ранее созданной (без обн.ед.изм., категорий, доп.свед., штрих-кодов)
Функция ОбновитьНоменклатуруСРеквизитамиБезДопРекв(НоменклатураИсходная, Номенклатура_УТ11, 
	Характеристика_УТ11=Неопределено, бСообщать=Истина, стрСодержаниеИзменения = "") Экспорт
	
	РезОбновления = Истина;
	
	// Проверка 
	бПроверка = Истина;
	Если НЕ ЗначениеЗаполнено(НоменклатураИсходная) Тогда
		Если бСообщать Тогда Сообщить("Не задана старая номенклатура УТ-10 на основании который происходит попытка обновления номенклатуры УТ-11!"); КонецЕсли;		
		РезОбновления = Ложь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Номенклатура_УТ11) Тогда
		Если бСообщать Тогда Сообщить("Не задана ссылка на новую номенклатуру в УТ-11!"); КонецЕсли;
		//Возврат НоваяНоменклатураПустая;
		РезОбновления = Ложь;		
	КонецЕсли;	
	
	Если НЕ РезОбновления Тогда		
		Возврат РезОбновления;
	КонецЕсли;
	
	
	
	// Группа
	Если ЗначениеЗаполнено(НоменклатураИсходная.Родитель) Тогда
		НоменклатураНоваяГруппа = НайтиКаталогУТПоГруппеНоменклатуры(НоменклатураИсходная.Родитель);
		Если НЕ ЗначениеЗаполнено(НоменклатураНоваяГруппа) Тогда	
			Если бСообщать Тогда Сообщить("Не задано соответствие для группы в УТ-11 """ +
				НоменклатураИсходная.Родитель.Наименование + """!");
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;		
	КонецЕсли;	
	
	//ПараметрыСеанса._Номенклатура_УТ11_Блокировать = Истина;	// блокировка для автоименений подчиненных объектов
	//
	НоменклатураУТ11Объект = Номенклатура_УТ11.Ссылка.ПолучитьОбъект();			
	//_Рекв(НоменклатураУТ11Объект, "Наименование", стрНаименование);	
	//НовыйЭлемент.НаименованиеПолное = НоменклатураИсходная.Комментарий;  
	
	//стрНаименование
	//стрДляПечатиКомментарий = СокрЛП(НоменклатураИсходная.Комментарий);
	//стрДляПечати = стрДляПечатиКомментарий;
	//Если стрДляПечати <> "" Тогда
	//	стрДляПечатиНаименование = СтрЗаменить(НоменклатураИсходная.Наименование, стрНаименование, "");	
	//	Если стрДляПечатиНаименование <> "" Тогда  
	//    	стрДляПечати = СтрЗаменить(стрДляПечатиКомментарий, стрДляПечатиНаименование, "");
	//	КонецЕсли;
	//КонецЕсли;
	//Если стрДляПечати = "" Тогда
	//	стрДляПечати = стрНаименование;
	//КонецЕсли;
	
	//_Рекв(НовыйЭлемент, "НаименованиеПолное", стрДляПечати);	
	
	_Рекв(НоменклатураУТ11Объект, "Производитель", Строка(НоменклатураИсходная.СтранаПроисхождения));
	//_Рекв(НоменклатураУТ11Объект, "ВидНоменклатуры", НайденВидНоменклатуры);
	//_Рекв(НоменклатураУТ11Объект, "ВариантОформленияПродажи", Перечисления._ВариантыОформленияПродажи_УТ11.РеализацияТоваровУслуг);
	//_Рекв(НоменклатураУТ11Объект, "Качество", Перечисления._ГрадацииКачества_УТ11.Новый);
	_Рекв(НоменклатураУТ11Объект, "СтавкаНДС", Перечисления.СтавкиНДС.НДС18);
	
	//НовыйЭлемент.Родитель = НоменклатураНоваяГруппа.Ссылка;
	_Рекв(НоменклатураУТ11Объект, "Родитель", НоменклатураНоваяГруппа.Ссылка);
	
	// если есть вес
	Если НоменклатураИсходная.Вес >  0 Тогда		
		НоменклатураУТ11Объект.ВесИспользовать = Истина;
		НоменклатураУТ11Объект.ВесЗнаменатель = 1;
		НоменклатураУТ11Объект.ВесЧислитель = НоменклатураИсходная.Вес / 1000;
	КонецЕсли;	
	
	// если есть объем
	Если НоменклатураИсходная.Объем >  0 Тогда		
		НоменклатураУТ11Объект.ОбъемИспользовать = Истина;
		НоменклатураУТ11Объект.ОбъемЗнаменатель = 1;
		НоменклатураУТ11Объект.ОбъемЧислитель = НоменклатураИсходная.Объем; // / 1000;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НоменклатураИсходная.БазоваяЕдиницаИзмерения) Тогда		
	КонецЕсли;		
	
	
	Справочники._Номенклатура_УТ11._ЗаполнитьРеквизитыПоВидуНоменклатуры(НоменклатураУТ11Объект);
	
	// Единицы измерения		
	// Базовая
	
	//БазоваяЕдИзм = Справочники.ЕдиницыИзмерения.ПустаяСсылка();	
	////БазоваяЕдИзм_УТ11 = Справочники._УпаковкиЕдиницыИзмерения_УТ11.ПустаяСсылка();
	//БазоваяЕдИзм_УТ11 = НайтиСоздатьБазовуюЕдИзм(НоменклатураИсходная.БазоваяЕдиницаИзмерения);
	//
	//Если ЗначениеЗаполнено(БазоваяЕдИзм_УТ11) Тогда
	//	Если БазоваяЕдИзм_УТ11 <> НоменклатураУТ11Объект.ЕдиницаИзмерения Тогда	
	//		_Рекв(НоменклатураУТ11Объект, "ЕдиницаИзмерения", БазоваяЕдИзм_УТ11);	
	//	КонецЕсли;			
	//КонецЕсли;
	
	БазоваяЕдИзм = НоменклатураИсходная.БазоваяЕдиницаИзмерения; ///Справочники.ЕдиницыИзмерения.ПустаяСсылка();	
	БазоваяЕдИзмНаименование = СокрЛП(Строка(БазоваяЕдИзм));
	//БазоваяЕдИзм_УТ11 = Справочники._УпаковкиЕдиницыИзмерения_УТ11.ПустаяСсылка();	
	// заплатка для исправления упак в кач-ве базовых!
	Если БазоваяЕдИзмНаименование <> "шт" Тогда
		Сообщить("Базовая ед.изм. не может быть """ + БазоваяЕдИзмНаименование + """! исправлено на ""шт""", СтатусСообщения.Важное);
		БазоваяЕдИзмНаименование = "шт";
	КонецЕсли;
	//БазоваяЕдИзм_УТ11 = НайтиСоздатьБазовуюЕдИзм(НоменклатураИсходная.БазоваяЕдиницаИзмерения);
	БазоваяЕдИзм_УТ11 = НайтиСоздатьБазовуюЕдИзм(БазоваяЕдИзмНаименование);                        							
	Если ЗначениеЗаполнено(БазоваяЕдИзм_УТ11) Тогда
		//		НовыйЭлемент.ЕдиницаИзмерения = БазоваяЕдИзм_УТ11;
		_Рекв(НоменклатураУТ11Объект, "ЕдиницаИзмерения", БазоваяЕдИзм_УТ11);	
	КонецЕсли;
	
	
	
	// описание товара
	стрОписание = СокрЛП(НоменклатураИсходная.ДополнительноеОписаниеНоменклатуры);	
	Если стрОписание <> "" Тогда
		//НовыйЭлемент.ОписаниеТовара = СокрЛП(НоменклатураИсходная.ДополнительноеОписаниеНоменклатуры);
		//НовыйЭлемент._5LB_ДополнительноеОписаниеНоменклатуры = СокрЛП(НоменклатураИсходная.ДополнительноеОписаниеНоменклатуры);		
		_Рекв(НоменклатураУТ11Объект, "ОписаниеТовара", стрОписание);	
		_Рекв(НоменклатураУТ11Объект, "_5LB_ДополнительноеОписаниеНоменклатуры", стрОписание);	
	КонецЕсли;	
	
	
	// 02.02.17
	Если НоменклатураУТ11Объект._5LB_ДатаСоздания = Дата(1,1,1) Тогда
		_Рекв(НоменклатураУТ11Объект, "_5LB_ДатаСоздания", ТекущаяДата(), Истина);
	КонецЕсли;
	_Рекв(НоменклатураУТ11Объект, "_5LB_ДатаИзменения", ТекущаяДата(), Истина);
	_Рекв(НоменклатураУТ11Объект, "_5LB_Пользователь", ПараметрыСеанса.ТекущийПользователь, Истина);
	
	Если СокрЛП(НоменклатураУТ11Объект._5LB_ПоследнееИзменение) <> "" Тогда
		//Если СтрДлина(СокрЛП(НоменклатураУТ11Объект._5LB_ПоследнееИзменение)) <= 180 Тогда			
		стрСодержаниеИзменения = стрСодержаниеИзменения + " (" + Строка(ПараметрыСеанса.ТекущийПользователь) + ")"
		+ Символы.ПС 
		+ СокрЛП(НоменклатураУТ11Объект._5LB_ПоследнееИзменение);
		//КонецЕсли;	
	КонецЕсли;	
	_Рекв(НоменклатураУТ11Объект, "_5LB_ПоследнееИзменение", стрСодержаниеИзменения, Истина);
	
	
	//// ***********************
	//// Перед заполнением ед.изм. и доп.реквзитов записать новый объект!	
	Попытка
		НоменклатураУТ11Объект.Записать();
		//	Если бСообщать Тогда Сообщить("Создана новая номенклатура УТ-11 """ + стрНаименование + """!"); КонецЕсли;
		//	НоменклатураУТ11ССылка	= НоменклатураУТ11Объект.Ссылка;	
	Исключение
		//	//Сообщить("Не удалось создать новую номенклатуру  УТ-11 """ + стрНаименование + """!", СтатусСообщения.Важное);	
		Если бСообщать Тогда Сообщить("Не удалось обновить номенклатуру  УТ-11 """ + Строка(Номенклатура_УТ11) + """!", СтатусСообщения.Важное); КонецЕсли;
		РезОбновления = Ложь;
		Возврат РезОбновления;
	КонецПопытки;   	
	
	
	Возврат РезОбновления;
	
КонецФункции


// Функция - булево - проверка, участвует ли н-ра в обмене с УТ-11
Функция НоменклатураЕстьПраваДляОбмена(НоменклатураИсходная, бСообщать=Ложь) Экспорт
	
	//ЕстьПрава = Истина;
	ЕстьПрава  = (РольДоступна("НСИ_УТ11") ИЛИ РольДоступна("НСИ_УТ11_ПолныеПрава"));
	Если НЕ ЕстьПрава Тогда
		Если бСообщать Тогда	
			Сообщить("Не достаточно прав для синхронизации номенклатуры УТ-10 и УТ-11! Обратитесь к администратору!", СтатусСообщения.Важное);
		КонецЕсли;	
	КонецЕсли;		
	
	Возврат ЕстьПрава;
	
КонецФункции

// Функция - булево - проверка, участвует ли н-ра в обмене с УТ-11
Функция НоменклатураДоступнаДляОбмена(НоменклатураИсходная) Экспорт
	
	бУчаствует = НЕ (НоменклатураИсходная._5LB_НеУчаствуетВСинхронизации 
	ИЛИ НоменклатураИсходная.Родитель._5LB_НеУчаствуетВСинхронизации
	ИЛИ НоменклатураИсходная.Родитель.Родитель._5LB_НеУчаствуетВСинхронизации);	
	
	Возврат бУчаствует;
	
КонецФункции


//////////////////////////////////////////////////////////////////
// Характеристики

Функция НайтиСоздатьХарактеристику(Владелец, Характеристика_УТ11_Наименование, бСообщать=Истина,НоменклатураИсходная) Экспорт
	
	ХарактеристикаПустая = Справочники._ХарактеристикиНоменклатуры_УТ11.ПустаяСсылка();
	
	стрХарактеристика = НРег(СокрЛП(Характеристика_УТ11_Наименование));
	
	// Проверка 
	бПроверка = Истина;
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда
		Если бСообщать Тогда Сообщить("Не задана старая номенклатура УТ-10 на основании который происходит попытка создать новую характеристику в УТ-11!"); КонецЕсли;		
		бПроверка = Ложь;
	КонецЕсли;	
	стрНаименование = СокрЛП(Характеристика_УТ11_Наименование);
	//{+НАЧАЛО+Изменения} Автор: Тасмаджиев 02/03/2018//=============================================================================================
	//Если стрХарактеристика = "" Тогда
	//	Если бСообщать Тогда Сообщить("Не задано наименование характерситики номенклатуры в УТ-11!"); КонецЕсли;
	//	бПроверка = Ложь;
	//	//Возврат НоваяНоменклатураПустая;
	//КонецЕсли;
	//{-КОНЕЦ-Изменения} Автор: Тасмаджиев 02/03/2018//==============================================================================================
	
	//{+НАЧАЛО+Редактирования} Автор: Тасмаджиев 02/03/2018//=============================================================================================
	Если НЕ бПроверка ИЛИ НоменклатураИсходная.ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда		
		Возврат ХарактеристикаПустая;
	КонецЕсли;
	//{-КОНЕЦ-Редактирования} Автор: Тасмаджиев 02/03/2018//==============================================================================================
	
	//НоваяХарактеристикаССылка
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХарактеристикиН.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник._ХарактеристикиНоменклатуры_УТ11 КАК ХарактеристикиН
	|ГДЕ
	|	НЕ ХарактеристикиН.ПометкаУдаления 
	|	И ХарактеристикиН.Владелец = &Владелец
	|	И ХарактеристикиН.Наименование = &Наименование
	|";	
	Запрос.УстановитьПараметр("Владелец", 			Владелец);		
	Запрос.УстановитьПараметр("Наименование", 		стрХарактеристика); 	
	РезультатЗапроса = Запрос.Выполнить();                              	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	НайденаХарактеристика = ХарактеристикаПустая;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденаХарактеристика = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НайденаХарактеристика) Тогда
		НоваяХарактеристикаССылка = НайденаХарактеристика;
	Иначе
		
		НовыйЭлемент = Справочники._ХарактеристикиНоменклатуры_УТ11.СоздатьЭлемент();				
		НовыйЭлемент.Наименование = ?(ЗначениеЗаполнено(стрНаименование),стрНаименование,"Без характеритмики");
		НовыйЭлемент._5LB_ДатаСоздания = ТекущаяДата();
		НовыйЭлемент.Владелец =  Владелец;
		Попытка
			НовыйЭлемент.Записать();
			Если бСообщать Тогда 
				Сообщить("Создана новая характеристика УТ-11 """ + стрНаименование + """ (""" + Строка(Владелец) + """)!");
			КонецЕсли;	
			НоваяХарактеристикаССылка	= НовыйЭлемент.Ссылка;	
		Исключение
			НоваяХарактеристикаССылка = ХарактеристикаПустая;
			Если бСообщать Тогда 
				Сообщить("Не удалось создать новую характеристику  УТ-11 """ + стрНаименование + """ (""" + Строка(Владелец) + """)!", СтатусСообщения.Важное);	
			КонецЕсли;
			//	Сообщить("Не удалось создать новую номенклатуру  УТ-11 """ + стрНаименование + """!", СтатусСообщения.Важное);	
		КонецПопытки; 	
		
	КонецЕсли;
	
	
	Возврат НоваяХарактеристикаССылка;
	
	
КонецФункции

// вх.данные - могут быть 2-х типов "строка" или "КлассификаторЕдиницИзмерения"
Функция НайтиСоздатьБазовуюЕдИзм(БазоваяЕдиницаИзмерения)
	
	Рез = Справочники._УпаковкиЕдиницыИзмерения_УТ11.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда	// если есть входящие данные		
		
		БазоваяЕдИзмНаименование = "";    
		КлассификаторЕдИзм = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		
		Если ТипЗнч(БазоваяЕдиницаИзмерения) =  Тип("Строка") Тогда		
			БазоваяЕдИзмНаименование = БазоваяЕдиницаИзмерения;
			ЗапросК = Новый Запрос;
			ЗапросК.Текст = 
			"ВЫБРАТЬ
			|	КлассификаторЕдиницИзмерения.Ссылка
			|ИЗ
			|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
			|ГДЕ
			|	КлассификаторЕдиницИзмерения.Наименование = &Наименование
			|	И НЕ КлассификаторЕдиницИзмерения.ПометкаУдаления";
			ЗапросК.УстановитьПараметр("Наименование", 	БазоваяЕдИзмНаименование);			
			РезультатЗапроса = ЗапросК.Выполнить();                                			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				КлассификаторЕдИзм =  ВыборкаДетальныеЗаписи.Ссылка;
				Прервать;
			КонецЦикла;		
			
		ИначеЕсли ТипЗнч(БазоваяЕдиницаИзмерения) =  Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда			
			БазоваяЕдИзмНаименование = Строка(БазоваяЕдиницаИзмерения);
			КлассификаторЕдИзм = БазоваяЕдиницаИзмерения;			 
		Иначе
			
		КонецЕсли;	
		
		Если БазоваяЕдИзмНаименование <> "" Тогда  //  если базовая ед.найдена
			
			//Если БазоваяЕдИзмНаименование <> "шт" Тогда
			//	Сообщить("Базовая ед.изм. не может быть """ + БазоваяЕдИзмНаименование + """! исправлено на ""шт""", СтатусСообщения.Важное);
			//	БазоваяЕдИзмНаименование = "шт";
			//КонецЕсли; 
			НаборБазовой = Справочники._НаборыУпаковок_УТ11.БазовыеЕдиницыИзмерения;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	УпаковкиЕдиницыИзмерения_УТ11.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник._УпаковкиЕдиницыИзмерения_УТ11 КАК УпаковкиЕдиницыИзмерения_УТ11
			|ГДЕ
			|	УпаковкиЕдиницыИзмерения_УТ11.Владелец = &Владелец
			|	И УпаковкиЕдиницыИзмерения_УТ11.Наименование = &Наименование
			|";
			Запрос.УстановитьПараметр("Владелец", 		НаборБазовой.Ссылка);
			Запрос.УстановитьПараметр("Наименование", 	БазоваяЕдИзмНаименование);					
			РезультатЗапроса = Запрос.Выполнить(); 		
			
			Если РезультатЗапроса.Пустой() Тогда
				//Сообщить("Не задано ни одного вида номнеклатуры!");
				//Возврат  НоваяНоменклатураССылка;
				НовыйЭлементУпаковка 						= Справочники._УпаковкиЕдиницыИзмерения_УТ11.СоздатьЭлемент();
				НовыйЭлементУпаковка.Владелец 				= НаборБазовой.Ссылка;
				НовыйЭлементУпаковка.Код					= БазоваяЕдИзмНаименование;			
				НовыйЭлементУпаковка.Наименование     		= БазоваяЕдИзмНаименование;	
				НовыйЭлементУпаковка.НаименованиеПолное 	= КлассификаторЕдИзм.НаименованиеПолное;	
				НовыйЭлементУпаковка.МеждународноеСокращение = КлассификаторЕдИзм.МеждународноеСокращение;
				НовыйЭлементУпаковка.Числитель				= 1;
				НовыйЭлементУпаковка.Знаменатель			= 1;
				Попытка
					НовыйЭлементУпаковка.Записать();
					//Сообщить("Создана новая номенклатура УТ-11 """ + стрНаименование + """!");
					Рез	= НовыйЭлементУпаковка.Ссылка;	
				Исключение
					Сообщить("Не удалось создать новую базовую ед.изм  УТ-11 """ + БазоваяЕдИзмНаименование + " (классиф.=" + Строка(КлассификаторЕдИзм) + ")""!", СтатусСообщения.Важное);	
				КонецПопытки; 
			Иначе
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				Рез = Выборка.Ссылка;
			КонецЕсли; 
			
		КонецЕсли;  //  если базовая ед.найдена
		
	КонецЕсли; // если есть входящие данные
	
	Возврат Рез;
	
КонецФункции	

Функция НайтиСоздатьЕдиницыИзмерения(Владелец, Номенклатура_УТ11, бСообщать=Истина) Экспорт
	
	ЕдИзмПустая = Неопределено;
	//Справочники._УпаковкиЕдиницыИзмерения_УТ11.ПустаяСсылка();
	
	// Проверка 
	бПроверка = Истина;
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда
		Если бСообщать Тогда Сообщить("Не задана старая номенклатура УТ-10 на основании который происходит попытка создать новую ед.изм. в УТ-11!"); КонецЕсли;		
		бПроверка = Ложь;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Номенклатура_УТ11) Тогда
		Если бСообщать Тогда Сообщить("Не задана новая номенклатура в УТ-11!"); КонецЕсли;
		бПроверка = Ложь;
		//Возврат НоваяНоменклатураПустая;
	КонецЕсли;
	
	Если НЕ бПроверка Тогда		
		Возврат ЕдИзмПустая;
	КонецЕсли;
	
	ЕдИзмСсылка = ЕдИзмПустая;
	
	
	Запрос = Новый Запрос;	 	   	   
	Запрос.Текст = "ВЫБРАТЬ
	|	УпаковкиЕдИзм_УТ11.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	УпаковкиЕдИзм_УТ11.Ссылка КАК УпаковкиСсылка,
	|	УпаковкиЕдИзм_УТ11.Числитель КАК Коэффициент
	|ПОМЕСТИТЬ втУпаковкиЕдиницыИзмерения_УТ11
	|ИЗ
	|	Справочник._УпаковкиЕдиницыИзмерения_УТ11 КАК УпаковкиЕдИзм_УТ11
	|ГДЕ
	|	УпаковкиЕдИзм_УТ11.Владелец = &НоваяНоменклатура
	|	И НЕ УпаковкиЕдИзм_УТ11.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиЕдИзм_УТ10.ПометкаУдаления КАК ПометкаУдаления,
	|	УпаковкиЕдИзм_УТ10.ЕдиницаПоКлассификатору КАК ЕдиницаПоКлассификатору,
	|	УпаковкиЕдИзм_УТ10.Ссылка КАК УпаковкиСсылка,
	|	УпаковкиЕдИзм_УТ10.Коэффициент КАК Коэффициент,
	|	УпаковкиЕдИзм_УТ10.Вес,
	|	УпаковкиЕдИзм_УТ10.Объем,
	|	УпаковкиЕдИзм_УТ10.Ширина,
	|	УпаковкиЕдИзм_УТ10.Высота,
	|	УпаковкиЕдИзм_УТ10.Глубина,
	|	УпаковкиЕдИзм_УТ10.Владелец,
	|	УпаковкиЕдИзм_УТ10.Представление
	|ПОМЕСТИТЬ втУпаковкиЕдиницыИзмерения_УТ10
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК УпаковкиЕдИзм_УТ10
	|ГДЕ
	//	               |	УпаковкиЕдИзм_УТ10.Владелец = &Владелец	               			
	|	УпаковкиЕдИзм_УТ10.Владелец В 
	|		(ВЫБРАТЬ ТСоотв.Номенклатура КАК Владелец ИЗ РегистрСведений._СоответствияНоменклатуры КАК ТСоотв
	|		 ГДЕ ТСоотв.Номенклатура_УТ11 = &НоваяНоменклатура)
	|;	               
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕдиницыИзмерения.УпаковкиСсылка КАК УпаковкиСсылка_УТ10,
	|	ЕдиницыИзмерения.Вес,
	|	ЕдиницыИзмерения.Объем,
	|	ЕдиницыИзмерения.Коэффициент,
	|	ЕдиницыИзмерения.Ширина,
	|	ЕдиницыИзмерения.Высота,
	|	ЕдиницыИзмерения.Глубина,
	|	ЕдиницыИзмерения.Владелец,
	|	ЕдиницыИзмерения.Представление,
	|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаПоКлассификатору,
	|	УпаковкиЕдиницыИзмерения_УТ11.УпаковкиСсылка КАК УпаковкиСсылка_УТ11,
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения_УТ11.УпаковкиСсылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФлагСоздатьНовуюУпаковку
	|ИЗ
	|	втУпаковкиЕдиницыИзмерения_УТ10 КАК ЕдиницыИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУпаковкиЕдиницыИзмерения_УТ11 КАК УпаковкиЕдиницыИзмерения_УТ11
	|		ПО (УпаковкиЕдиницыИзмерения_УТ11.ЕдиницаИзмерения.Наименование = ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Наименование)
	|			И (УпаковкиЕдиницыИзмерения_УТ11.Коэффициент = ЕдиницыИзмерения.Коэффициент)
	|ГДЕ
	|	НЕ ЕдиницыИзмерения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения_УТ11.УпаковкиСсылка КАК УпУТ11,
	|	ЕдиницыИзмерения.УпаковкиСсылка КАК ЕдУТ10,
	|	ЕдиницыИзмерения.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ЕдиницыИзмерения.ПометкаУдаления ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕдиницыИзмерения.ПометкаУдаления
	|	КОНЕЦ КАК ФлагПометкаУдаления
	|ИЗ
	|	втУпаковкиЕдиницыИзмерения_УТ11 КАК УпаковкиЕдиницыИзмерения_УТ11
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУпаковкиЕдиницыИзмерения_УТ10 КАК ЕдиницыИзмерения
	|		ПО УпаковкиЕдиницыИзмерения_УТ11.ЕдиницаИзмерения.Наименование = ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Наименование
	|			И УпаковкиЕдиницыИзмерения_УТ11.Коэффициент = ЕдиницыИзмерения.Коэффициент";
	
	Запрос.УстановитьПараметр("Владелец", 			Владелец.ССылка);
	Запрос.УстановитьПараметр("НоваяНоменклатура", 	Номенклатура_УТ11);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();  
	ВыборкаИзм = РезультатЗапроса[2].Выбрать();
	ВыборкаУдал = РезультатЗапроса[3].Выбрать();
	
	стрУп = "";
	ЕдИзмСсылка = Справочники._УпаковкиЕдиницыИзмерения_УТ11.ПустаяСсылка();
	
	Пока ВыборкаИзм.Следующий() Цикл
		
		Если ВыборкаИзм.ФлагСоздатьНовуюУпаковку Тогда
			
			// все ед.изм. NoName - прочь!
			Если НЕ ЗначениеЗаполнено(ВыборкаИзм.ЕдиницаПоКлассификатору) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка  
				
				стрУп = ВыборкаИзм.Представление;				
				Знаменатель = 1;
				
				НоваяУпаковка = Справочники._УпаковкиЕдиницыИзмерения_УТ11.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(НоваяУпаковка, ВыборкаИзм);
				
				НоваяУпаковка.Владелец = Номенклатура_УТ11;
				//НоваяУпаковка.Наименование = стрУп;		
				
				НоваяУпаковка.Числитель = ВыборкаИзм.Коэффициент;
				НоваяУпаковка.Знаменатель = Знаменатель;
				
				// Ед.изм.
				ЕдИзм = НайтиСоздатьБазовуюЕдИзм(ВыборкаИзм.ЕдиницаПоКлассификатору);
				БазоваяЕдИзм = НайтиСоздатьБазовуюЕдИзм(ВыборкаИзм.Владелец.БазоваяЕдиницаИзмерения);												
				БазоваяЕдИзмВладельца = Номенклатура_УТ11.ЕдиницаИзмерения;
				
				НоваяУпаковка.ЕдиницаИзмерения  = ЕдИзм;				
				//НоваяУпаковка.Наименование = СформироватьНаименование(стрУп, БазоваяЕдИзм, ВыборкаДетальныеЗаписи.Коэффициент, Знаменатель);
				НоваяУпаковка.Наименование = СформироватьНаименование(стрУп, БазоваяЕдИзмВладельца, ВыборкаИзм.Коэффициент, Знаменатель);
				
				
				НоваяУпаковка.Записать();
				ЕдИзмСсылка = НоваяУпаковка.Ссылка;								
				
			Исключение
				Если бСообщать Тогда 
					Сообщить("Не удалось создать новую упаковку для номенклатуры  УТ-11 """ + стрУп + """!", СтатусСообщения.Важное);
				КонецЕсли;
				Продолжить;
			КонецПопытки;  
			//
		Иначе
			ЕдИзмСсылка = ВыборкаИзм.УпаковкиСсылка_УТ11;
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ВыборкаУдал.Следующий() Цикл		
		Если ВыборкаУдал.ФлагПометкаУдаления Тогда						
			Попытка  				
				УпУдал = ВыборкаУдал.УпУТ11.ПолучитьОбъект();
				УпУдал.УстановитьПометкуУдаления(Истина);				
				УпУдал.Записать();										
			Исключение
				Если бСообщать Тогда 
					Сообщить("Не удалось пометить на удаление упаковку для номенклатуры  УТ-11 """ + Строка(УпУдал) + """!", СтатусСообщения.Важное);
				КонецЕсли;
				Продолжить;
			КонецПопытки;  
		КонецЕсли;			
	КонецЦикла;
	
	
	Возврат ЕдИзмСсылка;
	
	
КонецФункции



//////////////////////////////////////////////////////////////////
// Штрих-код

Функция ЗаписатьШтрихКод(НоменклатураССылка, ХарактеристикаСсылка, УпаковкаСсылка, ЗначениеШК)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьВыполнена = Ложь;                              					
	
	НоваяСтрокаШК 				= РегистрыСведений._ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
	НоваяСтрокаШК.Штрихкод 		= ЗначениеШК;
	НоваяСтрокаШК.Прочитать();
	
	НоваяСтрокаШК.Штрихкод 		= ЗначениеШК;
	НоваяСтрокаШК.Номенклатура	= НоменклатураССылка;
	НоваяСтрокаШК.Характеристика= ХарактеристикаСсылка;
	НоваяСтрокаШК.Упаковка 		= УпаковкаСсылка;
	
	Попытка	
		НоваяСтрокаШК.Записать(Истина);	
		ЗаписьВыполнена = Истина;
	Исключение
		Сообщить("Не удалось записать значение штрих-кода """ +  Строка(ЗначениеШК)  + """ для """ +  Строка(НоменклатураССылка) + """!");
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗаписьВыполнена;
	
КонецФункции	

Процедура СинхронизироватьШтрихКод(Номенклатура, Номенклатура_УТ11, Характеристика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Штрихкоды.Владелец,
	|	Штрихкоды.ЕдиницаИзмерения,
	|	УпаковкиЕд.Ссылка КАК Упаковка
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ * ИЗ Справочник._УпаковкиЕдиницыИзмерения_УТ11 КАК Т ГДЕ Т.Владелец = &Владелец_УТ11) КАК УпаковкиЕд
	|	ПО УпаковкиЕд.ЕдиницаИзмерения.Наименование = Штрихкоды.ЕдиницаИзмерения.Наименование
	//		|	И  УпаковкиЕд.Владелец = Штрихкоды.ЕдиницаИзмерения.Наименование
	|ГДЕ
	|	Штрихкоды.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", 		Номенклатура);
	Запрос.УстановитьПараметр("Владелец_УТ11", 	Номенклатура_УТ11);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если (ЗначениеЗаполнено(Номенклатура_УТ11) 
			И 
			//(?(ТекСтр.Номенклатура_УТ11.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления._ВариантыИспользованияХарактеристикНоменклатуры_УТ11.НеИспользовать, 
			//	Истина,	ЗначениеЗаполнено(ТекСтр.Характеристика))
			//)
			(?(Номенклатура_УТ11.ИспользованиеХарактеристик = Перечисления._ВариантыИспользованияХарактеристикНоменклатуры_УТ11.НеИспользовать, 
			Истина,	ЗначениеЗаполнено(Характеристика))
			)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Упаковка)) Тогда
			
			
			// все штрих код пустой или не цифры - прочь!
			стрШК = СокрЛП(ВыборкаДетальныеЗаписи.Штрихкод);
			Если стрШК = "" Тогда
				Сообщить("Не задан штрих-код для """ + Строка(Номенклатура) + " - " + Строка(Характеристика) + " !", СтатусСообщения.Важное);
				Продолжить;
			Иначе
				бЕстьСтрСимв = Ложь;               				
				Для Поз = 1 По СтрДлина(стрШК) Цикл
					Попытка
						чЗн = Число(Сред(стрШК, Поз, 1));
					Исключение
						бЕстьСтрСимв = Истина;
						Прервать;
					КонецПопытки;					
				КонецЦикла;
				Если бЕстьСтрСимв Тогда
					Сообщить("В штрих-коде " + стрШК + " """ + Строка(Номенклатура) + """ - запрещенные символы !", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;     	
			КонецЕсли; 
			
			ЗаписатьШтрихКод(Номенклатура_УТ11, Характеристика, ВыборкаДетальныеЗаписи.Упаковка, ВыборкаДетальныеЗаписи.Штрихкод);
			
		Иначе
			Сообщить("Не задано (не найдено) одно из обязательных значений (новая номенклатура, характеристика или ед.упаковки) для """ + Строка(Номенклатура) + """ !");
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры	

Функция УдалитьЗаписьШтрихКод(НоменклатураССылка
	//, ХарактеристикаССылка=Неопределено
	) Экспорт
	
	НоменклатураУТ11 = ПолучитьНоменклатуру(НоменклатураССылка);		
	
	Если ЗначениеЗаполнено(НоменклатураУТ11) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	_ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений._ШтрихкодыНоменклатуры КАК _ШтрихкодыНоменклатуры
		|ГДЕ
		|	_ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
		|";		
		Запрос.УстановитьПараметр("Номенклатура", НоменклатураУТ11);
		//Если ХарактеристикаССылка <> Неопределено Тогда
		//	Запрос.УстановитьПараметр("Характеристика", ХарактеристикаССылка);
		//	Запрос.Текст = Запрос.Текст + "
		//		|	И _ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
		//	КонецЕсли;	
		
		РезультатЗапроса = Запрос.Выполнить();	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений._ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Штрихкод.Установить(ВыборкаДетальныеЗаписи.Штрихкод);
			НаборЗаписей.Прочитать(); 
			//После установки отбора, набор записей необходимо прочитать, Если набор не будет
			//прочитан Изменения коснутся всех записей регистра !!! 
			НаборЗаписей.Очистить(); //Производим очистку набора, после чего производим его запись			
			Попытка
				НаборЗаписей.Записать(); 
				Возврат Истина;
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецФункции	

//////////////////////////////////////////////////////////////////
// создание доп.реквизитов и доп.свойств

Функция ЗаписатьДопРеквизит(НоменклатураОбъект, СвойствоНоменклатуры, НовоеЗначение) Экспорт
	
	ЗаписьВыполнена = Ложь;
	
	
	//	Если НайденоСвойство_УТ11.Пустая() Тогда
	//		Если бСообщать Тогда 
	//			Сообщить("Не удалось найти доп.реквизит (свойство) """ + ЗначСвойства + """!", СтатусСообщения.Важное);
	//		КонецЕсли;		
	//	Иначе	
	//		Если НЕ ЗаписатьДопРеквизит(НовыйЭлемент, НайденоСвойство_УТ11, стрПодкатегория) Т
	//
	
	
	Если ТипЗнч(СвойствоНоменклатуры) = Тип("Строка") Тогда
		НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СвойствоНоменклатуры);
	Иначе
		НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СвойствоНоменклатуры.Наименование);
	КонецЕсли;
	
	Если НайденоСвойство_УТ11.Пустая() Тогда
		Сообщить("Не удалось найти доп.свойство """ + Строка(СвойствоНоменклатуры) + """!", СтатусСообщения.Важное);
	Иначе                                      					
		
		стрТипСвойства = Строка(НайденоСвойство_УТ11.ТипЗначения);
		Если Строка(ТипЗнч(НовоеЗначение)) = стрТипСвойства Тогда
			НовоеЗначениеУстановить = НовоеЗначение;
		Иначе
			Если стрТипСвойства = "Строка" Тогда
				НовоеЗначениеУстановить = Строка(НовоеЗначение);
			ИначеЕсли стрТипСвойства = "Число" Тогда
				Попытка
					НовоеЗначениеУстановить = Число(НовоеЗначение);
				Исключение
					НовоеЗначениеУстановить = НовоеЗначение;
				КонецПопытки;
			Иначе
				НовоеЗначениеУстановить = НовоеЗначение;
			КонецЕсли;
		КонецЕсли;
		
		//НоменклатураОбъект					= НоменклатураССылка.ПолучитьОбъект();
		
		// ****************************************
		// Категории
		// ****************************************
		Если Лев(НайденоСвойство_УТ11.Заголовок, 5) = "Катег" Тогда			 			
			
			ЗаписьВыполнена = Ложь;
			
			КатегорияСсылка = Справочники._ЗначенияСвойствОбъектов_УТ11.ПустаяСсылка();
			ПодКатегорияСсылка  = Справочники._ЗначенияСвойствОбъектов_УТ11.ПустаяСсылка();
			
			стрКатегория = СокрЛП(НовоеЗначение.Категория);			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник._ЗначенияСвойствОбъектов_УТ11 КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	НЕ ЗначенияСвойствОбъектов.ПометкаУдаления
			|	И ЗначенияСвойствОбъектов.ЭтоГруппа
			|	И ЗначенияСвойствОбъектов.Наименование = &Наименование";			
			Запрос.УстановитьПараметр("Наименование", стрКатегория);	             			
			РезультатЗапроса = Запрос.Выполнить();                             			
			Если РезультатЗапроса.Пустой() Тогда
				НоваяГруппа = Справочники._ЗначенияСвойствОбъектов_УТ11.СоздатьГруппу();
				НоваяГруппа.Наименование = стрКатегория;
				НоваяГруппа.Владелец = НайденоСвойство_УТ11;
				НоваяГруппа.Записать();
				КатегорияСсылка = НоваяГруппа.Ссылка;
			Иначе
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					КатегорияСсылка	= ВыборкаДетальныеЗаписи.Ссылка;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КатегорияСсылка) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник._ЗначенияСвойствОбъектов_УТ11 КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	НЕ ЗначенияСвойствОбъектов.ПометкаУдаления
				|	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
				|	И ЗначенияСвойствОбъектов.Наименование = &Наименование";			
				Запрос.УстановитьПараметр("Наименование", стрКатегория);	             			
				РезультатЗапроса = Запрос.Выполнить();                             			
				Если РезультатЗапроса.Пустой() Тогда
					НовыйЭлемент = Справочники._ЗначенияСвойствОбъектов_УТ11.СоздатьЭлемент();
					НовыйЭлемент.Наименование 	= стрКатегория;
					НовыйЭлемент.Владелец 		= НайденоСвойство_УТ11;
					НовыйЭлемент.Родитель 		= КатегорияСсылка;
					Попытка                           
						НовыйЭлемент.Записать();
						ПодКатегорияСсылка = НовыйЭлемент.Ссылка;   
						ЗаписьВыполнена = Истина;
					Исключение  						
					КонецПопытки;
				Иначе
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ПодКатегорияСсылка	= ВыборкаДетальныеЗаписи.Ссылка;
						ЗаписьВыполнена = Истина;
						Прервать;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КатегорияСсылка) Тогда					
				стрПодКатегория = СокрЛП(НовоеЗначение.Подкатегория);			
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
				|	ЗначенияСвойствОбъектов.ЭтоГруппа
				|ИЗ
				|	Справочник._ЗначенияСвойствОбъектов_УТ11 КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	НЕ ЗначенияСвойствОбъектов.ПометкаУдаления
				|	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
				|	И ЗначенияСвойствОбъектов.Наименование = &Наименование";			
				Запрос.УстановитьПараметр("Наименование", стрПодКатегория);	             			
				РезультатЗапроса = Запрос.Выполнить();                             			
				Если РезультатЗапроса.Пустой() Тогда
					НовыйЭлемент = Справочники._ЗначенияСвойствОбъектов_УТ11.СоздатьЭлемент();
					НовыйЭлемент.Наименование 	= стрПодКатегория;
					НовыйЭлемент.Владелец 		= НайденоСвойство_УТ11;
					НовыйЭлемент.Родитель 		= КатегорияСсылка;
					Попытка
						НовыйЭлемент.Записать();
						ПодКатегорияСсылка = НовыйЭлемент.Ссылка;   
						ЗаписьВыполнена = Истина;
					Исключение  						
					КонецПопытки;
				Иначе
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ПодКатегорияСсылка	= ВыборкаДетальныеЗаписи.Ссылка;
						ЗаписьВыполнена = Истина;
						Прервать;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			
			Если ЗаписьВыполнена Тогда
				
				НайденнаяСтрока = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(НайденоСвойство_УТ11, "Свойство");
				Если НайденнаяСтрока = Неопределено Тогда
					НоваяСтрокаДопРекв 					= НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();				 
					НоваяСтрокаДопРекв.Свойство        	= НайденоСвойство_УТ11;
				Иначе
					НоваяСтрокаДопРекв = НайденнаяСтрока;
				КонецЕсли; 
				
				// проверка - если значение уже было и пытаемся установить пустое - игнорировать
				//Если (СокрЛП(Строка(ПодКатегорияСсылка) <> ""
				//	  И СокрЛП(Строка(НоваяСтрокаДопРекв.Значение) = "") Тогда				
				НоваяСтрокаДопРекв.Значение        	= ПодКатегорияСсылка;	
				
			КонецЕсли;    				
			
			// ****************************************	
			// Страна происхождения		
			// ****************************************
		ИначеЕсли Лев(НайденоСвойство_УТ11.Заголовок, 5) = "Стран"  Тогда
			
			ЗаписьВыполнена = Ложь;   			
			Если ЗначениеЗаполнено(НайденоСвойство_УТ11) Тогда
				стрСвойство = Строка(НайденоСвойство_УТ11);
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	КлассификаторСтранМира.Ссылка
				|ИЗ
				|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
				|ГДЕ
				|	КлассификаторСтранМира.Наименование = &Наименование";						            			
				Запрос.УстановитьПараметр("Наименование", 	ВРег(СокрЛП(НовоеЗначениеУстановить)));	 				
				РезультатЗапроса = Запрос.Выполнить();                             			
				Если РезультатЗапроса.Пустой() Тогда					
					//НовыйЭлемент = Справочники._ЗначенияСвойствОбъектов_УТ11.СоздатьЭлемент();
					//НовыйЭлемент.Наименование 	= НовоеЗначениеУстановить;
					//НовыйЭлемент.Владелец 		= НайденоСвойство_УТ11;
					////НовыйЭлемент.Родитель 		= КатегорияСсылка;
					//Попытка                           
					//	НовыйЭлемент.Записать();
					//	ЗначениеСсылка = НовыйЭлемент.Ссылка;   
					//	ЗаписьВыполнена = Истина;
					//Исключение  						
					//КонецПопытки;
				Иначе
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ЗначениеСсылка	= ВыборкаДетальныеЗаписи.Ссылка;
						ЗаписьВыполнена = Истина;
						Прервать;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаписьВыполнена Тогда
				НайденнаяСтрока = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(НайденоСвойство_УТ11, "Свойство");
				Если НайденнаяСтрока = Неопределено Тогда
					НоваяСтрокаДопРекв 					= НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();				 
					НоваяСтрокаДопРекв.Свойство        	= НайденоСвойство_УТ11;
				Иначе
					НоваяСтрокаДопРекв = НайденнаяСтрока;
				КонецЕсли; 
				
				// доп.трансформация по псевдониму стран, которых нет в классификаторе
				ЗначениеЗамена = ОбщегоНазначения5LB.ПолучитьПсевдоним(ЗначениеСсылка, "Интеграция", Справочники.КлассификаторСтранМира.ПустаяСсылка()); 
				Если ЗначениеЗаполнено(ЗначениеЗамена) Тогда
					ЗначениеСсылка  = ЗначениеЗамена;
				КонецЕсли;
				
				НоваяСтрокаДопРекв.Значение        	= ЗначениеСсылка;	
				
			КонецЕсли; 	
			
			// ****************************************
			// другие рекв. с доп.значениями (не Категории)		
			// ****************************************
		ИначеЕсли НайденоСвойство_УТ11.ТипЗначения.СодержитТип(Тип("СправочникСсылка._ЗначенияСвойствОбъектов_УТ11")) Тогда
			
			ЗаписьВыполнена = Ложь;   			
			Если ЗначениеЗаполнено(НайденоСвойство_УТ11) Тогда
				стрСвойство = Строка(НайденоСвойство_УТ11);
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник._ЗначенияСвойствОбъектов_УТ11 КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	НЕ ЗначенияСвойствОбъектов.ПометкаУдаления
				|	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
				|	И  ЗначенияСвойствОбъектов.Владелец = &Владелец
				|	И ЗначенияСвойствОбъектов.Наименование = &Наименование";			
				Запрос.УстановитьПараметр("Владелец", 		НайденоСвойство_УТ11);	             			
				Запрос.УстановитьПараметр("Наименование", 	НовоеЗначениеУстановить);	 
				
				РезультатЗапроса = Запрос.Выполнить();                             			
				Если РезультатЗапроса.Пустой() Тогда
					НовыйЭлемент = Справочники._ЗначенияСвойствОбъектов_УТ11.СоздатьЭлемент();
					НовыйЭлемент.Наименование 	= НовоеЗначениеУстановить;
					НовыйЭлемент.Владелец 		= НайденоСвойство_УТ11;
					//НовыйЭлемент.Родитель 		= КатегорияСсылка;
					Попытка                           
						НовыйЭлемент.Записать();
						ЗначениеСсылка = НовыйЭлемент.Ссылка;   
						ЗаписьВыполнена = Истина;
					Исключение  						
					КонецПопытки;
				Иначе
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ЗначениеСсылка	= ВыборкаДетальныеЗаписи.Ссылка;
						ЗаписьВыполнена = Истина;
						Прервать;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаписьВыполнена Тогда
				НайденнаяСтрока = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(НайденоСвойство_УТ11, "Свойство");
				Если НайденнаяСтрока = Неопределено Тогда
					НоваяСтрокаДопРекв 					= НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();				 
					НоваяСтрокаДопРекв.Свойство        	= НайденоСвойство_УТ11;
				Иначе
					НоваяСтрокаДопРекв = НайденнаяСтрока;
				КонецЕсли; 
				НоваяСтрокаДопРекв.Значение        	= ЗначениеСсылка;	
			КонецЕсли;    
			
			
			
			
			// все осталньые - с притивными типами
		Иначе               			
			НайденнаяСтрока = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(НайденоСвойство_УТ11, "Свойство");
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрокаДопРекв 					= НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();				 
				НоваяСтрокаДопРекв.Свойство        	= НайденоСвойство_УТ11;
			Иначе
				НоваяСтрокаДопРекв = НайденнаяСтрока;
			КонецЕсли;
			НоваяСтрокаДопРекв.Значение        	= НовоеЗначениеУстановить;	
			ЗаписьВыполнена = Истина;			
		КонецЕсли;
		
		//Исключение
		//	Сообщить("Не удалось записать значение доп.реквизит """ +  Строка(СвойствоНоменклатуры)  + """ = " +  Строка(НовоеЗначение) + "!");
		//КонецПопытки;
		
	КонецЕсли;
	
	Возврат ЗаписьВыполнена;
	
КонецФункции	

Функция ЗаписатьДопСвойство(НоменклатураССылка, СвойствоНоменклатуры, НовоеЗначение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьВыполнена = Ложь;
	
	Если ТипЗнч(СвойствоНоменклатуры) = Тип("Строка") Тогда
		НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СвойствоНоменклатуры);
	Иначе
		НайденоСвойство_УТ11 = ПланыВидовХарактеристик._ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СвойствоНоменклатуры.Наименование);
	КонецЕсли;
	
	Если НайденоСвойство_УТ11.Пустая() Тогда
		Сообщить("Не удалось найти доп.свойство """ + Строка(СвойствоНоменклатуры) + """!", СтатусСообщения.Важное);
	Иначе                                      					
		
		НоваяСтрокаДопСвойств 				= РегистрыСведений._ДополнительныеСведения.СоздатьМенеджерЗаписи();
		НоваяСтрокаДопСвойств.Объект 		= НоменклатураССылка;
		НоваяСтрокаДопСвойств.Свойство 		= НайденоСвойство_УТ11;					
		НоваяСтрокаДопСвойств.Прочитать();
		
		НоваяСтрокаДопСвойств.Объект 		= НоменклатураССылка;
		НоваяСтрокаДопСвойств.Свойство 		= НайденоСвойство_УТ11;
		
		стрТипСвойства = Строка(НайденоСвойство_УТ11.ТипЗначения);
		Если Строка(ТипЗнч(НовоеЗначение)) = стрТипСвойства Тогда
			НовоеЗначениеУстановить = НовоеЗначение;
		Иначе
			Если  стрТипСвойства = "Дополнительные значения (УТ-11)" Тогда
				
				НовоеЗначениеУстановить = Справочники._ЗначенияСвойствОбъектов_УТ11.ПустаяСсылка();
				НовоеЗначениеПоиск = Строка(НовоеЗначение);
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов_УТ11.Ссылка КАК Ссылка
				|ИЗ  Справочник._ЗначенияСвойствОбъектов_УТ11 КАК ЗначенияСвойствОбъектов_УТ11
				|ГДЕ ЗначенияСвойствОбъектов_УТ11.Наименование = &Наименование";				
				Запрос.УстановитьПараметр("Наименование", НовоеЗначениеПоиск);				
				РезультатЗапроса = Запрос.Выполнить();                        				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();          				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НовоеЗначениеУстановить = ВыборкаДетальныеЗаписи.Ссылка;
					Прервать;
				КонецЦикла;
				
			ИначеЕсли стрТипСвойства = "Строка" 
				//ИЛИ стрТипСвойства = "Дополнительные значения (УТ-11)") 
				Тогда
				НовоеЗначениеУстановить = Строка(НовоеЗначение);
				
			ИначеЕсли стрТипСвойства = "Число" Тогда
				
				Попытка
					НовоеЗначениеУстановить = Число(НовоеЗначение);
				Исключение
					НовоеЗначениеУстановить = 0;
				КонецПопытки;
				
			Иначе
				//НовоеЗначениеУстановить 
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НовоеЗначениеУстановить) Тогда
			Сообщить("Свойство """ + СвойствоНоменклатуры + """ , не найдено значение """ + Строка(НовоеЗначение)  + """ !");	
		КонецЕсли;		
		
		Попытка
			НоваяСтрокаДопСвойств.Значение 		= НовоеЗначениеУстановить;							
			НоваяСтрокаДопСвойств.Записать(Истина);	
			ЗаписьВыполнена = Истина;
		Исключение
			Сообщить("Не удалось записать значение доп.сведения """ +  Строка(СвойствоНоменклатуры)  + """ = " +  Строка(НовоеЗначение) + "!");
		КонецПопытки;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗаписьВыполнена;
	
КонецФункции	



//////////////////////////////////////////////////////////////////
// регистр сведений "Соответствие номенклатуры"

// булево - есть соответсвие
Функция ЕстьСоответствиеНоменклатуры(Номенклатура) Экспорт
	
	Рез = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствияНоменклатуры.Номенклатура,
	|	СоответствияНоменклатуры.Номенклатура_УТ11,
	|	СоответствияНоменклатуры.Характеристика
	|ИЗ
	|	РегистрСведений._СоответствияНоменклатуры КАК СоответствияНоменклатуры
	|ГДЕ
	|	СоответствияНоменклатуры.Номенклатура = &Номенклатура
	|	И СоответствияНоменклатуры.Номенклатура_УТ11 <> ЗНАЧЕНИЕ(Справочник._Номенклатура_УТ11.ПустаяСсылка)	
	|";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез = Истина;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

// возвращает структуру : Н+Х УТ-11 по исходной номенклатуре УТ-10
Функция НайтиСоответствиеНоменклатуры(Номенклатура) Экспорт
	
	Рез = Новый Структура("Номенклатура,Характеристика");
	Рез.Номенклатура = Справочники._Номенклатура_УТ11.ПустаяСсылка();
	Рез.Характеристика	= Справочники._ХарактеристикиНоменклатуры_УТ11.ПустаяСсылка();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствияНоменклатуры.Номенклатура,
	|	СоответствияНоменклатуры.Номенклатура_УТ11,
	|	СоответствияНоменклатуры.Характеристика
	|ИЗ
	|	РегистрСведений._СоответствияНоменклатуры КАК СоответствияНоменклатуры
	|ГДЕ
	|	СоответствияНоменклатуры.Номенклатура = &Номенклатура
	|	И СоответствияНоменклатуры.Номенклатура_УТ11 <> ЗНАЧЕНИЕ(Справочник._Номенклатура_УТ11.ПустаяСсылка)	
	|";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура_УТ11;
		Рез.Характеристика	= ВыборкаДетальныеЗаписи.Характеристика;	
		Прервать;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция НайтиНоменклатуруПоСоответствию(Номенклатура, Характеристика) Экспорт
	
	Рез = Справочники.Номенклатура.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствияНоменклатуры.Номенклатура,
	|	СоответствияНоменклатуры.Номенклатура_УТ11,
	|	СоответствияНоменклатуры.Характеристика
	|ИЗ
	|	РегистрСведений._СоответствияНоменклатуры КАК СоответствияНоменклатуры
	|ГДЕ
	|	СоответствияНоменклатуры.Номенклатура_УТ11 = &Номенклатура
	|	И СоответствияНоменклатуры.Характеристика = &Характеристика	
	|";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);	
	РезультатЗапроса = Запрос.Выполнить();                      	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();        	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез = ВыборкаДетальныеЗаписи.Номенклатура;
		Прервать;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

// обновить (создать) запись р.с. соответствия н-ры УТ-10 и УТ-11
Функция ОбновитьЗаписьСоответствий(НоменклатураССылка, НоменклатураНоваяСсылка, ХарактеристикаССылка=Неопределено) Экспорт
	
	ЗаписьСоотв = РегистрыСведений._СоответствияНоменклатуры.СоздатьМенеджерЗаписи();
	ЗаписьСоотв.Номенклатура = НоменклатураССылка;
	ЗаписьСоотв.Прочитать();
	ЗаписьСоотв.Номенклатура = НоменклатураССылка;
	ЗаписьСоотв.Номенклатура_УТ11 = НоменклатураНоваяСсылка;
	Если ХарактеристикаССылка <> Неопределено Тогда
		ЗаписьСоотв.Характеристика = ХарактеристикаССылка;	
	КонецЕсли;
	
	Попытка
		ЗаписьСоотв.Записать(Истина);	
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции			

Функция УдалитьЗаписьСоответствий(НоменклатураССылка, ХарактеристикаССылка=Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений._СоответствияНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураССылка);
	НаборЗаписей.Прочитать(); 
	//После установки отбора, набор записей необходимо прочитать, Если набор не будет
	//прочитан Изменения коснутся всех записей регистра !!! 
	НаборЗаписей.Очистить(); //Производим очистку набора, после чего производим его запись
	
	Попытка
		НаборЗаписей.Записать(); 
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции			

// обновить (создать) ИНТЕРАКТИВНО запись р.с. соответствия н-ры УТ-10 и УТ-11
Функция ЗадатьОбновитьСоответствиеНоменклатуры(Номенклатура) Экспорт
	
	Рез = Ложь;
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Рез;	
	КонецЕсли;
	
	Попытка
		ЗаписьИзменения = РегистрыСведений._СоответствияНоменклатуры.СоздатьМенеджерЗаписи();	
		ЗаписьИзменения.Номенклатура 	= Номенклатура;
		ЗаписьИзменения.Прочитать();
		// если записи нет - создать ее
		Если НЕ ЗначениеЗаполнено(ЗаписьИзменения.Номенклатура)	Тогда
			ЗаписьИзменения.Номенклатура 	= Номенклатура;
			ЗаписьИзменения.Записать(Истина);
			//ЗаписьИзменения.Номенклатура 	= Номенклатура;
			//ЗаписьИзменения.Прочитать();
		КонецЕсли;
	Исключение
		Возврат Рез;
	КонецПопытки;
	
	//	ФормаЗаписи = РегистрыСведений._СоответствияНоменклатуры.ПолучитьФормуРедактированияЗаписи();
	//	ФормаЗаписи = РегистрыСведений._СоответствияНоменклатуры.ПолучитьФорму("ФормаВводаНовойНоменклатурыУТ11");
	ФормаЗаписи = ПолучитьФорму("ФормаВводаНовойНоменклатурыУТ11");
	ФормаЗаписи.Запись = ЗаписьИзменения; 
	
	Рез = ФормаЗаписи.ОткрытьМодально();
	Если Рез = Неопределено Тогда
		//.Если НЕ РольДоступна("ПолныеПрава") Тогда
		Рез = Ложь;
		//Иначе			
		//			Рез = Истина;
		//		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция ПолучитьСтрСоответствиеНоменклатуры(Номенклатура) Экспорт
	
	ФормаЗаписи = ПолучитьФорму("ФормаВводаНовойНоменклатуры");
	ФормаЗаписи.Номенклатура = Номенклатура; 
	
	Рез = ФормаЗаписи.ОткрытьМодально();
	
	Возврат Рез;
	
КонецФункции


//////////////////////////////////////////////////////////////////
// регистр сведений "Соответствие номенклатуры перемещений"


//Процедура ПроверкаСоответсвийНоменклатурыВПеремещении(Перемещение) Экспорт
//	
//	Товары = Перемещение.Товары.Выгрузить();
//	Товары.Свернуть("Номенклатура");
//	
//	Запрос1 = Новый Запрос("Выбрать * ПОМЕСТИТЬ втТовары Из &Таб КАК Т");
//	Запрос1.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	МенеджерВТД = Запрос1.МенеджерВременныхТаблиц;
//	Запрос1.УстановитьПараметр("Таб", Товары);
//	Запрос1.Выполнить(); 
//		
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МенеджерВТД;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	Товары.Номенклатура
//		|ИЗ
//		|	втТовары КАК Товары 
//		|	ЛЕВОЕ СОЕДИНЕНИЕ
//		|	РегистрСведений._СоответствияНоменклатуры КАК СоответствияНоменклатуры
//		|	ПО СоответствияНоменклатуры.Номенклатура = Товары.Номенклатура
//		|ГДЕ
//		|	СоответствияНоменклатуры.Номенклатура_УТ11 Есть NULL	
//		|";	
//		
//	тзНоменклатураБезСоответствий =	Запрос.Выполнить().Выгрузить();
//		
//	ЗапросУДАЛЕНИЕ = Новый Запрос;
//	ЗапросУДАЛЕНИЕ.МенеджерВременныхТаблиц = МенеджерВТД;
//	ЗапросУДАЛЕНИЕ.Текст = "УНИЧТОЖИТЬ втТовары";
//	ЗапросУДАЛЕНИЕ.Выполнить();	
//	
//	Для Каждого ТекСтр Из тзНоменклатураБезСоответствий Цикл
//		
//		   	Номенклатура = ТекСтр.Номенклатура;
//		   
//			ЗаписьСоотв = РегистрыСведений._5LB_СоответствияНоменклатурыПеремещений.СоздатьМенеджерЗаписи();
//			ЗаписьСоотв.Перемещение 		= Перемещение.Ссылка;
//			ЗаписьСоотв.Номенклатура 		= Номенклатура;
//			ЗаписьСоотв.Прочитать();
//			ЗаписьСоотв.Номенклатура 		= Номенклатура;
//			ЗаписьСоотв.Номенклатура_УТ11 	= Справочники._Номенклатура_УТ11.ПустаяСсылка();
//			ЗаписьСоотв.ДатаЗаполнения		= Дата(1, 1, 1);				
//			Попытка
//				ЗаписьСоотв.Записать(Истина);	
//				//Возврат Истина;
//			Исключение
//				//Возврат Ложь;
//			КонецПопытки;
//	КонецЦикла;
//			
//КонецПроцедуры

//Функция НоменклатураБезСоответсвийВПеремещении(ПеремещениеСсылка) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	Соотв.Номенклатура
//		|ИЗ
//		|	РегистрСведений._5LB_СоответствияНоменклатурыПеремещений КАК Соотв
//		|ГДЕ
//		|	Соотв.Перемещение = &Перемещение
//		|	И Соотв.Номенклатура_УТ11 = &Номенклатура_УТ11
//		|	И Соотв.ДатаЗаполнения = &ДатаЗаполнения";
//	Запрос.УстановитьПараметр("Перемещение", 		ПеремещениеСсылка);	
//	Запрос.УстановитьПараметр("ДатаЗаполнения", 	Дата(1,1,1));
//	Запрос.УстановитьПараметр("Номенклатура_УТ11", 	Справочники._Номенклатура_УТ11.ПустаяСсылка());
//	
//	тзНоменклатура = Запрос.Выполнить().Выгрузить();	
//	
//	Возврат тзНоменклатура;

//КонецФункции

//Функция ОбновитьЗаписьСоответствийНоменклатурыПеремещений(НоменклатураССылка, НоменклатураНоваяСсылка, ХарактеристикаССылка=Неопределено) Экспорт
//	
//	ЗаписьСоотв = РегистрыСведений._5LB_СоответствияНоменклатурыПеремещений.СоздатьМенеджерЗаписи();
//	ЗаписьСоотв.Номенклатура = НоменклатураССылка;
//	ЗаписьСоотв.Прочитать();
//	ЗаписьСоотв.Номенклатура = НоменклатураССылка;
//	ЗаписьСоотв.Номенклатура_УТ11 = НоменклатураНоваяСсылка;
//	Если ХарактеристикаССылка <> Неопределено Тогда
//		ЗаписьСоотв.Характеристика = ХарактеристикаССылка;	
//	КонецЕсли;
//	
//	Попытка
//		ЗаписьСоотв.Записать(Истина);	
//		Возврат Истина;
//	Исключение
//		Возврат Ложь;
//	КонецПопытки;

//КонецФункции



//////////////////////////////////////////////////////////////////
// Вспомательный функционал

// установка значений реквизита объекта (без записи!)
Процедура _Рекв(Объект, ИмяРекв, ЗнРекв, бУстановитьОбязательно=Ложь)
	
	Попытка
		бУстановить = Ложь;
		Если бУстановитьОбязательно Тогда
			бУстановить = Истина;
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект[ИмяРекв]) Тогда
				бУстановить = Истина;
			КонецЕсли;	
		КонецЕсли;
		Если бУстановить Тогда
			Объект[ИмяРекв] = ЗнРекв;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	
КонецПроцедуры

// получение наименования ЕД.ИЗМ. УТ-11	
Функция СформироватьНаименование(ЕдиницаИзмерения, ЕдиницаИзмеренияВладельца, Числитель, Знаменатель) Экспорт
	
	стрЕдиницаИзмерения = СокрЛП(Строка(ЕдиницаИзмерения));
	стрРез = стрЕдиницаИзмерения;	
	//	Если ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная 
	//		И 
	Если Числитель / Знаменатель <> 1 Тогда
		стрРез = стрЕдиницаИзмерения + " (" + Формат(Числитель / Знаменатель,"ЧРД=.") + " " + СокрЛП(Строка(ЕдиницаИзмеренияВладельца)) + ")";
	КонецЕсли;
	
	Возврат стрРез;
	
КонецФункции


// каталоги номенклатуры УТ-11
Функция НайтиКаталогУТПоГруппеНоменклатуры(ГруппаНоменклатуры) 
	
	Рез = Справочники._Номенклатура_УТ11.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_СоответствияНоменклатуры.Номенклатура_УТ11 КАК Ссылка
	|ИЗ
	|	РегистрСведений._СоответствияНоменклатуры КАК _СоответствияНоменклатуры
	|ГДЕ
	|	_СоответствияНоменклатуры.Номенклатура_УТ11.ЭтоГруппа
	|	И _СоответствияНоменклатуры.Номенклатура.Ссылка = &ГруппаНоменклатуры";
	
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		Рез = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Процедура ПроверитьКаталоги()
	
	//	Сообщить("Проверка структуры каталогов во внешней ИБ");
	
	//	КорневаяПапкаИмя = "";
	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	СоответствияНоменклатуры.Номенклатура КАК НоменклатураСсылка,
	//		|	СоответствияНоменклатуры.Номенклатура_УТ11 КАК Номенклатура_УТ11		
	//		|ПОМЕСТИТЬ втСоответствия	
	//		|ИЗ
	//		|	РегистрСведений._СоответствияНоменклатуры КАК СоответствияНоменклатуры
	//		|ГДЕ
	//		|	СоответствияНоменклатуры.Номенклатура.ЭтоГруппа		
	//		|;
	//		|///////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	Номенклатура.Ссылка КАК Ссылка,
	//		|	Номенклатура.Наименование КАК Наименование,
	////		|	0 КАК УровеньИерархии,
	//		|	Номенклатура.Родитель.Ссылка КАК Родитель		
	////		|	&НоменклатураПустая КАК Родитель,	
	////		|	NULL КАК РодительНаименование		
	//		|ПОМЕСТИТЬ втНоменклатура	
	//		|ИЗ
	//		|	Справочник.Номенклатура КАК Номенклатура		
	//		|ГДЕ
	//		|	Номенклатура.ЭтоГруппа
	//		|;
	//		|///////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	Номенклатура_УТ11.Ссылка КАК Номенклатура_УТ11,
	//		|	Номенклатура_УТ11.Наименование КАК Наименование,
	////		|	0 КАК УровеньИерархии,
	//		|	Номенклатура_УТ11.Родитель.Ссылка КАК Родитель		
	////		|	&НоменклатураПустая КАК Родитель,	
	////		|	NULL КАК РодительНаименование		
	//		|ПОМЕСТИТЬ втНоменклатура_УТ11	
	//		|ИЗ
	//		|	Справочник._Номенклатура_УТ11 КАК Номенклатура_УТ11		
	//		|ГДЕ
	//		|	Номенклатура_УТ11.ЭтоГруппа
	//		|;		
	//		|///////////////////////////////////////////////////////
	//		|ВЫБРАТЬ		
	//		|	ТНоменклатура.Ссылка КАК Ссылка,
	//		|	0 КАК УровеньИерархии,
	//		|	ВЫБОР
	//		|		КОГДА (ТНоменклатура_УТ11.Номенклатура_УТ11 Есть NULL) ТОГДА		
	//		|			ВЫБОР КОГДА (ТСоответствия.Номенклатура_УТ11 Есть NULL) 
	//		//ИЛИ (ТСоответствия.Номенклатура_УТ11 = ЗНАЧЕНИЕ(Справочник._Номенклатура_УТ11.ПустаяСсылка))
	//		|				ТОГДА 3
	//		|				ИНАЧЕ 2
	//		|			КОНЕЦ
	//		|		ИНАЧЕ 1
	//		|	КОНЕЦ КАК Статус,
	//		|	ТНоменклатура_УТ11.Номенклатура_УТ11 КАК Номенклатура_УТ11		
	////		|	ТСоответствия.Номенклатура_УТ11	
	////		|	NULL КАК РодительНаименование		
	//		|ИЗ
	//		|	втНоменклатура КАК ТНоменклатура
	//		|	ЛЕВОЕ СОЕДИНЕНИЕ втСоответствия КАК ТСоответствия
	//		|	ПО ТСоответствия.НоменклатураСсылка = ТНоменклатура.Ссылка
	//		|	ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура_УТ11 КАК ТНоменклатура_УТ11
	//		|	ПО ТНоменклатура_УТ11.Наименование = ТНоменклатура.Наименование			
	////		|	(ВЫБРАТЬ Т.Ссылка КАК Ссылка_УТ11
	////		|		ИЗ Справочник._Номенклатура_УТ11 КАК Т
	////		|ГДЕ
	////		|	ТСоответствия.Номенклатура_УТ11 Есть NULL
	//////		|		И НЕ Т.ПометкаУдаления
	////		|		) КАК Номенклатура_УТ11
	////		|	Номенклатура_УТ11
	////		|ИТОГИ ПО
	////		|	Ссылка ТОЛЬКО ИЕРАРХИЯ
	//		|";
	//		
	//	//Если ГруппаНоменклатуры = Неопределено Тогда
	//	//	Запрос.УстановитьПараметр("Группа", ГруппаНоменклатуры);
	//	//Иначе	
	//	//	Запрос.УстановитьПараметр("Группа", Справочники.Номенклатура.ПустаяСсылка());
	//	//КонецЕсли;
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	//Выборка = РезультатЗапроса.Выбрать();
	//	тзРезультат = РезультатЗапроса.Выгрузить();	
	
	//	
	//		
	//	Для Каждого ТекСтр Из тзРезультат Цикл
	//		//Сообщить(ТекСтр.Ссылка);
	//		Уровень = ТекСтр.Ссылка.Уровень();
	//		Если КорневаяПапкаИмя <> "" Тогда
	//			ТекСтр.УровеньИерархии = Уровень + 1; 	
	//		Иначе
	//			ТекСтр.УровеньИерархии = Уровень; 
	//		КонецЕсли;
	//		////Сообщить();
	//	КонецЦикла;
	//	
	//// если есть корневая папка (по именни организации)
	//	Если КорневаяПапкаИмя <> "" Тогда
	//		
	//		Номенклатура_УТ11ПустаяСсылка = Справочники._Номенклатура_УТ11.ПустаяСсылка();
	//		НоваяГруппаСсылка = Номенклатура_УТ11ПустаяСсылка;
	//		НайденаКорневаяПапка = Справочники._Номенклатура_УТ11.НайтиПоНаименованию(КорневаяПапкаИмя, Истина);
	//		Если НайденаКорневаяПапка = Номенклатура_УТ11ПустаяСсылка Тогда
	//			НоваяГруппа = Справочники._Номенклатура_УТ11.СоздатьГруппу();		
	//			НоваяГруппа.Наименование = КорневаяПапкаИмя;
	//			НоваяГруппа.Родитель = Номенклатура_УТ11ПустаяСсылка;			
	//			Попытка
	//				НоваяГруппа.Записать();
	//				Сообщить("Создан (изменен) корневой каталог """ + КорневаяПапкаИмя + """!");
	//				НоваяГруппаСсылка = НоваяГруппа.Ссылка;			
	//			Исключение
	//				Сообщить("Не удалось создать (изменить) корневой каталог """ + КорневаяПапкаИмя + """!", СтатусСообщения.Важное);
	//				ЭтаФорма.ТолькоПросмотр = Истина;
	//				Возврат;
	//			КонецПопытки;                        
	//		Иначе
	//			НоваяГруппаСсылка = НайденаКорневаяПапка.Ссылка;	
	//		КонецЕсли;
	//		Если НоваяГруппаСсылка <> Номенклатура_УТ11ПустаяСсылка Тогда
	//			НоваяСтрока = тзРезультат.Добавить();
	//			НоваяСтрока.Номенклатура_УТ11 = НоваяГруппаСсылка;
	//			НоваяСтрока.УровеньИерархии = 0;			
	//			НоваяСтрока.Статус = 2;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	тзРезультат.Сортировать("УровеньИерархии");
	//	
	
	//	//Пока Выборка.Следующий() Цикл
	//	Для Каждого ТекСтр Из тзРезультат Цикл
	//		
	//		бНовыйЭлементСоздан = Ложь;
	//		
	//		Если ТекСтр.Статус = 1 Тогда 	// есть и соотв. и группа
	//			 Продолжить;			 
	//		ИначеЕсли ТекСтр.Статус = 2 Тогда 	// нет соотв., но есть группа		
	//			Если ЗначениеЗаполнено(ТекСтр.Номенклатура_УТ11) Тогда 
	//				НоваяГруппа = ТекСтр.Номенклатура_УТ11;
	//	            бНовыйЭлементСоздан = Истина;	
	//			КонецЕсли;
	//			//бНовыйЭлементСоздан = Истина;
	//		ИначеЕсли ТекСтр.Статус = 3 Тогда 		// нет ничего	
	//			
	//		КонецЕсли;
	//		
	//		
	//		Если НЕ бНовыйЭлементСоздан Тогда
	//			
	//			Если ТекСтр.УровеньИерархии = 0 Тогда
	//				РодительНовый = Справочники._Номенклатура_УТ11.ПустаяСсылка();
	//			Иначе
	//				//РодительНовый = ТекСтр.Ссылка.Родитель;
	//				РодительНовый = НайтиКаталогУТПоГруппеНоменклатуры(ТекСтр.Ссылка.Родитель);
	//			КонецЕсли;
	//			стрИмя = ТекСтр.Ссылка.Наименование;
	//			
	//			НоваяГруппа = Справочники._Номенклатура_УТ11.СоздатьГруппу();		
	//			НоваяГруппа.Наименование = стрИмя;
	//			НоваяГруппа.Родитель = РодительНовый;
	//			
	//			бНовыйЭлементСоздан = Ложь;
	//			Попытка
	//				НоваяГруппа.Записать();
	//				Сообщить("Создан (изменен) каталог """ + стрИмя + """!");
	//				бНовыйЭлементСоздан = Истина;			
	//			Исключение
	//				Сообщить("Не удалось создать (изменить) каталог """ + стрИмя + """!", СтатусСообщения.Важное);	
	//			КонецПопытки;     
	//			
	//		КонецЕсли;        		
	//		
	//		Если бНовыйЭлементСоздан Тогда
	//			
	//			ЗаписьСоотв = РегистрыСведений._СоответствияНоменклатуры.СоздатьМенеджерЗаписи();
	//			ЗаписьСоотв.Номенклатура = ТекСтр.Ссылка;
	//			ЗаписьСоотв.Прочитать();
	//			ЗаписьСоотв.Номенклатура = ТекСтр.Ссылка;
	//			ЗаписьСоотв.Номенклатура_УТ11 = НоваяГруппа.Ссылка;		
	//			Попытка
	//				ЗаписьСоотв.Записать(Истина);
	//				Сообщить("Установлено соответствие каталогов """ + стрИмя + """ = """ + стрИмя + """")
	//			Исключение
	//				Сообщить("Не удалось установить соответствие каталогов """ + стрИмя + """ = """ + стрИмя + """!", СтатусСообщения.Важное);	
	//			КонецПопытки;
	//		КонецЕсли;    	
	//		////Сообщить(ТекСтр.Ссылка);
	//		//Уровень = ТекСтр.Ссылка.Уровень();
	//		//ТекСтр.УровеньИерархии = Уровень; 
	//		//Если Уровень > 0 Тогда
	//		//	Если ЗначениеЗаполнено(ТекСтр.Ссылка.Родитель) Тогда
	//		//		ТекСтр.РодительНаименование = ТекСтр.Ссылка.Родитель.Наименование;
	//		//	КонецЕсли;
	//		//КонецЕсли;
	//		////Сообщить();
	//	КонецЦикла;
	//	//
	//	//Сообщить("Проверка структуры каталогов ИБ выполнена");
	//
КонецПроцедуры


//////////////////////////////////////////////////////////////////


