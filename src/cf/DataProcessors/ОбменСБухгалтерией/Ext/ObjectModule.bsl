
// Общие процедуры и функции
функция ПолучитьСоединеие(Отказ)
	//Изменено Monstr 180411
	//Было:
	//Попытка
	//	COMConnector=Новый COMОбъект("V83.COMConnector");
	//	//Соедиенение = COMConnector.Connect("Srvr=""1cserv""; Ref=""C8_BUH_30""; usr=""robot""; pwd=qp:Hj1S0EC");
	//	Если ТестовоеСоединение Тогда 
	//		Соедиенение = COMConnector.Connect("Srvr=""lab1""; Ref=""BUH_30_Test_Kuznetsov""; usr=""bazhibin""; pwd=""123""");
	//	Иначе 
	//		Соедиенение = COMConnector.Connect("Srvr=""1cserv""; Ref=""C8_BUH_30""; usr=""robot""; pwd=qp:Hj1S0EC");
	//	КонецЕсли;
	//Исключение
	//	Ошибка = ОписаниеОшибки();
	//	Отказ = Истина;
	//	Соедиенение = Неопределено;
	//КонецПопытки;
	Если Константы.ИспользоватьТестовоеПодключениеБП30.Получить() Тогда
	    Соедиенение = _5LB_ОбменСДругимиБазами.ПодключитьсяПоCOM("lab1c:1641","C8_BUH_30");
	Иначе 
		Соедиенение = _5LB_ОбменСДругимиБазами.ПодключитьсяПоCOM("1cserv","C8_BUH_30");
	КонецЕсли;
	Отказ = Соедиенение = Неопределено;
	//Конец изменного Monstr 180411
	Возврат Соедиенение;
	
КонецФункции



// Оприходование >= Поступление товаров от покупателя
Процедура ПерегрузкаОприходования(НачПериода, КонПериода, Отказ = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОприходованиеТоваровТовары.Ссылка,
	               |	ОприходованиеТоваровТовары.Номенклатура,
	               |	ОприходованиеТоваровТовары.ХарактеристикаНоменклатуры,
	               |	ОприходованиеТоваровТовары.Количество,
				   //Добавлено Monstr 180512
				   |	ОприходованиеТоваровТовары.ЕдиницаИзмерения,
	               |	ОприходованиеТоваровТовары.Коэффициент
				   //Конец добавленного Monstr 180512
	               |ПОМЕСТИТЬ Оприходования
	               |ИЗ
	               |	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
	               |ГДЕ
	               |	ОприходованиеТоваровТовары.Ссылка.Проведен
	               |	И ОприходованиеТоваровТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И НЕ ОприходованиеТоваровТовары.Номенклатура В ИЕРАРХИИ (&НеТМЦ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	               |	ВложенныйЗапрос.ДокументЗакупки,
	               |	ВложенныйЗапрос.ДокументЗакупки.Контрагент,
	               |	ВложенныйЗапрос.ДокументЗакупки.ДоговорКонтрагента
	               |ПОМЕСТИТЬ ПоследнееПоступление
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЗакупкиОбороты.Номенклатура КАК Номенклатура,
	               |		ЗакупкиОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |		МАКСИМУМ(ЗакупкиОбороты.ДокументЗакупки) КАК ДокументЗакупки
	               |	ИЗ
	               |		РегистрНакопления.Закупки.Обороты(
	               |				,
	               |				,
	               |				,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							Оприходования.Номенклатура
	               |						ИЗ
	               |							Оприходования КАК Оприходования)
	               |					И ХарактеристикаНоменклатуры В
	               |						(ВЫБРАТЬ
	               |							Оприходования.ХарактеристикаНоменклатуры
	               |						ИЗ
	               |							Оприходования КАК Оприходования)) КАК ЗакупкиОбороты
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЗакупкиОбороты.Номенклатура,
	               |		ЗакупкиОбороты.ХарактеристикаНоменклатуры) КАК ВложенныйЗапрос
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Оприходования.Ссылка КАК Ссылка,
	               |	Оприходования.Номенклатура.Родитель,
	               |	Оприходования.Номенклатура,
	               |	Оприходования.ХарактеристикаНоменклатуры,
	               |	Оприходования.Количество,
	               |	ПоследнееПоступление.ДокументЗакупки,
	               |	ПоследнееПоступление.ДокументЗакупкиКонтрагент,
	               |	ПоследнееПоступление.ДокументЗакупкиДоговорКонтрагента КАК ДокументЗакупкиДоговорКонтрагента,
	               |	ПоследнееПоступление.ДокументЗакупкиКонтрагент.РасписаниеРаботыСтрокой КАК КонтрагентКодБУ,
				   //Добавлено Monstr 180512
				   |	Оприходования.ЕдиницаИзмерения,
	               |	Оприходования.Коэффициент
				   //Конец добавленного Monstr 180512
	               |ИЗ
	               |	Оприходования КАК Оприходования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнееПоступление КАК ПоследнееПоступление
	               |		ПО Оприходования.Номенклатура = ПоследнееПоступление.Номенклатура
	               |			И Оприходования.ХарактеристикаНоменклатуры = ПоследнееПоступление.ХарактеристикаНоменклатуры
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	ДокументЗакупкиДоговорКонтрагента
	               |ИТОГИ ПО
	               |	Ссылка,
	               |	ДокументЗакупкиДоговорКонтрагента
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	Запрос.УстановитьПараметр("НеТМЦ", Справочники.Номенклатура.НайтиПоКоду("06052014")); // Не ТМЦ
	//Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	
	ПроверитьЗаполнениеКодовБУ(Результат, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = ПолучитьСоединеие(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоОприходованию = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОприходованию.Следующий() Цикл
		
		ВыборкаПоПоставщику = ВыборкаПоОприходованию.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПоставщику.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПоставщику.ДокументЗакупкиДоговорКонтрагента) Тогда 
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = ПолучитьПоступлениеОбъект(Соединение, ВыборкаПоПоставщику);
			
			ВыборкаНоменклатуры = ВыборкаПоПоставщику.Выбрать();
			Пока ВыборкаНоменклатуры.Следующий() Цикл
				
				НоваяСтрока = ДокументОбъект.Товары.Добавить();
				//Изменено Monstr 180410
				//Было:НоваяСтрока.Номенклатура	= ПолучитьНоменклатуруВПриёмнике(Соединение, ВыборкаНоменклатуры.Номенклатура);
				ЕдиницаХранения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
				НоваяСтрока.Номенклатура	= _5LB_ОбменСДругимиБазами.ПолучитьНоменклатуруВПриёмнике(Соединение, ВыборкаНоменклатуры.Номенклатура,,ЕдиницаХранения);
				НоваяСтрока.Количество		= ВыборкаНоменклатуры.Количество * ?(ВыборкаНоменклатуры.Коэффициент = 0,1,ВыборкаНоменклатуры.Коэффициент) * ВыборкаНоменклатуры.ЕдиницаИзмерения.Коэффициент / ?(НЕ ЕдиницаХранения.Коэффициент = 0,ЕдиницаХранения.Коэффициент,1);
				//Конец изменного Monstr 180410
				НоваяСтрока.Цена			= Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаНоменклатуры.Номенклатура, ВыборкаНоменклатуры.ХарактеристикаНоменклатуры, 
					Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000015"), ВыборкаПоПоставщику.Ссылка.Дата);
				Соединение.ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока, 0);
				НоваяСтрока.СтавкаНДС		= Соединение.Перечисления.СтавкиНДС.НДС18;
				
			КонецЦикла;
			
			//Соединение.СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ДокументОбъект, Соединение.РежимЗаписиДокумента.Проведение);
			Соединение.Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Товары");
			Соединение.Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаРасчетов(ДокументОбъект);
			
			Попытка
				ДокументОбъект.Записать(Соединение.РежимЗаписиДокумента.Проведение);
			Исключение
				Попытка
					ДокументОбъект.Записать(Соединение.РежимЗаписиДокумента.Запись);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			ОбработкаПрерыванияПользователя();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПоступлениеОбъект(Соединение, ВыборкаПоПоставщику)
	
	Запрос = Соединение.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
					|	ПоступлениеТоваровУслуг.Ссылка
					|ИЗ
					|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
					|ГДЕ
					|	НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ) = &Дата
					|	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента
					|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
					|	И НЕ ПоступлениеТоваровУслуг.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ВыборкаПоПоставщику.Ссылка.Дата));
	Запрос.УстановитьПараметр("Контрагент", Соединение.Справочники.Контрагенты.НайтиПоКоду(ВыборкаПоПоставщику.ДокументЗакупкиДоговорКонтрагента.Владелец.РасписаниеРаботыСтрокой));
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаПоПоставщику.Ссылка));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		НовыйДокумент = Выборка.Ссылка.Получитьобъект();
	Иначе 
		НовыйДокумент = Соединение.Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Дата 			= ВыборкаПоПоставщику.Ссылка.Дата;
		НовыйДокумент.ВидОперации 	= Соединение.Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		НовыйДокумент.Организация 	= Соединение.Справочники.Организации.НайтиПоКоду("00-000001");
		НовыйДокумент.Склад			= Соединение.Справочники.Склады.НайтиПоКоду("000000005");
		НовыйДокумент.ПодразделениеОрганизации	= Соединение.Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000005");
		НовыйДокумент.Контрагент	= Соединение.Справочники.Контрагенты.НайтиПоКоду(ВыборкаПоПоставщику.ДокументЗакупкиДоговорКонтрагента.Владелец.РасписаниеРаботыСтрокой);
		
		Если ТестовоеСоединение Тогда 
			НовыйДокумент.ДоговорКонтрагента	= Соединение.Справочники.Контрагенты.НайтиПоКоду(ВыборкаПоПоставщику.ДокументЗакупкиДоговорКонтрагента.Владелец.РасписаниеРаботыСтрокой).ОсновнойДоговорКонтрагента;
		Иначе
			//Выб = Соединение.Справочники.ДоговорыКонтрагентов.Выбрать(, НовыйДокумент.Контрагент);
			//Выб.Следующий();
			//
			//НовыйДокумент.ДоговорКонтрагента	= Выб;
		КонецЕсли;
		
		НовыйДокумент.СпособЗачетаАвансов		= Соединение.Перечисления.СпособыЗачетаАвансов.Автоматически;
		НовыйДокумент.НомерВходящегоДокумента	= ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаПоПоставщику.Ссылка);
		НовыйДокумент.ДатаВходящегоДокумента	= ВыборкаПоПоставщику.Ссылка.Дата;
		//Соединение.ПоступлениеТоваровУслугФормы.ДоговорКонтрагентаОбработатьИзменение(Форма, Новый Массив);
		
		// Проч реквизиты
		НовыйДокумент.ВалютаДокумента	= НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаДокумента			= Соединение.РаботаСКурсамиВалют.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, НовыйДокумент.Дата);
		НовыйДокумент.КурсВзаиморасчетов		= СтруктураКурсаДокумента.Курс;
		НовыйДокумент.КратностьВзаиморасчетов	= СтруктураКурсаДокумента.Кратность;
		
		
		ПараметрыЗаполнения = Соединение.ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(Новый Массив, НовыйДокумент);
		Соединение.СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
		
		
		
		
	КонецЕсли;
	
	НовыйДокумент.Комментарий = Строка(ВыборкаПоПоставщику.ссылка);
	
	Возврат НовыйДокумент;
	
КонецФункции

Процедура ПроверитьЗаполнениеКодовБУ(Результат, Отказ)
	
	Выборка = Результат.Выбрать();
	
	МассивОшибок = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.КонтрагентКодБУ = "" Тогда
			МассивОшибок.Добавить(Выборка.ДокументЗакупкиКонтрагент);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда 
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОшибок);
		Отказ = Истина;
		Сообщить("Для следущих контрагентов не указано расписание работы");
	КонецЕсли;
	
	Для Каждого ТекСтрока Из МассивОшибок Цикл
		Сообщить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

//Изменено Monstr 180410
//Было:
//Функция ПолучитьНоменклатуруВПриёмнике (Бух,Номенклатура)
//	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
//		возврат НЕОПРЕДЕЛЕНО;
//	КонецЕсли;
//	СоздаёмРодителя = Ложь;
//	
//	Запрос = Бух.NewObject("Запрос");
//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Н.Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура КАК Н
//	|ГДЕ
//	|	НЕ Н.ЭтоГруппа
//	|	И Н.Код = &Код";
//	Запрос.УстановитьПараметр("Код",СокрЛП(Номенклатура.Код));
//	
//	Рез = Запрос.Выполнить();
//	Если Рез.Пустой() Тогда
//		Если ЗначениеЗаполнено(Номенклатура.Родитель) Тогда
//			Запрос = Бух.NewObject("Запрос");
//			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Н.Ссылка
//			|ИЗ
//			|	Справочник.Номенклатура КАК Н
//			|ГДЕ
//			|	Н.ЭтоГруппа
//			|	И Н.Код = &Код";
//			Запрос.УстановитьПараметр("Код",СокрЛП(Номенклатура.Родитель.Код));
//			РезРод = Запрос.Выполнить();
//			Если РезРод.Пустой() Тогда
//				СоздаёмРодителя = Истина;
//			Иначе
//				Выб = РезРод.Выбрать();
//				Выб.Следующий();
//				НовРод = Выб.Ссылка;
//			КонецЕсли;
//		КонецЕсли;
//		Если СоздаёмРодителя Тогда
//			НовРод = Бух.Справочники.Номенклатура.СоздатьГруппу();
//			НовРод.Родитель = Бух.Справочники.Номенклатура.НайтиПоКоду("00-00000039");
//			НовРод.Код = Номенклатура.Родитель.Код;
//			НовРод.Наименование = Номенклатура.Родитель.Наименование;
//			НовРод.Записать();
//		КонецЕсли;
//		
//		НовНом = Бух.Справочники.Номенклатура.СоздатьЭлемент();
//		НовНом.Код = Номенклатура.Код;
//		НовНом.Артикул = Номенклатура.Артикул;
//		НовНом.Родитель = НовРод.Ссылка;
//		НовНом.Наименование = Номенклатура.Наименование;
//		НовНом.НаименованиеПолное = Номенклатура.Наименование;
//		НовНом.ЕдиницаИзмерения = Бух.Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
//		НовНом.Комментарий = "Пришло из УТ "+ТекущаяДата();
//		НовНом.НоменклатурнаяГруппа = Бух.Справочники.НоменклатурныеГруппы.НайтиПоКоду("00-000001");
//		НовНом.СтавкаНДС = Бух.Перечисления.СтавкиНДС.НДС18;
//		НовНом.Записать(); 
//	Иначе
//		Выб = Рез.Выбрать();
//		Выб.Следующий();
//		НовНом = Выб.Ссылка;
//	КонецЕсли;
//	Возврат НовНом.Ссылка;
//КонецФункции
//Конец изменного Monstr 180410



// Списание >= Возврат товаров поставщику
Процедура ПерегрузкаСписанияТоваров(НачПериода, КонПериода, Отказ = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписаниеТоваровТовары.Ссылка,
	               |	СписаниеТоваровТовары.Номенклатура,
	               |	СписаниеТоваровТовары.ХарактеристикаНоменклатуры,
	               |	СписаниеТоваровТовары.Количество,
				   //Добавлено Monstr 180512
				   |	СписаниеТоваровТовары.Коэффициент,
	               |	СписаниеТоваровТовары.ЕдиницаИзмерения
				   //Конец добавленного Monstr 180512
	               |ПОМЕСТИТЬ Оприходования
	               |ИЗ
	               |	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	               |ГДЕ
	               |	СписаниеТоваровТовары.Ссылка.Проведен
	               |	И СписаниеТоваровТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И НЕ СписаниеТоваровТовары.Номенклатура В ИЕРАРХИИ (&НеТМЦ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	               |	ВложенныйЗапрос.ДокументЗакупки,
	               |	ВложенныйЗапрос.ДокументЗакупки.Контрагент,
	               |	ВложенныйЗапрос.ДокументЗакупки.ДоговорКонтрагента
	               |ПОМЕСТИТЬ ПоследнееПоступление
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЗакупкиОбороты.Номенклатура КАК Номенклатура,
	               |		ЗакупкиОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |		МАКСИМУМ(ЗакупкиОбороты.ДокументЗакупки) КАК ДокументЗакупки
	               |	ИЗ
	               |		РегистрНакопления.Закупки.Обороты(
	               |				,
	               |				,
	               |				,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							Оприходования.Номенклатура
	               |						ИЗ
	               |							Оприходования КАК Оприходования)
	               |					И ХарактеристикаНоменклатуры В
	               |						(ВЫБРАТЬ
	               |							Оприходования.ХарактеристикаНоменклатуры
	               |						ИЗ
	               |							Оприходования КАК Оприходования)) КАК ЗакупкиОбороты
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЗакупкиОбороты.Номенклатура,
	               |		ЗакупкиОбороты.ХарактеристикаНоменклатуры) КАК ВложенныйЗапрос
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Оприходования.Ссылка КАК Ссылка,
	               |	Оприходования.Номенклатура.Родитель,
	               |	Оприходования.Номенклатура,
	               |	Оприходования.ХарактеристикаНоменклатуры,
	               |	Оприходования.Количество,
	               |	ПоследнееПоступление.ДокументЗакупки,
	               |	ПоследнееПоступление.ДокументЗакупкиКонтрагент,
	               |	ПоследнееПоступление.ДокументЗакупкиДоговорКонтрагента КАК ДокументЗакупкиДоговорКонтрагента,
	               |	ПоследнееПоступление.ДокументЗакупкиКонтрагент.РасписаниеРаботыСтрокой КАК КонтрагентКодБУ,
				   //Добавлено Monstr 180512
				   |	Оприходования.Коэффициент,
	               |	Оприходования.ЕдиницаИзмерения
				   //Конец добавленного Monstr 180512
	               |ИЗ
	               |	Оприходования КАК Оприходования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнееПоступление КАК ПоследнееПоступление
	               |		ПО Оприходования.Номенклатура = ПоследнееПоступление.Номенклатура
	               |			И Оприходования.ХарактеристикаНоменклатуры = ПоследнееПоступление.ХарактеристикаНоменклатуры
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	ДокументЗакупкиДоговорКонтрагента
	               |ИТОГИ ПО
	               |	Ссылка,
	               |	ДокументЗакупкиДоговорКонтрагента
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	Запрос.УстановитьПараметр("НеТМЦ", Справочники.Номенклатура.НайтиПоКоду("06052014")); // Не ТМЦ
	
	Результат = Запрос.Выполнить();
	ВыборкаПоСписанию = Результат.Выбрать();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = ПолучитьСоединеие(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПосписанию = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСписанию.Следующий() Цикл
		
		ВыборкаПоПоставщику = ВыборкаПоСписанию.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоПоставщику.Следующий() Цикл
			ДокументОбъект = ПолучитьВозвратОбъект(Соединение, ВыборкаПоПоставщику);
			
			ВыборкаНоменклатуры = ВыборкаПоПоставщику.Выбрать();
			Пока ВыборкаНоменклатуры.Следующий() Цикл
				
				НоваяСтрока = ДокументОбъект.Товары.Добавить();
				//Изменено Monstr 180410
				//Было:НоваяСтрока.Номенклатура	= ПолучитьНоменклатуруВПриёмнике(Соединение, ВыборкаНоменклатуры.Номенклатура);
				ЕдиницаХранения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
				НоваяСтрока.Номенклатура	= _5LB_ОбменСДругимиБазами.ПолучитьНоменклатуруВПриёмнике(Соединение, ВыборкаНоменклатуры.Номенклатура,,ЕдиницаХранения);
				НоваяСтрока.Количество		= ВыборкаНоменклатуры.Количество * ?(ВыборкаНоменклатуры.Коэффициент = 0,1,ВыборкаНоменклатуры.Коэффициент) * ВыборкаНоменклатуры.ЕдиницаИзмерения.Коэффициент / ?(НЕ ЕдиницаХранения.Коэффициент = 0,ЕдиницаХранения.Коэффициент,1);
				//Конец изменного Monstr 180410
				НоваяСтрока.Цена			= Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаНоменклатуры.Номенклатура, ВыборкаНоменклатуры.ХарактеристикаНоменклатуры, 
					Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000015"), ВыборкаПоПоставщику.Ссылка.Дата);
				НоваяСтрока.СтавкаНДС		= Соединение.Перечисления.СтавкиНДС.НДС18;
				Соединение.ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока, 0);
				
			КонецЦикла;
			
			//Соединение.СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ДокументОбъект, Соединение.РежимЗаписиДокумента.Проведение);
			Соединение.Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Товары");
			Соединение.Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ДокументОбъект);
			
			Попытка
				ДокументОбъект.Записать(Соединение.РежимЗаписиДокумента.Проведение);
			Исключение
				Попытка
					ДокументОбъект.Записать(Соединение.РежимЗаписиДокумента.Запись);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			ОбработкаПрерыванияПользователя();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВозвратОбъект(Соединение, ВыборкаПоПоставщику)
	
	Запрос = Соединение.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Ссылка
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ВозвратТоваровПоставщику.Дата, ДЕНЬ) = &Дата
	               |	И ВозвратТоваровПоставщику.Контрагент = &Контрагент
	               |	И НЕ ВозвратТоваровПоставщику.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ВыборкаПоПоставщику.Ссылка.Дата));
	Запрос.УстановитьПараметр("Контрагент", Соединение.Справочники.Контрагенты.НайтиПоКоду(ВыборкаПоПоставщику.ДокументЗакупкиДоговорКонтрагента.Владелец.РасписаниеРаботыСтрокой));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		НовыйДокумент = Выборка.Ссылка.Получитьобъект();
	Иначе 
		НовыйДокумент = Соединение.Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
		НовыйДокумент.Дата 			= ВыборкаПоПоставщику.Ссылка.Дата;
		НовыйДокумент.ВидОперации 	= Соединение.Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
		НовыйДокумент.Организация 	= Соединение.Справочники.Организации.НайтиПоКоду("00-000001");
		НовыйДокумент.Склад			= Соединение.Справочники.Склады.НайтиПоКоду("000000005");
		НовыйДокумент.ПодразделениеОрганизации	= Соединение.Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000005");
		НовыйДокумент.Контрагент	= Соединение.Справочники.Контрагенты.НайтиПоКоду(ВыборкаПоПоставщику.ДокументЗакупкиДоговорКонтрагента.Владелец.РасписаниеРаботыСтрокой);
		
		Если ТестовоеСоединение Тогда 
			НовыйДокумент.ДоговорКонтрагента	= Соединение.Справочники.Контрагенты.НайтиПоКоду(ВыборкаПоПоставщику.ДокументЗакупкиДоговорКонтрагента.Владелец.РасписаниеРаботыСтрокой).ОсновнойДоговорКонтрагента;
		Иначе
			Выб = Соединение.Справочники.ДоговорыКонтрагентов.Выбрать(, НовыйДокумент.Контрагент);
			Выб.Следующий();
			
			НовыйДокумент.ДоговорКонтрагента	= Выб;
		КонецЕсли;
		
		//НовыйДокумент.СпособЗачетаАвансов		= Соединение.Перечисления.СпособыЗачетаАвансов.Автоматически;
		//НовыйДокумент.НомерВходящегоДокумента	= ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаПоПоставщику.Ссылка);
		//НовыйДокумент.ДатаВходящегоДокумента	= ВыборкаПоПоставщику.Ссылка.Дата;
		//Соединение.ПоступлениеТоваровУслугФормы.ДоговорКонтрагентаОбработатьИзменение(Форма, Новый Массив);
		
		// Проч реквизиты
		НовыйДокумент.ВалютаДокумента	= НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаДокумента			= Соединение.РаботаСКурсамиВалют.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, НовыйДокумент.Дата);
		НовыйДокумент.КурсВзаиморасчетов		= СтруктураКурсаДокумента.Курс;
		НовыйДокумент.КратностьВзаиморасчетов	= СтруктураКурсаДокумента.Кратность;
		
		
		ПараметрыЗаполнения = Соединение.ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(Новый Массив, НовыйДокумент);
		Соединение.Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаРасчетов(НовыйДокумент);
	КонецЕсли;
	
	НовыйДокумент.Комментарий = Строка(ВыборкаПоПоставщику.ссылка);
	
	Возврат НовыйДокумент;
	
КонецФункции


// На всякий случай
ТестовоеСоединение = Истина;