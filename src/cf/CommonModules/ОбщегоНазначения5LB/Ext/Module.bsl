
////////////////////////////////////////////////////////////////////////
// Общего назначения

Функция СтрокуВДату(сДата) Экспорт	
	
	дРез = Дата(1, 1, 1);
	
	сДатаВх0 = СокрЛП(сДата);	
	сДатаВх1 = СтрЗаменить(сДатаВх0, ".", "-");
	сДатаВх2 = СтрЗаменить(сДатаВх1, "/", "-");
	
	ДлСтр = СтрДлина(сДатаВх2);
	
	cГод 	= "01";
	сМесяц 	= "01";
	сДень	= "01";
	сЧас 	= "00";
	сМин 	= "00";
	сСек 	= "00";

	Если ДлСтр = 5 Тогда	// 16-08 или 08-01
		
		cПервое = Лев(сДатаВх2, 2);
		Попытка
			чПервое = Число(cПервое);
		Исключение
			Возврат дРез;
		КонецПопытки;
		Если чПервое > 12 Тогда
			сГод = cПервое;		сМесяц = Сред(сДатаВх2, 4, 2);
		Иначе
			сГод = Строка(Год(ТекущаяДата()));	сМесяц = cПервое;	сДень = Сред(сДатаВх2, 4, 2);
		КонецЕсли;
		
	ИначеЕсли ДлСтр = 8 Тогда	// 16-08-01
		сГод = Лев(сДатаВх2, 2);	сМесяц = Сред(сДатаВх2, 4, 2);	сДень = Сред(сДатаВх2, 7, 2);		
			
	ИначеЕсли ДлСтр = 10 Тогда	// 2016-08-01
	    сГод = Лев(сДатаВх2, 4);	сМесяц = Сред(сДатаВх2, 6, 2);	сДень = Сред(сДатаВх2, 9, 2);
		
	ИначеЕсли ДлСтр = 14 Тогда	// 16-08-01 12:11
		сГод = Лев(сДатаВх2, 2);		сМесяц = Сред(сДатаВх2, 4, 2);		сДень = Сред(сДатаВх2, 7, 2);
		сЧас = Сред(сДатаВх2, 10, 2);	сМин 	=  Сред(сДатаВх2, 13, 2);

	ИначеЕсли ДлСтр = 16 Тогда	// 2016-08-01 12:11
		сГод = Лев(сДатаВх2, 4);		сМесяц = Сред(сДатаВх2, 6, 2);		сДень = Сред(сДатаВх2, 9, 2);
		сЧас = Сред(сДатаВх2, 12, 2);	сМин 	=  Сред(сДатаВх2, 15, 2);
	
	ИначеЕсли ДлСтр = 17 Тогда	// 16-08-02 12:11:20
		сГод = Лев(сДатаВх2, 2);		сМесяц = Сред(сДатаВх2, 4, 2);		сДень = Сред(сДатаВх2, 7, 2);
		сЧас = Сред(сДатаВх2, 10, 2);	сМин 	=  Сред(сДатаВх2, 13, 2);   сСек =  Сред(сДатаВх2, 16, 2);
	
	ИначеЕсли ДлСтр = 19 Тогда	// 2016-08-02 12:11:20
		сГод = Лев(сДатаВх2, 4);		сМесяц = Сред(сДатаВх2, 6, 2);		сДень = Сред(сДатаВх2, 9, 2);
		сЧас = Сред(сДатаВх2, 12, 2);	сМин 	=  Сред(сДатаВх2, 15, 2);   сСек =  Сред(сДатаВх2, 18, 2);

	КонецЕсли;		
	
	
	Попытка
		чГод = Число(сГод);
		чМесяц = Число(сМесяц);
		чДень = Число(сДень);
		чЧас = Число(сЧас);
		чМин = Число(сМин);
		чСек = Число(сСек);
		дт = Дата(чГод, чМесяц, чДень, чЧас, чМин, чСек);
		дРез = дт;
	Исключение
		Возврат дРез;
	КонецПопытки;    
		
	Возврат дРез;	
	
КонецФункции

Функция СтрокаСПробелами(стрВх, КолВоПробеловСправа) Экспорт
	
	стрИсх = стрВх;
	Если СтрДлина(стрВх) < КолВоПробеловСправа Тогда  
		Для Поз =СтрДлина(стрВх) По КолВоПробеловСправа Цикл
			стрИсх = стрИсх + " ";	
		КонецЦикла;
	КонецЕсли;
	
	Возврат стрИсх;
	
КонецФункции


Функция Фамилия(ПользовательСсылка) Экспорт	
	
	стрРез = Строка(ПользовательСсылка);
	ПозРазд = Найти(стрРез, " ");
	Если ПозРазд > 0 Тогда
		стрРез = Лев(стрРез, ПозРазд - 1);
	КонецЕсли;
		
	Возврат стрРез;	
	
КонецФункции


Функция ПолучитьТекстБуфераОбмена() Экспорт
#Если Клиент Тогда
    Объект = Новый COMОбъект("htmlfile");
    Возврат Объект.ParentWindow.ClipboardData.Getdata("Text");
#КонецЕсли
КонецФункции

//НМА 31.01.18 глТаймаут
Процедура глТаймаут(Сек) Экспорт
	scr = Новый COMОбъект("WScript.Shell");
	scr.Run("timeout "+СокрЛП(Число(Сек)),0,1);
	scr = Неопределено;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Работа с документами

// Получить время последнего документа с видом "ВидДок" (строка) и датой
Функция ПолучитьВремяПоследнегоДокументаНаДату(ВидДок, НаДату, ИсключитьСсылку=Неопределено) Экспорт

	РезДт = Дата(1,1,1);
	Если Метаданные.Документы.Найти(ВидДок) = Неопределено Тогда
		Сообщить("Не найден вид документа """ + ВидДок + """!");
		Возврат РезДт;
	КонецЕсли;
	
	РезДт = НачалоДня(НаДату);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УстановкаЦенНоменклатуры.Ссылка,
		|	УстановкаЦенНоменклатуры.Дата
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
		|ГДЕ
		|	УстановкаЦенНоменклатуры.Дата МЕЖДУ &ДатаНач И &ДатаКон
	//	|	%ТекстОтбор%
		|УПОРЯДОЧИТЬ ПО
		|	УстановкаЦенНоменклатуры.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(НаДату));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(НаДату));
	//Если ИсключитьСсылку <> Неопределено Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстОтбор%", "УстановкаЦенНоменклатуры.Ссылка");
	//	Запрос.УстановитьПараметр("ИсключитьДокумент", ИсключитьСсылку);
	//Иначе
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстОтбор%", "");
	//КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезДт = ВыборкаДетальныеЗаписи.Дата;
		Прервать;
	КонецЦикла;
		
	Возврат РезДт;
	
КонецФункции

// поиск п овиду документа и номеру (по умолчанию - с начала года + не помеч.на удаление
Функция НайтиДокументПоНомеру(ВидДокСтрокой="ПеремещениеТоваров", НомерДок, ДатаСНачалаГода=Истина, ВсеДокументы=Ложь) Экспорт
	
	Рез = Документы[ВидДокСтрокой].ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	ПЕРВЫЕ 1
		|	Док.Ссылка
		|ИЗ
		|	Документ." + ВидДокСтрокой + " КАК Док
		|ГДЕ
		|	Док.Номер = &НомерДок";
	Запрос.УстановитьПараметр("НомерДок", НомерДок);
	
	Если НЕ ВсеДокументы Тогда		
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ Док.ПометкаУдаления";
	КонецЕсли;	
	Если ДатаСНачалаГода Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И Док.Дата > &ДатаС
			|";
	  	ДатаС = НачалоГода(ТекущаяДата());
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
	//Иначе
	//	ДатаС = Дата(2001, 1, 1);
	КонецЕсли;			 
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции	

// поиск п овиду документа и номеру (по умолчанию - с начала года + не помеч.на удаление
Функция НайтиДокументПоРеквизиту(ВидДокСтрокой="ПеремещениеТоваров", РеквИмя, РеквЗначение, ДатаСНачалаГода=Истина, ВсеДокументы=Ложь) Экспорт
	
	Рез = Документы[ВидДокСтрокой].ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	ПЕРВЫЕ 1
		|	Док.Ссылка
		|ИЗ
		|	Документ." + ВидДокСтрокой + " КАК Док
		|ГДЕ
		|	Док." + РеквИмя + " = &РеквЗначение";
	Запрос.УстановитьПараметр("РеквЗначение", РеквЗначение);
	
	Если НЕ ВсеДокументы Тогда		
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ Док.ПометкаУдаления";
	КонецЕсли;	
	Если ДатаСНачалаГода Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И Док.Дата > &ДатаС
			|";
	  	ДатаС = НачалоГода(ТекущаяДата());
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
	//Иначе
	//	ДатаС = Дата(2001, 1, 1);
	КонецЕсли;			 
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции	



////////////////////////////////////////////////////////////////////////
// Аудит изменения объектов

// "фиксация" изменений реквизитов объекта Источник - объект справочник
Процедура ЗаписатьИзменениеОбъекта(Источник, ДатаИзменения=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
//	ОбъектСсылка = Источник.Ссылка;
	ОбъектСсылка = Источник.Ссылка;
	Если ДатаИзменения = Неопределено Тогда
		ДатаИзменения = ТекущаяДата();
	КонецЕсли;
	
	ЗапросА = Новый Запрос;	
	ЗапросА.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АудитТабл.ОбъектИзменения,
		|	АудитТабл.ОбъектРеквизит,
		|	АудитТабл.Основной,
		|	АудитТабл.Статус,
		|	АудитТабл.ДатаИзменения,
		|	АудитТабл.ЗначениеДо,
		|	АудитТабл.ЗначениеПосле
		|ИЗ
		|	РегистрСведений.АудитИзмененияРабочаяТаблица КАК АудитТабл		
		|";	
	тзТекущая = ЗапросА.Выполнить().Выгрузить();	
	тзТекущая.Очистить();
	
	//тзТекущая = Новый ТаблицаЗначений();
	//тзТекущая.Колонки.Добавить("ОбъектИзменения");
	//тзТекущая.Колонки.Добавить("ОбъектРеквизит");
	//тзТекущая.Колонки.Добавить("ДатаИзменения");
	//тзТекущая.Колонки.Добавить("ЗначениеДо");
	//тзТекущая.Колонки.Добавить("ЗначениеПосле");
	
	
	// справочник
	Если Метаданные.Справочники.Найти(Источник.Метаданные().Имя) <> Неопределено Тогда
		
		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = "Код";	
		НоваяЗапись.ЗначениеПосле = Строка(Источник.Код);
		
		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = "Наименование";	
		НоваяЗапись.ЗначениеПосле = Источник.Наименование;
		
		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = "ПометкаУдаления";	
		НоваяЗапись.ЗначениеПосле = Строка(Источник.ПометкаУдаления);

	// документ
	ИначеЕсли Метаданные.Документы.Найти(Источник.Метаданные().Имя) <> Неопределено Тогда

		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = "Номер";	
		НоваяЗапись.ЗначениеПосле = Строка(Источник.Номер);
		
		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = "Дата";	
		НоваяЗапись.ЗначениеПосле = Строка(Источник.Дата);
		
		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = "Проведен";	
		НоваяЗапись.ЗначениеПосле = Строка(Источник.Проведен);

		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = "ПометкаУдаления";	
		НоваяЗапись.ЗначениеПосле = Строка(Источник.ПометкаУдаления);

	Иначе
		Возврат;
	КонецЕсли;
	
	 // реквизиты
	Для Каждого ТекРекв Из Источник.Метаданные().Реквизиты Цикл
		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = Строка(ТекРекв.Имя);	
		НоваяЗапись.ЗначениеПосле = Строка(Источник[ТекРекв.Имя]);	 
	КонецЦикла;
	
	// т.ч.
	Для Каждого ТекТЧ Из Источник.Метаданные().ТабличныеЧасти Цикл
		ИмяТЧ = ТекТЧ.Имя;	
		Для Каждого ТекСтр Из Источник[ТекТЧ.Имя] Цикл	
			Для Каждого ТекРекв Из ТекТЧ.Реквизиты Цикл			
				НоваяЗапись = тзТекущая.Добавить();
				НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
				НоваяЗапись.ОбъектРеквизит = ИмяТЧ + "[" + Формат(ТекСтр.НомерСтроки, "ЧЦ=12; ЧДЦ=; ЧГ=0") + "]" + "." + Строка(ТекРекв.Имя);
				НоваяЗапись.ЗначениеПосле = Строка(ТекСтр[ТекРекв.Имя]);	 
			КонецЦикла;				
		КонецЦикла;                                                      
	КонецЦикла;
	
	тзТекущая.ЗаполнитьЗначения(Истина, "Основной");

	
	МенеждерВТ = Новый МенеджерВременныхТаблиц;	
	ЗапросВТ = Новый Запрос("ВЫБРАТЬ * ПОМЕСТИТЬ втТекущая ИЗ &Таб КАК Т");
	ЗапросВТ.МенеджерВременныхТаблиц = МенеждерВТ;
	ЗапросВТ.УстановитьПараметр("Таб", тзТекущая);	
	ЗапросВТ.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеждерВТ;	
	Запрос.Текст = 
		"
		//|ВЫБРАТЬ
		//|	Т.ОбъектИзменения,
		//|	Т.ОбъектРеквизит,
		//|	Т.ДатаИзменения,
		//|	Т.ЗначениеДо,
		//|	Т.ЗначениеПосле,
		//|	Т.РеквизитИзменен
		//|ИЗ
		//|(
		|ВЫБРАТЬ
		|	ТаблТекущая.ОбъектИзменения,
		|	ТаблТекущая.ОбъектРеквизит,
		|	ТаблТекущая.Основной,
		|	ЛОЖЬ КАК Статус,
		|	&ДатаИзменения КАК ДатаИзменения,
		|	ЕстьNULL(ТаблПоследняяВерсия.ЗначениеПосле, """") ЗначениеДо,
//		|	ТаблТекущая.ЗначениеПосле КАК ЗначениеПосле,
		|	ЕстьNULL(ТаблТекущая.ЗначениеПосле, """") ЗначениеПосле,
		|	ВЫБОР
		|		КОГДА ЕстьNULL(ТаблПоследняяВерсия.ЗначениеПосле, """") <> ТаблТекущая.ЗначениеПосле ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|   КОНЕЦ РеквизитИзменен
		
		|ИЗ
		|	втТекущая КАК ТаблТекущая
		|	ЛЕВОЕ СОЕДИНЕНИЕ
//		|	ПОЛНОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ *
		|		ИЗ РегистрСведений.АудитИзмененияРабочаяТаблица КАК ТДанные
		|		ГДЕ
		|			ТДанные.ОбъектИзменения = &ОбъектИзменения
		|			И ТДанные.Основной
		|	) КАК ТаблПоследняяВерсия
		|	ПО 
		//втПоследняяВерсия.ОбъектИзменения = втТекущая.ОбъектИзменения
		|	ТаблПоследняяВерсия.ОбъектРеквизит = ТаблТекущая.ОбъектРеквизит	
		//|) КАК Т
		//|ГДЕ
		//|	Т.РеквизитИзменен 
		|";
	
	Запрос.УстановитьПараметр("ОбъектИзменения", ОбъектСсылка);
	Запрос.УстановитьПараметр("ДатаИзменения", ДатаИзменения);

	                          
	тзРезультат = Запрос.Выполнить().Выгрузить();
	тзРезультат.ЗаполнитьЗначения(Ложь, "Статус");

	ЗапросУДАЛЕНИЕ = Новый Запрос;
	ЗапросУДАЛЕНИЕ.МенеджерВременныхТаблиц = МенеждерВТ;
	ЗапросУДАЛЕНИЕ.Текст = "УНИЧТОЖИТЬ втТекущая";
	
	
	Попытка

		НаборЗаписей = РегистрыСведений.АудитИзмененияРабочаяТаблица.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектИзменения.Установить(ОбъектСсылка);
		НаборЗаписей.Отбор.Основной.Установить(Истина);

		НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(тзРезультат);
		НаборЗаписей.Записать(Истина); 

	//	НаборЗаписей.Записать(Истина);
	//	Сообщить(стрИнф);
	Исключение
	//	Сообщить("Не удалось внести запись : " + стрИнф + "!", СтатусСообщения.Важное);
	КонецПопытки;
	
	// окончательная фиксация изменений - только для ограниченного списка объектов
	Если  (
		ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Номенклатура") 
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") 
		)
		Тогда

		Для Каждого ТекСтр Из тзРезультат Цикл
			Если ТекСтр.РеквизитИзменен Тогда
				
				//Если СокрЛП(ТекСтр.ЗначениеДо) <> "" Тогда
				
					ОбъектСсылка = ТекСтр.ОбъектИзменения;
					
					//ЗаписьИзменения = РегистрыСведений.АудитИзмененияОбъектов.СоздатьМенеджерЗаписи();
					//ЗаписьИзменения.ОбъектИзменения 	= ОбъектСсылка;
					//ЗаписьИзменения.Прочитать();
					//
					//ЗаписьИзменения.ОбъектИзменения 	= ОбъектСсылка;	
					//ЗаписьИзменения.ДатаИзменения 		= ?(ДатаИзменения=Неопределено, ТекущаяДата(), ДатаИзменения);
					//ЗаписьИзменения.ОбъектРеквизит   	= ТекСтр.ОбъектРеквизит;
					//ЗаписьИзменения.Записать(); 									
					
					РС = РегистрыСведений.АудитИзмененияОбъектов;					
					НаборЗаписей = РС.СоздатьНаборЗаписей(); 
					
					ТекДата = ТекущаяДата();
					НаборЗаписей.Отбор.Период.Установить(ТекДата);
					НаборЗаписей.Отбор.ОбъектИзменения.Установить(ОбъектСсылка); 
					НаборЗаписей.Отбор.ОбъектРеквизит.Установить(ТекСтр.ОбъектРеквизит); 					
					НаборЗаписей.Прочитать();
					
					Запись = НаборЗаписей.Добавить();	
					Запись.Период 					= ТекДата;
					Запись.ОбъектИзменения 			= ОбъектСсылка;
					Запись.ОбъектРеквизит	 		= ТекСтр.ОбъектРеквизит;
					Запись.ЗначениеСтарое			= ТекСтр.ЗначениеДо;
					Запись.ЗначениеНовое			= ТекСтр.ЗначениеПосле;
					Запись.Ответственный			= ПараметрыСеанса.ТекущийПользователь;		
										
					Попытка
						НаборЗаписей.Записать(Истина);
						//Сообщить(стрИнф);
					Исключение
						//Сообщить("Не удалось внести запись : " + стрИнф + "!", СтатусСообщения.Важное);
					КонецПопытки;
					
					
					
					//Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Номенклатура") Тогда
					//	ЗаписьИзменения = РегистрыСведений.EmeWmsПометкиКЭкспортуНоменклатуры.СоздатьМенеджерЗаписи();
					//	ЗаписьИзменения.Номенклатура	= ОбъектСсылка;
					//	ЗаписьИзменения.Прочитать();
					//	ЗаписьИзменения.Номенклатура 	= ОбъектСсылка;	
					//	ЗаписьИзменения.КЭкспорту 		= Истина;
					//	ЗаписьИзменения.ДатаЭкспорта   	= ?(ДатаИзменения=Неопределено, ТекущаяДата(), ДатаИзменения);
					//	ЗаписьИзменения.Записать(); 	
					// КонецЕсли;				
					
				//	Прервать;	
				//	
				//КонецЕсли;

			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;		
	// окончательная фиксация изменений - только для ограниченного списка объектов

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// подписка на измененение объектов
Процедура АудитИзмененияОбъектовПриЗаписи(Источник, Отказ) Экспорт
	
	//СвойствоАудит = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Аудит");
	//Если ЗначениеЗаполнено(СвойствоАудит) Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст="ВЫБРАТЬ
	//	             |	Р.Объект
	//	             |ИЗ
	//	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК Р
	//	             |ГДЕ
	//	             |	Р.Объект = &ОбъектАудит
	//	             |	И Р.Свойство = &СвойствоАудит
	//	             |	И Р.Значение = ИСТИНА";
	//Запрос.УстановитьПараметр("ОбъектАудит",	Источник.Ссылка);
	//Запрос.УстановитьПараметр("СвойствоАудит",	СвойствоАудит);

	//Если НЕ Запрос.Выполнить().Пустой() Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	//Если НЕ ПараметрыСеанса._НоменклатураНеФиксироватьИзменения Тогда		
	//Попытка
	//ЗаписатьИзменениеОбъекта(Источник);			                        	
	//Исключение
	//КонецПопытки;	
	
КонецПроцедуры

// возвращает булево - есть изменение в наборе записей р.с.
Процедура ЗаписатьИзменениеРегистраСведенийСОбъектом(ОбъектСсылка, ИмяРеквизита, ЗначениеРекв, ДатаИзменения=Неопределено) Экспорт	
	
	УстановитьПривилегированныйРежим(Истина);
	
////	ОбъектСсылка = Источник.Ссылка;
//	ОбъектСсылка = Источник;
	Если ДатаИзменения = Неопределено Тогда
		ДатаИзменения = ТекущаяДата();
	КонецЕсли;
	
	СтрРеквизита = ?(Лев(ИмяРеквизита, 1) <> "*", "*", "") + ИмяРеквизита;
	 
	ЗапросА = Новый Запрос;	
	ЗапросА.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АудитТабл.ОбъектИзменения,
		|	АудитТабл.ОбъектРеквизит,
		|	АудитТабл.Основной,
		|	АудитТабл.Статус,
		|	АудитТабл.ДатаИзменения,
		|	АудитТабл.ЗначениеДо,
		|	АудитТабл.ЗначениеПосле
		|ИЗ
		|	РегистрСведений.АудитИзмененияРабочаяТаблица КАК АудитТабл		
		|";	
	тзТекущая = ЗапросА.Выполнить().Выгрузить();	
	тзТекущая.Очистить();

	
		
	НоваяЗапись = тзТекущая.Добавить();
	НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
	НоваяЗапись.ОбъектРеквизит = СтрРеквизита;	
	НоваяЗапись.Основной = Ложь;
	НоваяЗапись.ЗначениеПосле = СокрЛП(Строка(ЗначениеРекв));
		
	
	МенеждерВТ = Новый МенеджерВременныхТаблиц;	
	ЗапросВТ = Новый Запрос("ВЫБРАТЬ * ПОМЕСТИТЬ втТекущая ИЗ &Таб КАК Т");
	ЗапросВТ.МенеджерВременныхТаблиц = МенеждерВТ;
	ЗапросВТ.УстановитьПараметр("Таб", тзТекущая);	
	ЗапросВТ.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеждерВТ;	
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	ТаблТекущая.ОбъектИзменения,
		|	ТаблТекущая.ОбъектРеквизит,
		|	ТаблТекущая.Основной,	
		|	ЛОЖЬ КАК Статус,
		|	&ДатаИзменения КАК ДатаИзменения,
		|	ЕстьNULL(ТаблПоследняяВерсия.ЗначениеПосле, """") ЗначениеДо,
		|	ЕстьNULL(ТаблТекущая.ЗначениеПосле, """") ЗначениеПосле,
		|	ВЫБОР
		|		КОГДА ЕстьNULL(ТаблПоследняяВерсия.ЗначениеПосле, """") <> ТаблТекущая.ЗначениеПосле ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|   КОНЕЦ РеквизитИзменен
		
		|ИЗ
		|	втТекущая КАК ТаблТекущая
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ *
		|		ИЗ РегистрСведений.АудитИзмененияРабочаяТаблица КАК ТДанные
		|		ГДЕ
		|			ТДанные.ОбъектИзменения = &ОбъектИзменения
		|			И ТДанные.ОбъектРеквизит = &ОбъектРеквизит
		|	) КАК ТаблПоследняяВерсия
		|	ПО 
		//втПоследняяВерсия.ОбъектИзменения = втТекущая.ОбъектИзменения
		|	ТаблПоследняяВерсия.ОбъектРеквизит = ТаблТекущая.ОбъектРеквизит	
		//|) КАК Т
		//|ГДЕ
		//|	Т.РеквизитИзменен 
		|";
	
	Запрос.УстановитьПараметр("ОбъектИзменения", ОбъектСсылка);
	Запрос.УстановитьПараметр("ОбъектРеквизит", СтрРеквизита);
	Запрос.УстановитьПараметр("ДатаИзменения", ДатаИзменения);

	                          
	тзРезультат = Запрос.Выполнить().Выгрузить();
	тзРезультат.ЗаполнитьЗначения(Ложь, "Статус");

	ЗапросУДАЛЕНИЕ = Новый Запрос;
	ЗапросУДАЛЕНИЕ.МенеджерВременныхТаблиц = МенеждерВТ;
	ЗапросУДАЛЕНИЕ.Текст = "УНИЧТОЖИТЬ втТекущая";
	
	
	Попытка

		НаборЗаписей = РегистрыСведений.АудитИзмененияРабочаяТаблица.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектИзменения.Установить(ОбъектСсылка);
		НаборЗаписей.Отбор.ОбъектРеквизит.Установить(СтрРеквизита);
		НаборЗаписей.Отбор.Основной.Установить(Ложь);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(тзРезультат);
		НаборЗаписей.Записать(Истина); 

	//	НаборЗаписей.Записать(Истина);
	//	Сообщить(стрИнф);
	Исключение
	//	Сообщить("Не удалось внести запись : " + стрИнф + "!", СтатусСообщения.Важное);
	КонецПопытки;

	
	УстановитьПривилегированныйРежим(Ложь);
	
	
КонецПроцедуры

// возвращает таблицу измененных реквизитов объекта ()
Функция ПолучитьИзмененияОбъекта(ОбъектСсылка, ФильтрПоОсновнымРеквизитам=Неопределено, ФильтрРеквизитовСтрокой="") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Табл.ОбъектИзменения,
		|	Табл.ОбъектРеквизит,
		|	Табл.Основной,
		|	Табл.Статус,
		|	Табл.ДатаИзменения,
		|	Табл.ЗначениеДо,
		|	Табл.ЗначениеПосле				
		|ИЗ
		|	РегистрСведений.АудитИзмененияРабочаяТаблица КАК Табл
		|ГДЕ
		|	Табл.ОбъектИзменения = &ОбъектИзменения
		|	И Табл.ЗначениеДо <> Табл.ЗначениеПосле
//		|	И Табл.ЗначениеДо <> """")
//		|	И Табл.Статус
		|";
		
	Если ФильтрПоОсновнымРеквизитам <> Неопределено Тогда
		// булево - изменились ли реквзиты только объекта! (основной отбор)
		Если ТипЗнч(ФильтрПоОсновнымРеквизитам) = Тип("Булево") Тогда			
			Запрос.Текст = Запрос.Текст + "
			| 	И Табл.Основной  = &ОсновнойОтбор
			|";
			Запрос.УстановитьПараметр("ОсновнойОтбор", ФильтрПоОсновнымРеквизитам);				
		КонецЕсли;
	КонецЕсли;			
	
	стрФильтрРеквизитовСтрокой = СокрЛП(ФильтрРеквизитовСтрокой);	
	Если стрФильтрРеквизитовСтрокой <> "" Тогда		
		// строка - маска имен реквизитов
		Если ТипЗнч(стрФильтрРеквизитовСтрокой) = Тип("Строка") Тогда			
			Запрос.Текст = Запрос.Текст + "
			| 	И Табл.ОбъектРеквизит ПОДОБНО """ + стрФильтрРеквизитовСтрокой + "%""
			|";				
		КонецЕсли;
	КонецЕсли;	
	
	
	Запрос.УстановитьПараметр("ОбъектИзменения", ОбъектСсылка);	
	Рез = Запрос.Выполнить().Выгрузить();	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	РезДт = ВыборкаДетальныеЗаписи.ДатаИзменения;
	//КонецЦикла;
	
	Возврат Рез;
	
КонецФункции	

// возвращает дату и время последнего изменения объекта, либо "пустую" дату, если не найдено
Функция ПолучитьИзмененияОбъектаСтрокой(ОбъектСсылка, ЭтоОсновнойОтбор=Неопределено, СтрФильтрРекв="") Экспорт
	
	РезСтр = "";
	
	тИзм = ПолучитьИзмененияОбъекта(ОбъектСсылка, ЭтоОсновнойОтбор, СтрФильтрРекв);	
	Если тИзм.Количество() > 0 Тогда
		Для Каждого ТекСтр Из тИзм Цикл
			РезСтр = Формат(ТекСтр.ДатаИзменения, "ДФ='dd.MM.yy HH:mm'") 
				+ " " + ТекСтр.ОбъектРеквизит + ": " 
				+ "'" + ТекСтр.ЗначениеДо + "'->'" + ТекСтр.ЗначениеПосле + "'"
				+ ?(РезСтр<>"", Символы.ПС, "") + РезСтр;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезСтр;
	
КонецФункции	

Функция ПоследнееИзменениеОбъекта(ОбъектСсылка) Экспорт
	
	РезДт = Дата(1,1,1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АудитИзмененияОбъектов.ДатаИзменения,
		|	АудитИзмененияОбъектов.ОбъектИзменения
		|ИЗ
		|	РегистрСведений.АудитИзмененияОбъектов КАК АудитИзмененияОбъектов
		|ГДЕ
		|	АудитИзмененияОбъектов.ОбъектИзменения = &ОбъектИзменения";
	
	Запрос.УстановитьПараметр("ОбъектИзменения", ОбъектСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезДт = ВыборкаДетальныеЗаписи.ДатаИзменения;
	КонецЦикла;
	
	Возврат РезДт;
	
КонецФункции	

Функция ПоследнееИзменениеОбъектаПодробноСтрокой(Источник, ДатаИзменения=Неопределено) Экспорт
	
	стрРез = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектСсылка = Источник.Ссылка;
	Если ДатаИзменения = Неопределено Тогда
		ДатаИзменения = ТекущаяДата();
	КонецЕсли;
	
	ЗапросА = Новый Запрос;	
	ЗапросА.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АудитТабл.ОбъектИзменения,
		|	АудитТабл.ОбъектРеквизит,
		|	АудитТабл.ДатаИзменения,
		|	АудитТабл.ЗначениеДо,
		|	АудитТабл.ЗначениеПосле
		|ИЗ
		|	РегистрСведений.АудитИзмененияРабочаяТаблица КАК АудитТабл		
		|";	
	тзТекущая = ЗапросА.Выполнить().Выгрузить();	
	тзТекущая.Очистить();
	
	// справочник
	Если Метаданные.Справочники.Найти(Источник.Метаданные().Имя) <> Неопределено Тогда
		
		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = "Код";	
		НоваяЗапись.ЗначениеПосле = Строка(ОбъектСсылка.Код);
		
		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = "Наименование";	
		НоваяЗапись.ЗначениеПосле = ОбъектСсылка.Наименование;
		
	// документ
	ИначеЕсли Метаданные.Документы.Найти(Источник.Метаданные().Имя) <> Неопределено Тогда

		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = "Номер";	
		НоваяЗапись.ЗначениеПосле = Строка(ОбъектСсылка.Номер);
		
		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = "Дата";	
		НоваяЗапись.ЗначениеПосле = Строка(ОбъектСсылка.Дата);
		
	Иначе
		Возврат стрРез;
	КонецЕсли;
	
	 // реквизиты
	Для Каждого ТекРекв Из Источник.Метаданные().Реквизиты Цикл
		НоваяЗапись = тзТекущая.Добавить();
		НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
		НоваяЗапись.ОбъектРеквизит = Строка(ТекРекв.Имя);	
		НоваяЗапись.ЗначениеПосле = Строка(ОбъектСсылка[ТекРекв.Имя]);	 
	КонецЦикла;
	
	// т.ч.
	Для Каждого ТекТЧ Из Источник.Метаданные().ТабличныеЧасти Цикл
		ИмяТЧ = ТекТЧ.Имя;	
		Для Каждого ТекСтр Из ОбъектСсылка[ТекТЧ.Имя] Цикл	
			Для Каждого ТекРекв Из ТекТЧ.Реквизиты Цикл			
				НоваяЗапись = тзТекущая.Добавить();
				НоваяЗапись.ОбъектИзменения = ОбъектСсылка;
				НоваяЗапись.ОбъектРеквизит = ИмяТЧ + "[" + Формат(ТекСтр.НомерСтроки, "ЧЦ=12; ЧДЦ=; ЧГ=0") + "]" + "." + Строка(ТекРекв.Имя);
				НоваяЗапись.ЗначениеПосле = Строка(ТекСтр[ТекРекв.Имя]);	 
			КонецЦикла;				
		КонецЦикла;                                                      
	КонецЦикла;
	
	МенеждерВТ = Новый МенеджерВременныхТаблиц;	
	ЗапросВТ = Новый Запрос("ВЫБРАТЬ * ПОМЕСТИТЬ втТекущая ИЗ &Таб КАК Т");
	ЗапросВТ.МенеджерВременныхТаблиц = МенеждерВТ;
	ЗапросВТ.УстановитьПараметр("Таб", тзТекущая);	
	ЗапросВТ.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеждерВТ;	
	Запрос.Текст = 
		"
		//|ВЫБРАТЬ
		//|	Т.ОбъектИзменения,
		//|	Т.ОбъектРеквизит,
		//|	Т.ДатаИзменения,
		//|	Т.ЗначениеДо,
		//|	Т.ЗначениеПосле,
		//|	Т.РеквизитИзменен
		//|ИЗ
		//|(
		|ВЫБРАТЬ
		|	ТаблТекущая.ОбъектИзменения,
		|	ТаблТекущая.ОбъектРеквизит,
		|	ТаблПоследняяВерсия.ДатаИзменения КАК ДатаИзмененияДо,
		|	&ДатаИзменения КАК ДатаИзмененияПосле,
		|	ЕстьNULL(ТаблПоследняяВерсия.ЗначениеПосле, """") ЗначениеДо,
		|	ТаблТекущая.ЗначениеПосле КАК ЗначениеПосле
		//|	ВЫБОР
		//|		КОГДА ЕстьNULL(ТаблПоследняяВерсия.ЗначениеПосле, """") <> ТаблТекущая.ЗначениеПосле ТОГДА ИСТИНА
		//|		ИНАЧЕ ЛОЖЬ
		//|   КОНЕЦ РеквизитИзменен		
		|ИЗ
		|	втТекущая КАК ТаблТекущая
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ *
		|		ИЗ РегистрСведений.АудитИзмененияРабочаяТаблица КАК ТДанные
		|		ГДЕ
		|			ТДанные.ОбъектИзменения = &ОбъектИзменения
		|	) КАК ТаблПоследняяВерсия
		|	ПО 
		//втПоследняяВерсия.ОбъектИзменения = втТекущая.ОбъектИзменения
		|	ТаблПоследняяВерсия.ОбъектРеквизит = ТаблТекущая.ОбъектРеквизит	
		//|	И ТаблПоследняяВерсия.ОбъектРеквизит = ТаблПоследняяВерсия.
		//|) КАК Т
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ЕстьNULL(ТаблПоследняяВерсия.ЗначениеПосле, """") <> ТаблТекущая.ЗначениеПосле ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|   КОНЕЦ 
		|";
	
	Запрос.УстановитьПараметр("ОбъектИзменения", ОбъектСсылка);
	Запрос.УстановитьПараметр("ДатаИзменения", ДатаИзменения);

	                          
	тзРезультат = Запрос.Выполнить().Выгрузить();

	ЗапросУДАЛЕНИЕ = Новый Запрос;
	ЗапросУДАЛЕНИЕ.МенеджерВременныхТаблиц = МенеждерВТ;
	ЗапросУДАЛЕНИЕ.Текст = "УНИЧТОЖИТЬ втТекущая";
	
	Если тзРезультат.Количество() > 0 Тогда		
		ИндексМакс = тзРезультат.Количество() - 1;
		ИндексТек = ИндексМакс;
		//Для Каждого ТекСтр Из тзРезультат Цикл
		Пока ИндексТек >= 0 Цикл
			
			ТекСтр = тзРезультат[ИндексТек];
			стрРез = стрРез + Формат(ДатаИзменения, "ДФ='dd.MM.yy HH:mm'") 
				+ " """ + ТекСтр.ОбъектРеквизит + """ : " 
				+ "'" + ТекСтр.ЗначениеДо + "' -> '" + ТекСтр.ЗначениеПосле + "'";
			Прервать;		// только последняя строчка!
			
			ИндексТек = ИндексТек - 1;
		КонецЦикла;		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат стрРез;
	
КонецФункции	


// возвращает булево - есть изменение в наборе записей р.с.
Функция ИзменениеРегистраСведений(Источник, Отказ) Экспорт	
	
	//Рез = Новый Структура;
	
	Рез = Ложь;
	 
	тзПосле = Источник.Выгрузить();

	Запрос = Новый Запрос;
	стрОтбор = "";
	Для Каждого ТекЭлемОтбор Из Источник.Отбор Цикл
		Если ЗначениеЗаполнено(ТекЭлемОтбор.Значение) Тогда
			стрОтбор = стрОтбор + "
				|	" + ?(стрОтбор="", "", "И ") + "Р." + ТекЭлемОтбор.Имя + " ";
			//Если ТекЭлемОтбор.ВидСравнения = 
				ЗнакСравнения = "=";
				стрОтбор = стрОтбор + ЗнакСравнения + " &" + ТекЭлемОтбор.Имя + " ";		
			Запрос.УстановитьПараметр(ТекЭлемОтбор.Имя,	ТекЭлемОтбор.Значение);
		КонецЕсли;	
	КонецЦикла;
	
	стрИзмерения = "";
	Для Каждого ТекИзм Из Источник.Метаданные().Измерения Цикл
		стрИзмерения = стрИзмерения + ТекИзм.Имя + ",";
	КонецЦикла;
	стрИзмерения = Лев(стрИзмерения, СтрДлина(стрИзмерения) - 1);

	стрРесурсы = "";
	Для Каждого ТекРес Из Источник.Метаданные().Ресурсы Цикл
		стрРесурсы = стрРесурсы + ТекРес.Имя + ",";
	КонецЦикла;
	стрРесурсы = Лев(стрРесурсы, СтрДлина(стрРесурсы) - 1);
	
	стрКолонкиСвернуть = стрИзмерения + ?(стрРесурсы <> "", ",", "") + стрРесурсы;
	
	//СвойствоАудит = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Аудит");
	//Если ЗначениеЗаполнено(СвойствоАудит) Тогда
	
	Запрос.Текст="ВЫБРАТЬ
	    |	Р.*
	    |ИЗ
		|	РегистрСведений." + Источник.Метаданные().Имя + " КАК Р
	    |" + ?(стрОтбор = "", "", "ГДЕ " + стрОтбор) + "
		|";
	//	             |	Р.Объект = &ОбъектАудит
	//	             |	И Р.Свойство = &СвойствоАудит
	//	             |	И Р.Значение = ИСТИНА";
		
	//Запрос.УстановитьПараметр("ОбъектАудит",	Источник.Ссылка);
	//Запрос.УстановитьПараметр("СвойствоАудит",	СвойствоАудит);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		тз = РезультатЗапроса.Выгрузить();
		тз.Колонки.Добавить("ИД", Новый ОписаниеТипов("Число"));
		тз.ЗаполнитьЗначения(-1, "ИД");
		//Пока Выборка.Следующий() Цикл
		Для Каждого ТекСтр Из тзПосле Цикл
			НоваяСтрока = тз.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтр);
			НоваяСтрока["ИД"] = 1;			
		КонецЦикла;
		
		
	//	Возврат Ложь;
	КонецЕсли;
	
	
	тз.Свернуть(стрКолонкиСвернуть, "ИД");
	Для Каждого ТекСтр Из тз Цикл
		Если ТекСтр.ИД <> 0 Тогда
			//Рез.Вставить(Источник.Метаданные().Имя, ТекущаяСтрока);
			Рез = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//Если НЕ ПараметрыСеанса._НоменклатураНеФиксироватьИзменения Тогда	
	//
	//ЗаписатьзменениеОбъекта(Источник);			
	//
	//КонецЕсли;	
	
	Возврат Рез;
	
КонецФункции



////////////////////////////////////////////////////////////////////////
// Псевдонимы

// ++ 29.07.16 Вялов - работа с псевдонимами
// любое значение можно идентифицировать по его строковым или ссылочным значениям


Функция ПолучитьПсевдоним(ОбъектПсевдонима, ПоРазделу=Неопределено, ЗначПоУмолчанию=Неопределено) Экспорт
	
	Рез = Неопределено;
	Если ЗначПоУмолчанию <> Неопределено Тогда
		Рез = ЗначПоУмолчанию;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		//ПЕРВЫЕ 1
		|	Псевдонимы.Раздел КАК Раздел,
		|	Псевдонимы.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.Псевдонимы КАК Псевдонимы
		|ГДЕ
		|	Псевдонимы.ОбъектСсылка = &ОбъектПсевдонима
		|";
	Запрос.УстановитьПараметр("ОбъектПсевдонима", ОбъектПсевдонима);			
	Если ПоРазделу <> Неопределено Тогда
		Если ТипЗнч(ПоРазделу) = Тип("Строка") Тогда
			Раздел = Справочники.ПсевдонимыРазделы.НайтиПоНаименованию(ПоРазделу, Истина);	
		Иначе
			Раздел = ПоРазделу;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Раздел) Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И Псевдонимы.Раздел = &Раздел
				|";
		 	Запрос.УстановитьПараметр("Раздел", Раздел.Ссылка);				
		КонецЕсли;			
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();            	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез = ВыборкаДетальныеЗаписи.Значение;
		Прервать;
	КонецЦикла;
	
	Возврат Рез;	
	
КонецФункции

Функция ПолучитьПсевдонимыПоМаске(МаскаИмени, ПоРазделу=Неопределено) Экспорт
	
	РезМассив = Новый Массив;
	РезМассив.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		//ПЕРВЫЕ 1
		|	Псевдонимы.Раздел КАК Раздел,
		|	Псевдонимы.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.Псевдонимы КАК Псевдонимы
		|ГДЕ
		|	Псевдонимы.ОбъектСсылка ПОДОБНО ""%" + МаскаИмени + "%""
		|";			
	Если ПоРазделу <> Неопределено Тогда
		Если ТипЗнч(ПоРазделу) = Тип("Строка") Тогда
			Раздел = Справочники.ПсевдонимыРазделы.НайтиПоНаименованию(ПоРазделу, Истина);	
		Иначе
			Раздел = ПоРазделу;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Раздел) Тогда
			Возврат РезМассив;	
		Иначе
			Запрос.Текст = Запрос.Текст + "
				|	И Псевдонимы.Раздел = &Раздел
				|";
		 	Запрос.УстановитьПараметр("Раздел", Раздел.Ссылка);				
		КонецЕсли;			
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();            	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез = ВыборкаДетальныеЗаписи.Значение;
		РезМассив.Добавить(Рез);
	КонецЦикла;
	
	Возврат РезМассив;	
	
КонецФункции

Функция НайтиПсевдонимПоЗначению(ЗначениеПсевдонима, ПоРазделу=Неопределено) Экспорт
	
	Рез = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		//ПЕРВЫЕ 1
		|	Псевдонимы.Раздел КАК Раздел,
		|	Псевдонимы.ОбъектСсылка КАК ОбъектСсылка
		|ИЗ
		|	РегистрСведений.Псевдонимы КАК Псевдонимы
		|ГДЕ
		|	Псевдонимы.Значение = &ЗначениеПсевдонима
		|";
	Запрос.УстановитьПараметр("ЗначениеПсевдонима", ЗначениеПсевдонима);			
	Если ПоРазделу <> Неопределено Тогда
		Если ТипЗнч(ПоРазделу) = Тип("Строка") Тогда
			Раздел = Справочники.ПсевдонимыРазделы.НайтиПоНаименованию(ПоРазделу, Истина);	
		Иначе
			Раздел = ПоРазделу;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Раздел) Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И Псевдонимы.Раздел = &Раздел
				|";
		 	Запрос.УстановитьПараметр("Раздел", Раздел.Ссылка);				
		КонецЕсли;			
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();            	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез = ВыборкаДетальныеЗаписи.ОбъектСсылка;
		Прервать;
	КонецЦикла;
	
	Возврат Рез;	
	
КонецФункции

Функция ЗаписатьПсевдоним(ОбъектПсевдонима, ПоРазделу, ЗначениеПсевдонима) Экспорт	
	
	Рез = Неопределено;
	
	Если ТипЗнч(ПоРазделу) = Тип("Строка") Тогда
		Раздел = Справочники.ПсевдонимыРазделы.НайтиПоНаименованию(ПоРазделу, Истина);	
	Иначе
		Раздел = ПоРазделу;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Раздел) Тогда
		Возврат Рез;
	КонецЕсли;		
	
	ЗаписьИзменения = РегистрыСведений.Псевдонимы.СоздатьМенеджерЗаписи();
	// по всем измерениям
	ЗаписьИзменения.ОбъектСсылка 	= ОбъектПсевдонима;
	ЗаписьИзменения.Раздел 			= Раздел.ССылка;
	ЗаписьИзменения.Прочитать();
	
	ЗаписьИзменения.ОбъектСсылка	= ОбъектПсевдонима;
	ЗаписьИзменения.Раздел			= Раздел.ССылка;
	ЗаписьИзменения.Значение 		= ЗначениеПсевдонима;	
	ЗаписьИзменения.Записать(); 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		//ПЕРВЫЕ 1
		|	Псевдонимы.Раздел КАК Раздел,
		|	Псевдонимы.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.Псевдонимы КАК Псевдонимы
		|ГДЕ
		|	Псевдонимы.ОбъектСсылка = &ОбъектПсевдонима
		|	И Псевдонимы.Раздел = &Раздел
		|";
	Запрос.УстановитьПараметр("ОбъектПсевдонима", ОбъектПсевдонима);			
	Запрос.УстановитьПараметр("Раздел", Раздел.ССылка);				
		
	РезультатЗапроса = Запрос.Выполнить();            	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез = ВыборкаДетальныеЗаписи.Значение;
		Прервать;
	КонецЦикла;
	
	Возврат Рез;	
	
КонецФункции


// -- 29.07.16 Вялов - работа с псевдонимами

// Псевдонимы
////////////////////////////////////////////////////////////////////////


// Катков А. 06.09.2016 >> Денежные средства
////////////////////////////////////////////////////////////////////////

// Возвращает свободный остаток денежных средств (текущий остаток БЕЗ вычета сумм, уже предназначенных
// к списанию, и зарезервированных). Взамен "УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС"
//
// Параметры
//  БанковскийСчетКасса			:Банковский счет, касса - место списания денежных средств
//  Дата						:Дата –дата, на которую формируются остатки
//
// Возвращаемое значение:
//   Свободный остаток			:число - свободный остаток на дату по выбранному счету (кассе)
//
Функция ПолучитьСвободныйОстатокДС(БанковскийСчетКасса,Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ДенежныеСредстваОстатки.СуммаОстаток КАК СвободныйОстаток
	             |ИЗ
	             |	РегистрНакопления.ДенежныеСредства.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса) КАК ДенежныеСредстваОстатки";
	
	Запрос.УстановитьПараметр("БанковскийСчетКасса",БанковскийСчетКасса);
	Запрос.УстановитьПараметр("Дата",Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() И (НЕ РезультатЗапроса.СвободныйОстаток = NULL) Тогда
		Сообщить("Остаток денег в кассе " + БанковскийСчетКасса + " на момент операции составляет " + РезультатЗапроса.СвободныйОстаток + "руб.");
		Возврат РезультатЗапроса.СвободныйОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Денежные средства
////////////////////////////////////////////////////////////////////////
// Катков А. 06.09.2016 <<   



////////////////////////////////////////////////////////////////////////
// Правила

// возвращает список участников по правилу - Использовать - ИСТИНА или ЛОЖЬ
// ДопОтбор - 
Функция ПравилаПолучитьСписок(Правило, НаДату=Неопределено, ДопОтбор=Неопределено) Экспорт
	
	//Если ТипЗнч(ИмяСсылкаПравило) = Тип("Строка") Тогда
	Если НаДату=Неопределено Тогда
		НаДату = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаСрезПоследних.ОбъектПравила КАК ССылка,
		|	ПравилаСрезПоследних.Использовать КАК Использовать
		|ИЗ
		|	РегистрСведений.Правила.СрезПоследних(&НаДату, Правило = &Правило) КАК ПравилаСрезПоследних		
		//|УПОРЯДОЧИТЬ ПО
		//|	Использовать
		|";
	
	Запрос.УстановитьПараметр("НаДату", 	НаДату);
	Запрос.УстановитьПараметр("Правило", 	Правило);
	Если ДопОтбор <> Неопределено Тогда
		Если ТипЗнч(ДопОтбор) = Тип("Строка") Тогда
			стрИсх = ВРег(СокрЛП(ДопОтбор));
			ПозОтбор = Найти(стрИсх, "=");
			Если ПозОтбор > 0 Тогда
				ЛевЗн = СокрЛП(Лев(стрИсх, ПозОтбор-1));
				Если ЛевЗн = "ТИП" Тогда
					ПравЗн = СокрЛП(Сред(стрИсх, ПозОтбор+1)); 
					ОбъектМД = Метаданные.Справочники.Найти(ПравЗн);
					Если ОбъектМД <> Неопределено Тогда
						Запрос.Текст = Запрос.Текст + "
							|ГДЕ
							|	ТИПЗНАЧЕНИЯ(ПравилаСрезПоследних.ОбъектПравила) = ТИП(Справочник." + ПравЗн + ")	
							|";
					Иначе
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	тзРез = РезультатЗапроса.Выгрузить();
	Возврат тзРез;
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;
	//
	////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//
	
КонецФункции

// возвращает для указанного правила и ссылки : 
// 	Неопределено - если не действует правило для ссылки на объект
//	ИСТИНА или ЛОЖЬ - если действует правило в зависимости от разрешения (включить правило или исключить)
Функция ПравилоСсылкаУчаствует(СсылкаПравило, ССылкаНаОбъект, НаДату=Неопределено) Экспорт
	
	РезПоиска = Неопределено;
//	РезПоиска = Ложь;

	
	//Если ТипЗнч(ИмяСсылкаПравило) = Тип("Строка") Тогда
	Если НаДату=Неопределено Тогда
		НаДату = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаСрезПоследних.ОбъектПравила КАК ССылка,
		|	ПравилаСрезПоследних.Использовать КАК Использовать
		|ИЗ
		|	РегистрСведений.Правила.СрезПоследних(&НаДату, Правило = &Правило
		|	И ОбъектПравила = &ОбъектПравила) КАК ПравилаСрезПоследних		
		//|УПОРЯДОЧИТЬ ПО
		//|	Использовать
		|";
	
	Запрос.УстановитьПараметр("НаДату", 		НаДату);
	Запрос.УстановитьПараметр("Правило", 		СсылкаПравило);
	Запрос.УстановитьПараметр("ОбъектПравила", 	ССылкаНаОбъект);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезПоиска = ВыборкаДетальныеЗаписи.Использовать;
	КонецЦикла;
	
	Возврат РезПоиска;
	
КонецФункции


// Отладка и логирование
////////////////////////////////////////////////////////////////////////
// Механизм включается по константе "ОтладкаЛогированиеИспользовать" 

Функция ОтладкаЛогированиеЗаписатьСтроку(ПутьКуда="", ИмяЛогФайла, стрЗапись) Экспорт
	
	Рез = Ложь;	
	
	//Если Константы.ОтладкаЛогированиеИспользовать.Получить() Тогда 								
		Если стрЗапись <> "" Тогда   
			
			Если ПутьКуда = "" Тогда
				ПутьФайлЛог = СокрЛП(Константы.ОтладкаЛогированиеПуть.Получить());			
			Иначе
				ПутьФайлЛог = ПутьКуда;
			КонецЕсли;
			
			Если СокрЛП(ПутьФайлЛог) = "" Тогда
				Возврат Рез;
			Иначе				
				Если Прав(СокрЛП(ПутьФайлЛог), 1) <> "\" Тогда
					ПутьФайлЛог = ПутьФайлЛог + "\";			
				КонецЕсли;
			КонецЕсли;
                                               
			ПрефиксФайлЛог = Константы.ОтладкаЛогированиеПрефиксФайлов.Получить();

			ПолныйПутьФайлЛог = ПутьФайлЛог + ПрефиксФайлЛог + ИмяЛогФайла;

			ЛогФайл = Новый ЗаписьТекста;			
			ЛогФайл.Открыть(ПолныйПутьФайлЛог,  КодировкаТекста.ANSI, Символы.ПС, Истина); 
			ЛогФайл.Записать(стрЗапись + Символы.ПС);
			ЛогФайл.Закрыть();
			Рез = Истина;
			
		КонецЕсли;
	//КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция ОтладкаЛогированиеСохранитьФайл(ПолныйПутьФайлИсходный, НовоеИмяФайлИсходный="") Экспорт
	
	Рез = Ложь;
	
	Попытка	
	
		Если Константы.ОтладкаЛогированиеИспользовать.Получить() Тогда 
			ПутьФайл = СокрЛП(Константы.ОтладкаЛогированиеПуть.Получить());
			Если Прав(ПутьФайл, 1) <> "\" Тогда
				ПутьФайл = ПутьФайл + "\";
			КонецЕсли;
			ФайлОбъект = Новый Файл(ПолныйПутьФайлИсходный);
			Если ФайлОбъект.Существует() Тогда	
				Если ПутьФайл <> "" Тогда
					ПрефиксФайла = Константы.ОтладкаЛогированиеПрефиксФайлов.Получить();
					ПолныйПутьФайлРезультат = ПутьФайл + ПрефиксФайла 
						+ ?(НовоеИмяФайлИсходный="", ФайлОбъект.ИмяБезРасширения, НовоеИмяФайлИсходный)
						+ "_" + Формат(ТекущаяДата(), "ДФ=yyMMddHHmm") + ФайлОбъект.Расширение;						
					Если Найти(ПолныйПутьФайлРезультат, "\\") > 0 Тогда
						ПолныйПутьФайлРезультат	= СтрЗаменить(ПолныйПутьФайлРезультат, "\", "/");
					КонецЕсли;
					КопироватьФайл(ПолныйПутьФайлИсходный, ПолныйПутьФайлРезультат);						
					ФайлОбъектРез = Новый Файл(ПолныйПутьФайлРезультат);
					Рез = ФайлОбъектРез.Существует();						
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

Функция ОтладкаЛогированиеПроверитьИЗаписатьДанныеФайла(ПолныйПутьФайлИсходный, НовоеИмяФайлИсходный="") Экспорт
	
	Рез = Ложь;
	
	//Попытка	
	//
	//	Если Константы.ОтладкаЛогированиеИспользовать.Получить() Тогда 
	//		ПутьФайл = СокрЛП(Константы.ОтладкаЛогированиеПуть.Получить());
	//		Если Прав(ПутьФайл, 1) <> "\" Тогда
	//			ПутьФайл = ПутьФайл + "\";
	//		КонецЕсли;
	//		ФайлОбъект = Новый Файл(ПолныйПутьФайлИсходный);
	//		Если ФайлОбъект.Существует() Тогда	
	//			Если ПутьФайл <> "" Тогда
	//				ПрефиксФайла = Константы.ОтладкаЛогированиеПрефиксФайлов.Получить();
	//				ПолныйПутьФайлРезультат = ПутьФайл + ПрефиксФайла 
	//					+ ?(НовоеИмяФайлИсходный="", ФайлОбъект.ИмяБезРасширения, НовоеИмяФайлИсходный)
	//					+ "_" + Формат(ТекущаяДата(), "ДФ=yyMMddHHmm") + ФайлОбъект.Расширение;						
	//				Если Найти(ПолныйПутьФайлРезультат, "\\") > 0 Тогда
	//					ПолныйПутьФайлРезультат	= СтрЗаменить(ПолныйПутьФайлРезультат, "\", "/");
	//				КонецЕсли;
	//				КопироватьФайл(ПолныйПутьФайлИсходный, ПолныйПутьФайлРезультат);						
	//				ФайлОбъектРез = Новый Файл(ПолныйПутьФайлРезультат);
	//				Рез = ФайлОбъектРез.Существует();						
	//			КонецЕсли;	
	//		КонецЕсли;	
	//	КонецЕсли;
	//Исключение
	//	
	//КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

Функция ОтладкаЛогированиеПроверитьИЗаписатьДанныеФайлаFTP(FTPСоедДанные, ФайлИсходный, ИмяЛогФайла="") Экспорт
	
	Рез = Ложь;
	

	
		Если Константы.ОтладкаЛогированиеИспользовать.Получить() Тогда 
						
			стрРез = "";
			Если ТипЗнч(FTPСоедДанные) = Тип("Структура") Тогда
				Попытка						
				FTPСоединение = Новый FTPСоединение(FTPСоедДанные.Сервер,
					21, 
					FTPСоедДанные.Пользователь,
					FTPСоедДанные.Пароль, , , ,);			
				Исключение
		        	стрРез = "Не удалось создать FTP-соединение (" + FTPСоедДанные.Сервер + ")";
				КонецПопытки;  	                                                                		
			Иначе	
				FTPСоединение = FTPСоедДанные;
			КонецЕсли;
			
			Если стрРез = "" Тогда
				
				стрТекДт = Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'");
				стрFTP = ": На FTP " + Строка(FTPСоедДанные.Сервер);
				
				МассивФайлов = FTPСоединение.НайтиФайлы("//", ФайлИсходный);					
				Если МассивФайлов.Количество() = 0 Тогда
					стрРез = стрТекДт + стрFTP + " не обнаружен файл " + ФайлИсходный;
				Иначе
					Попытка
						Файл = МассивФайлов[0];	
						стрРез = стрТекДт + стрFTP + " обнаружен файл " + Файл.ПолноеИмя 
							+ ", дата изм. " + Строка(Файл.ПолучитьВремяИзменения()) 
							+ ", размер " + Строка(Файл.Размер());
						Файл.Размер();
					Исключение
		        		стрРез = стрТекДт + стрFTP + " обнаружен файл " + ФайлИсходный + " но возникли ошибки при получении данных файла!";
					КонецПопытки; 
				КонецЕсли;
			КонецЕсли;
			
			Если стрРез <> "" Тогда
				ПутьФайлЛог = СокрЛП(Константы.ОтладкаЛогированиеПуть.Получить());			
				Если Прав(ПутьФайлЛог, 1) <> "\" Тогда
					ПутьФайлЛог = ПутьФайлЛог + "\";
				КонецЕсли;                                                     
				ПрефиксФайлЛог = Константы.ОтладкаЛогированиеПрефиксФайлов.Получить();

				ПолныйПутьФайлЛог = ПутьФайлЛог + ПрефиксФайлЛог 
					+ ?(ИмяЛогФайла="", "FTP.log", ИмяЛогФайла);

				ЛогФайл = Новый ЗаписьТекста;			
				ЛогФайл.Открыть(ПолныйПутьФайлЛог,  КодировкаТекста.ANSI, Символы.ПС, Истина); 
				ЛогФайл.Записать(стрРез + Символы.ПС);
				ЛогФайл.Закрыть();
				Рез = Истина;
			КонецЕсли;

		КонецЕсли;
	
	Возврат Рез;
	
КонецФункции



////////////////////////////////////////////////////////////////////////
// Доп.реквизиты и свойства

// Получение значения доп.реквизита объекта по его строковому имени
// (например "Номер маршрута")
Функция ДопРеквизитОбъектаПолучитьЗначение(ОбъектБД, ИмяСвойства)  Экспорт
	
	НайденоЗнач = Неопределено;
	
	
	Если ОбъектБД.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено Тогда
		
		стрИмяОбъекта = ОбъектБД.Метаданные().Имя;
		Если Метаданные.Справочники.Найти(ОбъектБД.Метаданные().Имя) <> Неопределено Тогда
			стрИмяОбъекта = "Справочник." + стрИмяОбъекта;
		ИначеЕсли Метаданные.Документы.Найти(ОбъектБД.Метаданные().Имя) <> Неопределено Тогда
			стрИмяОбъекта = "Документ." + стрИмяОбъекта;
		ИначеЕсли Метаданные.РегистрыСведений.Найти(ОбъектБД.Метаданные().Имя) <> Неопределено Тогда
			стрИмяОбъекта = "РегистрСведений." + стрИмяОбъекта;	
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ОбъектБД.Метаданные().Имя) <> Неопределено Тогда
			стрИмяОбъекта = "ПланВидовХарактеристик." + стрИмяОбъекта;				
		Иначе
			стрИмяОбъекта = "";
		КонецЕсли;
		
		
		Если стрИмяОбъекта <> "" Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДопРеквОбъекта.Значение
				|ИЗ
				|	" + стрИмяОбъекта + ".ДополнительныеРеквизиты КАК ДопРеквОбъекта
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ДопРеквизитыИСведения.Ссылка КАК СвойствоСсылка
				|		ИЗ
				|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДопРеквизитыИСведения
				|		ГДЕ
				|			ДопРеквизитыИСведения.Заголовок = &ИмяСвойства) КАК ДопСвойство
				|		ПО (ДопСвойство.СвойствоСсылка = ДопРеквОбъекта.Свойство)
				|ГДЕ
				|	ДопРеквОбъекта.Ссылка = &ВыбранОбъект";
			
			Запрос.УстановитьПараметр("ВыбранОбъект", ОбъектБД);
			Запрос.УстановитьПараметр("ИмяСвойства", ИмяСвойства);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НайденоЗнач = ВыборкаДетальныеЗаписи.Значение;
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

	Возврат НайденоЗнач;
	
КонецФункции	


// Получение значения доп.свойства объекта по его строковому имени
// (например "Номер маршрута")
Функция ДопСвойствоОбъектаПолучитьЗначение(ОбъектБД, ИмяСвойства)  Экспорт
	
	НайденоЗнач = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДС.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ДС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДопРеквизитыИСведения.Ссылка КАК СвойствоСсылка
		|		ИЗ
		|			ПланВидовХарактеристик.СвойстваОбъектов КАК ДопРеквизитыИСведения
		|		ГДЕ
		|			ДопРеквизитыИСведения.Наименование = &ИмяСвойства) КАК ДопСвойство
		|		ПО (ДопСвойство.СвойствоСсылка = ДС.Свойство)
		|ГДЕ
		|	ДС.Объект = &ВыбранОбъект";
	
	Запрос.УстановитьПараметр("ВыбранОбъект", ОбъектБД);
	Запрос.УстановитьПараметр("ИмяСвойства", ИмяСвойства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденоЗнач = ВыборкаДетальныеЗаписи.Значение;
	КонецЦикла;
	
	Возврат НайденоЗнач;
	
КонецФункции

// < 16.03.18 Вялов - задача № 19 
Функция КатегоряОбъектаПолучитьПоИмени(ОбъектБД, ИмяСвойства)   Экспорт
	НайденоЗнач = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрСведенийКатегорииОбъектов.Категория КАК КатегорияСсылка
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК РегистрСведенийКатегорииОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СправочникКатегорииОбъектов.Ссылка КАК Ссылка
		|		ИЗ
		|			Справочник.КатегорииОбъектов КАК СправочникКатегорииОбъектов
		|		ГДЕ
		|			СправочникКатегорииОбъектов.Наименование = &ИмяСвойства) КАК К
		|		ПО (К.Ссылка = РегистрСведенийКатегорииОбъектов.Категория)
		|ГДЕ
		|	РегистрСведенийКатегорииОбъектов.Объект = &ВыбранОбъект";
	
	Запрос.УстановитьПараметр("ВыбранОбъект", ОбъектБД);
	Запрос.УстановитьПараметр("ИмяСвойства", ИмяСвойства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденоЗнач = ВыборкаДетальныеЗаписи.КатегорияСсылка;
	КонецЦикла;
	
	Возврат НайденоЗнач; 

	
КонецФункции

Функция КатегориОбъектаПолучитьПоСсылкеНазначениеКатегории(ОбъектБД, НазначениеКатегорииСсылка)   Экспорт
	
	Рез = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрСведенийКатегорииОбъектов.Категория КАК КатегорияСсылка
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК РегистрСведенийКатегорииОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СправочникКатегорииОбъектов.Ссылка КАК КатегорияСсылка
		|		ИЗ
		|			Справочник.КатегорииОбъектов КАК СправочникКатегорииОбъектов
		|		ГДЕ
		|			СправочникКатегорииОбъектов.НазначениеКатегории.Ссылка = &НазначениеКатегорииСсылка) КАК К
		|		ПО (К.КатегорияСсылка = РегистрСведенийКатегорииОбъектов.Категория)
		|ГДЕ
		|	РегистрСведенийКатегорииОбъектов.Объект = &ВыбранОбъект";
	//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 18/04/2018//==============================================================================================
	Запрос.УстановитьПараметр("ВыбранОбъект", ОбъектБД.Номенклатура);
	//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 18/04/2018//==============================================================================================
	Запрос.УстановитьПараметр("НазначениеКатегорииСсылка", НазначениеКатегорииСсылка);
	
	Рез = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КатегорияСсылка");
	Возврат Рез; 
	
КонецФункции

// 16.03.18 Вялов - задача № 19 

Функция КатегорияОбъекта(ОбъектСсылка) Экспорт
	
	Рез = Справочники.КатегорииОбъектов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КатегорииОбъектов.Объект,
		|	КатегорииОбъектов.Категория
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез = ВыборкаДетальныеЗаписи.Категория;
	КонецЦикла;
	
	Возврат  Рез;
	
КонецФункции



////////////////////////////////////////////////////////////////////////
// Роли


Функция НайтиПользователейСРолью(РольНайти) Экспорт
	
	Рез = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(РольНайти)= Тип("Строка") Тогда
		РольНайдена = Метаданные.Роли.Найти(РольНайти);
		Если РольНайдена = Неопределено Тогда
			Возврат Рез; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(РольНайти)= Тип("ОбъектМетаданных") Тогда
		РольНайдена = РольНайти;
	Иначе
		Возврат Рез;	
	КонецЕсли;
	
	Рез = Новый Массив();

	//17.08.2017, Юра
	//Метод ПолучитьПользователей() доступен пользователям, имеющим административные права.
	//Нам тут нужно только проверить, поэтому просто обойдём это ограничение, переместив процедуру в привелегированный модуль.
	//Можно было бы тут сделать УстановитьПривилегированныйРежим(), но метод на клиенте не работает
	//Выборка = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Выборка = ПолныеПрава.ПолучитьПользователейНаСервере();
	
	Для Каждого ЭлементМассива Из Выборка Цикл		
		Если ЭлементМассива.Роли.Содержит(РольНайти) Тогда
			Рез.Добавить(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Рез;
	//Метаданные.Роли._5LB_ПродажиКорпоративныеРуководитель
	
КонецФункции


Функция ПользовательИмеетРоль(ПользовательНайти, РольНайти) Экспорт
	
	Рез = Неопределено;	
	Если ТипЗнч(ПользовательНайти)= Тип("Строка") Тогда
		ПользовательНайден = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательНайти);
		Если ПользовательНайден = Неопределено Тогда
			Возврат Рез; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПользовательНайти)= Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательНайден = ПользовательНайти;
	Иначе
		Возврат Рез;	
	КонецЕсли;
	
	СписокПользователейСРолью = НайтиПользователейСРолью(РольНайти);
	Если СписокПользователейСРолью = Неопределено Тогда
		Возврат Рез; 
	КонецЕсли;
	
	Рез = Ложь;
	Если СписокПользователейСРолью.Количество() > 0 Тогда
		Для Каждого ТекСтр Из СписокПользователейСРолью Цикл
			//Если ТекСтр = ПользовательНайден Тогда	// не рано! - х.з.
			Если ((ТекСтр.Имя = ПользовательНайден.Имя) И (ТекСтр.УникальныйИдентификатор = ПользовательНайден.УникальныйИдентификатор)) Тогда
				Рез = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;

	Возврат Рез;
	
КонецФункции
	
////////////////////////////////////////////////////////////////////////