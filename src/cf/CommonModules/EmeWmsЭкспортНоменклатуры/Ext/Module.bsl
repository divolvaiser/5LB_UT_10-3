// Copyright (C) 2012-2016 Engineer Mareev Enterprises

//	Функция РазрешенКЭкспорту возвращает Истина, если товар разрешен к экспорту.
Функция РазрешенКЭкспорту(Товар) Экспорт
	
	Если Товар.ПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Товар.ЭтоГруппа Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Товар.ВидНоменклатуры.Наименование = "Услуга" Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

//	Процедура ПометитьКЭкспорту помечает товар к экспорту.
Процедура ПометитьКЭкспорту(Товар) Экспорт
	
	Если Товар.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Товар.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.КЭкспорту = Истина;
		НаборЗаписей.Записать();
		Возврат;
	КонецЦикла;
	
	НоваяЗапись = РегистрыСведений.EmeWmsПометкиКЭкспортуНоменклатуры.СоздатьМенеджерЗаписи();
	НоваяЗапись.Номенклатура = Товар.Ссылка;
	НоваяЗапись.КЭкспорту = Истина;
	НоваяЗапись.Записать();
	
КонецПроцедуры

//	Функция ПомеченКЭкспорту возвращает Истина, если товар помечен к экспорту.
Функция ПомеченКЭкспорту(Товар) Экспорт
	
	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Товар.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Возврат Запись.КЭкспорту;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//	Процедура ПодтвердитьЭкспорт подтверждает экспорт товара.
Процедура ПодтвердитьЭкспорт(Товар) Экспорт

	Попытка
		НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Товар.Ссылка);
		НаборЗаписей.Прочитать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат
	КонецПопытки;

	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.КЭкспорту = Ложь;
		Запись.ДатаЭкспорта = ТекущаяДата();
		НаборЗаписей.Записать();
		Возврат;
	КонецЦикла;
 
КонецПроцедуры

//	Процедура ПометитьКЭкспорту помечает товар к экспорту на событии при записи номеклатуры.
Процедура ПометитьКЭкспортуПриЗаписиНоменклатуры(Источник, Отказ) Экспорт

	ПометитьКЭкспорту(Источник);
 
КонецПроцедуры

//	Процедура ПометитьКЭкспорту помечает товар к экспорту на событии при записи упаковки.
Процедура ПометитьКЭкспортуПриЗаписиУпаковки(Источник, Отказ) Экспорт

	ПометитьКЭкспорту(Источник.Владелец.ПолучитьОбъект());
	
КонецПроцедуры

//	Процедура ПометитьКЭкспорту помечает товар к экспорту на событии при записи штрихкода.
Процедура ПометитьКЭкспортуПриЗаписиШтрихкода(Источник, Отказ, Замещение) Экспорт
	
	Для Каждого Запись Из Источник Цикл 
		Товар = Запись.Номенклатура;
		ПометитьКЭкспорту(Товар.ПолучитьОбъект());
	КонецЦикла
	
КонецПроцедуры

//	Процедура ЭкспортироватьНоменклатуру экспортирует номенклатуру, помеченную к экспорту.
Процедура ЭкспортироватьНоменклатуру(ERPData) Экспорт
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	EmeWmsПометкиКЭкспортуНоменклатуры.Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.EmeWmsПометкиКЭкспортуНоменклатуры КАК EmeWmsПометкиКЭкспортуНоменклатуры
		|ГДЕ
		|	EmeWmsПометкиКЭкспортуНоменклатуры.КЭкспорту";
		
	Выборка = Запрос.Выполнить().Выбрать();
	ТоварСсылка = Справочники.Номенклатура.ПустаяСсылка();
	
	//	ВАЖНО! Транзакция источника сообщения должна быть внешней
	НачатьТранзакцию();
	Попытка    		
			
		Счетчик = 0;
		Текст_ОшибкиЭкспорта = "";
		EmeWmsERPEngine.BeginExport(ERPData, "erp", "wms", "goods");
		Попытка
			
			Пока Выборка.Следующий() Цикл
				
				//	Защита от плохих данных
				Если Выборка.Ссылка = Null Тогда
					Продолжить;
				КонецЕсли;
				
				ТоварСсылка = Выборка.Ссылка;
				
				// Найдем Единицу измерения с коэффициентом 1 (именно ее содержат все остальные упаковки)
				ЕдиницаСКоэф_1 = EmeWmsУтилиты.ПолучитьБазовуюЕдиницуИзмеренияК1(ТоварСсылка);
				Если ЕдиницаСКоэф_1 = Неопределено Тогда
					Текст_ОшибкиЭкспорта = Текст_ОшибкиЭкспорта + Символы.ПС + ТоварСсылка.Наименование + " - отсутствует Ед.измерения с К = 1";
					Продолжить;
				КонецЕсли; 
				
				Если РазрешенКЭкспорту(ТоварСсылка) Тогда
					//	Вначале подтверждаем экспорт,
					ПодтвердитьЭкспорт(ТоварСсылка);
					//	а только потом экспортируем, чтобы не потерять флажок КЭКспорту при параллельном изменении данных.
					ЭкспортироватьТовар(ERPData, ТоварСсылка);  				
					Счетчик = Счетчик + 1;
				КонецЕсли

			КонецЦикла;
			
			Если Текст_ОшибкиЭкспорта <> "" Тогда
				Сообщить("Есть ошибки в Ед.измерения: " + Текст_ОшибкиЭкспорта);
				ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт номенклатуры: " + Текст_ОшибкиЭкспорта);
				ТемаСообщения 	= "Есть ошибки в Ед.измерения при экспорте Номенклатуры";
				ТекстСообщения 	= "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС +	Текст_ОшибкиЭкспорта;
				EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения, "Предупреждения1С_WMS_Номенклатура"); //НМА 05.12.17 Предупреждения1С_WMS
			КонецЕсли; 
			
			EmeWmsERPEngine.CommitExport(ERPData);
			
		Исключение
			EmeWmsERPEngine.RollbackExport(ERPData);
			ВызватьИсключение(ОписаниеОшибки());
		КонецПопытки;
			
		ЗафиксироватьТранзакцию();
		
		Если Счетчик <> 0 Тогда
			Сообщить("Проэкспортировали сообщения GOODS (" + Счетчик + "шт)");
		КонецЕсли
		
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ОписаниеОшибки();
		Сообщить(Ошибка);
		ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт номенклатуры: " + Ошибка);
		ТемаСообщения 	= "Критическая ошибка экспорта сообщения GOODS";
		ТекстСообщения 	= "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС +	"No: " + ТоварСсылка + Символы.ПС +	Ошибка;
		EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения, "Предупреждения1С_WMS_Номенклатура"); //НМА 05.12.17 Предупреждения1С_WMS
	КонецПопытки;
	
КонецПроцедуры

//	Процедура ЭкспортироватьТовар экспортирует один товар.
Процедура ЭкспортироватьТовар(ERPData, Товар) Экспорт
	
   лКатегория = ПолучитьКатегорию(Товар);
	
	//	Заголовок товарной единицы
	EmeWmsERPEngine.AppendHeaderLine(ERPData);
	ERPData.header.id				= EmeWmsУтилиты.ПолучитьКод(Товар);
	ERPData.header.goods_code		= EmeWmsУтилиты.ПолучитьКодСпрНоменклатура_НеДляСинхронизации(Товар);
	//ERPData.header.article			= СокрЛП(Товар.Артикул);
	ERPData.header.article			= EmeWmsУтилиты.ПолучитьКодСпрНоменклатура_НеДляСинхронизации(Товар);
	ERPData.header.name				= Товар.Наименование +" ("+ Товар.Артикул + ")"; //НМА 05.09.17 
	ERPData.header.full_name		= Товар.НаименованиеПолное;
	ERPData.header.classifier		= ПолучитьПолныйПуть(Товар, Ложь);
	Если ERPData.header.classifier = "" Тогда
		ERPData.header.classifier = "Прочее"
	КонецЕсли;
	
	Если лКатегория<>Неопределено Тогда
		ERPData.header.classifier = Строка(ERPData.header.classifier)+"#"+Строка(ERPData.header.classifier)+"-"+Строка(лКатегория);
	КонецЕсли;
	
	ERPData.header.classifier_codes = ПолучитьПолныйПуть(Товар, Истина);
	
	//Если ЗначениеЗаполнено(Товар.Производитель) Тогда
	//	ERPData.header.producer_code = EmeWmsУтилиты.ПолучитьКод(Товар.Производитель);
	//	ERPData.header.producer_name = Товар.Производитель.Наименование;
	//КонецЕсли;
	ERPData.header.code_status	= "STD"; 	
	//ERPData.header.shelf_life	= Товар.СрокГодности;
	ERPData.header.shelf_life	= 7999;
	ERPData.header.stackability = 1;
	ERPData.header.tolerance	= 7;
	ERPData.header.comment		= Лев(Товар.Комментарий, 128);

	//НМА eme 24.11.16
	ERPData.header.description	= Лев(СокрЛП(Товар.ДополнительноеОписаниеНоменклатуры), 8000);
	Если Не Товар.РусификацияНеТребуется Тогда
		ERPData.header.is_need_rus	= 1;
	КонецЕсли;
	//НМА eme 24.11.16

	//	Упаковки
	
	// получим единицы измерения в порядке увеличения коэффициента
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка КАК Ссылка,
		|	ЕдиницыИзмерения.Наименование,
		|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаПоКлассификатору,
		|	ЕдиницыИзмерения.Коэффициент,
		|	1 КАК РасчетныйКоэффициент,
		|	""                  "" КАК КодЕИ
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец = &Товар
		|	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
		|	И ЕдиницыИзмерения.Коэффициент <= 1000
		|	И ЕдиницыИзмерения.Коэффициент > 0
		|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Ссылка <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕдиницыИзмерения.Коэффициент,
		|	ЕдиницаПоКлассификатору УБЫВ";  //НМА 11.09.17
	
	Запрос.УстановитьПараметр("Товар", Товар);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЕдиницИзмерения = РезультатЗапроса.Выгрузить();
	
	НаименованияУпаковок = Новый Массив();
	EmeWmsERPEngine.SelectChild(ERPData, "packs");
	
	//ЭтоСамаяМелкаяЕдиница = ИСТИНА;  //НМА 11.09.17
	
	ЕдиницаИзмеренияШтука_contains_id = "";
	ЕдиницаИзмеренияШтукаКодЕИ_contains_code = "";
	ЕдиницаИзмеренияШтукаВладелец = Справочники.Номенклатура.ПустаяСсылка();
	Для й = 0 По ТаблицаЕдиницИзмерения.Количество() - 1 Цикл
	
		СтрокаЕИ = ТаблицаЕдиницИзмерения[й];
		
		////НМА 11.09.17 >>
		//Если ЭтоСамаяМелкаяЕдиница Тогда
			СтрокаЕИ.РасчетныйКоэффициент = СтрокаЕИ.Коэффициент;
		//Иначе
		//	й_ПредыдущейСтроки = й - 1;
		//	ПредыдущаяСтрокаЕИ = ТаблицаЕдиницИзмерения[й_ПредыдущейСтроки];
		//	СтрокаЕИ.РасчетныйКоэффициент = СтрокаЕИ.Коэффициент / ПредыдущаяСтрокаЕИ.Коэффициент;
		//КонецЕсли;
	
		////	Защита от дубликатов наименований упаковок
		//Если ЭтоСамаяМелкаяЕдиница Тогда
		Если СтрокаЕИ.ЕдиницаПоКлассификатору.Наименование = "шт" Тогда 
		//НМА 11.09.17 <<
			НаименованиеУпаковки = СтрокаЕИ.ЕдиницаПоКлассификатору.Наименование;
		Иначе
			НаименованиеУпаковки = СтрокаЕИ.ЕдиницаПоКлассификатору.Наименование + "-" + СтрокаЕИ.РасчетныйКоэффициент;	
		КонецЕсли; 
		Если НаименованияУпаковок.Найти(НаименованиеУпаковки) = Неопределено Тогда
			НаименованияУпаковок.Добавить(НаименованиеУпаковки);
		Иначе
			Продолжить
		КонецЕсли;

		EmeWmsERPEngine.AppendChildLine(ERPData);
		
		//НМА 11.09.17 >>
		//Если ЭтоСамаяМелкаяЕдиница Тогда
		//	ERPData.packs.id = EmeWmsУтилиты.ПолучитьКод(СтрокаЕИ.Ссылка);
		//	ERPData.packs.pack_code = НаименованиеУпаковки;
		//	СтрокаЕИ.КодЕИ = НаименованиеУпаковки;
		//	ERPData.packs.contains_id = "";
		//	ERPData.packs.contains_code = "";
		//Иначе
		//	ERPData.packs.id = EmeWmsУтилиты.ПолучитьКод(СтрокаЕИ.Ссылка);
		//	ERPData.packs.pack_code = НаименованиеУпаковки;
		//	СтрокаЕИ.КодЕИ = НаименованиеУпаковки;
		//	ERPData.packs.contains_id = EmeWmsУтилиты.ПолучитьКод(ПредыдущаяСтрокаЕИ.Ссылка);
		//	ERPData.packs.contains_code = ПредыдущаяСтрокаЕИ.КодЕИ;
		//КонецЕсли;

		//Если ЭтоСамаяМелкаяЕдиница Тогда
		Если СтрокаЕИ.ЕдиницаПоКлассификатору.Наименование = "шт" Тогда //НМА 11.09.17
			ERPData.packs.id = EmeWmsУтилиты.ПолучитьКод(СтрокаЕИ.Ссылка);
			ERPData.packs.pack_code = НаименованиеУпаковки;
			СтрокаЕИ.КодЕИ = НаименованиеУпаковки;
			ERPData.packs.contains_id = "";
			ERPData.packs.contains_code = "";
			ЕдиницаИзмеренияШтука_contains_id = ERPData.packs.id;  //НМА 11.09.17
			ЕдиницаИзмеренияШтукаКодЕИ_contains_code = СтрокаЕИ.КодЕИ; //НМА 11.09.17
		Иначе
			ERPData.packs.id = EmeWmsУтилиты.ПолучитьКод(СтрокаЕИ.Ссылка);
			ERPData.packs.pack_code = НаименованиеУпаковки;
			СтрокаЕИ.КодЕИ = НаименованиеУпаковки;
			//ERPData.packs.contains_id = EmeWmsУтилиты.ПолучитьКод(ПредыдущаяСтрокаЕИ.Ссылка);
			//ERPData.packs.contains_code = ПредыдущаяСтрокаЕИ.КодЕИ;
			ERPData.packs.contains_id = ЕдиницаИзмеренияШтука_contains_id; //НМА 11.09.17
			ERPData.packs.contains_code = ЕдиницаИзмеренияШтукаКодЕИ_contains_code; //НМА 11.09.17
		КонецЕсли;
		//НМА 11.09.17 <<
		
		Если ЗначениеЗаполнено(СтрокаЕИ.ЕдиницаПоКлассификатору.емеКодСинхронизации) Тогда
			ERPData.packs.mu_code = СтрокаЕИ.ЕдиницаПоКлассификатору.емеКодСинхронизации;
		Иначе
			ERPData.packs.mu_code = СтрокаЕИ.ЕдиницаПоКлассификатору.Наименование;	
		КонецЕсли; 
		
		ERPData.packs.mu_name = СтрокаЕИ.ЕдиницаПоКлассификатору.НаименованиеПолное;
		
		ERPData.packs.factor = СтрокаЕИ.РасчетныйКоэффициент;
		
		ERPData.packs.width = 0.01;
		ERPData.packs.height = 0.01;
		ERPData.packs.length = 0.01;
		
		// Катков А. 07.09.2016 >>
		//ERPData.packs.volume = Выборка.Объем * 1000000;
		//
		ERPData.packs.volume = 0; // пока не выбрана в 1С даже единица измерения объема
		ERPData.packs.brutto = СтрокаЕИ.Ссылка.Вес;
		ERPData.packs.netto = ERPData.packs.brutto;
		
		//НМА 11.09.17 >>
		//Если ЭтоСамаяМелкаяЕдиница Тогда
		//	ЭтоСамаяМелкаяЕдиница = ЛОЖЬ;
		//КонецЕсли;
		//НМА 11.09.17 <<
		
	КонецЦикла;
		
	//	Штрих-коды
	НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Владелец.Установить(Товар.Ссылка);
	НаборЗаписей.Прочитать();
	
	Текст_ОшибкиЭкспортаШтрихкодов = ""; //НМА 29.11.17 ошибки по экспорту штрихкодов отправить на почту
	
	//НМА 27.07.17 проверка штрихкода и единицы измерения
	Если НаборЗаписей.Количество()=0 Тогда
		Сообщить("!У товара |"+Товар.Ссылка+"|. Нет Штрихкодов!");
		Текст_ОшибкиЭкспортаШтрихкодов = Текст_ОшибкиЭкспортаШтрихкодов + "!У товара |"+Товар.Ссылка+"|. Нет Штрихкодов!";  //НМА 29.11.17 ошибки по экспорту штрихкодов отправить на почту
	КонецЕсли;
	//НМА 27.07.17 проверка штрихкода и единицы измерения
	EmeWmsERPEngine.SelectChild(ERPData, "bar_codes");
	Для Каждого Запись Из НаборЗаписей Цикл
		
		//НМА 24.08.17
		Если Запись.ТипШтрихкода <> ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
			Если Запись.ТипШтрихкода <> ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда //НМА 29.11.17
				Сообщить("!У товара |"+Товар.Ссылка+"|. Штрихкод |"+Запись.ШтрихКод+"| имеет тип "+Запись.ТипШтрихкода.Наименование); //НМА 29.11.17
				Текст_ОшибкиЭкспортаШтрихкодов = Текст_ОшибкиЭкспортаШтрихкодов + "!У товара |"+Товар.Ссылка+"|. Штрихкод |"+Запись.ШтрихКод+"| имеет тип "+Запись.ТипШтрихкода.Наименование; //НМА 29.11.17 ошибки по экспорту штрихкодов отправить на почту	
			КонецЕсли;	//НМА 29.11.17
			Продолжить;			
		КонецЕсли;
		//НМА 24.08.17
		
		//НМА 21.07.17 проверка штрихкода и единицы измерения
		Если СокрЛП(Запись.ШтрихКод) = "" Тогда
			Сообщить("!У товара |"+Товар.Ссылка+"|. Штрихкод пустой!");
			Текст_ОшибкиЭкспортаШтрихкодов = Текст_ОшибкиЭкспортаШтрихкодов + "!У товара |"+Товар.Ссылка+"|. Штрихкод пустой!"; //НМА 29.11.17 ошибки по экспорту штрихкодов отправить на почту
			Продолжить;
		КонецЕсли;
		
		Если Запись.ЕдиницаИзмерения.ПометкаУдаления Тогда
			Сообщить("!У товара |"+Товар.Ссылка+"|. Единица измерения: "+Запись.ЕдиницаИзмерения.Наименование+" помечена на удаление!");
			Текст_ОшибкиЭкспортаШтрихкодов = Текст_ОшибкиЭкспортаШтрихкодов + "!У товара |"+Товар.Ссылка+"|. Единица измерения: "+Запись.ЕдиницаИзмерения.Наименование+" помечена на удаление!"; //НМА 29.11.17 ошибки по экспорту штрихкодов отправить на почту
			Продолжить;
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Запись.ШтрихКод))<>СтрДлина(Запись.ШтрихКод) Тогда
			Сообщить("!У товара |"+Товар.Ссылка+"|. Штрихкод |"+Запись.ШтрихКод+"| содержит пробелы!");
			Текст_ОшибкиЭкспортаШтрихкодов = Текст_ОшибкиЭкспортаШтрихкодов + "!У товара |"+Товар.Ссылка+"|. Штрихкод |"+Запись.ШтрихКод+"| содержит пробелы!"; //НМА 29.11.17 ошибки по экспорту штрихкодов отправить на почту
			Продолжить;			
		КонецЕсли;
		
		Попытка
			ш=Число(Запись.ШтрихКод);
		Исключение
			Сообщить("!У товара |"+Товар.Ссылка+"|. Штрихкод |"+Запись.ШтрихКод+"| содержит не числовые символы!");
			Текст_ОшибкиЭкспортаШтрихкодов = Текст_ОшибкиЭкспортаШтрихкодов + "!У товара |"+Товар.Ссылка+"|. Штрихкод |"+Запись.ШтрихКод+"| содержит не числовые символы!"; //НМА 29.11.17 ошибки по экспорту штрихкодов отправить на почту
			Продолжить;
		КонецПопытки;	
		//НМА 21.07.17 проверка штрихкода и единицы измерения
		
		EmeWmsERPEngine.AppendChildLine(ERPData);
		ERPData.bar_codes.id			= Запись.ШтрихКод;
		ЕдиницаИзмерения = Запись.ЕдиницаИзмерения;
		
		Если ЕдиницаИзмерения.Пустая() Тогда
			ERPData.bar_codes.pack_code 	= ТаблицаЕдиницИзмерения[0].КодЕИ;
			ERPData.bar_codes.pack_id 	= EmeWmsУтилиты.ПолучитьКод(ТаблицаЕдиницИзмерения[0].Ссылка);
		Иначе
			НайденаяСтрока = ТаблицаЕдиницИзмерения.Найти(ЕдиницаИзмерения, "Ссылка");
			Если НайденаяСтрока = Неопределено Тогда
				Сообщить("У товара "+Товар.Ссылка.Наименование+" в штрихкоде:"+Запись.ШтрихКод+" не верно указана единица измерения!");
				Текст_ОшибкиЭкспортаШтрихкодов = Текст_ОшибкиЭкспортаШтрихкодов + "У товара "+Товар.Ссылка.Наименование+" в штрихкоде:"+Запись.ШтрихКод+" не верно указана единица измерения!"; //НМА 29.11.17 ошибки по экспорту штрихкодов отправить на почту
			Иначе
				ERPData.bar_codes.pack_code 	= НайденаяСтрока.КодЕИ;
			КонецЕсли;
			ERPData.bar_codes.pack_id 	= EmeWmsУтилиты.ПолучитьКод(ЕдиницаИзмерения);
		КонецЕсли; 
		
		ERPData.bar_codes.bar_code		= Запись.ШтрихКод;
		ERPData.bar_codes.bar_code_type = Запись.ТипШтрихКода;	
	КонецЦикла;
	
	//НМА 29.11.17 ошибки по экспорту штрихкодов отправить на почту >>
	Если НЕ ПустаяСтрока(Текст_ОшибкиЭкспортаШтрихкодов) Тогда //НМА 06.12.17
		ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт номенклатуры: " + Текст_ОшибкиЭкспортаШтрихкодов);
		ТемаСообщения 	= "Есть ошибки в Штрихкодах при экспорте Номенклатуры";
		ТекстСообщения 	= "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС +	Текст_ОшибкиЭкспортаШтрихкодов;
		EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения, "Предупреждения1С_WMS_Номенклатура"); //НМА 05.12.17 Предупреждения1С_WMS
	КонецЕсли; //НМА 01.12.17
	//НМА 29.11.17 ошибки по экспорту штрихкодов отправить на почту <<
	
	//////НМА Ошибки при загрузке штрихкодов
	////ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Экспорт сообщений: " + Ошибка);
	////ТемаСообщения 	= "Критическая ошибка экспорта сообщений";
	////ТекстСообщения 	= "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + Ошибка;
	////EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения, "Предупреждения1С_WMS_Номенклатура"); //НМА 05.12.17 Предупреждения1С_WMS
	
	//	Комплектующие номенклатуры
	НаборЗаписей = РегистрыСведений.КомплектующиеНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Товар.Ссылка);
	НаборЗаписей.Прочитать();
	
	EmeWmsERPEngine.SelectChild(ERPData, "kit_items");
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.Комплектующая.ПометкаУдаления Тогда
			Продолжить
		КонецЕсли;
		EmeWmsERPEngine.AppendChildLine(ERPData);
		ERPData.kit_items.id			= EmeWmsУтилиты.ПолучитьКод(Запись.Комплектующая);
		ERPData.kit_items.quantity 		= Запись.Количество;
		ERPData.kit_items.pack_code 	= Запись.Комплектующая.БазоваяЕдиницаИзмерения.Наименование;
	КонецЦикла;

КонецПроцедуры

//	Процедура ЭкспортироватьГабариты экспортирует габаритные характеристики.
Процедура ЭкспортироватьГабариты(ERPData, Габариты)
	
	ERPData.packs.width = Габариты.Ширина;
	ПреобразоватьРазмер(ERPData.packs.width, Габариты.ШиринаЕдиницаИзмерения);
	
	ERPData.packs.height = Габариты.Высота;
	ПреобразоватьРазмер(ERPData.packs.height, Габариты.ВысотаЕдиницаИзмерения);
	
	ERPData.packs.length = Габариты.Глубина;
	ПреобразоватьРазмер(ERPData.packs.length, Габариты.ГлубинаЕдиницаИзмерения);
	
	ERPData.packs.volume = Габариты.Объем;
	ПреобразоватьОбъем(ERPData.packs.volume, Габариты.ОбъемЕдиницаИзмерения);
	
КонецПроцедуры
	
//	Функция ПолучитьПолныйПуть возвращает полный путь классификатора товара.
Функция ПолучитьПолныйПуть(Знач Товар, Знач Код)
	
	ПолныйПуть = "";
	
	Если ЗначениеЗаполнено(Товар.Родитель) Тогда
		Пока Истина Цикл
			Если Товар.ЭтоГруппа Тогда
				Если ПолныйПуть <> "" Тогда
					ПолныйПуть = "#" + ПолныйПуть;
				КонецЕсли;
				Если Код Тогда
					ПолныйПуть = СокрЛП(Товар.Код) + ПолныйПуть;
				Иначе
					ПолныйПуть = Товар.Наименование + ПолныйПуть;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.Родитель) Тогда
				Товар = Товар.Родитель;
			Иначе
				Прервать;
			КонецЕсли
		КонецЦикла
	КонецЕсли;
	
	Возврат ПолныйПуть;
	
КонецФункции

Функция ПолучитьКатегорию(Товар) 
	
	Если НЕ ЗначениеЗаполнено(Товар) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Рег.Категория
	               |ИЗ
	               |	РегистрСведений.КатегорииОбъектов КАК Рег
	               |ГДЕ
	               |	Рег.Объект = &Товар";
	Запрос.УстановитьПараметр("Товар",Товар);
	
	Выб = Запрос.Выполнить().Выбрать();
	лКатегория="";
	Пока Выб.Следующий() Цикл
		Если лКатегория<>"" Тогда
			лКатегория = Строка(лКатегория) +"-"+ Строка(Выб.Категория);
		Иначе
			лКатегория = Выб.Категория;
		КонецЕсли;
	КонецЦикла;
	
	Возврат лКатегория;
КонецФункции

//	Функция ПолучитьДробь безопасно возвращает дробное значение
Функция ПолучитьДробь(Знач Числитель, Знач Знаменатель)
	
	Если Числитель = 0 Или Знаменатель = 0 Тогда
		Возврат Числитель;
	КонецЕсли;
	
	Возврат Числитель / Знаменатель;
	
КонецФункции

//	Процедура ПреобразоватьРазмер преобразует размер к сантиметрам.
Процедура ПреобразоватьРазмер(Размер, ЕдиницаИзмерения)
	
	//	Множитель преобразования к метрам
	Множитель = ПолучитьДробь(ЕдиницаИзмерения.Числитель, ЕдиницаИзмерения.Знаменатель);
	Размер = Размер * Множитель * 100.;
	
	Если Размер < 1. Тогда
		Размер = 1.
	КонецЕсли;
	
КонецПроцедуры

//	Процедура ПреобразоватьОбъем преобразует объем к кубическим сантиметрам.
Процедура ПреобразоватьОбъем(Объем, ЕдиницаИзмерения)
	
	//	Множитель преобразования к кубическим метрам
	Множитель = ПолучитьДробь(ЕдиницаИзмерения.Числитель, ЕдиницаИзмерения.Знаменатель);
	Объем = Объем * Множитель * 1000000.;
	
КонецПроцедуры

//	Процедура ПреобразоватьВес преобразует вес к килограммам.
Процедура ПреобразоватьВес(Вес, ЕдиницаИзмерения)
	
	//	Множитель преобразования к килограммам
	Множитель = ПолучитьДробь(ЕдиницаИзмерения.Числитель, ЕдиницаИзмерения.Знаменатель);
	Вес = Вес * Множитель * 1.;
	
КонецПроцедуры
