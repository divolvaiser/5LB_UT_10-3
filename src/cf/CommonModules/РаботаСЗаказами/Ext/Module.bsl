
Процедура ПриЗаписиЗаказаПриЗаписи(Источник, Отказ) Экспорт
	
		Если ПользователиИнформационнойБазы.ТекущийПользователь().Имя="robot" Тогда
			возврат;
		КонецЕсли;
				
		Если (Источник.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УКурьера) Тогда
			Если НЕ ЗначениеЗаполнено(Источник.Ответственный) Тогда
				Сообщить ("Заказ у курьера - должен быть ответственный");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.Ответственный) Тогда
			СуммаДепозита = 0;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Р.Сумма
			               |ИЗ
			               |	РегистрСведений.ДепозитСотрудников КАК Р
			               |ГДЕ
			               |	Р.Сотрудник = &Отв";
			Запрос.УстановитьПараметр("Отв",Источник.Ответственный);
			
			Рез = Запрос.Выполнить();
			Если НЕ Рез.Пустой() Тогда
				Выб = Рез.Выбрать();
				Выб.Следующий();
				СуммаДепозита = Выб.Сумма;
			КонецЕсли;
			
			Если СуммаДепозита > 0 Тогда		
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	СУММА(З.СуммаДокумента) КАК Сумма
				|ИЗ
				|	Документ.ЗаказПокупателя КАК З
				|ГДЕ
				|	З.Проведен = ИСТИНА
				|	И З.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|	И З.Ответственный = &Отв";
				Запрос.УстановитьПараметр("Отв",Источник.Ответственный);
				
				Рез = Запрос.Выполнить();
				Если НЕ Рез.Пустой() Тогда
					Выб = Рез.Выбрать();
					Выб.Следующий();
					Если ?(Выб.Сумма=Null,0,Выб.Сумма) > СуммаДепозита Тогда
						Сообщить ("Превышен депозит сотрудника!",СтатусСообщения.Важное);
						//Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				//Сообщить ("Нет данных о депозите сотрудника "+Источник.Ответственный,Статуссообщения.Важное);
			КонецЕсли;
		КонецЕсли;
		
		
		Если Источник.Распечатан  Тогда
			Если (Источник.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собран) ИЛИ (Источник.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УКурьера) Тогда
				Источник.Распечатан=Ложь;
			КонецЕсли;
			Если (Источник.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Корректировка) ИЛИ (Источник.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УдалениеТовара) Тогда
				Источник.Распечатан=Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	//Проверяем табличную часть товары на корректировки
	//Если Источник.ИсторияТовары.Количество() = 0 Тогда
	////	Источник.ИсторияТовары.Загрузить(Источник.Товары.Выгрузить());
	//Иначе
	//	Если (Источник.ИсторияТовары.Итог("Количество")<>Источник.Товары.Итог("Количество")) ИЛИ
	//		(Источник.ИсторияТовары.Итог("Цена")<>Источник.Товары.Итог("Цена")) ИЛИ
	//		(Источник.ИсторияТовары.Итог("Сумма")<>Источник.Товары.Итог("Сумма")) ИЛИ
	//		(Источник.ИсторияТовары.Итог("ПроцентСкидкиНаценки")<>Источник.Товары.Итог("ПроцентСкидкиНаценки")) Тогда
	//		Для Каждого стр из Источник.Товары Цикл
	//			ТекТов = Источник.ИсторияТовары.Найти (стр.Номенклатура, "Номенклатура");
	//			Если ТекТов = Неопределено Тогда
	//				РегЗапись = РегистрыСведений.КорректировкиВЗаказах.СоздатьМенеджерЗаписи();
	//				РегЗапись.Заказ = Источник.Ссылка;
	//				РегЗапись.Дата = ТекущаяДата()+1;
	//				РегЗапись.Номенклатура = стр.Номенклатура;
	//				РегЗапись.Пользователь = Справочники.Пользователи.НайтиПоКоду(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	//				РегЗапись.Действие = Перечисления.ВидыДействийСТабЧастью.Номенклатура;
	//				Попытка
	//					РегЗапись.Записать(Ложь);
	//					продолжить;
	//				Исключение
	//					Сообщить ("Не удалось зарегистрировать изменения!",СтатусСообщения.Важное);
	//					Отказ = Истина;
	//				КонецПопытки;
	//			КонецЕсли;
	//			Если стр.Количество<>ТекТов.Количество Тогда
	//				РегЗапись = РегистрыСведений.КорректировкиВЗаказах.СоздатьМенеджерЗаписи();
	//				РегЗапись.Заказ = Источник.Ссылка;
	//				РегЗапись.Дата = ТекущаяДата()+3;
	//				РегЗапись.Номенклатура = стр.Номенклатура;
	//				РегЗапись.Пользователь = Справочники.Пользователи.НайтиПоКоду(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	//				РегЗапись.Действие = Перечисления.ВидыДействийСТабЧастью.Количество;
	//				Попытка
	//					РегЗапись.Записать(Ложь);
	//					
	//				Исключение
	//					Сообщить ("Не удалось зарегистрировать изменения!",СтатусСообщения.Важное);
	//					Отказ = Истина;
	//				КонецПопытки;
	//			КонецЕсли;
	//			Если стр.ПроцентСкидкиНаценки<>ТекТов.ПроцентСкидкиНаценки Тогда
	//				РегЗапись = РегистрыСведений.КорректировкиВЗаказах.СоздатьМенеджерЗаписи();
	//				РегЗапись.Заказ = Источник.Ссылка;
	//				РегЗапись.Дата = ТекущаяДата()+4;
	//				РегЗапись.Номенклатура = стр.Номенклатура;
	//				РегЗапись.Пользователь = Справочники.Пользователи.НайтиПоКоду(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	//				РегЗапись.Действие = Перечисления.ВидыДействийСТабЧастью.РучСкидка;
	//				Попытка
	//					РегЗапись.Записать(Ложь);
	//				Исключение
	//					Сообщить ("Не удалось зарегистрировать изменения!",СтатусСообщения.Важное);
	//					Отказ = Истина;
	//				КонецПопытки;
	//			КонецЕсли;
	//			Если стр.Цена<>ТекТов.Цена Тогда
	//				РегЗапись = РегистрыСведений.КорректировкиВЗаказах.СоздатьМенеджерЗаписи();
	//				РегЗапись.Заказ = Источник.Ссылка;
	//				РегЗапись.Дата = ТекущаяДата()+7;
	//				РегЗапись.Номенклатура = стр.Номенклатура;
	//				РегЗапись.Пользователь = Справочники.Пользователи.НайтиПоКоду(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	//				РегЗапись.Действие = Перечисления.ВидыДействийСТабЧастью.Цена;
	//				Попытка
	//					РегЗапись.Записать(Ложь);
	//				Исключение
	//					Сообщить ("Не удалось зарегистрировать изменения!",СтатусСообщения.Важное);
	//					Отказ = Истина;
	//				КонецПопытки;
	//			//ИначеЕсли стр.Сумма<>ТекТов.Сумма Тогда
	//			//	РегЗапись = РегистрыСведений.КорректировкиВЗаказах.СоздатьМенеджерЗаписи();
	//			//	РегЗапись.Заказ = Источник.Ссылка;
	//			//	РегЗапись.Дата = ТекущаяДата()+10;
	//			//	РегЗапись.Номенклатура = стр.Номенклатура;
	//			//	РегЗапись.Пользователь = Справочники.Пользователи.НайтиПоКоду(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	//			//	РегЗапись.Действие = Перечисления.ВидыДействийСТабЧастью.Сумма;
	//			//	Попытка
	//			//		РегЗапись.Записать(Ложь);
	//			//		продолжить;
	//			//	Исключение
	//			//		Сообщить ("Не удалось зарегистрировать изменения!",СтатусСообщения.Важное);
	//			//		Отказ = Истина;
	//			//	КонецПопытки;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		Источник.ИсторияТовары.Загрузить(Источник.Товары.Выгрузить());
	//		Источник.Записать(РежимЗаписиДокумента.Запись);
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

//pryan@inbox.ru 16/12/2013
Процедура ЗафиксироватьСтатусСборки(Документ,Статус,Причина=Неопределено) Экспорт
	
	ОтветственныйПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей = РегистрыСведений.ИсторияСтатусовДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Отбор.Статус.Установить(Статус);
	НаборЗаписей.Отбор.Ответственный.Установить(ОтветственныйПользователь);
	
	НаборЗаписей.Прочитать();
	если НаборЗаписей.Количество()>0 тогда
		НаборЗаписей[0].ДатаСтатуса = ТекущаяДата();	
	иначе
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДатаСтатуса = ТекущаяДата();
		НоваяЗапись.Документ = Документ;
		НоваяЗапись.Статус = Статус;
		НоваяЗапись.Ответственный = ОтветственныйПользователь;
		Если НЕ Причина = Неопределено Тогда
		НоваяЗапись.Причина = Причина;
		КонецЕсли;
	конецесли;
	
	попытка
		НаборЗаписей.Записать();
	исключение
	конецпопытки;	
	
КонецПроцедуры	

//pryan@inbox.ru 29/12/2013
Процедура УстановитьЕдиницуКоэффициентПоБазовойЕдинице(Строка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
	|	ЕдиницыИзмерения.Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору";
	
	Запрос.УстановитьПараметр("Владелец", Строка.Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору", Строка.Номенклатура.БазоваяЕдиницаИзмерения);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	если Выборка.Следующий() тогда
	
		Строка.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		Строка.Коэффициент = Выборка.Коэффициент;
		
	конецесли;
	
КонецПроцедуры

Процедура ПередЗаписьюЗаказаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//Если РольДоступна(Метаданные.Роли.Tovaroved) Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	
	//25052018 Пометка удаления или отмена проведения = отмена в ЕМЕ
	Если РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения Тогда
		EmeWmsЭкспортЗаказовПокупателей.ПометитьКЭкспортуПовторно(Источник);
	КонецЕсли;
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Имя="robot" Тогда
			возврат;
		КонецЕсли;
		
	Если (РольДоступна(Метаданные.Роли.КладOFFщик)) ИЛИ (РольДоступна(Метаданные.Роли.НЕКладовщик)) Тогда
			
	
	Если Источник.ПодарочныеКарты.Количество()>0 Тогда
		//Проверка Подарочных Карт
		Если ПроверкаПодарочныхКарт(Источник)=Ложь Тогда
			Отказ = Истина;
			возврат;
		КонецЕсли;
		
		//Регим карту
		Для Каждого ст из Источник.ПодарочныеКарты Цикл
			Если ЗначениеЗаполнено(ст.Сумма) Тогда
				Продолжить;
			КонецЕсли;
			
			Набор = РегистрыСведений.ПодарочныеКарты.СоздатьНаборЗаписей();
			
			Набор.Отбор.Номер.Установить(ст.Номер);
			Набор.Прочитать();
			
			Если Источник.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УКурьера Тогда
				Если НЕ ЗначениеЗаполнено(Набор[0].ДатаПродажи) Тогда
					СтрокаДанных = Набор[0];
					СтрокаДанных.ДатаПродажи = ТекущаяДата();
					СтрокаДанных.МестоПродажи = Источник.Контрагент;
					Попытка
						Набор.Записать();
					Исключение
						Сообщить ("Не удалось зарегистрировать карту "+ст.Номер);
						Отказ = Истина;
						возврат;
					КонецПопытки;
				Иначе
					Сообщить ("Карта ужЕ активирована "+ст.Номер);
					Отказ = Истина;
					возврат;
				КонецЕсли;
			Иначе
				СтрокаДанных = Набор[0];
				СтрокаДанных.ДатаПродажи = Неопределено;
				СтрокаДанных.МестоПродажи = Неопределено;
				Попытка
					Набор.Записать();
				Исключение
					Сообщить ("Не удалось зарегистрировать карту "+ст.Номер);
					Отказ = Истина;
					возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
    КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(П.Ссылка.СуммаДокумента) КАК Сумма
	               |ИЗ
	               |	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК П
	               |ГДЕ
	               |	П.Сделка = &Заказ";
	Запрос.УстановитьПараметр("Заказ",Источник.Ссылка);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Выб.Следующий();
	Если Выб.Сумма = Null Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.СуммаДокумента > Выб.Сумма Тогда
		Сообщить ("Сумма заказа превышает сумму оплаты по заказу!",СтатусСообщения.Важное);
		Сообщить ("Оплачено: "+Выб.Сумма+".Сумма заказа: "+Источник.СуммаДокумента);
		Отказ=Истина;
	КонецЕсли;
		
		
	
	
КонецПроцедуры

Функция ПроверкаПодарочныхКарт (Источник)
	Если Источник.ПодарочныеКарты.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Р.Номер,
	               |	Р.Погашена,
	               |	Р.ДатаПродажи
	               |ИЗ
	               |	РегистрСведений.ПодарочныеКарты КАК Р
	               |ГДЕ
	               |	Р.Номер В(&Нумер)";
	Запрос.УстановитьПараметр("Нумер",Источник.ПодарочныеКарты.ВыгрузитьКолонку("Номер"));
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщить ("Подарочные карты не найдены!",СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Пока Выб.Следующий() Цикл
		Если Выб.Погашена Тогда
			Сообщить ("Карта "+Выб.Номер+" ужЕ погашена!",СтатусСообщения.Важное);
			Возврат Ложь;
		//ИначеЕсли ЗначениеЗаполнено(Выб.ДатаПродажи) Тогда
		//	Сообщить ("Карта "+Выб.Номер+" ужЕ активирована!",СтатусСообщения.Важное);
		//	Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
 
КонецФункции



Процедура ПроверкаНутрикс () Экспорт
	Нутр = Справочники.Номенклатура.НайтиПоКоду("81");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Ссылка,
	|	ВЫБОР
	|		КОГДА СУММА(Т.Сумма) >= 1000
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Участие,
	|	Т.Ссылка.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.ЗаказПокупателя КАК З
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК Т
	|		ПО З.Ссылка = Т.Ссылка.Сделка
	|			И (Т.Ссылка.Проведен = ИСТИНА)
	|ГДЕ
	|	Т.Ссылка.Сделка ЕСТЬ НЕ NULL 
	|	И З.Дата МЕЖДУ &Дат1 И &Дат2
	|	И Т.Номенклатура В ИЕРАРХИИ(&Nutrex)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка";
	Запрос.УстановитьПараметр("Дат1",Дата(2014,10,10,00,00,00));
	Запрос.УстановитьПараметр("Дат2",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Nutrex",Нутр);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		возврат;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Пока Выб.Следующий() Цикл
		Если Выб.Участие = 0 Тогда Продолжить КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	Р.Код
		|ИЗ
		|	РегистрСведений.ПромоКоды КАК Р
		|ГДЕ
		|	Р.Выдан = ЛОЖЬ
		|	И Р.Бренд = &Nutrex";
		Запрос.УстановитьПараметр("Nutrex",Нутр);
		
		РезКоды = Запрос.Выполнить();
		Если РезКоды.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ВыбКоды = РезКоды.Выбрать();
		ВыбКоды.Следующий();
		
		Набор = РегистрыСведений.ПромоКоды.СоздатьНаборЗаписей();
		
		Набор.Отбор.Бренд.Установить(Нутр);
		Набор.Отбор.Код.Установить(ВыбКоды.Код);
		Набор.Прочитать();
		
		СтрокаДанных = Набор[0];
		СтрокаДанных.Выдан = Истина;
		СтрокаДанных.Документ = Выб.Ссылка;
		СтрокаДанных.Пользователь = Выб.Ответственный;
		СтрокаДанных.Дата = ТекущаяДата();
		
		Попытка
			Набор.Записать();
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОтправитьЗаказыВБух ()  Экспорт
	НовДокВБух = Неопределено;
	
	Нал = Новый СписокЗначений;
	Нал.Добавить(Справочники.ВидыОплатЧекаККМ.Наличные);
	Нал.Добавить(Справочники.ВидыОплатЧекаККМ.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	З.Ссылка КАК Ссылка,
	|	З.Ссылка.Дата КАК Дата,
	|	З.Ссылка.Номер КАК Номер,
	|	З.Номенклатура.Код КАК Код,
	|	З.Цена,
	|	З.СуммаНДС,
	|	З.Сумма,
	|	З.Количество * З.Коэффициент КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК З
	|ГДЕ
	|	З.Ссылка.Проведен = ИСТИНА
	|	И З.Ссылка.Дата МЕЖДУ &Дат1 И &Дат2
	|	И НЕ З.Ссылка.ВидОплаты В (&ВидОп)
	//25.05.2015 Новый документооборот
	|   И З.Ссылка.Организация <> &ФитМил
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер,
	|   З.Номенклатура.Артикул";
	Запрос.УстановитьПараметр("Дат1",НачалоДня(ТекущаяДата()-(86400*3))); 
	Запрос.УстановитьПараметр("Дат2",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ВидОп",Нал.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ФитМил",Справочники.Организации.НайтиПоКоду("661"));
	
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Бух = ПодключитьсяКБух ();
	
	Если Бух = Неопределено Тогда
		//Сообщить ("Не удалось подключиться к нужной базе");
		возврат;
	КонецЕсли;
	
	НомерЗак = "";
	Для Каждого ст Из Рез Цикл
		Если НомерЗак<>ст.Номер Тогда //либо первый проход, либо другой заказ
			Если НовДокВБух<>Неопределено Тогда
				Попытка
					НовДокВБух.Записать()
				Исключение
					//НовДокВБух.Записать();
				КонецПопытки;
			КонецЕсли;
			НовДокВБух = ПоискВПриёмникеЗаказ(Бух,Ст.Ссылка);
			
			//***{+Редактирования}*** Тасмаджиев 13/08/2018// ->>
			//***=!{Использование неправильного метода работы с объектом через COM для проверки был ли документ записан хотя бы раз}!=*** ->>
			//Если НовДокВБух.ЭтоНовый() Тогда
			Если НовДокВБух.Ссылка.Пустая()Тогда
			//***{-Редактирования}*** Тасмаджиев 13/08/2018// <<-
				УИД = XMLСтрока(Ст.Ссылка);
				КлючУникальности = Бух.NewObject("УникальныйИдентификатор",УИД);
				ТекСсылка = Бух.Документы.СчетНаОплатуПокупателю.ПолучитьСсылку(КлючУникальности);
				НовДокВБух.УстановитьСсылкуНового(ТекСсылка);
				СформироватьШапкуЗаказ (Бух,ст,НовДокВБух);
				НовДокВБух.Комментарий = "Пришло из УТ.Когда: "+ТекущаяДата()+" Номер в УТ: "+ст.Номер;
			КонецЕсли;
			
			
			НовДокВБух.Товары.Очистить();
		КонецЕсли;
		
		Товары = НовДокВБух.Товары.Добавить();
		//Изменено Monstr 180410
		//Доработка согласно ЛТ №2 от 05.04.18
		//Было:Товары.Номенклатура = ПолучитьНоменклатуруВПриёмнике (Бух,Справочники.Номенклатура.НайтиПоКоду(ст.Код));
		ЕдиницаХранения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		Товары.Номенклатура = _5LB_ОбменСДругимиБазами.ПолучитьНоменклатуруВПриёмнике(Бух,Справочники.Номенклатура.НайтиПоКоду(ст.Код),,ЕдиницаХранения);
		//***{+Изменения}*** Тасмаджиев 10/08/2018// ->
		//***=!{вылетало с ошибкой исправил на то что было в в cf к ЛТ4}!=*** ->>
		//Товары.Количество = ст.Количество * ?(ст.Коэффициент = 0,1,ст.Коэффициент) * ст.ЕдиницаИзмерения.Коэффициент / ?(НЕ ЕдиницаХранения.Коэффициент = 0,ЕдиницаХранения.Коэффициент,1);
		Товары.Количество = ст.Количество;
		//Конец изменного Monstr 180410
		Если ст.Ссылка.Организация = Справочники.Организации.НайтиПоКоду("000000001") Тогда
			Товары.СтавкаНДС = Бух.Перечисления.СтавкиНДС.НДС18; 
			Товары.СуммаНДС = ст.СуммаНДС;
		Иначе
			Товары.СтавкаНДС = Бух.Перечисления.СтавкиНДС.БезНДС; 
		КонецЕсли;
		Товары.Сумма = ст.Сумма;
		Товары.Цена = Товары.Сумма/?(Товары.Количество=0,1,Товары.Количество);
				
		НомерЗак = ст.Номер;
	КонецЦикла;
	Попытка
		НовДокВБух.Записать()
	Исключение
		//НовДокВБух.Записать();
	КонецПопытки;

	
	//25.05.2015 Новый документооборот
	НовДокВБух = Неопределено;
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	З.Ссылка КАК Ссылка,
	|	З.Ссылка.Дата КАК Дата,
	|	З.Ссылка.Номер КАК Номер,
	|	З.Номенклатура.Код КАК Код,
	|	З.Цена,
	|	З.СуммаНДС,
	|	З.Сумма,
	|	З.Количество * З.Коэффициент КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК З
	|ГДЕ
	|	З.Ссылка.Проведен = ИСТИНА
	|	И З.Ссылка.Дата МЕЖДУ &Дат1 И &Дат2
	|	И НЕ З.Ссылка.ВидОплаты В (&ВидОп)
	|   И З.Ссылка.Организация <> &лб
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер,
	|   З.Номенклатура.Артикул";
	Запрос.УстановитьПараметр("Дат1",НачалоДня(ТекущаяДата()-(86400*3))); 
	Запрос.УстановитьПараметр("Дат2",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ВидОп",Нал.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("лб",Справочники.Организации.НайтиПоКоду("000000001"));
	
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Бух = ПодключитьсяКБухГТРФМ ();
	
	Если Бух = Неопределено Тогда
		//Сообщить ("Не удалось подключиться к нужной базе");
		возврат;
	КонецЕсли;
	
	НомерЗак = "";
	Для Каждого ст Из Рез Цикл
		Если НомерЗак<>ст.Номер Тогда //либо первый проход, либо другой заказ
			Если НовДокВБух<>Неопределено Тогда
				Попытка
					НовДокВБух.Записать()
				Исключение
					//НовДокВБух.Записать();
				КонецПопытки;
			КонецЕсли;
			НовДокВБух = ПоискВПриёмникеЗаказ(Бух,Ст.Ссылка);
			
			//***{+Редактирования}*** Тасмаджиев 13/08/2018// ->>
			//***=!{Использование неправильного метода работы с объектом через COM для проверки был ли документ записан хотя бы раз}!=*** ->>
			//Если НовДокВБух.ЭтоНовый() Тогда
			Если НовДокВБух.Ссылка.Пустая()Тогда
            //***{-Редактирования}*** Тасмаджиев 13/08/2018// <<-
				УИД = XMLСтрока(Ст.Ссылка);
				КлючУникальности = Бух.NewObject("УникальныйИдентификатор",УИД);
				ТекСсылка = Бух.Документы.СчетНаОплатуПокупателю.ПолучитьСсылку(КлючУникальности);
				НовДокВБух.УстановитьСсылкуНового(ТекСсылка);
				СформироватьШапкуЗаказГТРФМ (Бух,ст,НовДокВБух);
				НовДокВБух.Комментарий = "Пришло из УТ.Когда: "+ТекущаяДата()+" Номер в УТ: "+ст.Номер;
			КонецЕсли;
			
			
			НовДокВБух.Товары.Очистить();
		КонецЕсли;
		
		Товары = НовДокВБух.Товары.Добавить();
		//Изменено Monstr 180410
		//Доработка согласно ЛТ №2 от 05.04.18
		//Было:Товары.Номенклатура = ПолучитьНоменклатуруВПриёмнике (Бух,Справочники.Номенклатура.НайтиПоКоду(ст.Код),Истина);
		ЕдиницаХранения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		Товары.Номенклатура = _5LB_ОбменСДругимиБазами.ПолучитьНоменклатуруВПриёмнике(Бух,Справочники.Номенклатура.НайтиПоКоду(ст.Код),Истина,ЕдиницаХранения);
		//***{+Изменения}*** Тасмаджиев 13/08/2018// ->
		//***=!{вылетало с ошибкой исправил на то что было в в cf к ЛТ4}!=*** ->>
		//Товары.Количество = ст.Количество * ?(ст.Коэффициент = 0,1,ст.Коэффициент) * ст.ЕдиницаИзмерения.Коэффициент / ?(НЕ ЕдиницаХранения.Коэффициент = 0,ЕдиницаХранения.Коэффициент,1);
		Товары.Количество = ст.Количество;
		//***{-Изменения}*** Тасмаджиев 13/08/2018// <<-
		//Конец изменного Monstr 180410
		Товары.СтавкаНДС = Бух.Перечисления.СтавкиНДС.БезНДС; 
		Товары.Сумма = ст.Сумма;
		Товары.Цена = Товары.Сумма/?(Товары.Количество=0,1,Товары.Количество);
			
		НомерЗак = ст.Номер;
	КонецЦикла;
	Попытка
		НовДокВБух.Записать()
	Исключение
		//НовДокВБух.Записать();
	КонецПопытки;


КонецПроцедуры



Функция ПоискВПриёмникеЗаказ (Бух,Док)
	Типп = Бух.NewObject("ОписаниеТипов","ДокументСсылка.СчетНаОплатуПокупателю").Типы().Получить(0);
	//#***+Изменения*** Тасмаджиев 28/09/2018// ->>
	//ЗапросВПриёмнике = Бух.NewObject("Запрос");
	//ЗапросВПриёмнике.Текст="Выбрать Ссылка из Документ.СчетНаОплатуПокупателю Где Ссылка=&Ссылка";
	//ЗапросВПриёмнике.УстановитьПараметр("Ссылка", Бух.XMLЗначение(Типп, XMLСтрока(Док.Ссылка)));
	//Рез = ЗапросВПриёмнике.Выполнить();
	//Если Рез.Пустой() Тогда
	//	//Нет документа
	//	Документ = Бух.Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
	//Иначе
	//	Выб = Рез.Выбрать();
	//	Выб.Следующий();
	//	Документ = Выб.Ссылка.ПолучитьОбъект();
	//КонецЕсли;
	//
	//возврат Документ;
	//#***-Изменения*** Тасмаджиев 28/09/2018// <<-
	
	//#***+Добавления*** Тасмаджиев 28/09/2018// ->>
	Если НЕ ЗначениеЗаполнено(Бух.XMLЗначение(Типп, XMLСтрока(Док.Ссылка)).Date) Тогда
		//Нет документа
		Документ = Бух.Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
	Иначе
		Документ = Бух.XMLЗначение(Типп, XMLСтрока(Док.Ссылка)).ПолучитьОбъект();
	КонецЕсли;
	
	возврат Документ;
	 //#***-Добавления*** Тасмаджиев 28/09/2018// <<-
	
КонецФункции

//Изменено Monstr 180410
//Доработка согласно ЛТ №2 от 05.04.18
//Было:
//Функция ПолучитьНоменклатуруВПриёмнике (Бух,Номенклатура,ГТРФМ=Ложь)
//	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
//		возврат НЕОПРЕДЕЛЕНО;
//	КонецЕсли;
//	СоздаёмРодителя = Ложь;
//	
//	Запрос = Бух.NewObject("Запрос");
//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Н.Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура КАК Н
//	|ГДЕ
//	|	НЕ Н.ЭтоГруппа
//	|	И Н.Код = &Код";
//	Запрос.УстановитьПараметр("Код",СокрЛП(Номенклатура.Код));
//	
//	Рез = Запрос.Выполнить();
//	Если Рез.Пустой() Тогда
//		Если ЗначениеЗаполнено(Номенклатура.Родитель) Тогда
//			Запрос = Бух.NewObject("Запрос");
//			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Н.Ссылка
//			|ИЗ
//			|	Справочник.Номенклатура КАК Н
//			|ГДЕ
//			|	Н.ЭтоГруппа
//			|	И Н.Код = &Код";
//			Запрос.УстановитьПараметр("Код",СокрЛП(Номенклатура.Родитель.Код));
//			РезРод = Запрос.Выполнить();
//			Если РезРод.Пустой() Тогда
//				СоздаёмРодителя = Истина;
//			Иначе
//				Выб = РезРод.Выбрать();
//				Выб.Следующий();
//				НовРод = Выб.Ссылка;
//			КонецЕсли;
//		КонецЕсли;
//		Если СоздаёмРодителя Тогда
//			НовРод = Бух.Справочники.Номенклатура.СоздатьГруппу();
//			НовРод.Родитель = ?(ГТРФМ,Бух.Справочники.Номенклатура.НайтиПоКоду("00-00000001"),Бух.Справочники.Номенклатура.НайтиПоКоду("00-00000039"));
//			НовРод.Код = Номенклатура.Родитель.Код;
//			НовРод.Наименование = Номенклатура.Родитель.Наименование;
//			НовРод.Записать();
//		КонецЕсли;
//		
//		НовНом = Бух.Справочники.Номенклатура.СоздатьЭлемент();
//		НовНом.Код = Номенклатура.Код;
//		НовНом.Артикул = Номенклатура.Артикул;
//		НовНом.Родитель = НовРод.Ссылка;
//		НовНом.Наименование = Номенклатура.Наименование;
//		НовНом.НаименованиеПолное = Номенклатура.Наименование;
//		НовНом.ЕдиницаИзмерения = Бух.Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
//		НовНом.Комментарий = "Пришло из УТ "+ТекущаяДата();
//		НовНом.НоменклатурнаяГруппа = Бух.Справочники.НоменклатурныеГруппы.НайтиПоКоду("00-000001");
//		НовНом.СтавкаНДС = Бух.Перечисления.СтавкиНДС.НДС18;
//		НовНом.Записать(); 
//	Иначе
//		Выб = Рез.Выбрать();
//		Выб.Следующий();
//		НовНом = Выб.Ссылка;
//	КонецЕсли;
//	Возврат НовНом.Ссылка;
//КонецФункции
//Конец изменного Monstr 180410

Функция ПодключитьсяКБух () 
	//Изменено Monstr 180411
	//Было:
	//Попытка
	//	COMConnector=Новый COMОбъект("V83.COMConnector");
	//	V8 = COMConnector.Connect("Srvr=""1cserv""; Ref=""C8_BUH_30""; usr=""robot""; pwd=qp:Hj1S0EC");
	//	Бух = V8;
	//Исключение
	//	Бух = Неопределено;
	//КонецПопытки;
	Если Константы.ИспользоватьТестовоеПодключениеБП30.Получить() Тогда
	    Бух = _5LB_ОбменСДругимиБазами.ПодключитьсяПоCOM("lab1c:1641","C8_BUH_30");
	Иначе 
		//#***+Изменения*** Тасмаджиев 04/12/2018// ->>
		Бух = _5LB_ОбменСДругимиБазами.ПодключитьсяПоCOM("1cserv","C8_BUH_30");
		//Бух = _5LB_ОбменСДругимиБазами.ПодключитьсяПоCOM("vkey3","BUH_TEST_Ivanov");
		//#***-Изменения*** Тасмаджиев 04/12/2018// <<-
	КонецЕсли;
	//Конец изменного Monstr 180411
	Возврат Бух;
КонецФункции

//25.05.2015 Новый документооборот
Функция ПодключитьсяКБухГТРФМ () 
	//Изменено Monstr 180411
	//Было:
	//Попытка
	//	COMConnector=Новый COMОбъект("V83.COMConnector");
	//	V8 = COMConnector.Connect("Srvr=""1cserv""; Ref=""BUH_GTR_FM""; usr=""robot""; pwd=qp:Hj1S0EC");
	//	Бух = V8;
	//Исключение
	//	Бух = Неопределено;
	//КонецПопытки;
	Если Константы.ИспользоватьТестовоеПодключениеБП30.Получить() Тогда
	    Бух = _5LB_ОбменСДругимиБазами.ПодключитьсяПоCOM("lab1c:1641","BUH_GTR_FM");
	Иначе 
		Бух = _5LB_ОбменСДругимиБазами.ПодключитьсяПоCOM("1cserv","BUH_GTR_FM");
	КонецЕсли;
	//Конец изменного Monstr 180411
	Возврат Бух;
КонецФункции


Процедура СформироватьШапкуЗаказ (Бух,ст,НовДокВБух)
	
	НовДокВБух.Дата = ст.Дата;
	Если ст.Ссылка.Организация = Справочники.Организации.НайтиПоКоду("000000001") Тогда
		НовДокВБух.Организация = Бух.Справочники.Организации.НайтиПоКоду("00-000001");
		НовДокВБух.ОрганизацияПолучатель = Бух.Справочники.Организации.НайтиПоКоду("00-000001");
		НовДокВБух.ПодразделениеОрганизации = Бух.Справочники.ПодразделенияОрганизаций.НайтиПоКоду("00-000001",,,Бух.Справочники.Организации.НайтиПоКоду("00-000001")); 
		НовДокВБух.СуммаВключаетНДС = Истина;
	Иначе
		НовДокВБух.Организация = Бух.Справочники.Организации.НайтиПоРеквизиту("ИНН",СокрЛП(ст.Ссылка.Организация.ИНН));
		Бух.Справочники.Организации.НайтиПоРеквизиту("ИНН",СокрЛП(ст.Ссылка.Организация.ИНН));
		НовДокВБух.ДокументБезНДС = Истина;
	КонецЕсли;
	
	НовДокВБух.СтруктурнаяЕдиница = НовДокВБух.Организация.ОсновнойБанковскийСчет;
	НовДокВБух.ВалютаДокумента = Бух.Справочники.Валюты.НайтиПоКоду("643");
	НовДокВБух.ТипЦен = Бух.Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
		
КонецПроцедуры

//25.05.2015 Новый документооборот
Процедура СформироватьШапкуЗаказГТРФМ (Бух,ст,НовДокВБух)
	
	НовДокВБух.Дата = ст.Дата;
	НовДокВБух.Организация = Бух.Справочники.Организации.НайтиПоРеквизиту("ИНН",СокрЛП(ст.Ссылка.Организация.ИНН));
	НовДокВБух.ОрганизацияПолучатель = Бух.Справочники.Организации.НайтиПоРеквизиту("ИНН",СокрЛП(ст.Ссылка.Организация.ИНН));
	НовДокВБух.СтруктурнаяЕдиница = НовДокВБух.Организация.ОсновнойБанковскийСчет;
	//НовДокВБух.ПодразделениеОрганизации = Бух.Справочники.ПодразделенияОрганизаций.НайтиПоКоду("00-000001",,,Бух.Справочники.Организации.НайтиПоКоду("00-000001")); 
	НовДокВБух.ВалютаДокумента = Бух.Справочники.Валюты.НайтиПоКоду("643");
	НовДокВБух.ТипЦен = Бух.Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00-000001");
	//НовДокВБух.СуммаВключаетНДС = Истина;
	НовДокВБух.ДокументБезНДС = Истина;
		
КонецПроцедуры

Процедура ПриПроведенииЗаказовПокупателейОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	/////////////////////////////////////////////////////////////////////
	// Женя 23.08.2018
	// Задача 149 в http://servicedesk
	// При успешной загрузки заказа (создание и проведение документа Заказ покупателя) делаем соответствующую запись в регистре Этапы обработки заказов.
	//		Поля:
	//		1. Дата загрузки заказа - Дата создания документа Заказ покупателя
	//		2. Результат загрузки заказа. 0 - заказ не загружен или загружен но не проведен. 1- заказ загружен и проведен.
	// Данный кусок кода присутствует также и в Форме документа Заказ покупателя процедура После записи. со строк 2050.
	
	//////////////// >>>>>>>> В случае, если происходит отмена проведения, то и п.2 тоже изменяется и записывается в РС.<<<<<<<<<<<///////////////
	// ((
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_5LB_ЭтапыОбработкиЗаказов.НомерЗаказа
	|ИЗ
	|	РегистрСведений._5LB_ЭтапыОбработкиЗаказов КАК _5LB_ЭтапыОбработкиЗаказов
	|ГДЕ
	|	_5LB_ЭтапыОбработкиЗаказов.НомерЗаказа = &НомерЗаказа";
	
	Запрос.УстановитьПараметр("НомерЗаказа", Источник.ЭтотОбъект.Номер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
		
	Если Выборка.Следующий() Тогда
		
		// Женя 08.10.2018
		// ((
		НаборЗаписей = РегистрыСведений._5LB_ЭтапыОбработкиЗаказов.СоздатьНаборЗаписей();
		// )) Женя 08.10.2018
		
		//В регистре сведений "Этапы обработки заказов" уже имеется запись с номером заказа СокрЛП(ЭтотОбъект.Номер).
		НаборЗаписей.Отбор.НомерЗаказа.Установить(Выборка.НомерЗаказа);
		НаборЗаписей.Прочитать();
		
		// Женя 14.09.2018
		// ((
		Если Источник.ЭтотОбъект.ПометкаУдаления Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.РезультатЗагрузки = 2;
			КонецЦикла;
		ИначеЕсли Источник.ЭтотОбъект.Проведен Тогда//ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда  // Женя 08.10.2018
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.РезультатЗагрузки = 1;
			КонецЦикла;
		Иначе//Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.РезультатЗагрузки = 0;
			КонецЦикла;
		КонецЕсли;
		// )) 14.09.2018 Женя
		
		// Женя 14.09.2018
		// Записывать вид оплаты при создании нового заказа пок-ля, по умолчанию 1.
		// ((
		Если Источник.ЭтотОбъект.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка() ИЛИ Источник.ЭтотОбъект.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.ВидОплаты = 1;
			КонецЦикла;	
		Иначе 
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.ВидОплаты = 2;
			КонецЦикла;	
		КонецЕсли;
		// )) 14.09.2018 Женя
		
		НаборЗаписей.Записать();
	Иначе		
		Если Формат(Источник.ЭтотОбъект.Дата, "ДЛФ=Д")= Формат(ТекущаяДата(), "ДЛФ=Д") Тогда   // Запись в РС создается в том случае, если это новый документ! 05.09.2018 Женя
			// Создаем новую запись в РС  "Этапы обработки заказов" со значениями даты загрузки заказа и результатом загрузки заказа.
			
			// Женя 10.09.2018
			// Очищается РС Этапы ст.заказов - исправление, т.к. записи удалять не нужно
			// ((
			
			// Женя 08.10.2018
			// ((
			НаборЗаписей = РегистрыСведений._5LB_ЭтапыОбработкиЗаказов.СоздатьНаборЗаписей();
			// )) Женя 08.10.2018
			
			НаборЗаписей.Отбор.НомерЗаказа.Установить(Источник.ЭтотОбъект.Номер);
			// )) 10.09.2018 Женя
			
			НаборЗаписей.Прочитать();
			НовЗапись = НаборЗаписей.Добавить();
			НовЗапись.ДатаЗагрузкиЗаказа = Источник.ЭтотОбъект.Дата;
			НовЗапись.Период = ТекущаяДата();
			НовЗапись.НомерЗаказа = Источник.ЭтотОбъект.Номер;
			НовЗапись.НомерЗаказаССайта =  Источник.ЭтотОбъект.НомерДокаСайт;
			
			// Женя 14.09.2018
			// Записывать вид оплаты при создании нового заказа пок-ля, по умолчанию 1.
			// ((
			НовЗапись.ВидОплаты = 1;
			// )) 14.09.2018 Женя
			
			Если Источник.ЭтотОбъект.Проведен Тогда //РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда//И РежимЗаписи = РежимЗаписиДокумента.Запись Тогда//РежимЗаписиДокумента.ОтменаПроведения Тогда 
				НовЗапись.РезультатЗагрузки = 1;
			ИначеЕсли Источник.ЭтотОбъект.ПометкаУдаления Тогда
				НовЗапись.РезультатЗагрузки = 2;
			Иначе//Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ РежимЗаписи = РежимЗаписиДокумента.Запись Тогда  // Женя 08.10.2018
				НовЗапись.РезультатЗагрузки = 0;
			КонецЕсли;
			//#***+Редактирования*** Тасмаджиев 22/10/2018// ->>
			НаборЗаписей.Записать();
			//#***-Редактирования*** Тасмаджиев 22/10/2018// <<-
		КонецЕсли;
		//#***+Изменения*** Тасмаджиев 22/10/2018// ->>
		//НаборЗаписей.Записать();
		//#***-Изменения*** Тасмаджиев 22/10/2018// <<-
	КонецЕсли; 
	//// )) 23.08.2018 Женя
	/////////////////////////////////////////////////////////////////////
	
	// Женя 05.09.2018
	// Задача 91 в http://servicedesk
	// Фиксация "снят с мониторинга" в РС "_5LB_ЭтапыОбработкиЗаказов". Если изменяется статус заказа, то значение "снят с мониторинга" у данного заказа 
	// становится 1. В случае, если "снят с мониторинга" уже имеет значение 1, то никаких действий не делать. 
	// ((
	Если (НЕ (Формат(Источник.ЭтотОбъект.Дата, "ДЛФ=Д")= Формат(ТекущаяДата(), "ДЛФ=Д"))) И ЗначениеЗаполнено(Источник.ЭтотОбъект.Статус) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	_5LB_ЭтапыОбработкиЗаказов.НомерЗаказа
		|ИЗ
		|	РегистрСведений._5LB_ЭтапыОбработкиЗаказов КАК _5LB_ЭтапыОбработкиЗаказов
		|ГДЕ
		|	_5LB_ЭтапыОбработкиЗаказов.НомерЗаказа = &НомерЗаказа
		|	И _5LB_ЭтапыОбработкиЗаказов.СнятСМониторинга <> 1";
		
		Запрос.УстановитьПараметр("НомерЗаказа",  Источник.ЭтотОбъект.Номер);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			НаборЗаписей = РегистрыСведений._5LB_ЭтапыОбработкиЗаказов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗаказа.Установить(Выборка.НомерЗаказа);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.СнятСМониторинга = 1;
			КонецЦикла;
			НаборЗаписей.Записать();
		Иначе
			// Женя 07.09.2018 убрала сообщение в случае, если в РС нет записи
			//	Сообщить("В регистре сведений ""Этапы обработки заказов"" нет записи с номером заказа "+ СокрЛП(ЭтотОбъект.Номер) +". Данные по изменению статуса заказа не будут записаны.");
		КонецЕсли;
	КонецЕсли;
	// )) 05.09.2018 Женя	
	
			
КонецПроцедуры

