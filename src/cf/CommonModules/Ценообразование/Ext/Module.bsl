
// Функция возвращает сумму скидки.
//
// Параметры:
//  Сумма - Число, сумма со скидкой.
//  Скидка - Число, процент скидки.
//
// Возвращаемое значение:
//  Число - сумма скидки.
//
Функция ПолучитьСуммуСкидки(Сумма, Скидка) Экспорт

	Если ЗначениеЗаполнено(Скидка) И Скидка <> 100 Тогда
		СуммаСкидки = Сумма / (100 - Скидка) * Скидка;
	Иначе
		СуммаСкидки = 0;
	КонецЕсли;

	Возврат СуммаСкидки;

КонецФункции // ПолучитьСуммуСкидки()

// 
//
// Параметры:
//  ДатаЦен - исходная дата.
//
// Возвращаемое значение:
//  Дата - дата (со временем), на которую будут рассчитаны цены.
//
Функция ПолучитьАктуальнуюДатуРасчетаЦен(ДатаЦен) Экспорт

	ТекДата = ТекущаяДата();

	Если НЕ ЗначениеЗаполнено(ДатаЦен) Тогда
		Результат = ТекДата;
	ИначеЕсли ДатаЦен = НачалоДня(ТекДата) Тогда
		Результат = ТекДата;
	Иначе
		Результат = ДатаЦен;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьАктуальнуюДатуРасчетаЦен()

// Функция возвращает массив получателей скидки, для которых необходимо рассчитать скидки.
//
// Параметры:
//  ВидРеализации - значение перечисления "ВидыСкидок".
//  ДокументОбъект - объект документа.
//
// Возвращаемое значение:
//  Массив - массив с получателями скидки.
//
Функция ПолучитьМассивПолучателейСкидки(ВидРеализации, ДокументОбъект) Экспорт

	МассивПолучателей = Новый Массив;

	Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
		МассивПолучателей.Добавить(ДокументОбъект.Склад);
		МассивПолучателей.Добавить(Справочники.Склады.ПустаяСсылка());
	Иначе
		МассивПолучателей.Добавить(ДокументОбъект.Контрагент);
		МассивПолучателей.Добавить(ДокументОбъект.ДоговорКонтрагента);
		МассивПолучателей.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;

	Возврат МассивПолучателей;

КонецФункции // ПолучитьМассивПолучателейСкидки()

// Функция проверяет, является ли набор-комплект спец. предложением на указанную дату.
//
// Параметры:
//  Номенклатура - набор-комплект, который нужно проверить.
//  Дата - дата, на которую нужно проверить.
//
// Возвращаемое значение:
//  Булево - Истина, если переданный набор-комплект является спец. предложением.
//
Функция ЭтоСпецПредложение(Дата, Номенклатура, ХарактеристикаНоменклатуры, МассивПолучателей) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Результат
	|ИЗ
	|	РегистрСведений.СкидкиНоменклатурыНатуральные.СрезПоследних(&Дата,
	|	   ПолучательСкидки В (&МассивПолучателей)) КАК СкидкиНатуральные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|ПО
	|	СкидкиНатуральные.Регистратор = ВремяДействия.Регистратор
	|ГДЕ
	|	СкидкиНатуральные.СпецПредложение = &Номенклатура
	|	И СкидкиНатуральные.ХарактеристикаСпецПредложения = &ХарактеристикаНоменклатуры
	|	И (ВремяДействия.Регистратор ЕСТЬ NULL
	|	ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
	|	И (&ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
	|	И (СкидкиНатуральные.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|	ИЛИ СкидкиНатуральные.ДатаОкончания >= &Дата))
	|");

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("МассивПолучателей", МассивПолучателей);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДеньНедели", Перечисления.ДниНедели[ДеньНедели(Дата) - 1]);
	Запрос.УстановитьПараметр("ТекущееВремя", Дата(1, 1, 1, Час(Дата), Минута(Дата), Секунда(Дата)));

	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции // ЭтоСпецПредложение()

// Изменяет переданную цену по условию продаж.
//
// Параметры:
//  Дата - дата, на которую нужно брать условие продаж.
//  Номенклатура - переданная номенклатура.
//  УсловиеПродаж - переданное условие продаж.
//  ПолученнаяЦена - цена, которую надо изменить. В эту переменную возвращается новая цена.
//
Процедура ИзменитьЦенуПоУсловиюПродаж(Дата, Номенклатура, УсловиеПродаж, ПолученнаяЦена) Экспорт

	Если ПолученнаяЦена <> 0 И ЗначениеЗаполнено(УсловиеПродаж) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("УсловиеПродаж", УсловиеПродаж);
		Запрос.УстановитьПараметр("Группы", ПолучитьМассивГруппНоменклатуры(Номенклатура));

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НаценкиПоУсловиямПродаж.ПроцентНаценки КАК ПроцентНаценки
		|ИЗ
		|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж
		|	   И НоменклатурнаяЦеноваяГруппа В (&Группы)) КАК НаценкиПоУсловиямПродаж
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена = ПолученнаяЦена * (1 + Выборка.ПроцентНаценки / 100);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ИзменитьЦенуПоУсловиюПродаж()

// Возвращает массив из двух элементов: номенклатурной и ценовой группы, к которым принадлежит
// переданная номенклатура.
//
// Параметры:
//  Номенклатура - переданная номенклатура.
//
// Возвращаемое значение:
//  Массив - номенклатурная и ценовая группа к которым принадлежит переданная номенклатура.
//
Функция ПолучитьМассивГруппНоменклатуры(Номенклатура) Экспорт

	Группы = Новый Массив;
	Группы.Добавить(Номенклатура.ЦеноваяГруппа);
	Группы.Добавить(Номенклатура.НоменклатурнаяГруппа);

	Возврат Группы;

КонецФункции // ПолучитьМассивГруппНоменклатуры()

// Возвращает массив характеристик: ПустаяХарактеристика + ХарактеристикаНоменклатуры,
// если ХарактеристикаНоменклатуры <> Неопределено
//
// Параметры:
//  ХарактеристикаНоменклатуры - переданная характеристика номенклатуры.
//
// Возвращаемое значение:
//  Массив - если ХарактеристикаНоменклатуры = Неопределено, то в массиве только ПустаяХарактеристика.
//
Функция ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры) Экспорт

	Характеристики = Новый Массив;
	Характеристики.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	Если ХарактеристикаНоменклатуры <> Неопределено Тогда
		Характеристики.Добавить(ХарактеристикаНоменклатуры);
	КонецЕсли;

	Возврат Характеристики;

КонецФункции // ПолучитьМассивХарактеристик()

// Округляет число по заданному порядку. Если задано (=Истина) "ОкруглятьВБольшуюСторону",
// то число 123.37 при порядке округление 0.5 превратиться в 123.50, а число 0.1 
// при порядке округления 5 станет равным 5.
//
// Параметры:
//  Число                    - исходное число
//  ПорядокОкругления        - элемент перечисления Порядки окгугления: 
//                             "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//  ОкруглятьВБольшуюСторону - булево, определяет способ округления: если Истина, 
//                             то при порядке округления "5" 0.01 будет округлена до 5, 
//                             Ложь - округление по арифметическим правилам
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
Функция ОкруглитьЦену(Число, ПараметрПорядокОкругления, ОкруглятьВБольшуюСторону) Экспорт

	Перем Результат;

	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПараметрПорядокОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	Иначе
		ПорядокОкругления = ПараметрПорядокОкругления;
	КонецЕсли;

	Порядок = Число(Строка(ПорядокОкругления));
		
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
		
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
		
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлитья до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе

			// При порядке округления "0.05" 0.371 должно округлитья до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦену()

// Производит пересчет цен при изменении флагов учета налогов.
// Пересчет зависит от способа заполнения цен, при заполнении По ценам номенклатуры (при продаже) 
// хочется избегать ситуаций, когда компания  «теряет деньги» при пересчете налогов. 
// Поэтому если в документе флаг "Учитывать налог" выключен, то цены должны браться напрямую из справочника, 
// потому что хочется продавать по той же цене, независимо от режима налогообложения. 
// Например, если отпускная цена задана с НП для избежания ошибок округления, то это не значит, 
// что при отпуске без НП мы должны продать дешевле. Если же флаг учета налога в документе включен, 
// то цены должны пересчитываться при подстановке в документ: 
// налог должен включаться или не включаться в зависимости от флага включения налога в типе цен.
// При заполнении по ценам контрагентов (при покупке) хочется хранить цены поставщиков. 
// Поэтому нужно пересчитывать всегда по установленным флагам в документе и в типе цен. 
// Это гарантирует, что при записи цен в регистр и последующем их чтении, 
// например, при заполнении следующего документа, мы с точностью до ошибок округления при пересчете 
// получим те же самые цены.
//
// Параметры: 
//  Цена                - число, пересчитваемое значение цены, 
//  СпособЗаполненияЦен - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//						  "при продаже" или "при покупке", см описание функции,
//  ЦенаВключаетНДС     - булево, определяет содержит ли переданное значение цены НДС,
//  УчитыватьНДС        - булево, определяет должно ли новое значение цены учитвать НДС,
//  СуммаВключаетНДС    - булево, определяет должно ли новое значение цены включать НДС,
//  СтавкаНДС           - число, ставка НДС, 
//
// Возвращаемое значение:
//  Числое, новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, ЦенаВключаетНДС,
						УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт


	// Инициализация переменных
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	НоваяЦена		 = Цена;
	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Тогда
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС
			   И (НЕ ЦенаВключаетНДС) Тогда
				
				// Надо добавлять НДС       
				НадоВключитьНДС = Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС)
					И ЦенаВключаетНДС  Тогда
				
				// Надо исключать НДС       
				НадоИсключитьНДС = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе // Надо пересчитывать строго по флагам включения
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС
			   И (НЕ ЦенаВключаетНДС) Тогда
				
				// Надо добавлять НДС       
				НадоВключитьНДС = Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС)
					И ЦенаВключаетНДС  Тогда
				
				// Надо исключать НДС       
				НадоИсключитьНДС = Истина;
			КонецЕсли;
		Иначе
			Если ЦенаВключаетНДС Тогда
				// Надо исключать НДС
				НадоИсключитьНДС = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	
	Если НадоИсключитьНДС Тогда
		//НоваяЦена = (НоваяЦена * 100) / (100 + СтавкаНДС);
	КонецЕсли;
	
	Если НадоВключитьНДС Тогда
		//НоваяЦена = (НоваяЦена * (100 + СтавкаНДС)) / 100;
	КонецЕсли;

	Возврат НоваяЦена;

КонецФункции // ПересчитатьЦенуПриИзмененииФлаговНалогов()

// Пересчитывает цену для другой единицы измерения
//
// Параметры: 
//  Цена         - число, значение цены, которое надо пересчитать,
//  ЕдиницаЦены  - ссылка на справочник "ЕдиницыИзмерения", определяет единицу, за которую назначена Цена
//  НоваяЕдиница - ссылка на справочник "ЕдиницыИзмерения", определяет единицу, за которую надо получить
//                 новое значение цены. Если не заполнено, то устанавливается равной ЕдиницаЦены без пересчета.
//
// Возвращаемое значение:
//  Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииЕдиницы(Цена, ЕдиницаЦены, НоваяЕдиница) Экспорт

	НовоеЗначениеЦены = Цена;

	Если ЕдиницаЦены <> НоваяЕдиница Тогда
		Если НЕ ЗначениеЗаполнено(НоваяЕдиница) Тогда // параметр единицы не задан, значить надо возвращать в единице цены
			Если НЕ ЗначениеЗаполнено(ЕдиницаЦены) Тогда // если не задана единица цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе
				НоваяЕдиница = ЕдиницаЦены;
			КонецЕсли;
		Иначе // если единица цены не совпадает с параметром, то надо пересчитать
			Если НЕ ЗначениеЗаполнено(ЕдиницаЦены) Тогда // если не задана единица цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе
				КоэффициентЦены = ЕдиницаЦены.Коэффициент;
				НовоеЗначениеЦены  = ?(НЕ ЗначениеЗаполнено(КоэффициентЦены), 0, 
									 НовоеЗначениеЦены * НоваяЕдиница.Коэффициент / КоэффициентЦены)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат НовоеЗначениеЦены;

КонецФункции // ПересчитатьЦенуПриИзмененииЕдиницы()

// Пересчитывает цену в другую валюту
//
//  Цена            - число, значение цены, которое надо пересчитать,
//  ВалютаЦены      - ссылка на справочник "Валюты", определяет валюту, в которой назначена Цена
//  НоваяВалюта     - ссылка на справочник "Валюты", определяет валюту, в которой надо получить
//                    новое значение цены. Если не заполнено, то устанавливается равной ВалютаЦены без пересчета,
//  КурсНовойВалюты - курс новой валюты, по которому надо пересчитать цену, если не задан, то берем курс по справочнику
//  КратностьНовойВалюты - кратность новой валюты, по которой надо пересчитать цену, если не задана, то берем курс по справочнику
//  Дата            - дата, на которую надо пересчитать цену.
//
// Возвращаемое значение:
//  Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, НоваяВалюта, КурсНовойВалюты = 0, КратностьНовойВалюты = 1, Дата = Неопределено ) Экспорт

	НовоеЗначениеЦены = Цена;
	Если НЕ ЗначениеЗаполнено(НоваяВалюта) Тогда // параметр валюты не задан, значить надо возвращать в валюте цены
		НоваяВалюта = ВалютаЦены;
	Иначе
		Если НоваяВалюта <> ВалютаЦены Тогда // если валюта цены не совпадает с параметром, то надо пересчитать
		
			Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда // если не задана валюта цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе // валюты заданы и не совпадают, надо пересчитывать

				СтруктураКурсЦены = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаЦены, Дата);
				КурсЦены          = СтруктураКурсЦены.Курс;
				КратностьЦены     = СтруктураКурсЦены.Кратность;

				Если НЕ ЗначениеЗаполнено(КурсНовойВалюты) Тогда // если не задан курс, то курс берем по справочнику
					СтруктураКурсНовойВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяВалюта, Дата);
					КурсНовойВалюты          = СтруктураКурсНовойВалюты.Курс;
					КратностьНовойВалюты     = СтруктураКурсНовойВалюты.Кратность;
				КонецЕсли; 

				НовоеЗначениеЦены = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НовоеЗначениеЦены, ВалютаЦены, НоваяВалюта, 
												КурсЦены, КурсНовойВалюты,КратностьЦены,КратностьНовойВалюты);
				
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

	Возврат НовоеЗначениеЦены;
	
КонецФункции // ПересчитатьЦенуПриИзмененииВалюты()

// Позволяет получить список реквизитов документа, необходимых для дальнейшей
// передачи в обработку заполнения цен и валют.
//
// Параметры: 
//  ДокументОбъект      - объект документа, для реквизитов будет производится заполнение
//  СтруктураИсключений - структура, в которую передаются те исключения, которые или невозможно
//                        определить по метаданным, или, несмотря ни на что, нельзя включать в
//                        возвращаемую структуру.
//                        В структуре - ключ = имя реквизита, значение = истина (необходимо добавить
//                        в структуру) или ложь (нельзя добавлять в структуру)
//
// Возвращаемое значене:
//  Сформированная структура реквизитов документа.
//
Функция ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокументОбъект, СтруктураИсключений = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Зададим, какие реквизиты вообще нам могут быть нужны.
	СтруктураВозможныхВариантовРеквизитов = Новый Структура;
	СтруктураВозможныхВариантовРеквизитов.Вставить("ТипЦен");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ВалютаДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УчитыватьНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("СуммаВключаетНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ИспользоватьПлановуюСебестоимость");
	СтруктураВозможныхВариантовРеквизитов.Вставить("РегистрироватьЦеныПоставщика");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УсловиеПродаж");

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Новый Структура;
	Для Каждого ТекущийЭлементСтруктуры Из СтруктураВозможныхВариантовРеквизитов Цикл
		НужныйРеквизитДокумента = ТекущийЭлементСтруктуры.Ключ;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента(НужныйРеквизитДокумента, МетаданныеДокумента) Тогда
			СтруктураРеквизитовДокумента.Вставить(НужныйРеквизитДокумента);
		КонецЕсли;
	КонецЦикла;

	// Теперь проверим исключения.
	Если СтруктураИсключений <> Неопределено Тогда
		Для Каждого ТекущийЭлементСтруктуры Из СтруктураИсключений Цикл
			Если ТекущийЭлементСтруктуры.Значение Тогда // надо добавить реквизит, если его еще нет
				СтруктураРеквизитовДокумента.Вставить(ТекущийЭлементСтруктуры.Ключ);
			Иначе // надо удалить реквизит, если он есть
				СтруктураРеквизитовДокумента.Удалить(ТекущийЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтруктураРеквизитовДокумента;

КонецФункции // ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования()

// Функция возвращает цену номенклатуры для требуемой номенклатуры в указанном типе цен,
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры:
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "ХарактеристикаНоменклатуры",
//  ТипЦен               - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра
//                         сведений "Курсы валют",
//  ПроцентСкидкиНаценки - число, процент наценки (скидки) на базовый тип цен, заполняется процентом
//                         наценки (скидки) цены для цен, которые не рассчитываются автоматически.
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Знач ТипЦен, ДатаПараметр = Неопределено, ЕдиницаИзмерения = Неопределено,
	                             Валюта = Неопределено, Курс = 0, Кратность = 1, ПроцентСкидкиНаценки = 0, ДоговорКонтрагента = Неопределено,
	                             УсловиеПродаж = Неопределено) Экспорт

	Если ЕдиницаИзмерения = Неопределено Тогда
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка(); // для услуг
	КонецЕсли;

	ХарактеристикиНоменклатуры = ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры);

	Дата = ПолучитьАктуальнуюДатуРасчетаЦен(ДатаПараметр);

	ПолученнаяЦена = 0;

	Если ДоговорКонтрагента <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);

		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УсловияПоставок.Цена                   КАК Цена,
		|	ВЫБОР	КОГДА сНоменклатура.Услуга И УсловияПоставок.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА сНоменклатура.ЕдиницаХраненияОстатков
		|			ИНАЧЕ УсловияПоставок.ЕдиницаИзмерения
		|	КОНЕЦ                                  КАК ЕдиницаИзмерения,
		|	УсловияПоставок.ВалютаЦены             КАК ВалютаЦены
		|ИЗ
		|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата,
		|	   ДоговорКонтрагента = &Договор И Номенклатура = &Номенклатура
		|	   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)) КАК УсловияПоставок
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.Номенклатура КАК сНоменклатура
		|ПО
		|	сНоменклатура.Ссылка = УсловияПоставок.Номенклатура
		|ГДЕ
		|	УсловияПоставок.Цена <> 0 И сНоменклатура.Ссылка = &Номенклатура
		|УПОРЯДОЧИТЬ ПО
		|	УсловияПоставок.ХарактеристикаНоменклатуры УБЫВ
		|";

		Запрос.Текст = ТекстЗапроса;

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(Выборка.Цена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.ВалютаЦены, Валюта, Курс, Кратность, Дата);
		КонецЕсли;

		// Проверим, не установлены ли по этому договору типы цен для групп.
		Если ПолученнаяЦена = 0 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("Контрагент", ДоговорКонтрагента.Владелец);
			Запрос.УстановитьПараметр("Группы", ПолучитьМассивГруппНоменклатуры(Номенклатура));

			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ТипыЦенПоГруппам.ТипЦен КАК ТипЦен
			|ИЗ
			|	РегистрСведений.ТипыЦенПоГруппамНоменклатурыДляПокупателей.СрезПоследних(&Дата, Контрагент = &Контрагент
			|	   И НоменклатурнаяЦеноваяГруппа В (&Группы)) КАК ТипыЦенПоГруппам
			|";

			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Не Выборка.ТипЦен.Пустая() Тогда // переопределим тип цен для расчета
					ТипЦен = Выборка.ТипЦен;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПолученнаяЦена = 0 И ЗначениеЗаполнено(ТипЦен) Тогда // особых условий нет
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);

		Если ТипЦен.Рассчитывается Тогда // надо достать цену базового типа и рассчитать по наценке
			Запрос.УстановитьПараметр("ТипЦен", ТипЦен.БазовыйТипЦен);
			Запрос.УстановитьПараметр("ТипЦенРасчетный", ТипЦен);
			Запрос.УстановитьПараметр("СпособРасчета", ТипЦен.СпособРасчетаЦены);
			Запрос.УстановитьПараметр("ПроцентНаценки", ТипЦен.ПроцентСкидкиНаценки);
		Иначе
			Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		КонецЕсли;

		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.Цена  КАК Цена,
		|	ВЫБОР	КОГДА сНоменклатура.Услуга И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА сНоменклатура.ЕдиницаХраненияОстатков
		|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
		|	КОНЕЦ                               КАК ЕдиницаИзмерения,
		|";
		Если ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЕСТЬNULL(ВложенныйЗапрос.ПроцентСкидкиНаценки, &ПроцентНаценки) КАК ПроцентСкидкиНаценки,
			|	ЕСТЬNULL(ВложенныйЗапрос.СпособРасчетаЦены, &СпособРасчета) КАК СпособРасчетаЦены,
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|	ЦеныНоменклатурыСрезПоследних.Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура
		|	   И ТипЦен = &ТипЦен И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
		|	   ) КАК ЦеныНоменклатурыСрезПоследних
		|";
		Если ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ
			|		ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
			|		ЦеныНоменклатурыСрезПоследних.СпособРасчетаЦены КАК СпособРасчетаЦены,
			|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|		ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			|	ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура
			|		   И ТипЦен = &ТипЦенРасчетный
			|		   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
			|		   ) КАК ЦеныНоменклатурыСрезПоследних
			|	) КАК ВложенныйЗапрос
			|ПО
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура И ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.Номенклатура КАК сНоменклатура
		|ПО
		|	сНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	сНоменклатура.Ссылка = &Номенклатура
		|УПОРЯДОЧИТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры УБЫВ
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ТипЦен.Рассчитывается Тогда
				ВалютаТекущая = ТипЦен.ВалютаЦены;

				ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(Выборка.Цена, Выборка.Валюта, ВалютаТекущая, 0, 0, Дата);

				Если Выборка.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
					ПолученнаяЦена = ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, Дата, ПолученнаяЦена, ВалютаТекущая, ВалютаТекущая);
				ИначеЕсли Выборка.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
					ПолученнаяЦена = ПолученнаяЦена * (1 + Выборка.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
			Иначе
				ВалютаТекущая = Выборка.Валюта;

				ПолученнаяЦена = Выборка.Цена;
			КонецЕсли;

			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(ПолученнаяЦена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ОкруглитьЦену(ПолученнаяЦена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, ВалютаТекущая, Валюта, Курс, Кратность, Дата);
		КонецЕсли;
	КонецЕсли;

	ИзменитьЦенуПоУсловиюПродаж(Дата, Номенклатура, УсловиеПродаж, ПолученнаяЦена);

	Возврат ПолученнаяЦена;

 КонецФункции // ПолучитьЦенуНоменклатуры()

// Функция возвращает процент скидки (наценки) для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, используется, например, для.получения наценки цены в рознице.
//
// Параметры: 
//  Номенклатура               - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "Характеристики номенклатуры",
//  ТипЦен                     - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                       - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата.
//  ТолькоИзРегистра           - булево, "Истина" если необходимо получать данные только из регистра.
//  НетДанных                  - булево, устанавливается в "Ложь" если нет данных в регистре сведений, "Истина" если есть.
//
// Возвращаемое значение:
//  Число, значение процента скидки (наценки).
//
Функция ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, ТипЦен, Дата = Неопределено, ТолькоИзРегистра = Ложь, НетДанных = Истина, ВернутьВсегда = Ложь) Экспорт

	НетДанных = Истина;

	ХарактеристикиНоменклатуры = ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры);

	// Если дата не заполнена, возьмем рабочую дату.
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;

	ПроцентСкидкиНаценки = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПроцентСкидкиНаценки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен
	|                                                         И ХарактеристикаНоменклатуры В(&ХарактеристикиНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикаНоменклатуры УБЫВ
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
		НетДанных = Ложь;
	КонецЕсли;

	Если (ТипЦен.Рассчитывается И Не ТолькоИзРегистра) Или ВернутьВсегда Тогда
		Если НЕ ЗначениеЗаполнено(ПроцентСкидкиНаценки) Тогда // процент скидки задан в типе цен
			ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;

	Возврат ПроцентСкидкиНаценки;

КонецФункции // ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры()

// Функция возвращает цену контрагента для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура               - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "Характеристики номенклатуры",
//  Контрагент                 - ссылка на элемент справочника "Контрагенты", для которого надо получить цену,
//  ТипЦен                     - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                       - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения           - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                               цену, если не заполнен, то заполняется единицей цены
//  Валюта                     - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                               если не заполнен, то заполняется валютой цены
//  Курс                       - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                               сведений "Курсы валют".
//  Кратность                  - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                               сведений "Курсы валют".
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуКонтрагента(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Контрагент,
	                            ТипЦен, Дата = Неопределено, ЕдиницаИзмерения = Неопределено,
	                            Валюта = Неопределено, Курс = 0, Кратность = 1,
	                            ДоговорКонтрагента = Неопределено, УсловиеПродаж = Неопределено) Экспорт

	ХарактеристикиНоменклатуры = ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры);

	Дата = ПолучитьАктуальнуюДатуРасчетаЦен(Дата);

	ПолученнаяЦена = 0;

	Если ДоговорКонтрагента <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);

		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УсловияПоставок.Цена                  КАК Цена,
		|	ВЫБОР	КОГДА сНоменклатура.Услуга И УсловияПоставок.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА сНоменклатура.ЕдиницаХраненияОстатков
		|			ИНАЧЕ УсловияПоставок.ЕдиницаИзмерения
		|	КОНЕЦ                                 КАК ЕдиницаИзмерения,
		|	УсловияПоставок.ВалютаЦены            КАК ВалютаЦены
		|ИЗ
		|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата,
		|	   ДоговорКонтрагента = &Договор И Номенклатура = &Номенклатура
		|	   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)) КАК УсловияПоставок
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.Номенклатура КАК сНоменклатура
		|ПО
		|	сНоменклатура.Ссылка = УсловияПоставок.Номенклатура
		|ГДЕ
		|	УсловияПоставок.Цена <> 0 И сНоменклатура.Ссылка = &Номенклатура
		|УПОРЯДОЧИТЬ ПО
		|	УсловияПоставок.ХарактеристикаНоменклатуры УБЫВ
		|";

		Запрос.Текст = ТекстЗапроса;

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(Выборка.Цена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.ВалютаЦены, Валюта, Курс, Кратность, Дата);
		КонецЕсли;
	КонецЕсли;

	Если ПолученнаяЦена = 0 Тогда // особых условий нет
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);

		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыКонтрагентов.Цена           КАК Цена,
		|	ВЫБОР	КОГДА сНоменклатура.Услуга И ЦеныНоменклатурыКонтрагентов.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА сНоменклатура.ЕдиницаХраненияОстатков
		|			ИНАЧЕ ЦеныНоменклатурыКонтрагентов.ЕдиницаИзмерения
		|	КОНЕЦ                                       КАК ЕдиницаИзмерения,
		|	ЦеныНоменклатурыКонтрагентов.Валюта         КАК Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен
		|	   И ХарактеристикаНоменклатуры В(&ХарактеристикиНоменклатуры)) КАК ЦеныНоменклатурыКонтрагентов
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.Номенклатура КАК сНоменклатура
		|ПО
		|	сНоменклатура.Ссылка = ЦеныНоменклатурыКонтрагентов.Номенклатура
		|ГДЕ
		|	сНоменклатура.Ссылка = &Номенклатура
		|УПОРЯДОЧИТЬ ПО
		|	ХарактеристикаНоменклатуры УБЫВ
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(Выборка.Цена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.Валюта, Валюта, Курс, Кратность, КонецДня(Дата));
		КонецЕсли;
	КонецЕсли;

	ИзменитьЦенуПоУсловиюПродаж(Дата, Номенклатура, УсловиеПродаж, ПолученнаяЦена);

	Возврат ПолученнаяЦена;

КонецФункции // ПолучитьЦенуКонтрагента()

// Выполняем пересчет документа после изменений в форме "Цены и валюта".
//
// Параметры: 
//  ДокументОбъект                 - документ; 
//  СпособЗаполненияЦен            - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//                                  "при продаже" или "при покупке".
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СкидкаУстановлена              - переменная мСкидкаУстановлена модуля формы документа.
//  СтруктураЗначений              - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//                                   документа до и после их изменеия в общей форме).
//  Автозаполнение                 - признак автозаполнения
//
Процедура ОбработатьИзмененияПоКнопкеЦеныВалюта(ДокументОбъект, СпособЗаполненияЦен,
	                                            СтруктураРеквизитовДокумента,
	                                            ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,
	                                            СкидкаУстановлена, СтруктураЗначений, Автозаполнение) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");

	ИспользоватьКолонкуСкладПриПродаже = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
	                                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	НеРассчитыватьПоРозничнымСкладам = (ТипЗнч(ДокументОбъект) = Тип ("ДокументОбъект.ОтчетОРозничныхПродажах"))
	                                    И (ИспользоватьКолонкуСкладПриПродаже);

	// если в табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Если ДокументОбъект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		НадоПересчитывать = Истина;
	КонецЕсли;

	СтруктураПоиска = Новый Структура; // Для поиска в результате запроса
	ПересчитатьЦенуПоФлагамНалогов = Ложь; // Инициализация переменной

	ЕстьЦена                       = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСумма                      = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаПередачи               = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаПередачи              = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПередачи", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаПоступления            = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаПоступления           = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПоступления", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаСтарая                 = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаСтарая                = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаСтарая", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьФактурнаяСтоимость         = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьХарактеристикаНоменклатуры = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаТовара                = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаТовара", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаНДС                   = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьПлановаяСебестоимость      = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПлановаяСебестоимость", МетаданныеДокумента, ИмяТабличнойЧасти);

	// Определим необходимость перерасчета цены.
	ПересчитатьЦенуПоФлагамНалогов = ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначений);

	// Если задано пользователем, то надо перезаполнить табличную часть по новому типу цен
	Если СтруктураЗначений.ПерезаполнитьЦеныПоТипу и ЕстьЦена Тогда

		СкладИзДокумента = ОбщегоНазначения.ПолучитьРеквизитШапки("Склад", ДокументОбъект, МетаданныеДокумента);

		Если СкладИзДокумента = Неопределено Тогда
			СкладИзДокумента = ОбщегоНазначения.ПолучитьРеквизитШапки("СкладОрдер", ДокументОбъект, МетаданныеДокумента);
		КонецЕсли;

		// Получить нужные цены запросом
		РезультатЗапросаЦен = СформироватьЗапросПоЦенам(СтруктураЗначений,
		                                                СпособЗаполненияЦен,
		                                                ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Номенклатура"),
		                                                ДокументОбъект.Дата,
		                                                ОбщегоНазначения.ПолучитьРеквизитШапки("Контрагент", ДокументОбъект, МетаданныеДокумента),
		                                                ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента),
		                                                СкладИзДокумента);

		ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выбрать();

		СтруктураПоиска = Новый Структура; // структура для поиска в результате запроса

		// В цикле по ТЧ перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			// В Отчете о розничных продажах по "Цены и валюта" цена пересчитывается только для оптовых складов.
			Если НеРассчитыватьПоРозничнымСкладам
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад)
			   И СтрокаТабличнойЧасти.Склад.ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
				Продолжить;
			КонецЕсли;

			// Если у нас способ заполнения цен "по розничным ценам", то перезаполнять по типу можно
			// только для услуг, для Товаров на розничном складе цена является измерением регистра остатков.
			Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам
			   И Не СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
				Продолжить;
			КонецЕсли;

			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтарыйКоэффициент = 0;
			Если Автозаполнение И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СтарыйКоэффициент = СтрокаТабличнойЧасти.Коэффициент;
			КонецЕсли;
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
			Иначе
				ХарактеристикаНоменклатуры = Неопределено;
			КонецЕсли;

			ЗаполнитьЦенуВСтрокеТабличнойЧасти(ДокументОбъект, СтрокаТабличнойЧасти, СтруктураПоиска,
			                                   ВыборкаРезультатЗапросаЦен, СтруктураЗначений,
			                                   СпособЗаполненияЦен, ХарактеристикаНоменклатуры);

			Если Автозаполнение И СтарыйКоэффициент > 0 Тогда
				Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество * СтарыйКоэффициент
					                                  /СтрокаТабличнойЧасти.Коэффициент;
				КонецЕсли;
			КонецЕсли;

			Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
				Если ЕстьЦенаПередачи Тогда
					СтрокаТабличнойЧасти.ЦенаПередачи = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
					                                    СтруктураЗначений.ТекущийВалютаДокумента,
					                                    СтруктураЗначений.НовыйВалютаДокумента,
					                                    СтруктураЗначений.ТекущийКурсДокумента,
					                                    СтруктураЗначений.НовыйКурсДокумента,
					                                    СтруктураЗначений.ТекущийКратностьДокумента,
					                                    СтруктураЗначений.НовыйКратностьДокумента);

					Если ЕстьСуммаПередачи Тогда
						СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;

				Если ЕстьЦенаПоступления Тогда
					СтрокаТабличнойЧасти.ЦенаПоступления = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
					                                       СтруктураЗначений.ТекущийВалютаДокумента,
					                                       СтруктураЗначений.НовыйВалютаДокумента,
					                                       СтруктураЗначений.ТекущийКурсДокумента,
					                                       СтруктураЗначений.НовыйКурсДокумента,
					                                       СтруктураЗначений.ТекущийКратностьДокумента,
					                                       СтруктураЗначений.НовыйКратностьДокумента);

					Если ЕстьСуммаПоступления Тогда
						СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;

				Если ЕстьЦенаСтарая Тогда
					СтрокаТабличнойЧасти.ЦенаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
					                                  СтруктураЗначений.ТекущийВалютаДокумента,
					                                  СтруктураЗначений.НовыйВалютаДокумента,
					                                  СтруктураЗначений.ТекущийКурсДокумента,
					                                  СтруктураЗначений.НовыйКурсДокумента,
					                                  СтруктураЗначений.ТекущийКратностьДокумента,
					                                  СтруктураЗначений.НовыйКратностьДокумента);

					Если ЕстьСуммаСтарая Тогда
						СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;

				ИначеЕсли ЕстьСуммаСтарая Тогда
					СтрокаТабличнойЧасти.СуммаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
					                                   СтруктураЗначений.ТекущийВалютаДокумента,
					                                   СтруктураЗначений.НовыйВалютаДокумента,
					                                   СтруктураЗначений.ТекущийКурсДокумента,
					                                   СтруктураЗначений.НовыйКурсДокумента,
					                                   СтруктураЗначений.ТекущийКратностьДокумента,
					                                   СтруктураЗначений.НовыйКратностьДокумента);
				КонецЕсли;
				Если ЕстьФактурнаяСтоимость Тогда
					СтрокаТабличнойЧасти.ЕстьФактурнаяСтоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
					                                              СтруктураЗначений.ТекущийВалютаДокумента,
					                                              СтруктураЗначений.НовыйВалютаДокумента,
					                                              СтруктураЗначений.ТекущийКурсДокумента,
					                                              СтруктураЗначений.НовыйКурсДокумента,
					                                              СтруктураЗначений.ТекущийКратностьДокумента,
					                                              СтруктураЗначений.НовыйКратностьДокумента);
				КонецЕсли;

				Если ЕстьПлановаяСебестоимость Тогда
					Если ЕстьПлановаяСебестоимость Тогда
						СтрокаТабличнойЧасти.ПлановаяСебестоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ПлановаяСебестоимость,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);

						Если ПересчитатьЦенуПоФлагамНалогов Тогда
								СтрокаТабличнойЧасти.ПлановаяСебестоимость = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ПлановаяСебестоимость,
								                                                                     Неопределено,
								                                                                     СтруктураЗначений.ТекущийСуммаВключаетНДС,
								                                                                     СтруктураЗначений.НовыйУчитыватьНДС,
								                                                                     СтруктураЗначений.НовыйСуммаВключаетНДС,
								                                                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Выполним действия при изменении цены
			// Розничную цену будем рассчитывать только тогда, когда задается процент наценки.
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентРозничнойНаценки", МетаданныеДокумента, ИмяТабличнойЧасти)
			   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаВРознице", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				ОбработкаТабличныхЧастей.РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
			КонецЕсли;

			Если ЕстьСумма Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;
			
			Если ЕстьСуммаНДС И ЕстьСумма Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

		КонецЦикла; // Цикл по ТЧ для заполнения цен при изменении типа цен
	Иначе

		Если СтруктураЗначений.ПересчитатьЦеныПоВалюте ИЛИ ПересчитатьЦенуПоФлагамНалогов Тогда


			// В цикле по табличной части перезаполняем цены, приводя их к текущим валюте и режиму налогообложения
			Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти]Цикл

				// В случае, если поменялась валюта
				Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
					Если ЕстьЦена Тогда
						СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);

						Если ЕстьПлановаяСебестоимость Тогда
							СтрокаТабличнойЧасти.ПлановаяСебестоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ПлановаяСебестоимость,
							                                     СтруктураЗначений.ТекущийВалютаДокумента,
							                                     СтруктураЗначений.НовыйВалютаДокумента,
							                                     СтруктураЗначений.ТекущийКурсДокумента,
							                                     СтруктураЗначений.НовыйКурсДокумента,
							                                     СтруктураЗначений.ТекущийКратностьДокумента,
							                                     СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
							                                                                     Неопределено,
							                                                                     СтруктураЗначений.ТекущийСуммаВключаетНДС,
							                                                                     СтруктураЗначений.НовыйУчитыватьНДС,
							                                                                     СтруктураЗначений.НовыйСуммаВключаетНДС,
							                                                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

							Если ЕстьПлановаяСебестоимость Тогда
								СтрокаТабличнойЧасти.ПлановаяСебестоимость = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ПлановаяСебестоимость,
								                                                                     Неопределено,
								                                                                     СтруктураЗначений.ТекущийСуммаВключаетНДС,
								                                                                     СтруктураЗначений.НовыйУчитыватьНДС,
								                                                                     СтруктураЗначений.НовыйСуммаВключаетНДС,
								                                                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
							КонецЕсли;
						КонецЕсли;

						Если ЕстьСумма Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
						Если ЕстьСуммаНДС И ЕстьСумма Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;

					Иначе
						Если ЕстьСуммаТовара Тогда
							СтрокаТабличнойЧасти.СуммаТовара = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаТовара,
							                                     СтруктураЗначений.ТекущийВалютаДокумента,
							                                     СтруктураЗначений.НовыйВалютаДокумента,
							                                     СтруктураЗначений.ТекущийКурсДокумента,
							                                     СтруктураЗначений.НовыйКурсДокумента,
							                                     СтруктураЗначений.ТекущийКратностьДокумента,
							                                     СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;

						Если ЕстьСумма Тогда
							СтрокаТабличнойЧасти.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
							                                     СтруктураЗначений.ТекущийВалютаДокумента,
							                                     СтруктураЗначений.НовыйВалютаДокумента,
							                                     СтруктураЗначений.ТекущийКурсДокумента,
							                                     СтруктураЗначений.НовыйКурсДокумента,
							                                     СтруктураЗначений.ТекущийКратностьДокумента,
							                                     СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;

						Если ЕстьСуммаНДС И ЕстьСумма Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
					КонецЕсли;

					Если ЕстьЦенаПередачи Тогда
						СтрокаТабличнойЧасти.ЦенаПередачи = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);
						
						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.ЦенаПередачи = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ЦенаПередачи,
							                                                                     Неопределено,
							                                                                     СтруктураЗначений.ТекущийСуммаВключаетНДС,
							                                                                     СтруктураЗначений.НовыйУчитыватьНДС,
							                                                                     СтруктураЗначений.НовыйСуммаВключаетНДС,
							                                                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;

						Если ЕстьСуммаПередачи Тогда
							СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
						
						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДСПередачи", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЕстьЦенаПоступления Тогда
						СтрокаТабличнойЧасти.ЦенаПоступления = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаПоступления Тогда
							СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					КонецЕсли;
					Если ЕстьЦенаСтарая Тогда
						СтрокаТабличнойЧасти.ЦенаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаСтарая Тогда
							СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					ИначеЕсли ЕстьСуммаСтарая Тогда
						СтрокаТабличнойЧасти.СуммаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);
					КонецЕсли;
					Если ЕстьФактурнаяСтоимость Тогда
						СтрокаТабличнойЧасти.ФактурнаяСтоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
						                                             СтруктураЗначений.ТекущийВалютаДокумента,
						                                             СтруктураЗначений.НовыйВалютаДокумента,
						                                             СтруктураЗначений.ТекущийКурсДокумента,
						                                             СтруктураЗначений.НовыйКурсДокумента,
						                                             СтруктураЗначений.ТекущийКратностьДокумента,
						                                             СтруктураЗначений.НовыйКратностьДокумента);
					КонецЕсли;

				Иначе
					Если ЕстьЦена Тогда

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
							                            Неопределено,
							                            СтруктураЗначений.ТекущийСуммаВключаетНДС,
							                            СтруктураЗначений.НовыйУчитыватьНДС,
							                            СтруктураЗначений.НовыйСуммаВключаетНДС,
							                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;

						Если ЕстьСумма Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

							Если ЕстьСуммаНДС Тогда
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если ЕстьЦенаПередачи Тогда

					// Если надо пересчитать цены при изменении флагов налогообложения
					Если ПересчитатьЦенуПоФлагамНалогов
					   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						СтрокаТабличнойЧасти.ЦенаПередачи = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ЦенаПередачи,
																							 Неопределено,
																							 СтруктураЗначений.ТекущийСуммаВключаетНДС,
																							 СтруктураЗначений.НовыйУчитыватьНДС,
																							 СтруктураЗначений.НовыйСуммаВключаетНДС,
																							 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					КонецЕсли;

					Если ЕстьСуммаПередачи Тогда
						СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;

					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДСПередачи", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
					КонецЕсли;

				КонецЕсли;

				// Розничную цену будем рассчитывать только тогда, когда задается процент наценки.
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентРозничнойНаценки", МетаданныеДокумента, ИмяТабличнойЧасти)
				   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаВРознице", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					ОбработкаТабличныхЧастей.РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныВалюта()

// Рассчитываем итоговую плановую себестоимость по документу
//
// Параметры: 
//  ДокументОбъект - объект документа, в котором надо рассчитать итоговую плановую себестоимость
//
// Возвращаемое значение:
//  Итоговая плановая себестоимость по документу со всеми налогами.
//
Функция ИтогПлановаяСебестоимость(ДокументОбъект) Экспорт

	Перем СуммаПлановойСебестоимости;

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается
		Возврат Неопределено;
	КонецЕсли;

	ИтогПлановаяСебестоимость = 0;

	// Суммируем значения плановой себестоимости по каждой строке табличной части
	Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл

		ОбработкаТабличныхЧастей.ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СуммаПлановойСебестоимости);

		// Если хотя бы в одной строке плановая себестоимость будет неопределенной,
		// то считаем, что и итоговая плановая себестоимость по документу
		// также будет неопределенной.
		Если СуммаПлановойСебестоимости = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ИтогПлановаяСебестоимость = ИтогПлановаяСебестоимость + СуммаПлановойСебестоимости;

	КонецЦикла;

	Возврат ИтогПлановаяСебестоимость;

КонецФункции // ИтогПлановаяСебестоимость()

// Рассчитываем итоговое отклонение от плановой себестоимости по документу
//
// Параметры: 
//  ДокументОбъект                           - объект документа, в котором надо рассчитать 
//                                             итоговое отклонение от плановой себестоимости
//  ПроцентОтклоненияОтПлановойСебестоимости - в этот параметр будет помещено значение.
//
// Возвращаемое значение:
//  Итоговое отклонение от плановой себестоимости по документу со всеми налогами.
//
Функция ПолучитьИтоговоеОтклонениеОтПлановойСебестоимости(ДокументОбъект, ПроцентОтклоненияОтПлановойСебестоимости = 0) Экспорт

	Перем ИтогОтклонениеОтПлановойСебестоимости;

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается
		Возврат Неопределено;
	КонецЕсли;

	ИтогПлановаяСебестоимость = ИтогПлановаяСебестоимость(ДокументОбъект);

	Если ИтогПлановаяСебестоимость = Неопределено Тогда

		// Если итоговая плановая себестоимость неопределена, 
		// информация об отклонение от плановой себестоимости будет неопределенной.
		ИтогОтклонениеОтПлановойСебестоимости    = Неопределено;
		ПроцентОтклоненияОтПлановойСебестоимости = Неопределено;
	Иначе

		// Если итоговая плановая себестоимость определена, рассчитываем отклонение.
		ИтогОтклонениеОтПлановойСебестоимости = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОбъект, "Товары") - ИтогПлановаяСебестоимость;

	КонецЕсли;

	Если ИтогПлановаяСебестоимость = 0 Тогда
		ПроцентОтклоненияОтПлановойСебестоимости = Неопределено;
	Иначе
		ПроцентОтклоненияОтПлановойСебестоимости = (ИтогОтклонениеОтПлановойСебестоимости / ИтогПлановаяСебестоимость) * 100;
	КонецЕсли;

	Возврат ИтогОтклонениеОтПлановойСебестоимости;

КонецФункции // ПолучитьИтоговоеОтклонениеОтПлановойСебестоимости()

// Возвращает свойство структуры по имени. Если свойство отсутствует, создает его с типом Массив.
//
// Параметры: 
//  СтруктураСвойств - структура, содержащая свойство
//  ИмяСвойства		 - имя свойства
//
Функция ПолучитьСвойствоТипаМассив(СтруктураСвойств, ИмяСвойства)
	
	Если Не СтруктураСвойств.Свойство(ИмяСвойства) Тогда 		
		СтруктураСвойств.Вставить(ИмяСвойства, Новый Массив());		
	КонецЕсли;
	
	Свойство = Неопределено;
	СтруктураСвойств.Свойство(ИмяСвойства, Свойство);
	
	Возврат Свойство;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов и другие необходимые данные 
// для редактирования цены и валюты. 
// Вызывается из функции УстановитьТекущиеРеквизитыФормаЦеныВалюты и из веб-приложения "Удаленный склад".
//
// Параметры: 
//  ДокументОбъект                 - объект редактируемого документа
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//                                   Множество возможных ключей: (ТипЦен, ВалютаДокумента, КурсДокумента, 
//								     КратностьДокумента, УчитыватьНДС, СуммаВключаетНДС);
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать, 
//                                   по умолчанию - "Товары".
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  НовыйТипЦенДляУстановки        - тип цен, который по возможности нужно установить как новый в форме;
//
Функция ПолучитьСтруктуруРеквизитовДляФормыЦеныВалюты(ДокументОбъект,
												СтруктураРеквизитовДокумента, ИмяТабличнойЧасти,
												ВалютаРегламентированногоУчета,
												НовыйТипЦенДляУстановки = Неопределено) Экспорт
	
	РеквизитыЦеныВалюты = Новый Структура();
	
	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	НадоПересчитывать   = Ложь;

	Для каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыЦеныВалюты.Вставить("НадоПересчитывать", НадоПересчитывать);
	РеквизитыЦеныВалюты.Вставить("ДатаКурса", ДокументОбъект.Дата);
	
	// определим текущую валюту взиморасчетов
	ТекущийВалютаВзаиморасчетов = "";
	Контрагент                  = "";

	Если СтруктураРеквизитовДокумента.Свойство("БезКонтроляВалютыВзаиморасчетов") Тогда
		ТекущийВалютаВзаиморасчетов                 = СтруктураРеквизитовДокумента.БезКонтроляВалютыВзаиморасчетов;
		РеквизитыЦеныВалюты.Вставить("ТекущийВалютаВзаиморасчетов", ТекущийВалютаВзаиморасчетов);
		РеквизитыЦеныВалюты.Вставить("ПересчитатьЦеныПоВалюте", Истина);

		Запрос = Новый Запрос;

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Валюты.Ссылка КАК Валюта
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|УПОРЯДОЧИТЬ ПО
		|	Валюта";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолучитьСвойствоТипаМассив(РеквизитыЦеныВалюты, "ЭУНовыйВалютаДокументаСписокВыбора").Добавить(Выборка.Валюта);
		КонецЕсли;

		РеквизитыЦеныВалюты.Вставить("ЭУНовыйВалютаДокументаКнопкаОчистки", Ложь);
	Иначе
		Если СтруктураРеквизитовДокумента.Свойство("ГТДИмпорт") Тогда
			//В документе ГТДИмпорт возможны два варианта указания договора - в реквизите ДоговорКонтрагента и в реквитите ДоговорКонтрагентаРегл
			Если ДокументОбъект.ДоговорКонтрагента <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			ИначеЕсли ДокументОбъект.ДоговорКонтрагентаРегл <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.ДоговорКонтрагентаРегл.ВалютаВзаиморасчетов;
				РеквизитыЦеныВалюты.Вставить("ТекущийКурсВзаиморасчетов", 1);
				РеквизитыЦеныВалюты.Вставить("ТекущийКратностьВзаиморасчетов", 1);
			КонецЕсли;
			РеквизитыЦеныВалюты.Вставить("ТекущийВалютаВзаиморасчетов", ТекущийВалютаВзаиморасчетов);

		ИначеЕсли НЕ СтруктураРеквизитовДокумента.Свойство("ВызовКорректировкаЗаказа")
		   И ДокументОбъект.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			Если ДокументОбъект.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Иначе
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;

			РеквизитыЦеныВалюты.Вставить("ТекущийВалютаВзаиморасчетов", ТекущийВалютаВзаиморасчетов);
		ИначеЕсли СтруктураРеквизитовДокумента.Свойство("Контрагент", Контрагент) Тогда
			ДоговорКонтрагента = "";

			Если СтруктураРеквизитовДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента) Тогда
				ТекущийВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Иначе
				ТекущийВалютаВзаиморасчетов = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;

			РеквизитыЦеныВалюты.Вставить("ТекущийВалютаВзаиморасчетов", ТекущийВалютаВзаиморасчетов);
		КонецЕсли;

		// может быть, надо ограничить список доступных валют для документа?
		// сделаем это, если, во-первых, существует валюта документа, во-вторых, существует валюта взаиморасчетов
		// (т.е. передается курс взаиморасчетов)
		Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов")
		   И НЕ СтруктураРеквизитовДокумента.Свойство("КурсДокумента")
		   И СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента") Тогда
			РеквизитыЦеныВалюты.Вставить("ЭУНовыйВалютаДокументаРежимВыбораИзСписка", Истина);
			ПолучитьСвойствоТипаМассив(РеквизитыЦеныВалюты, "ЭУНовыйВалютаДокументаСписокВыбора").Добавить(ТекущийВалютаВзаиморасчетов);

			Если ВалютаРегламентированногоУчета <> ТекущийВалютаВзаиморасчетов Тогда
				ПолучитьСвойствоТипаМассив(РеквизитыЦеныВалюты, "ЭУНовыйВалютаДокументаСписокВыбора").Добавить(ВалютаРегламентированногоУчета);
			КонецЕсли;

			РеквизитыЦеныВалюты.Вставить("ЭУНовыйВалютаДокументаКнопкаВыбора", Ложь);
			РеквизитыЦеныВалюты.Вставить("ЭУНовыйВалютаДокументаКнопкаОчистки", Ложь);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		
			ТекущееЗначение = ОбщегоНазначения.ПолучитьРеквизитШапки(ЭлементСтруктуры.Ключ,
			   ДокументОбъект, МетаданныеДокумента, ЭлементСтруктуры.Значение);
			РеквизитыЦеныВалюты.Вставить("Текущий" + ЭлементСтруктуры.Ключ, ТекущееЗначение);

			Если ЭлементСтруктуры.Значение = Неопределено Тогда
				РеквизитыЦеныВалюты.Вставить("Новый" + ЭлементСтруктуры.Ключ, ТекущееЗначение);
			Иначе
				РеквизитыЦеныВалюты.Вставить("Новый" + ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЕсли;
			
	КонецЦикла;

	// Установить текущий курс и кратность
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		РеквизитыЦеныВалюты.Вставить("ТекущийКурсДокумента", ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
		РеквизитыЦеныВалюты.Вставить("ТекущийКратностьДокумента", ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
	КонецЕсли;

	// Вызов при изменении значения договора
	Если СтруктураРеквизитовДокумента.Свойство("ВызовПриИзмененииЗначенияДоговора") Тогда
		РеквизитыЦеныВалюты.Вставить("НовыйВалютаДокумента", ТекущийВалютаВзаиморасчетов);
		РеквизитыЦеныВалюты.Вставить("ПересчитатьЦеныПоВалюте", Истина);
	КонецЕсли;

	Если СтруктураРеквизитовДокумента.Свойство("УстановитьСуммаВключаетНДС") Тогда
		РеквизитыЦеныВалюты.Вставить("НовыйСуммаВключаетНДС", Истина);
	КонецЕсли;

	// Вызов при изменении учетной политики розничная торговля облагается ЕНВД
	ЗначениеВызова = Неопределено;
	Если СтруктураРеквизитовДокумента.Свойство("ВызовПриИзмененииУчетнойПолитикиЕНВД", ЗначениеВызова) Тогда
		Если ЗначениеВызова = "Покупка" Тогда
			РеквизитыЦеныВалюты.Вставить("НовыйНДСВключенВСтоимость", Истина);
		Иначе
			РеквизитыЦеныВалюты.Вставить("НовыйУчитыватьНДС", Истина);
			РеквизитыЦеныВалюты.Вставить("НовыйСуммаВключаетНДС", Истина);
		КонецЕсли;
	КонецЕсли;

	// если в списке есть тип цен
	// и
	// если ТипЦен в документе имеет тип ТипЦенКонтрагентов, надо установить владельца
	// предполагаем, что если существует реквизит ТипЦен, то он может принимать два значения - 
	// типы цен номенклатуры и типы цен контрагентов
	Если СтруктураРеквизитовДокумента.Свойство("ТипЦен") 
	   и Метаданные.НайтиПоТипу(ТипЗнч(ДокументОбъект.ТипЦен)).Имя = "ТипыЦенНоменклатурыКонтрагентов" Тогда

		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", ДокументОбъект.Метаданные()) Тогда
			Контрагент = ДокументОбъект.Контрагент;
		Иначе
			СтруктураРеквизитовДокумента.Свойство("Контрагент", Контрагент);
		КонецЕсли;

		РеквизитыЦеныВалюты.Вставить("ЭУНовыйТипЦенВыборПоВладельцу", Контрагент);
		// сохраним владельца для дальнейшего использования
		РеквизитыЦеныВалюты.Вставить("ВладелецТипаЦен", Контрагент);

	КонецЕсли;	
                                                      
	// если мы используем режим выбора из списка для новой валюты документа
	// и в списке нет нужной валюты, установим новую валюту в валюту взаиморасчетов
	Если РеквизитыЦеныВалюты.Свойство("ЭУНовыйВалютаДокументаРежимВыбораИзСписка") И РеквизитыЦеныВалюты.ЭУНовыйВалютаДокументаРежимВыбораИзСписка 
	   И ПолучитьСвойствоТипаМассив(РеквизитыЦеныВалюты, "ЭУНовыйВалютаДокументаСписокВыбора").Найти(РеквизитыЦеныВалюты.НовыйВалютаДокумента) = Неопределено Тогда
		РеквизитыЦеныВалюты.Вставить("НовыйВалютаДокумента", ПолучитьСвойствоТипаМассив(РеквизитыЦеныВалюты, "ЭУНовыйВалютаДокументаСписокВыбора")[0]);
	КонецЕсли;

	// Если передан НовыйТипЦенДляУстановки и он подходит по параметрам, установим его в форме
	Если НовыйТипЦенДляУстановки <> Неопределено
	   И СтруктураРеквизитовДокумента.Свойство("ТипЦен") 
	   И Метаданные.НайтиПоТипу(ТипЗнч(ДокументОбъект.ТипЦен)).Имя = НовыйТипЦенДляУстановки.Метаданные().Имя Тогда
		РеквизитыЦеныВалюты.Вставить("НовыйТипЦен", НовыйТипЦенДляУстановки);
	КонецЕсли;
	
	Если Не РеквизитыЦеныВалюты.Свойство("НовыйКурсДокумента") И РеквизитыЦеныВалюты.Свойство("НовыйВалютаДокумента") Тогда
		Если РеквизитыЦеныВалюты.Свойство("ТекущийВалютаВзаиморасчетов") И РеквизитыЦеныВалюты.НовыйВалютаДокумента = РеквизитыЦеныВалюты.ТекущийВалютаВзаиморасчетов Тогда
			РеквизитыЦеныВалюты.Вставить("НовыйКурсДокумента", РеквизитыЦеныВалюты.НовыйКурсВзаиморасчетов);
			РеквизитыЦеныВалюты.Вставить("НовыйКратностьДокумента", РеквизитыЦеныВалюты.НовыйКратностьВзаиморасчетов);
		Иначе
			СтруктураНовыйВалюта    = МодульВалютногоУчета.ПолучитьКурсВалюты(РеквизитыЦеныВалюты.НовыйВалютаДокумента, РеквизитыЦеныВалюты.ДатаКурса);
			РеквизитыЦеныВалюты.Вставить("НовыйКурсДокумента", СтруктураНовыйВалюта.Курс);
			РеквизитыЦеныВалюты.Вставить("НовыйКратностьДокумента", СтруктураНовыйВалюта.Кратность);
		КонецЕсли;
	КонецЕсли;

	Возврат РеквизитыЦеныВалюты;
	
КонецФункции

// По реквизитам редактируемого документа устанавливает реквизиты общей формы "Цены и Валюта".
//
// Параметры: 
//  ФормаЦеныВалюты                - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                 - объект редактируемого документа
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//                                   Множество возможных ключей: (ТипЦен, ВалютаДокумента, КурсДокумента, 
//								     КратностьДокумента, УчитыватьНДС, СуммаВключаетНДС);
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать, 
//                                   по умолчанию - "Товары".
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  НовыйТипЦенДляУстановки        - тип цен, который по возможности нужно установить как новый в форме;
//
Процедура УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект,
	                                                СтруктураРеквизитовДокумента, ИмяТабличнойЧасти,
	                                                ВалютаРегламентированногоУчета,
	                                                НовыйТипЦенДляУстановки = Неопределено)
													
	РеквизитыЦеныВалюты = ПолучитьСтруктуруРеквизитовДляФормыЦеныВалюты(ДокументОбъект,
	                                                СтруктураРеквизитовДокумента, ИмяТабличнойЧасти,
	                                                ВалютаРегламентированногоУчета,
	                                                НовыйТипЦенДляУстановки);
	
	ФормаЦеныВалюты.ТабличнаяЧастьПуста = Не РеквизитыЦеныВалюты.НадоПересчитывать;
	ФормаЦеныВалюты.ДатаКурса = РеквизитыЦеныВалюты.ДатаКурса;
	
	Если РеквизитыЦеныВалюты.Свойство("ЭУНовыйВалютаДокументаРежимВыбораИзСписка") Тогда
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.РежимВыбораИзСписка = РеквизитыЦеныВалюты.ЭУНовыйВалютаДокументаРежимВыбораИзСписка;
	КонецЕсли;
	Если РеквизитыЦеныВалюты.Свойство("ЭУНовыйВалютаДокументаСписокВыбора") Тогда
		Для Каждого Валюта Из РеквизитыЦеныВалюты.ЭУНовыйВалютаДокументаСписокВыбора Цикл		
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(Валюта);		
		КонецЦикла; 
	КонецЕсли;
	Если РеквизитыЦеныВалюты.Свойство("ЭУНовыйВалютаДокументаКнопкаВыбора") Тогда
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаВыбора = РеквизитыЦеныВалюты.ЭУНовыйВалютаДокументаКнопкаВыбора;
	КонецЕсли;
	Если РеквизитыЦеныВалюты.Свойство("ЭУНовыйВалютаДокументаКнопкаОчистки") Тогда
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаОчистки = РеквизитыЦеныВалюты.ЭУНовыйВалютаДокументаКнопкаОчистки;
	КонецЕсли;
	Если РеквизитыЦеныВалюты.Свойство("ЭУНовыйТипЦенВыборПоВладельцу") Тогда
		ФормаЦеныВалюты.ЭлементыФормы.НовыйТипЦен.ВыборПоВладельцу = РеквизитыЦеныВалюты.ЭУНовыйТипЦенВыборПоВладельцу;
	КонецЕсли;

	
	Для Каждого ЭлементСтруктуры Из РеквизитыЦеныВалюты Цикл
		Если ФормаЦеныВалюты.ЭлементыФормы.Найти(ЭлементСтруктуры.Ключ) <> Неопределено Тогда
			ФормаЦеныВалюты[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если РеквизитыЦеныВалюты.Свойство("ТекущийКратностьВзаиморасчетов") Тогда
		ФормаЦеныВалюты.ТекущийКратностьВзаиморасчетов = РеквизитыЦеныВалюты.ТекущийКратностьВзаиморасчетов;
	КонецЕсли;
	Если РеквизитыЦеныВалюты.Свойство("НовыйКратностьВзаиморасчетов") Тогда
		ФормаЦеныВалюты.НовыйКратностьВзаиморасчетов = РеквизитыЦеныВалюты.НовыйКратностьВзаиморасчетов;
	КонецЕсли;
	Если РеквизитыЦеныВалюты.Свойство("ТекущийКратностьДокумента") Тогда
		ФормаЦеныВалюты.ТекущийКратностьДокумента = РеквизитыЦеныВалюты.ТекущийКратностьДокумента;
	КонецЕсли;
	Если РеквизитыЦеныВалюты.Свойство("НовыйКратностьДокумента") Тогда
		ФормаЦеныВалюты.НовыйКратностьДокумента = РеквизитыЦеныВалюты.НовыйКратностьДокумента;
	КонецЕсли;
	Если РеквизитыЦеныВалюты.Свойство("ВладелецТипаЦен") Тогда
		ФормаЦеныВалюты.ВладелецТипаЦен = РеквизитыЦеныВалюты.ВладелецТипаЦен;
	КонецЕсли;				
		
	// если уже при открытии новый тип цен отличается от текущего, надо обработать изменения реквизитов формы
	Если ФормаЦеныВалюты.НовыйТипЦен <> ФормаЦеныВалюты.ТекущийТипЦен 
	   и ЗначениеЗаполнено(ФормаЦеныВалюты.НовыйТипЦен) Тогда
		// надо установить флаг СуммаВключаемНДС из типа цены
		РеквизитыЦеныВалюты.Вставить("НовыйСуммаВключаетНДС", ФормаЦеныВалюты.НовыйТипЦен.ЦенаВключаетНДС);
	КонецЕсли;

КонецПроцедуры // УстановитьТекущиеРеквизитыФормаЦеныВалюты()
       
// Устанавливает доступность реквизитов общей формы "Цены и Валюта" согласно переданной структуре.
//
// Параметры: 
//  ФормаЦеныВалюты                    - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//
Процедура УстановитьДоступностьРеквизитовФормаЦеныВалюты(ФормаЦеныВалюты, СтруктураРеквизитовДокумента,	СтруктураНеРедактируемыхРеквизитов = Неопределено)

	ФормаЦеныВалюты.ЭлементыФормы.НовыйТипЦен.Доступность                       = СтруктураРеквизитовДокумента.Свойство("ТипЦен");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.Доступность              = СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйКурсДокумента.Доступность                = СтруктураРеквизитовДокумента.Свойство("КурсДокумента");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность           = СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйУчитыватьНДС.Доступность                 = СтруктураРеквизитовДокумента.Свойство("УчитыватьНДС");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйСуммаВключаетНДС.Доступность             = СтруктураРеквизитовДокумента.Свойство("СуммаВключаетНДС");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйНДСВключенВСтоимость.Доступность         = СтруктураРеквизитовДокумента.Свойство("НДСВключенВСтоимость");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйРегистрироватьЦеныПоставщика.Доступность = СтруктураРеквизитовДокумента.Свойство("РегистрироватьЦеныПоставщика");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйИспользоватьПлановуюСебестоимость.Доступность = СтруктураРеквизитовДокумента.Свойство("ИспользоватьПлановуюСебестоимость");

	ФормаЦеныВалюты.СтруктураНеРедактируемыхРеквизитов = СтруктураНеРедактируемыхРеквизитов;

КонецПроцедуры // УстановитьДоступностьРеквизитовФормаЦеныВалюты()

// Устанавливает новые значения реквизитов документа по значениям, выбранным в общей форме "Цены и Валюта"
//
// Параметры: 
//  СтруктураРезультирующихЗначений	- структура, содержащая значения реквизитов документа до и после их 
//									  изменеия в форме "Цены и валюта",
//  ДокументОбъект					- объект редактируемого документа,
//  СтруктураРеквизитовДокумента	- структура, задает список обрабатываемых реквизитов документа,
// 									  если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//
Процедура УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураРезультирующихЗначений, ДокументОбъект, 
	                                                             СтруктураРеквизитовДокумента) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Для каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		Если СтруктураРезультирующихЗначений.Свойство("Новый" + ЭлементСтруктуры.Ключ)
		   И ОбщегоНазначения.ЕстьРеквизитДокумента(ЭлементСтруктуры.Ключ, МетаданныеДокумента) Тогда
			НовоеЗначениеРеквизита = СтруктураРезультирующихЗначений["Новый" + ЭлементСтруктуры.Ключ];

			Если ДокументОбъект[ЭлементСтруктуры.Ключ] <> НовоеЗначениеРеквизита Тогда
				ДокументОбъект[ЭлементСтруктуры.Ключ] = НовоеЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта()

// Определяет необходимость пересчета табличной части документа при изменении флагов налогообложения 
// в форме "Цены и валюты".
//
// Параметры: 
//  СтруктураЗначений	- структура, содержащая значения реквизитов документа до и после их 
//						  изменеия в форме "Цены и валюта".
//
Функция ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначений) Экспорт

		Возврат (СтруктураЗначений.НовыйУчитыватьНДС <> СтруктураЗначений.ТекущийУчитыватьНДС) ИЛИ
		        (СтруктураЗначений.НовыйСуммаВключаетНДС <> СтруктураЗначений.ТекущийСуммаВключаетНДС);

КонецФункции // ОпределитьНеобходимостьПерерасчетаЦены()

// Получает контекст общей формы "Цены и Валюта", устанавливает в ней значения и доступность реквизитов 
// по значениям, заданным в документе, и открывает форму. 
//
// Параметры: 
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать, 
//                                       по умолчанию - "Товары".
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//
// Возвращаемое значение:
//  Структура, содержащая значения текущих и устанавливаемых значений для реквизитов документа.
//
Функция ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
	                              СтруктураНеРедактируемыхРеквизитов = Неопределено,
	                              ИмяТабличнойЧасти, НовыйТипЦенДляУстановки = Неопределено) Экспорт

	ФормаЦеныВалюты = ПолучитьОбщуюФорму("ФормаЦеныИВалюта"); 

	// Установим текущие реквизиты.
	УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект, 
	                                          СтруктураРеквизитовДокумента, ИмяТабличнойЧасти, 
	                                          ВалютаРегламентированногоУчета, НовыйТипЦенДляУстановки);

	// Доступность реквизитов формы.
	УстановитьДоступностьРеквизитовФормаЦеныВалюты(ФормаЦеныВалюты, СтруктураРеквизитовДокумента, 
	                                               СтруктураНеРедактируемыхРеквизитов);

	// Теперь можно и открывать форму, она вернет результат своей работы.
	Возврат ФормаЦеныВалюты.ОткрытьМодально();

КонецФункции // ОткрытьФормуЦеныИВалюта()

// Формирует запрос, возвращающий цены для заданных позиций номенклатуры.
// Используется для получения цен по ТЧ редактирумого документа для последующего пересчета ТЧ
//
// Параметры: 
//  СтруктураЗначений   - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//                        документа до и после их изменеия в общей форме),
//  СпособЗаполненияЦен - значение перечисления "Способы заполнения цен", определяет по какому из регистров
//                       ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос.
//  МассивНоменклатуры  - массив, содержащий ссылки на элементы номенклатуры, по которым надо узнать цены.
//  ДатаДокумента       - дата, на которую надо узнать цены 
//  Контрагент          - ссылка на справочник контрагентов, определяет для какого когнтрагента надо узнать цены,
//  ДоговорКонтрагента  - ссылка на договор контрагента.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоЦенам(СтруктураЗначений, СпособЗаполненияЦен, МассивНоменклатуры,
                                  ДатаДокумента, Контрагент, ДоговорКонтрагента = Неопределено,
                                  Склад = Неопределено) Экспорт

	Перем УсловиеПродаж;

	СтруктураЗначений.Свойство("НовыйУсловиеПродаж", УсловиеПродаж);

	// Достанем нужные цены запросом.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Дата", ПолучитьАктуальнуюДатуРасчетаЦен(ДатаДокумента));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("УсловиеПродаж", УсловиеПродаж);

	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Тогда
		Запрос.УстановитьПараметр("ТипЦен", СтруктураЗначений.НовыйТипЦен);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	БазовыеЦены.Номенклатура,
		|	БазовыеЦены.ХарактеристикаНоменклатуры,
		|	БазовыеЦены.Номенклатура.ЕдиницаХраненияОстатков,
		|	БазовыеЦены.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентОсновнойЕдиницы,
		|	БазовыеЦены.ТипЦен,

		|	ЕСТЬNULL(ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.Цена
		|	ИНАЧЕ
		|		БазовыеЦены.Цена
		|	КОНЕЦ, 0) КАК Цена,

		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЕСТЬNULL(БазовыеЦены.СпособРасчетаЦены, БазовыеЦены.ТипЦен.СпособРасчетаЦены)
		|	ИНАЧЕ
		|		NULL
		|	КОНЕЦ КАК СпособРасчетаЦены,

		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЕСТЬNULL(БазовыеЦены.ПроцентСкидкиНаценки, БазовыеЦены.ТипЦен.ПроцентСкидкиНаценки)
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентСкидкиНаценки,

		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.Валюта
		|	ИНАЧЕ
		|		БазовыеЦены.Валюта
		|	КОНЕЦ КАК ВалютаЦены,

		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		БазовыеЦены.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияЦены,

		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.ЕдиницаИзмерения.Коэффициент
		|	ИНАЧЕ
		|		БазовыеЦены.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК КоэффициентЕдиницыЦены,

		|	ЕСТЬNULL(НаценкиПоУсловиямПродаж.ПроцентНаценки, 0) КАК ПроцентНаценкиПоУсловиямПродаж,
		|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыЦены,
		|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыЦены
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СпрНоменклатура.Номенклатура КАК Номенклатура,
		|		ЕСТЬNULL(УсловияПоставок.ХарактеристикаНоменклатуры, ЕСТЬNULL(ЦеныНоменклатуры.ХарактеристикаНоменклатуры, СпрНоменклатура.ХарактеристикаНоменклатуры)) КАК ХарактеристикаНоменклатуры,

		|		ВЫБОР КОГДА ТипыЦенПоГруппам.ТипЦен ЕСТЬ NULL
		|				ИЛИ ТипыЦенПоГруппам.ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка) ТОГДА
		|			&ТипЦен
		|		ИНАЧЕ
		|			ТипыЦенПоГруппам.ТипЦен
		|		КОНЕЦ КАК ТипЦен,

		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL ТОГДА
		|			ЦеныНоменклатуры.СпособРасчетаЦены
		|		ИНАЧЕ
		|			NULL
		|		КОНЕЦ КАК СпособРасчетаЦены,

		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL ТОГДА
		|			ЦеныНоменклатуры.ПроцентСкидкиНаценки
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ПроцентСкидкиНаценки,

		|		ЕСТЬNULL(УсловияПоставок.Цена, ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)) КАК Цена,
		|		ЕСТЬNULL(УсловияПоставок.ЕдиницаИзмерения, ЦеныНоменклатуры.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|		ЕСТЬNULL(УсловияПоставок.ВалютаЦены, ЦеныНоменклатуры.Валюта) КАК Валюта
		|		ИЗ
		|		(	ВЫБРАТЬ
		|				СпрХарактеристики.Владелец КАК Номенклатура,
		|				СпрХарактеристики.Ссылка КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|			ГДЕ
		|				СпрХарактеристики.Владелец В (&МассивНоменклатуры)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				СпрНоменклатура.Ссылка КАК Номенклатура,
		|				ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				Справочник.Номенклатура КАК СпрНоменклатура			
		|			ГДЕ
		|				СпрНоменклатура.Ссылка В (&МассивНоменклатуры)
		|		) КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ТипыЦенПоГруппамНоменклатурыДляПокупателей.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК ТипыЦенПоГруппам
		|		ПО
		|			ТипыЦенПоГруппам.НоменклатурнаяЦеноваяГруппа = СпрНоменклатура.Номенклатура.ЦеноваяГруппа
		|			ИЛИ ТипыЦенПоГруппам.НоменклатурнаяЦеноваяГруппа = СпрНоменклатура.Номенклатура.НоменклатурнаяГруппа
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|		
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатуры
		|		ПО
		|			ЦеныНоменклатуры.Номенклатура = СпрНоменклатура.Номенклатура
		|			И ((ЦеныНоменклатуры.ТипЦен = ТипыЦенПоГруппам.ТипЦен ИЛИ (ТипыЦенПоГруппам.ТипЦен ЕСТЬ NULL ИЛИ ТипыЦенПоГруппам.ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка))
		|			И ЦеныНоменклатуры.ТипЦен = &ТипЦен))
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата, ДоговорКонтрагента = &ДоговорКонтрагента И Номенклатура В (&МассивНоменклатуры)) КАК УсловияПоставок
		|		ПО
		|			(УсловияПоставок.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И УсловияПоставок.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры)
		|			ИЛИ УсловияПоставок.Номенклатура = СпрНоменклатура.Номенклатура
		|		ГДЕ
		|			СпрНоменклатура.Номенклатура в (&МассивНоменклатуры)
		|	) КАК БазовыеЦены
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыРассчитываемые
		|ПО
		|	БазовыеЦены.Номенклатура = ЦеныНоменклатурыРассчитываемые.Номенклатура
		|	И БазовыеЦены.ХарактеристикаНоменклатуры = ЦеныНоменклатурыРассчитываемые.ХарактеристикаНоменклатуры
		|	И БазовыеЦены.ТипЦен.БазовыйТипЦен = ЦеныНоменклатурыРассчитываемые.ТипЦен
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ПО
		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.Валюта
		|	ИНАЧЕ
		|		БазовыеЦены.Валюта
		|	КОНЕЦ = КурсыВалютСрезПоследних.Валюта
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж) КАК НаценкиПоУсловиямПродаж
		|ПО
		|	БазовыеЦены.Номенклатура.ЦеноваяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|	ИЛИ БазовыеЦены.Номенклатура.НоменклатурнаяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|ГДЕ
		|	ЕСТЬNULL(ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.Цена
		|	ИНАЧЕ
		|		БазовыеЦены.Цена
		|	КОНЕЦ, 0) <> 0
		|";
	ИначеЕсли СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов Тогда
		Запрос.УстановитьПараметр("ТипЦен", СтруктураЗначений.НовыйТипЦен);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура,
		|	ЦеныКонтрагентаСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков,
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентОсновнойЕдиницы,
		|	ЦеныКонтрагентаСрезПоследних.Валюта КАК ВалютаЦены,
		|	ЦеныКонтрагентаСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияЦены,
		|	ЦеныКонтрагентаСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК КоэффициентЕдиницыЦены,
		|	ЦеныКонтрагентаСрезПоследних.Цена,
		|	ЕСТЬNULL(НаценкиПоУсловиямПродаж.ПроцентНаценки, 0) КАК ПроцентНаценкиПоУсловиямПродаж,
		|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыЦены,
		|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыЦены
		|ИЗ
		|(
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ЕСТЬNULL(УсловияПоставок.Номенклатура, ЦеныКонтрагента.Номенклатура) КАК Номенклатура,
		|			ЕСТЬNULL(УсловияПоставок.ХарактеристикаНоменклатуры, ЦеныКонтрагента.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		|			ЕСТЬNULL(УсловияПоставок.ВалютаЦены, ЦеныКонтрагента.Валюта) КАК Валюта,
		|			ЕСТЬNULL(УсловияПоставок.Цена, ЦеныКонтрагента.Цена) КАК Цена,
		|			ЕСТЬNULL(УсловияПоставок.ЕдиницаИзмерения, ЦеныКонтрагента.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
		|	ИЗ
		|	(	
		|		ВЫБРАТЬ
		|			  ХарактеристикаНоменклатуры.Владелец КАК Номенклатура
		|			, ХарактеристикаНоменклатуры.ССЫЛКА КАК ХарактеристикаНоменклатуры
		|		ИЗ
		|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаНоменклатуры
		|		ГДЕ ХарактеристикаНоменклатуры.Владелец В (&МассивНоменклатуры)
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			  Номенклатура.ССЫЛКА КАК Номенклатура
		|			, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|		ИЗ
		|			Справочник.Номенклатура КАК Номенклатура
		|		ГДЕ Номенклатура.Ссылка В (&МассивНоменклатуры)
		|	) КАК УсловияПоставокЦеныКонтрагента
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ТипЦен = &ТипЦен) КАК ЦеныКонтрагента
		|	ПО
		|		ЦеныКонтрагента.Номенклатура = УсловияПоставокЦеныКонтрагента.Номенклатура
		|		И ЦеныКонтрагента.ХарактеристикаНоменклатуры = УсловияПоставокЦеныКонтрагента.ХарактеристикаНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ДоговорКонтрагента = &ДоговорКонтрагента) КАК УсловияПоставок
		|	ПО
		|		УсловияПоставок.Номенклатура = УсловияПоставокЦеныКонтрагента.Номенклатура
		|		И УсловияПоставок.ХарактеристикаНоменклатуры = УсловияПоставокЦеныКонтрагента.ХарактеристикаНоменклатуры
		|		И УсловияПоставок.Цена <> 0
		|) КАК ЦеныКонтрагентаСрезПоследних
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ПО
		|	ЦеныКонтрагентаСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж) КАК НаценкиПоУсловиямПродаж
		|ПО
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура.ЦеноваяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|	ИЛИ ЦеныКонтрагентаСрезПоследних.Номенклатура.НоменклатурнаяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|ГДЕ
		|	ЦеныКонтрагентаСрезПоследних.Цена <> 0
		|";
	ИначеЕсли СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам Тогда
		Запрос.УстановитьПараметр("Склад", Склад);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныПродажные.Номенклатура,
		|	ЦеныПродажные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков,
		|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентОсновнойЕдиницы,
		|	ТаблицаКонстант.ВалютаРегламентированногоУчета КАК ВалютаЦены,
		|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмеренияЦены,
		|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыЦены,
		|	ЦеныПродажные.Цена,
		|	ЕСТЬNULL(НаценкиПоУсловиямПродаж.ПроцентНаценки, 0) КАК ПроцентНаценкиПоУсловиямПродаж,
		|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыЦены,
		|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыЦены
		|ИЗ
		|	РегистрСведений.ЦеныАТТ.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И Склад = &Склад) КАК ЦеныПродажные
		|СОЕДИНЕНИЕ
		|	Константы КАК ТаблицаКонстант
		|ПО
		|	ИСТИНА
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ПО
		|	ТаблицаКонстант.ВалютаРегламентированногоУчета = КурсыВалютСрезПоследних.Валюта
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж) КАК НаценкиПоУсловиямПродаж
		|ПО
		|	ЦеныПродажные.Номенклатура.ЦеноваяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|	ИЛИ ЦеныПродажные.Номенклатура.НоменклатурнаяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|";
	КонецЕсли;

	// Результат запроса.
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоЦенам()

// Заполняет цену в строке ТЧ документа по реквизитам документа и текущим ценам в регистре сведений.
//
// Параметры: 
//  ДокументОбъект             - документ; 
//  СтрокаТабличнойЧасти       - строка табличной части редактируемого документа, 
//  СтруктураПоиска            - структра, содержит значение Номенклатуры для поиска в результате запроса, 
//  ВыборкаИзРезультатаЗапроса - результат запроса по текущим ценам, 
//  СтруктураЗначений          - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//						         документа до и после их изменеия в общей форме),
//  СпособЗаполненияЦен        - значение перечисления "Способы заполнения цен", влияет на расчет цен
//						         (см. описание в ПересчитатьЦенуПриИзмененииФлаговНалогов),
//  ХарактеристикаНоменклатуры - характеристика номенклатуры, для которой ищем цену
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЦенуВСтрокеТабличнойЧасти(ДокументОбъект, СтрокаТабличнойЧасти, СтруктураПоиска, ВыборкаИзРезультатаЗапроса, 
											СтруктураЗначений, СпособЗаполненияЦен, ХарактеристикаНоменклатуры = Неопределено) Экспорт

	Перем НДСВСтроке;

	// получим имя табличной части и имя документа
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Родитель();

	Если Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Реквизиты.Найти("Цена") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Найдем товар из текущей строки документа в выборке из результата запроса.
	Если Не ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
		Возврат; // Искать нечего.
	КонецЕсли;

	ВыборкаИзРезультатаЗапроса.Сбросить(); 
	Если ХарактеристикаНоменклатуры = Неопределено 
	 Или ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		НашлиВВыборке = ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска);
	Иначе
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		НашлиВВыборке = ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска);
		Если Не НашлиВВыборке Тогда
			ВыборкаИзРезультатаЗапроса.Сбросить(); 
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			НашлиВВыборке = ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска);
		КонецЕсли;
	КонецЕсли;

	Если НашлиВВыборке Тогда // Нашли запись

		// Если для данного товара есть цена данного типа
		// Единицу устанавливаем в единицу цены, если она не задана, то в основную единицу товара
		Если Не ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе // присваиваем значение цены и единицы цены
			СтруктураНовойВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураЗначений.НовыйТипЦен.ВалютаЦены, ДокументОбъект.Дата);
			ТекущаяВалюта        = СтруктураЗначений.НовыйТипЦен.ВалютаЦены;
			ТекущийКурс          = СтруктураНовойВалюты.Курс;
			ТекущаяКратность     = СтруктураНовойВалюты.Кратность;

			ЭтоЦеныНоменклатуры = (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);

			// Переоределим тип цен, когда цены рассчитываются по типам цен номенклатуры
			Если ЭтоЦеныНоменклатуры Тогда
				СтруктураЗначений.НовыйТипЦен = ВыборкаИзРезультатаЗапроса.ТипЦен;
			КонецЕсли;

			Цена = ВыборкаИзРезультатаЗапроса.Цена;

			Если ЭтоЦеныНоменклатуры И СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда
				Если ВыборкаИзРезультатаЗапроса.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
					Цена = Цена * (1 + ВыборкаИзРезультатаЗапроса.ПроцентСкидкиНаценки / 100);
					Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, ВыборкаИзРезультатаЗапроса.ВалютаЦены,
					   ТекущаяВалюта, ВыборкаИзРезультатаЗапроса.КурсВалютыЦены, ТекущийКурс,
					   ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены, ТекущаяКратность);
				ИначеЕсли ВыборкаИзРезультатаЗапроса.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
					Цена = ПолучитьЦенуПоЦеновымДиапазонам(СтруктураЗначений.НовыйТипЦен, ДокументОбъект.Дата, Цена, ТекущаяВалюта, ВыборкаИзРезультатаЗапроса.ВалютаЦены);

					СтруктураНовойВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущаяВалюта, ДокументОбъект.Дата);
					ТекущийКурс          = СтруктураНовойВалюты.Курс;
					ТекущаяКратность     = СтруктураНовойВалюты.Кратность;
				КонецЕсли;
			Иначе
				ТекущаяВалюта = ВыборкаИзРезультатаЗапроса.ВалютаЦены;
				СтруктураТекущейВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущаяВалюта, ДокументОбъект.Дата);
				ТекущийКурс            = СтруктураТекущейВалюты.Курс;
				ТекущаяКратность       = СтруктураТекущейВалюты.Кратность;
			КонецЕсли;

			Цена = Цена * (1 + ВыборкаИзРезультатаЗапроса.ПроцентНаценкиПоУсловиямПродаж / 100);

			// Пересчитываем цену в единицу измерения количества
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				Если СтрокаТабличнойЧасти.ЕдиницаИзмерения <> ВыборкаИзРезультатаЗапроса.ЕдиницаИзмеренияЦены Тогда
					КоэффициентКоличества = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
					КоэффициентЦены       = ВыборкаИзРезультатаЗапроса.ЕдиницаИзмеренияЦены.Коэффициент;

					Если КоэффициентЦены <> 0 Тогда
						Цена = Цена * КоэффициентКоличества / КоэффициентЦены;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если ЭтоЦеныНоменклатуры Тогда
				Цена = ОкруглитьЦену(Цена, СтруктураЗначений.НовыйТипЦен.ПорядокОкругления,
				                     СтруктураЗначений.НовыйТипЦен.ОкруглятьВБольшуюСторону);
			КонецЕсли;

			// Пересчитываем цену в валюту документа
			Если СтруктураЗначений.НовыйВалютаДокумента <> ТекущаяВалюта Тогда
				Если Не ЗначениеЗаполнено(СтруктураЗначений.НовыйВалютаДокумента) Тогда

					ВалютаДокумента = глЗначениеПеременной("ВалютаУправленческогоУчета");
					СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
					КурсДокумента      = СтруктураВалюты.Курс;
					КратностьДокумента = СтруктураВалюты.Кратность;

					// В документе нет валюты, возьмем валюту регламентированного учета
					Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, 
														ТекущаяВалюта,
														ВалютаДокумента,
														ТекущийКурс,
														КурсДокумента,
														ТекущаяКратность,
														КратностьДокумента);

				Иначе

					Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, 
														ТекущаяВалюта,
														СтруктураЗначений.НовыйВалютаДокумента,
														ТекущийКурс,
														СтруктураЗначений.НовыйКурсДокумента,
														ТекущаяКратность,
														СтруктураЗначений.НовыйКратностьДокумента);

				КонецЕсли;
			КонецЕсли;

			// Пересчитываем цену по параметрам налогообложения.
			// Ставку определяем исходя из переданных параметров
			СтруктураЗначений.Свойство("ЕстьСтавкаНДСВТабличнойЧасти", НДСВСтроке);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
									СпособЗаполненияЦен,
									СтруктураЗначений.НовыйТипЦен.ЦенаВключаетНДС,
									СтруктураЗначений.НовыйУчитыватьНДС, СтруктураЗначений.НовыйСуммаВключаетНДС, 
									?(СтруктураЗначений.НовыйУчитыватьНДС, ?(НДСВСтроке = Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС), УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС)),0));

		КонецЕсли;

	Иначе // информации по цене этого товара нет в запросе 

		// Установим цену в ноль.
		СтрокаТабличнойЧасти.Цена = 0;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВСтрокеТабличнойЧасти()

// Рассчитываем сумму документа без учета скидки
//
// Параметры: 
//  ТабличнаяЧасть   - табличная часть, в котором надо посчитать сумму без скидки.
//
// Возвращаемое значение:
//  Сумма документа со всеми налогамии без учета скидки.
//
Функция ПолучитьСуммуДокументаБезСкидки(ТабличнаяЧасть) Экспорт

	СуммаДокумента = 0;

	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СуммаПоСтроке = Окр(СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество, 2);
		СуммаДокумента = СуммаДокумента + СуммаПоСтроке;
	КонецЦикла;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаБезСкидки()

// Формирует и выполняет запрос по ценовым диапазонам
// Параметры:
//  ТипЦен - тип цен, для которого нужно получить шкалу диапазонов
//  Дата - дата, на которую требуется получить актуальную шкалу
//
Функция ПолучитьЗапросПоЦеновымДиапазонам(ТипЦен, Дата) Экспорт

	ЗапросДиапазоны = Новый Запрос;

	ЗапросДиапазоны.УстановитьПараметр("Дата", Дата);
	ЗапросДиапазоны.УстановитьПараметр("ТипЦен", ТипЦен);

	ЗапросДиапазоны.Текст = "
	|ВЫБРАТЬ
	|	ДиапазоныЦен.ВерхняяГраница,
	|	ДиапазоныЦен.Цена,
	|	ДиапазоныЦен.Валюта
	|ИЗ
	|	РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦен
	|СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ДиапазоныЦенМакс.Период) КАК Период
	|	ИЗ
	|		РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦенМакс
	|	) КАК ДиапазоныЦенМакс
	|ПО
	|	ДиапазоныЦен.Период = ДиапазоныЦенМакс.Период
	|УПОРЯДОЧИТЬ ПО
	|	ДиапазоныЦен.ВерхняяГраница
	|";

	Возврат ЗапросДиапазоны.Выполнить();

КонецФункции // ПолучитьЗапросПоЦеновымДиапазонам()

// Получает цену по ценовым диапазонам.
// Параметры:
//  ТипЦен - тип цен, для которого нужно получить шкалу диапазонов.
//  Дата - дата, на которую требуется получить актуальную шкалу.
//  Цена - входящая цена.
//  Валюта - переменная, куда функция возвращает валюту найденной цены.
//
Функция ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, Дата, Знач Цена, Валюта, ВалютаВходящая) Экспорт

	Если ВалютаВходящая <> ТипЦен.БазовыйТипЦен.ВалютаЦены Тогда
		СтруктураКурсВходящейВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВходящая, Дата);
		СтруктураКурсНовойВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ТипЦен.БазовыйТипЦен.ВалютаЦены, Дата);

		Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, ВалютаВходящая, ТипЦен.БазовыйТипЦен.ВалютаЦены,
		                                  СтруктураКурсВходящейВалюты.Курс, СтруктураКурсНовойВалюты.Курс,
		                                  СтруктураКурсВходящейВалюты.Кратность, СтруктураКурсНовойВалюты.Кратность);
	КонецЕсли;

	РасчетнаяЦена = 0;

	Если Цена > 0 Тогда
		ЗапросДиапазоны = Новый Запрос;

		ЗапросДиапазоны.УстановитьПараметр("Дата", Дата);
		ЗапросДиапазоны.УстановитьПараметр("ТипЦен", ТипЦен);
		ЗапросДиапазоны.УстановитьПараметр("Цена", Цена);

		ЗапросДиапазоны.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДиапазоныЦен.Цена,
		|	ДиапазоныЦен.Валюта
		|ИЗ
		|	РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦен
		|СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ДиапазоныЦенМакс.Период) КАК Период
		|	ИЗ
		|		РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦенМакс
		|	) КАК ДиапазоныЦенМакс
		|ПО
		|	ДиапазоныЦен.Период = ДиапазоныЦенМакс.Период
		|ГДЕ &Цена < ДиапазоныЦен.ВерхняяГраница
		|УПОРЯДОЧИТЬ ПО
		|	ДиапазоныЦен.ВерхняяГраница
		|";

		Выборка = ЗапросДиапазоны.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			РасчетнаяЦена = Выборка.Цена;
			Валюта = Выборка.Валюта;
		КонецЕсли;
	КонецЕсли;

	Возврат РасчетнаяЦена;

КонецФункции // ПолучитьЦенуПоЦеновымДиапазонам()


#Если Клиент Тогда

// Функция формирует и выполняет запрос по спец. предложениям.
//
// Параметры:
//  ДатаДокумента - дата, на которую необходимо сформировать запрос.
//
// Возвращаемое значение:
//  ДеревоЗначений – дерево значений с актульными спец. предложениями и их комплектующими.
//
Функция ПолучитьЗапросПоСпецПредложениям(ДатаДокумента, МассивПолучателей)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ДеньНедели", Перечисления.ДниНедели[ДеньНедели(ДатаДокумента) - 1]);
	Запрос.УстановитьПараметр("ТекущееВремя", Дата(1, 1, 1, Час(ДатаДокумента), Минута(ДатаДокумента), Секунда(ДатаДокумента)));
	Запрос.УстановитьПараметр("МассивПолучателей", МассивПолучателей);

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецПредложения.Номенклатура КАК Номенклатура,
	|	СпецПредложения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СкидкиНатуральные.Качество КАК Качество,
	|	СпецПредложения.Комплектующая КАК Комплектующая,
	|	СпецПредложения.ХарактеристикаКомплектующей КАК ХарактеристикаКомплектующей,
	|	СпецПредложения.ЭтоБонус КАК ЭтоБонус,
	|	СпецПредложения.Количество КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		СкидкиНатуральные.СпецПредложение КАК СпецПредложение,
	|		СкидкиНатуральные.ХарактеристикаСпецПредложения КАК ХарактеристикаСпецПредложения,
	|		СкидкиНатуральные.Качество КАК Качество,
	|		МАКСИМУМ(СкидкиНатуральные.Регистратор) КАК Регистратор
	|	ИЗ
	|		РегистрСведений.СкидкиНоменклатурыНатуральные.СрезПоследних(&Дата,
	|		   ПолучательСкидки В (&МассивПолучателей)) КАК СкидкиНатуральные
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|		ПО СкидкиНатуральные.Регистратор = ВремяДействия.Регистратор
	|	ГДЕ
	|		СкидкиНатуральные.СпецПредложение <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И (ВремяДействия.Регистратор Есть NULL
	|		ИЛИ (ВремяДействия.ДеньНедели = &ДеньНедели
	|		И &ТекущееВремя Между ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания
	|		И (СкидкиНатуральные.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ СкидкиНатуральные.ДатаОкончания >= &Дата)))
	|	СГРУППИРОВАТЬ ПО
	|		СпецПредложение,
	|		ХарактеристикаСпецПредложения,
	|		Качество
	|	) КАК СкидкиНатуральные
	|СОЕДИНЕНИЕ
	|	РегистрСведений.СпецПредложения КАК СпецПредложения
	|	ПО СкидкиНатуральные.Регистратор = СпецПредложения.Регистратор
	|	И СкидкиНатуральные.СпецПредложение = СпецПредложения.Номенклатура
	|	И СкидкиНатуральные.ХарактеристикаСпецПредложения = СпецПредложения.ХарактеристикаНоменклатуры
	|ИТОГИ
	|	МИНИМУМ(СпецПредложения.Комплектующая) КАК Комплектующая,
	|	МИНИМУМ(СпецПредложения.ХарактеристикаКомплектующей) КАК ХарактеристикаКомплектующей,
	|	МИНИМУМ(СпецПредложения.ЭтоБонус) КАК ЭтоБонус,
	|	СУММА(СпецПредложения.Количество) КАК Количество
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество
	|";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции // ПолучитьЗапросПоСпецПредложениям()

// Проверяет табличную часть на возможность составить спец. предложения.
//
// Параметры:
//  ТоварыНазвание - название ТЧ "Товары" в документах продажи.
//  ДокументОбъект - документ-объект, из которого вызвана процедура
//  ТолькоСерые - переменная, куда функция вернет значение Истина,
//   если можно составить только "серые" комплекты.
//
// Возвращаемое значение:
//  Булево - Истина, если можно составить комплекты, в том числе "серые".
//
Функция ЕстьСпецПредложения(ТоварыНазвание, ДокументОбъект, ТолькоСерые, ВидРеализации) Экспорт

	МаксИНТ = 999999999999;

	Товары = ДокументОбъект[ТоварыНазвание];
	ТолькоСерые = Ложь;
	МожноСоставитьКомплекты = Ложь;

	//При работе с качеством будем поступать следующим образом:
	//Если в документе есть качество - то выполняем полноценную работу с качеством;
	//Если в документе качества нет - то бонусы ищем только с качеством <Новый>.
	ЕстьКачество = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", ДокументОбъект.Метаданные(), ТоварыНазвание);
	КачествоНовый = Справочники.Качество.Новый;

	//В ДеревоЗначений поместим все актуальные бонусные комплекты и их комплектующие.
	ДЗСпецПредложения = ПолучитьЗапросПоСпецПредложениям(ДокументОбъект.Дата,
	   ПолучитьМассивПолучателейСкидки(ВидРеализации, ДокументОбъект));

	Для Каждого Комплект0 Из ДЗСпецПредложения.Строки Цикл // определена Номенклатура.
		Для Каждого Комплект1 Из Комплект0.Строки Цикл // определена Характеристика.
			Для Каждого Комплект Из Комплект1.Строки Цикл // определено Качество.
				ЕстьВсеКомплектующие = Истина;
				МаксКоличествоКомплектов = МаксИНТ;

				Для Каждого Комлектующие Из Комплект.Строки Цикл
					Если Не Комлектующие.ЭтоБонус Тогда
						Если ЕстьКачество Или Комлектующие.Качество = КачествоНовый Тогда
							СтруктураСтроки = Новый Структура;
							СтруктураСтроки.Вставить("Номенклатура" , Комлектующие.Комплектующая);
							СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

							Если ЕстьКачество Тогда
								СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
							КонецЕсли;

							СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);
						Иначе
							СтрокаТабличнойЧасти = Неопределено;
						КонецЕсли;

						Если СтрокаТабличнойЧасти <> Неопределено Тогда
							КолвоВЕдиницахХранения = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
							МаксКоличествоКомплектов = Мин(МаксКоличествоКомплектов, Цел(КолвоВЕдиницахХранения/ Комлектующие.Количество));
						Иначе
							ЕстьВсеКомплектующие = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

				//Если в ТЧ содержатся все комплектующие текущего комплекта,
				//и можно составить хотя бы один комплект - 
				//дальше считать нет смысла.
				Если ЕстьВсеКомплектующие И МаксКоличествоКомплектов > 0 Тогда
					ТолькоСерые = Ложь;
					Возврат Истина;
				ИначеЕсли МаксКоличествоКомплектов <> МаксИНТ Тогда //Серые бонусы
					МожноСоставитьКомплекты = Истина;
					ТолькоСерые = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат МожноСоставитьКомплекты;

КонецФункции // ЕстьСпецПредложения()

// Рассчитывает возможные натуральные скидки (бонусные комплекты).
// Если такие есть, то открывает форму для подбора бонусных комплектов.
//
// Параметры:
//  ТоварыНазвание - название ТЧ "Товары" в документах продажи.
//  ДокументОбъект - документ-объект, из которого вызвана процедура
//
Процедура РассчитатьНатуральныеСкидки(ТоварыНазвание, ДокументОбъект, ФормаДокумента, ВидРеализации) Экспорт

	МаксИНТ = 999999999999;

	Товары = ДокументОбъект[ТоварыНазвание];

	//При работе с качеством будем поступать следующим образом:
	//Если в документе есть качество - то выполняем полноценную работу с качеством;
	//Если в документе качества нет - то бонусы ищем только с качеством <Новый>.
	ЕстьКачество = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", ДокументОбъект.Метаданные(), ТоварыНазвание);
	КачествоНовый = Справочники.Качество.Новый;

	//В ДеревоЗначений поместим все актуальные бонусные комплекты и их комплектующие.
	ДЗСпецПредложения = ПолучитьЗапросПоСпецПредложениям(ДокументОбъект.Дата,
	   ПолучитьМассивПолучателейСкидки(ВидРеализации, ДокументОбъект));

	НачатьВыборкуЗаново = Истина;
	Пока НачатьВыборкуЗаново Цикл
		НачатьВыборкуЗаново = Ложь;

		//Создадим ДеревоЗначений для хранения доступных бонусных комплектов.
		ДЗНовыеБонусы = Новый ДеревоЗначений;
		ДЗНовыеБонусы.Колонки.Добавить("Номенклатура");
		ДЗНовыеБонусы.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ДЗНовыеБонусы.Колонки.Добавить("Качество");
		ДЗНовыеБонусы.Колонки.Добавить("Количество");
		ДЗНовыеБонусы.Колонки.Добавить("Комплектующая");
		ДЗНовыеБонусы.Колонки.Добавить("ХарактеристикаКомплектующей");
		ДЗНовыеБонусы.Колонки.Добавить("ЭтоБонус");
		ДЗНовыеБонусы.Колонки.Добавить("СерыйБонус");
		ДЗНовыеБонусы.Колонки.Добавить("КоличествоЕсть");

		Для Каждого Комплект0 Из ДЗСпецПредложения.Строки Цикл // определена Номенклатура.
			Для Каждого Комплект1 Из Комплект0.Строки Цикл // определена Характеристика.
				Для Каждого Комплект Из Комплект1.Строки Цикл // определено Качество.
					ЕстьВсеКомплектующие = Истина;
					МаксКоличествоКомплектов = МаксИНТ;

					Для Каждого Комлектующие Из Комплект.Строки Цикл
						Если Не Комлектующие.ЭтоБонус Тогда
							Если ЕстьКачество Или Комлектующие.Качество = КачествоНовый Тогда
								СтруктураСтроки = Новый Структура;
								СтруктураСтроки.Вставить("Номенклатура" , Комлектующие.Комплектующая);
								СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

								Если ЕстьКачество Тогда
									СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
								КонецЕсли;

								СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);
							Иначе
								СтрокаТабличнойЧасти = Неопределено;
							КонецЕсли;

							Если СтрокаТабличнойЧасти <> Неопределено Тогда
								КолвоВЕдиницахХранения = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
								МаксКоличествоКомплектов = Мин(МаксКоличествоКомплектов, Цел(КолвоВЕдиницахХранения/ Комлектующие.Количество));
							Иначе
								ЕстьВсеКомплектующие = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

					//Если в документе содержатся все комплектующие текущего комплекта,
					//и можно составить хотя бы один комплект - 
					//добавим комплект и его комплектующие в Дерево доступных бонусных комплектов.
					Если ЕстьВсеКомплектующие И МаксКоличествоКомплектов > 0 Тогда
						НовыйБонус = ДЗНовыеБонусы.Строки.Добавить();
						НовыйБонус.Номенклатура = Комплект.Номенклатура;
						НовыйБонус.ХарактеристикаНоменклатуры = Комплект.ХарактеристикаНоменклатуры;
						НовыйБонус.Качество = Комплект.Качество;
						НовыйБонус.Количество = МаксКоличествоКомплектов;
						НовыйБонус.СерыйБонус = Ложь;

						Для Каждого Комлектующие Из Комплект.Строки Цикл
							НовыйБонусКомплектующие = НовыйБонус.Строки.Добавить();
							НовыйБонусКомплектующие.Качество = Комлектующие.Качество;
							НовыйБонусКомплектующие.Количество = Комлектующие.Количество;
							НовыйБонусКомплектующие.Комплектующая = Комлектующие.Комплектующая;
							НовыйБонусКомплектующие.ХарактеристикаКомплектующей = Комлектующие.ХарактеристикаКомплектующей;
							НовыйБонусКомплектующие.ЭтоБонус = Комлектующие.ЭтоБонус;
							НовыйБонусКомплектующие.КоличествоЕсть = НовыйБонусКомплектующие.Количество;
						КонецЦикла;
					ИначеЕсли МаксКоличествоКомплектов <> МаксИНТ Тогда //Серые бонусы
						НовыйБонус = ДЗНовыеБонусы.Строки.Добавить();
						НовыйБонус.Номенклатура = Комплект.Номенклатура;
						НовыйБонус.ХарактеристикаНоменклатуры = Комплект.ХарактеристикаНоменклатуры;
						НовыйБонус.Качество = Комплект.Качество;
						НовыйБонус.Количество = 0;
						НовыйБонус.СерыйБонус = Истина;

						Для Каждого Комлектующие Из Комплект.Строки Цикл
							НовыйБонусКомплектующие = НовыйБонус.Строки.Добавить();
							НовыйБонусКомплектующие.Качество = Комлектующие.Качество;
							НовыйБонусКомплектующие.Количество = Комлектующие.Количество;
							НовыйБонусКомплектующие.Комплектующая = Комлектующие.Комплектующая;
							НовыйБонусКомплектующие.ХарактеристикаКомплектующей = Комлектующие.ХарактеристикаКомплектующей;
							НовыйБонусКомплектующие.ЭтоБонус = Комлектующие.ЭтоБонус;
							НовыйБонусКомплектующие.СерыйБонус = Истина;

							Если ЕстьКачество Или Комлектующие.Качество = КачествоНовый Тогда
								СтруктураСтроки = Новый Структура;
								СтруктураСтроки.Вставить("Номенклатура" , Комлектующие.Комплектующая);
								СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

								Если ЕстьКачество Тогда
									СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
								КонецЕсли;

								СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);
							Иначе
								СтрокаТабличнойЧасти = Неопределено;
							КонецЕсли;

							Если СтрокаТабличнойЧасти <> Неопределено Тогда
								НовыйБонусКомплектующие.КоличествоЕсть = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
							Иначе
								НовыйБонусКомплектующие.КоличествоЕсть = 0;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		//Если есть доступные бонусные комплекты - откроем форму для выбора комплекта.
		Если ДЗНовыеБонусы.Строки.Количество() > 0 Тогда
			ФормаВыбораБонуса = ПолучитьОбщуюФорму("ВыборБонуснойНоменклатуры");
			ФормаВыбораБонуса.СпецПредложения = ДЗНовыеБонусы.Скопировать();

			ВыбранныйБонус = ФормаВыбораБонуса.ОткрытьМодально();

			//Если пользователь выбрал бонусный комплект,
			//то заменим комплектующие из таблицы документа этим комплектом,
			//иначе - вернемся в форму документа.
			Если ВыбранныйБонус <> Неопределено Тогда
				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить("Номенклатура"              , ВыбранныйБонус.Номенклатура);
				СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", ВыбранныйБонус.ХарактеристикаНоменклатуры);
				СтруктураСтроки.Вставить("Качество"                  , ВыбранныйБонус.Качество);

				МассивБонусов = ДЗНовыеБонусы.Строки.НайтиСтроки(СтруктураСтроки, Ложь);
				Бонус = МассивБонусов[0];

				Бонус.Количество = ВыбранныйБонус.ВыбранноеКоличество;

				//Уберем комплектующие бонусного комплекта из таблицы документа.
				Для Каждого Комлектующие Из Бонус.Строки Цикл
					Если Не Комлектующие.ЭтоБонус Тогда
						СтруктураСтроки = Новый Структура;
						СтруктураСтроки.Вставить("Номенклатура"              , Комлектующие.Комплектующая);
						СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

						Если ЕстьКачество Тогда
							СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
						КонецЕсли;

						СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);

						//Переведем строку в количество за единицу хранения остатков.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
						СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;

						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Комлектующие.Количество * Бонус.Количество;

						//Если в строке количество стало нулевым, то строку надо удалить,
						//иначе - нужно вызвать обработчик события при изменении Количества.
						Если СтрокаТабличнойЧасти.Количество = 0 Тогда
							ФормаДокумента.УдалениеСтрокиПрограммное(СтрокаТабличнойЧасти);
						Иначе
							ФормаДокумента.ИзменениеСтрокиПрограммное(СтрокаТабличнойЧасти, "Количество");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить("Номенклатура"              , Бонус.Номенклатура);
				СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Бонус.ХарактеристикаНоменклатуры);

				Если ЕстьКачество Тогда
					СтруктураСтроки.Вставить("Качество", Бонус.Качество);
				КонецЕсли;

				НовыйБонус = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);

				//Если такого бонусного комплекта в таблице документа нет, то добавим его,
				//иначе - просто увеличим количество.
				Если НовыйБонус = Неопределено Тогда
					НовыйБонус = Товары.Добавить();
					НовыйБонус.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ДокументОбъект);
					НовыйБонус.Номенклатура = Бонус.Номенклатура;
					НовыйБонус.ХарактеристикаНоменклатуры = Бонус.ХарактеристикаНоменклатуры;
					НовыйБонус.Количество = Бонус.Количество;
					НовыйБонус.ЕдиницаИзмерения = НовыйБонус.Номенклатура.ЕдиницаХраненияОстатков;

					Если ЕстьКачество Тогда
						НовыйБонус.Качество = Бонус.Качество;
					КонецЕсли;
				Иначе
					НовыйБонус.Количество = НовыйБонус.Количество + Бонус.Количество;
				КонецЕсли;

				//Нужно вызвать обработчик события при изменении Номенклатуры.
				ФормаДокумента.ИзменениеСтрокиПрограммное(НовыйБонус, "Номенклатура");

				//Запустим проверку на возможные бонусные комплекты еще раз.
				НачатьВыборкуЗаново = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура проверяет, можно ли покупателю заменить дисконтную карту на карту более высокого уровня.
// Если такая замена возможна, то выдается соответствующее предупреждение.
//
// Параметры:
//  ДокументОбъект - Объект документа, из которого вызвана процедура.
//  УчетнаяПолитика - Структура, содержащая данные учетной политики.
//
Процедура ПроверитьВозможностьЗаменыДисконтнойКарты(ДокументОбъект, УчетнаяПолитика) Экспорт

	Если ДокументОбъект.Проведен
	   И ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта)
	   И УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте
	   И УчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам
	   И УчетнаяПолитика.СпособИспользованияНакопительныхСкидок = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоВладельцуДисконтнойКарты Тогда

		ПериодНакопления = ОбработкаТабличныхЧастей.ПолучитьПериодРасчетаНакопительныхСкидок(ДокументОбъект.Дата, УчетнаяПолитика);

		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РегПродажи.СуммаОборот КАК Сумма,
		|	РегПороги.ЗначениеПорога КАК ЗначениеПорога
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|	   ВладелецДисконтнойКарты = &ВладелецДисконтнойКарты) КАК РегПродажи
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Пороги.НижняяГраница,
		|		Пороги.ЗначениеПорога
		|	ИЗ
		|		РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|	) КАК ПорогиМакс
		|	ПО
		|		Пороги.Период = ПорогиМакс.Период
		|) КАК РегПороги
		|ПО
		|	РегПороги.НижняяГраница <= ЕСТЬNULL(РегПродажи.СуммаОборот, 0)
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РегПороги.НижняяГраница) КАК НижняяГраница
		|	ИЗ
		|		РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|		   ВладелецДисконтнойКарты = &ВладелецДисконтнойКарты) КАК РегПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Пороги.НижняяГраница
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|			ИЗ
		|				РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|			) КАК ПорогиМакс
		|		ПО
		|			Пороги.Период = ПорогиМакс.Период
		|		) КАК РегПороги
		|	ПО
		|		РегПороги.НижняяГраница <= ЕСТЬNULL(РегПродажи.СуммаОборот, 0)
		|	) КАК РегПорогиМакс
		|ПО
		|	РегПорогиМакс.НижняяГраница = РегПороги.НижняяГраница
		|");

		Запрос.УстановитьПараметр("ДатаНач", ПериодНакопления.ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ПериодНакопления.ДатаКон);
		Запрос.УстановитьПараметр("ВладелецДисконтнойКарты", ДокументОбъект.ДисконтнаяКарта.ВладелецКарты);

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекВидКарты = ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты;
			Если Выборка.ЗначениеПорога <> ТекВидКарты Тогда
				Предупреждение("Сумма, накопленная покупателем, составила " + (ОбщегоНазначения.ФорматСумм(Выборка.Сумма,
				глЗначениеПеременной("ВалютаУправленческогоУчета")))+"." + Символы.ПС + Символы.ПС
				   + "Покупателю можно обменять дисконтную карту" + Символы.ПС
				   + """" + СокрЛП(ТекВидКарты) + """ на """ + СокрЛП(Выборка.ЗначениеПорога) + """.");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьВозможностьЗаменыДисконтнойКарты()

#КонецЕсли

Процедура ПриЗаписиУстановкаЦенОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	// < 17.11.16 Вялов - Мегаплан № 3934
	// По распоряжению Юрий Агафонов - письмо 17.11.16
	
	//// Ставим продаванам задачи-уведомления о новых ценах
	//// < 10.11.16 Вялов - Мегаплан № 3934 - все установки цен (кроме опта) - "на завтра"...
	////Если НачалоДня(Источник.Дата) = НачалоДня(ТекущаяДата()) Тогда
	//НаДату = Дата(1,1,1);
	//Если НачалоДня(Источник.Дата) = НачалоДня(ТекущаяДата()) Тогда	// на сегодня
	//	НаДату = НачалоДня(ТекущаяДата());
	//ИначеЕсли НачалоДня(Источник.Дата) = НачалоДня(КонецДня(ТекущаяДата()) + 1) Тогда   // на завтра
	//	НаДату = НачалоДня(КонецДня(ТекущаяДата()) + 1);
	//КонецЕсли;	
	//Если НаДату <> Дата(1,1,1) Тогда
	//// 10.11.16 Вялов - Мегаплан № 3934 >
	//
	//	Для Каждого ст из Источник.ТипыЦен Цикл
	//		Если ст.ТипЦен.Код = "000000001" Тогда
	//			Продаваны = Справочники.Пользователи.Выбрать(Справочники.Пользователи.НайтиПоНаименованию("Магазины",Истина));
	//			Пока Продаваны.Следующий() Цикл
	//				Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	//				// < 10.11.16 Вялов - Мегаплан № 3934 
	//				//Задача.Дата = ТекущаяДата();
	//				Задача.Дата = НаДату;
	//				// 10.11.16 Вялов - Мегаплан № 3934 >
	//				Задача.Исполнитель = Продаваны.Ссылка;
	//				Задача.Наименование = "Необходимо распечатать новые цены. Ценовой приказ № "+Источник.Номер;
	//				Задача.Оповещение=Истина;
	//				// < 10.11.16 Вялов - Мегаплан № 3934 
	//				//Задача.СрокИсполнения = ТекущаяДата()+900;
	//				//Задача.СрокОповещения = ТекущаяДата()+300;
	//				Задача.СрокИсполнения = НаДату+900;
	//				Задача.СрокОповещения = НаДату+300;					
	//				// 10.11.16 Вялов - Мегаплан № 3934 >
	//				Задача.Объект = Источник.Ссылка;
	//				Задача.Записать();
	//			КонецЦикла;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	// 17.11.16 Вялов - Мегаплан № 3934 >

	
КонецПроцедуры


//Блок Курсовой наценки

// Процедура анализа курсовой наценки (Выполняется ночью регламентным заданием "НочнаяУстановкаКурсовойНац" или в момент проведение ПТУ не в валюте "руб.")
//
// Параметры:
//           - "ТоварСписок" - массив элементов справочника "Номенклатура" (Обязательный) 
//
Процедура АнализКурсовойНаценки(ТоварСписок, Источник = Неопределено, ИзОбработки = Ложь) Экспорт
	
	//++ Кузнецов С.А. - Исключаем номенклатуру из групп указанных в регистре "ИсключенияИзАнализаКурсовойНаценки"  - 04.03.2016
	//++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016
	//++ Кузнецов С.А. - Добавляем признак "Используется рекомендованная наценка" - 06.06.2016
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КурсоваяНац.Номенклатура,
	|	МАКСИМУМ(КурсоваяНац.Наценка) КАК Наценка,
	|	ЕСТЬNULL(МАКСИМУМ(КурсоваяНацВчера.Наценка), 0) КАК НаценкаВчера,
	|	ЕСТЬNULL(МАКСИМУМ(Порог.ПроцентРозница), 1) КАК Порог,
	|	ЕСТЬNULL(МАКСИМУМ(Порог.ПроцентЗакупка), 1) КАК ПорогЗакупка,
	|	ВЫБОР КОГДА ЛбАртем.Номенклатура ЕСТЬ NULL Тогда 0 Иначе ЕстьNULL(МАКСИМУМ(ЛбАртем.Цена), 0) Конец КАК Цена,
	|	ЕстьNULL(МАКСИМУМ(СЦЗ.Цена), 0) КАК СЦЗ_Цена,
	|   ЕстьNULL(МАКСИМУМ(ЛБ.Цена), 0) КАК ЦенаЛБ,
	|   ЕстьNULL(МАКСИМУМ(РНаценка.Наценка), 32) КАК РекомендованнаяНаценка,
	|   ЕСТЬNULL(МАКСИМУМ(РНаценка.Наценка), 0) КАК ИспользуетсяРекомендованнаяНаценка
	|ИЗ
	|	РегистрСведений.КурсоваяНаценка.СрезПоследних(, ) КАК КурсоваяНац
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсоваяНаценка.СрезПоследних(&Вчера, ) КАК КурсоваяНацВчера
	|		ПО КурсоваяНац.Номенклатура = КурсоваяНацВчера.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ЛбАрт) КАК ЛбАртем
	|		ПО КурсоваяНац.Номенклатура = ЛбАртем.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &СЦЗ) КАК СЦЗ
	|		ПО КурсоваяНац.Номенклатура = СЦЗ.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ЛБ) КАК ЛБ
	|		ПО КурсоваяНац.Номенклатура = ЛБ.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РекомендованнаяНаценка.СрезПоследних(&ТекДата, ) КАК РНаценка
	|		ПО КурсоваяНац.Номенклатура.Родитель = РНаценка.Номенклатура,
	|	РегистрСведений.КурсоваяНаценкаПорог.СрезПоследних(, ) КАК Порог
	|ГДЕ 
	|   НЕ КурсоваяНац.Номенклатура В Иерархии (Выбрать ГруппаНоменклатуры Из РегистрСведений.ИсключенияИзАнализаКурсовойНаценки) И ";
	
	Если (ТоварСписок<>Неопределено) И (ТоварСписок.Количество())>0 Тогда
		Запрос.Текст = Запрос.Текст+"
		|КурсоваяНац.Номенклатура В (&СписокНом)
		|СГРУППИРОВАТь ПО 
		|КурсоваяНац.Номенклатура,
		|ЛбАртем.Номенклатура";
		Запрос.УстановитьПараметр("СписокНом",ТоварСписок);
	ИначеЕсли ТоварСписок=Неопределено Тогда
		Запрос.Текст = Запрос.Текст+"
		//++ Кузнецов С.А. - Отрицательную наценку убираем!!! - 10.06.2016
		//++ Кузнецов С.А. - Отрицательную наценку тоже берем - 24.03.2016
		|КурсоваяНац.Наценка > 0		
		//|КурсоваяНац.Наценка <> 0		
		//-- Кузнецов С.А. - 24.03.2016		
		//-- Кузнецов С.А. - 10.06.2016		
		|СГРУППИРОВАТь ПО 
		|КурсоваяНац.Номенклатура,
		|ЛбАртем.Номенклатура";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Вчера",НачалоДня(ТекущаяДата()-86400));
	Запрос.УстановитьПараметр("ЛбАрт",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000020")); // "5LB_Artem"
	Запрос.УстановитьПараметр("СЦЗ",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000015")); // "СредняяЦенаЗакупки"
	Запрос.УстановитьПараметр("ЛБ",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001")); // "5LB"
	
	Рез = Запрос.Выполнить();	
	//-- Кузнецов С.А. - 04.03.2016	/ 31.05.2016 / 06.06.2016
	
	
	Если (Рез.Пустой()) И (Не ИзОбработки) Тогда
		возврат;
	КонецЕсли;
	
	ТабКУстановке = Новый ТаблицаЗначений;
	ТабКУстановке.Колонки.Добавить("Номенклатура");
	ТабКУстановке.Колонки.Добавить("Цена");
	ТабКУстановке.Колонки.Добавить("СЦЗ_Цена");
	ТабКУстановке.Колонки.Добавить("ЦенаЛБ");
	ТабКУстановке.Колонки.Добавить("Наценка");
	ТабКУстановке.Колонки.Добавить("НаценкаСЦЗ");
	//++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016 / 06.06.2016
	ТабКУстановке.Колонки.Добавить("РекомендованнаяНаценка");
	ТабКУстановке.Колонки.Добавить("ИспользуетсяРекомендованнаяНаценка");
	//-- Кузнецов С.А. - 31.05.2016 / 06.06.2016
	
	Выб = Рез.Выбрать();
	Пока Выб.Следующий() Цикл
		Если (Выб.Порог = 0) ИЛИ (Выб.ПорогЗакупка=0) Тогда
			Прервать;
		КонецЕсли;
		
		НовСтр = ТабКУстановке.Добавить();
		НовСтр.Номенклатура = Выб.Номенклатура;
		НовСтр.Цена = Выб.Цена;
		НовСтр.СЦЗ_Цена = Выб.СЦЗ_Цена;
		НовСтр.ЦенаЛБ = Выб.ЦенаЛБ;
		НовСтр.Наценка = 0;
		НовСтр.НаценкаСЦЗ = 0;		
		//++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016 / 06.06.2016
		НовСтр.РекомендованнаяНаценка = Выб.РекомендованнаяНаценка;
		НовСтр.ИспользуетсяРекомендованнаяНаценка = Выб.ИспользуетсяРекомендованнаяНаценка;
		//-- Кузнецов С.А. - 31.05.2016 / 06.06.2016
				
		ЗаходилиРоз = Ложь;
		ЗаходилиОпт = Ложь;
		
		// Для Розницы
		ПрошлоеДеление = Выб.НаценкаВчера/Выб.Порог;
		ТекущееДеление = Выб.Наценка/Выб.Порог;
		Если ПрошлоеДеление = 0 Тогда //Только текущую наценку анализируем
			Если Цел(ТекущееДеление) >1 Тогда //Наценка = Наценке,т.к превысили порог ))
				НовСтр.Наценка = Выб.Наценка;
				ЗаходилиРоз = Истина;
			КонецЕсли;
		ИначеЕсли (Цел(ПрошлоеДеление)<>Цел(ТекущееДеление)) 
			И 
			//++ Кузнецов С.А. - Уменьшаем цену в случае уменьшения курсы (с учетом порога) - 24.03.2016
			//(Выб.Наценка>Выб.Порог)
			(?(Выб.Наценка < 0, -1*Выб.Наценка, Выб.Наценка)>Выб.Порог)
			//-- Кузнецов С.А. - 24.03.2016
			Тогда //джигурдим (хотя и не джигурдим)) )
			НовСтр.Наценка = Выб.Наценка;
			ЗаходилиРоз = Истина;
		ИначеЕсли (Выб.НаценкаВчера=Выб.Наценка) 
			И 
		    //++ Кузнецов С.А. - Уменьшаем цену в случае уменьшения курсы (с учетом порога) - 24.03.2016
			//(Выб.Наценка>Выб.Порог) 
			(?(Выб.Наценка < 0, -1*Выб.Наценка, Выб.Наценка)>Выб.Порог)
			//-- Кузнецов С.А. - 24.03.2016
			Тогда 
			НовСтр.Наценка = Выб.Наценка;
			ЗаходилиРоз = Истина;
		КонецЕсли;
		
		
		// Для ОПТа - "СЦЗ_Машина"
		ПрошлоеДелениеЗак = Выб.НаценкаВчера/Выб.ПорогЗакупка;
		ТекущееДелениеЗак = Выб.Наценка/Выб.ПорогЗакупка;
		Если ПрошлоеДелениеЗак = 0 Тогда //Только текущую наценку анализируем
			Если Цел(ТекущееДелениеЗак) >1 Тогда //Наценка = Наценке,т.к превысили порог ))
				Если НовСтр = Неопределено Тогда 
					НовСтр = ТабКУстановке.Добавить();
					НовСтр.Номенклатура = Выб.Номенклатура;
					НовСтр.СЦЗ_Цена = Выб.СЦЗ_Цена;
					НовСтр.НаценкаСЦЗ = Выб.Наценка;
				Иначе
					НовСтр.НаценкаСЦЗ = Выб.Наценка;
				КонецЕсли;
				ЗаходилиОпт = Истина;
			ИначеЕсли Выб.Наценка>Выб.ПорогЗакупка Тогда
				Если НовСтр = Неопределено Тогда 
					НовСтр = ТабКУстановке.Добавить();
					НовСтр.Номенклатура = Выб.Номенклатура;
					НовСтр.СЦЗ_Цена = Выб.СЦЗ_Цена;
					НовСтр.НаценкаСЦЗ = Выб.Наценка;
				Иначе
					НовСтр.НаценкаСЦЗ = Выб.Наценка;
				КонецЕсли;
				ЗаходилиОпт = Истина;
			КонецЕсли;
		ИначеЕсли (Цел(ПрошлоеДелениеЗак)<>Цел(ТекущееДелениеЗак)) 
			И 
		    //++ Кузнецов С.А. - Уменьшаем цену в случае уменьшения курсы (с учетом порога) - 24.03.2016
			//(Выб.Наценка>Выб.ПорогЗакупка) 
			(?(Выб.Наценка < 0, -1*Выб.Наценка, Выб.Наценка)>Выб.ПорогЗакупка)
			//-- Кузнецов С.А. - 24.03.2016
			Тогда //джигурдим (хотя и не джигурдим)) )
			Если НовСтр = Неопределено Тогда 
				НовСтр = ТабКУстановке.Добавить();
				НовСтр.Номенклатура = Выб.Номенклатура;
				НовСтр.СЦЗ_Цена = Выб.СЦЗ_Цена;
				НовСтр.НаценкаСЦЗ = Выб.Наценка;
			Иначе
				НовСтр.НаценкаСЦЗ = Выб.Наценка;
			КонецЕсли;
			ЗаходилиОпт = Истина;
		ИначеЕсли (Выб.НаценкаВчера=Выб.Наценка) 
			И 			 
		    //++ Кузнецов С.А. - Уменьшаем цену в случае уменьшения курсы (с учетом порога) - 24.03.2016
			//(Выб.Наценка>Выб.ПорогЗакупка)
			(?(Выб.Наценка < 0, -1*Выб.Наценка, Выб.Наценка)>Выб.ПорогЗакупка)
			//-- Кузнецов С.А. - 24.03.2016
			Тогда 
			Если НовСтр = Неопределено Тогда 
				НовСтр = ТабКУстановке.Добавить();
				НовСтр.Номенклатура = Выб.Номенклатура;
				НовСтр.СЦЗ_Цена = Выб.СЦЗ_Цена;
				НовСтр.НаценкаСЦЗ = Выб.Наценка;
			Иначе
				НовСтр.НаценкаСЦЗ = Выб.Наценка;
			КонецЕсли;
			ЗаходилиОпт = Истина;
		КонецЕсли;
	
	КонецЦикла;	
	
	Если (ТабКУстановке.Количество()=0) И (Не ИзОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	ЛБ = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
	ЛБАрт = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000020");
	СЦЗ = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000021");   // СЦЗ_Машина (Для ОПТа)
	
	
	// < 11.11.16 Вялов - Магалан - Задача № 3934 (пункты 1-2)
	// "Внести корректировки в механизм изменения цен по итогам совещания 07.11.16"
	// т.к. нужно ОПТ делать "сегодня", а РОЗНИЦА - завтра, то разделем алгоритм на два документа (раньше было в одном документе!)...
	
	//Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	//// 07.11.16 Вялов - задача Мегаплан 3934
	//Док.Дата = ТекущаяДата();
	////Док.Дата = ОбщегоНазначения5LB.ПолучитьВремяПоследнегоДокументаНаДату("УстановкаЦенНоменклатуры", КонецДня(ТекущаяДата()) + 1) - 1;
	//Если ТоварСписок = Неопределено Тогда
	//	Док.ЗаписыватьОперативно = Истина;
	//Иначе
	//	Док.ЗаписыватьОперативно = Ложь;
	//КонецЕсли; 
	////Док.Дата = КонецДня(ТекущаяДата());

	//Док.НеПроводитьНулевыеЗначения=Истина;
	//	
	//НовДокСтр = Док.ТипыЦен.Добавить();
	//НовДокСтр.ТипЦен = ЛБ;
	//НовДокСтр = Док.ТипыЦен.Добавить();
	//НовДокСтр.ТипЦен = СЦЗ;
	//НовДокСтр = Док.ТипыЦен.Добавить();
	//НовДокСтр.ТипЦен = ЛБАрт;

	//Для Каждого Выб Из ТабКУстановке Цикл
	//	
	//	Если (Выб.Цена = 0) И (НЕ ЗначениеЗаполнено(Выб.Номенклатура.НоменклатурнаяГруппа)) Тогда   //фигачим 5LB_Artem
	//		НовДокСтрТов = Док.Товары.Добавить();
	//		НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
	//		НовДокСтрТов.Номенклатура = Выб.Номенклатура;
	//		НовДокСтрТов.ТипЦен = ЛБАрт;
	//		НовДокСтрТов.Валюта = ЛБАрт.ВалютаЦены;
	//		ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,Выб.Номенклатура);
	//		Пока ЕдВыб.Следующий() Цикл
	//			Если Выб.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
	//				НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
	//				прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		//++ Кузнецов С.А. - В ценообразовании везде 32% - 24.03.2016
	//	    //++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016
	//	    //++ Кузнецов С.А. - Установка цен в зависимости от "Используется рекомендованная наценка" - 31.05.2016
	//		Если Выб.ИспользуетсяРекомендованнаяНаценка Тогда
	//			НовДокСтрТов.Цена = ОКР(((Выб.СЦЗ_Цена/100)* Выб.РекомендованнаяНаценка)+Выб.СЦЗ_Цена,-1,1);
	//		Иначе
	//	        цена_32 = ОКР(((Выб.СЦЗ_Цена/100)*32)+Выб.СЦЗ_Цена,-1,1);
	//			НовДокСтрТов.Цена = цена_32;
	//		КонецЕсли;
	//		//-- Кузнецов С.А. - 24.03.2016 / 31.05.2016 / 06.06.2016
	//		
	//		Если ЗначениеЗаполнено(НовДокСтрТов.ЕдиницаИзмерения) Тогда
	//			Если НовДокСтрТов.ЕдиницаИзмерения.Коэффициент>1 Тогда 
	//				ТМП = Окр(НовДокСтрТов.Цена/НовДокСтрТов.ЕдиницаИзмерения.Коэффициент)*НовДокСтрТов.ЕдиницаИзмерения.Коэффициент;
	//				НовДокСтрТов.Цена = ТМП;
	//			КонецЕсли;
	//		КонецЕсли;
	//		ЦенаЛБАрт = НовДокСтрТов.Цена;	
	//	КонецЕсли;
	//			
	//	НовДокСтрТов = Док.Товары.Добавить();
	//	НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
	//	НовДокСтрТов.Номенклатура = Выб.Номенклатура;
	//	НовДокСтрТов.ТипЦен = ЛБ;
	//	НовДокСтрТов.Валюта = ЛБ.ВалютаЦены;
	//	ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,Выб.Номенклатура);
	//	Пока ЕдВыб.Следующий() Цикл
	//		Если Выб.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
	//			НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
	//			прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Если (Выб.Цена = 0) И (НЕ ЗначениеЗаполнено(Выб.Номенклатура.НоменклатурнаяГруппа)) Тогда 
	//		НовДокСтрТов.Цена = ОКР(((ЦенаЛБАрт/100)*Выб.Наценка)+ЦенаЛБАрт,-1,1);
	//	Иначе
	//		НовДокСтрТов.Цена = ОКР(((Выб.Цена/100)*Выб.Наценка)+Выб.Цена,-1,1);
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(НовДокСтрТов.ЕдиницаИзмерения) Тогда
	//		Если НовДокСтрТов.ЕдиницаИзмерения.Коэффициент>1 Тогда 
	//			ТМП = Окр(НовДокСтрТов.Цена/НовДокСтрТов.ЕдиницаИзмерения.Коэффициент)*НовДокСтрТов.ЕдиницаИзмерения.Коэффициент;
	//			НовДокСтрТов.Цена = ТМП;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если НовДокСтрТов.Цена = Выб.ЦенаЛБ Тогда //Цена 5лб не поменялась
	//		НовДокСтрТов.Цена = 0;
	//	КонецЕсли;
	//	// ++ Вялов 21.06.16 - ошибка - снижение менее -32%!
	//	// изменения согласованы с Торгунским В. 
	//	Если НЕ Константы.ФлагОтключенияДопПроверкиЦенообразования.Получить() Тогда
	//	 // -- Вялов 21.06.16 - ошибка - снижение менее -32%!
	//		Если (Выб.Наценка = 0) И (ТоварСписок=Неопределено) Тогда //чтобы зря не снижать цены
	//			НовДокСтрТов.Цена = 0;
	//		КонецЕсли;
	//	// ++ Вялов 21.06.16 - ошибка - снижение менее -32%!
	//	КонецЕсли;	
	//	// -- Вялов 21.06.16 - ошибка - сниажение -32%!

	//	//++ Кузнецов С.А. - Устанавливаем минимально возможную розничную цену - 24.03.2016
	//	//++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016
	//	//++ Кузнецов С.А. - В любом случае опускаем наценку до рекомендованной или 32% - Добавление наценки - 01.06.2016
	//	//++ Кузнецов С.А. - Уменьшаем только для "Используется рекомендованная наценка" - 06.06.2016
	//	Если ЗначениеЗаполнено(Выб.СЦЗ_Цена) И ЗначениеЗаполнено(НовДокСтрТов.Цена) Тогда
	//		Если Выб.ИспользуетсяРекомендованнаяНаценка Тогда
	//			минимальноВозможнаяРозничнаяЦена = ОКР(((Выб.СЦЗ_Цена/100)* Выб.РекомендованнаяНаценка)+Выб.СЦЗ_Цена, -1, 1);
	//			минимальноВозможнаяРозничнаяЦена_ПлюсНаценка = ОКР(((минимальноВозможнаяРозничнаяЦена/100)*Выб.Наценка)+ минимальноВозможнаяРозничнаяЦена, -1, 1);
	//			Если минимальноВозможнаяРозничнаяЦена_ПлюсНаценка < минимальноВозможнаяРозничнаяЦена Тогда
	//				НовДокСтрТов.Цена = минимальноВозможнаяРозничнаяЦена;			
	//			Иначе
	//				НовДокСтрТов.Цена = минимальноВозможнаяРозничнаяЦена_ПлюсНаценка;
	//			КонецЕсли;	
	//		Иначе
	//			цена_32 = ОКР(((Выб.СЦЗ_Цена/100)*32)+Выб.СЦЗ_Цена, -1, 1);
	//			Если цена_32 > НовДокСтрТов.Цена Тогда
	//				НовДокСтрТов.Цена = цена_32;
	//			КонецЕсли;	
	//		КонецЕсли;
	//	КонецЕсли;
	//	//-- Кузнецов С.А. - 24.03.2016 / 31.05.2016 / 01.06.2016
	//			
	//	НовДокСтрТов = Док.Товары.Добавить();
	//	НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
	//	НовДокСтрТов.Номенклатура = Выб.Номенклатура;
	//	НовДокСтрТов.ТипЦен = СЦЗ;
	//	НовДокСтрТов.Валюта = СЦЗ.ВалютаЦены;
	//	ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,Выб.Номенклатура);
	//	Пока ЕдВыб.Следующий() Цикл
	//		Если Выб.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
	//			НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
	//			прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	//++ Кузнецов С.А. - Добавил попытку - 10.02.2016
	//	Попытка
	//		НовДокСтрТов.Цена = ((Выб.СЦЗ_Цена/100)*Выб.НаценкаСЦЗ)+Выб.СЦЗ_Цена;
	//	Исключение
	//	КонецПопытки;		
	//	//-- Кузнецов С.А. - 10.02.2016				
	//	
	//	Если (Выб.НаценкаСЦЗ = 0) И (ТоварСписок=Неопределено) Тогда //чтобы зря не снижать цены
	//		НовДокСтрТов.Цена = 0;
	//	КонецЕсли;

	//	//++ Кузнецов С.А. - Устанавливаем минимально возможную оптовую цену - 24.03.2016
	//	Если ЗначениеЗаполнено(Выб.СЦЗ_Цена) И ЗначениеЗаполнено(НовДокСтрТов.Цена) Тогда
	//		минимальноВозможнаяОптоваяЦена = Выб.СЦЗ_Цена;
	//		Если НовДокСтрТов.Цена < минимальноВозможнаяОптоваяЦена Тогда
	//			НовДокСтрТов.Цена = минимальноВозможнаяОптоваяЦена;
	//		КонецЕсли;	
	//	КонецЕсли;	
	//	//-- Кузнецов С.А. - 24.03.2016
	//			
	//КонецЦикла;
	//Док.Комментарий = "Создан машиной для установки курсовой наценки на 5LB и СЦЗ "+?(Источник = Неопределено,"","по "+Источник);
	
	//Если ИзОбработки Тогда
	//	Для Каждого ст из ТоварСписок Цикл
	//		Если Док.Товары.Найти(ст,"Номенклатура")<>Неопределено Тогда
	//			продолжить;
	//		КонецЕсли;
	//		
	//		НовДокСтрТов = Док.Товары.Добавить();
	//		НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
	//		НовДокСтрТов.Номенклатура = ст;
	//		НовДокСтрТов.ТипЦен = ЛБ;
	//		НовДокСтрТов.Валюта = ЛБ.ВалютаЦены;
	//		ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,ст);
	//		Пока ЕдВыб.Следующий() Цикл
	//			Если НовДокСтрТов.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
	//				НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
	//				прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//		НовДокСтрТов.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ст, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),ЛБАрт);
	//	КонецЦикла;			
	//КонецЕсли;
	//
	//
	//Попытка
	//	Док.Записать(РежимЗаписиДокумента.Проведение);
	//Исключение
	//	
	//КонецПопытки;
	
	
	// РОЗНИЦА	
	//	29.11.16 Вялов - перенос 5LBA - в отдельный алгоритм (только вручную!)  
	// (задача по результатам совещания 25.11.16 - Артем, Кулешов, Юра, Вялов, Иванов)
	
	//Отключаем ночную установку розничных цен. Распоряжение Иванова Ивана
	// < 17.04.17 автор Рустам, внес Вялов (подтвержение Иванова письмом 17.04.17)
	//Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	//Док.Дата = ТекущаяДата();
	//Док.ЗаписыватьОперативно = Истина;
	//Док.НеПроводитьНулевыеЗначения=Истина;
	//	
	//НовДокСтр = Док.ТипыЦен.Добавить();
	//НовДокСтр.ТипЦен = ЛБ;
	////	< 29.11.16 Вялов - перенос 5LBA	
	////НовДокСтр = Док.ТипыЦен.Добавить();
	////НовДокСтр.ТипЦен = ЛБАрт;
	////	29.11.16 Вялов - перенос 5LBA >

	//Для Каждого Выб Из ТабКУстановке Цикл
	//	
	//	Если (Выб.Цена = 0) И (НЕ ЗначениеЗаполнено(Выб.Номенклатура.НоменклатурнаяГруппа)) Тогда   //фигачим 5LB_Artem
	//		НовДокСтрТов = Док.Товары.Добавить();
	//		НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
	//		НовДокСтрТов.Номенклатура = Выб.Номенклатура;
	//		НовДокСтрТов.ТипЦен = ЛБАрт;
	//		НовДокСтрТов.Валюта = ЛБАрт.ВалютаЦены;
	//		ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,Выб.Номенклатура);
	//		Пока ЕдВыб.Следующий() Цикл
	//			Если Выб.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
	//				НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
	//				прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		//++ Кузнецов С.А. - В ценообразовании везде 32% - 24.03.2016
	//	    //++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016
	//	    //++ Кузнецов С.А. - Установка цен в зависимости от "Используется рекомендованная наценка" - 31.05.2016
	//		Если Выб.ИспользуетсяРекомендованнаяНаценка Тогда
	//			НовДокСтрТов.Цена = ОКР(((Выб.СЦЗ_Цена/100)* Выб.РекомендованнаяНаценка)+Выб.СЦЗ_Цена,-1,1);
	//		Иначе
	//	        цена_32 = ОКР(((Выб.СЦЗ_Цена/100)*32)+Выб.СЦЗ_Цена,-1,1);
	//			НовДокСтрТов.Цена = цена_32;
	//		КонецЕсли;
	//		//-- Кузнецов С.А. - 24.03.2016 / 31.05.2016 / 06.06.2016
	//		
	//		Если ЗначениеЗаполнено(НовДокСтрТов.ЕдиницаИзмерения) Тогда
	//			Если НовДокСтрТов.ЕдиницаИзмерения.Коэффициент>1 Тогда 
	//				ТМП = Окр(НовДокСтрТов.Цена/НовДокСтрТов.ЕдиницаИзмерения.Коэффициент)*НовДокСтрТов.ЕдиницаИзмерения.Коэффициент;
	//				НовДокСтрТов.Цена = ТМП;
	//			КонецЕсли;
	//		КонецЕсли;
	//		ЦенаЛБАрт = НовДокСтрТов.Цена;	
	//		////	< 29.11.16 Вялов - перенос 5LBA	
	//		Док.Товары.Удалить(Док.Товары.Количество() - 1);
	//		////	29.11.16 Вялов - перенос 5LBA >
	//	КонецЕсли;
	//			
	//	НовДокСтрТов = Док.Товары.Добавить();
	//	НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
	//	НовДокСтрТов.Номенклатура = Выб.Номенклатура;
	//	НовДокСтрТов.ТипЦен = ЛБ;
	//	НовДокСтрТов.Валюта = ЛБ.ВалютаЦены;
	//	ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,Выб.Номенклатура);
	//	Пока ЕдВыб.Следующий() Цикл
	//		Если Выб.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
	//			НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
	//			прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Если (Выб.Цена = 0) И (НЕ ЗначениеЗаполнено(Выб.Номенклатура.НоменклатурнаяГруппа)) Тогда 
	//		НовДокСтрТов.Цена = ОКР(((ЦенаЛБАрт/100)*Выб.Наценка)+ЦенаЛБАрт,-1,1);
	//	Иначе
	//		НовДокСтрТов.Цена = ОКР(((Выб.Цена/100)*Выб.Наценка)+Выб.Цена,-1,1);
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(НовДокСтрТов.ЕдиницаИзмерения) Тогда
	//		Если НовДокСтрТов.ЕдиницаИзмерения.Коэффициент>1 Тогда 
	//			ТМП = Окр(НовДокСтрТов.Цена/НовДокСтрТов.ЕдиницаИзмерения.Коэффициент)*НовДокСтрТов.ЕдиницаИзмерения.Коэффициент;
	//			НовДокСтрТов.Цена = ТМП;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если НовДокСтрТов.Цена = Выб.ЦенаЛБ Тогда //Цена 5лб не поменялась
	//		НовДокСтрТов.Цена = 0;
	//	КонецЕсли;
	//	// ++ Вялов 21.06.16 - ошибка - снижение менее -32%!
	//	// изменения согласованы с Торгунским В. 
	//	Если НЕ Константы.ФлагОтключенияДопПроверкиЦенообразования.Получить() Тогда
	//	 // -- Вялов 21.06.16 - ошибка - снижение менее -32%!
	//		Если (Выб.Наценка = 0) И (ТоварСписок=Неопределено) Тогда //чтобы зря не снижать цены
	//			НовДокСтрТов.Цена = 0;
	//		КонецЕсли;
	//	// ++ Вялов 21.06.16 - ошибка - снижение менее -32%!
	//	КонецЕсли;	
	//	// -- Вялов 21.06.16 - ошибка - сниажение -32%!

	//	//++ Кузнецов С.А. - Устанавливаем минимально возможную розничную цену - 24.03.2016
	//	//++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016
	//	//++ Кузнецов С.А. - В любом случае опускаем наценку до рекомендованной или 32% - Добавление наценки - 01.06.2016
	//	//++ Кузнецов С.А. - Уменьшаем только для "Используется рекомендованная наценка" - 06.06.2016
	//	Если ЗначениеЗаполнено(Выб.СЦЗ_Цена) И ЗначениеЗаполнено(НовДокСтрТов.Цена) Тогда
	//		Если Выб.ИспользуетсяРекомендованнаяНаценка Тогда
	//			минимальноВозможнаяРозничнаяЦена = ОКР(((Выб.СЦЗ_Цена/100)* Выб.РекомендованнаяНаценка)+Выб.СЦЗ_Цена, -1, 1);
	//			минимальноВозможнаяРозничнаяЦена_ПлюсНаценка = ОКР(((минимальноВозможнаяРозничнаяЦена/100)*Выб.Наценка)+ минимальноВозможнаяРозничнаяЦена, -1, 1);
	//			Если минимальноВозможнаяРозничнаяЦена_ПлюсНаценка < минимальноВозможнаяРозничнаяЦена Тогда
	//				НовДокСтрТов.Цена = минимальноВозможнаяРозничнаяЦена;			
	//			Иначе
	//				НовДокСтрТов.Цена = минимальноВозможнаяРозничнаяЦена_ПлюсНаценка;
	//			КонецЕсли;	
	//		Иначе
	//			цена_32 = ОКР(((Выб.СЦЗ_Цена/100)*32)+Выб.СЦЗ_Цена, -1, 1);
	//			Если цена_32 > НовДокСтрТов.Цена Тогда
	//				НовДокСтрТов.Цена = цена_32;
	//			КонецЕсли;	
	//		КонецЕсли;
	//	КонецЕсли;
	//	//-- Кузнецов С.А. - 24.03.2016 / 31.05.2016 / 01.06.2016				
	//					
	//КонецЦикла;
	//Док.Комментарий = "Создан машиной для установки курсовой наценки на 5LB "+?(Источник = Неопределено,"","по "+Источник);		
	//Если ИзОбработки Тогда
	//	Для Каждого ст из ТоварСписок Цикл
	//		Если Док.Товары.Найти(ст,"Номенклатура")<>Неопределено Тогда
	//			продолжить;
	//		КонецЕсли;
	//		
	//		НовДокСтрТов = Док.Товары.Добавить();
	//		НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
	//		НовДокСтрТов.Номенклатура = ст;
	//		НовДокСтрТов.ТипЦен = ЛБ;
	//		НовДокСтрТов.Валюта = ЛБ.ВалютаЦены;
	//		ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,ст);
	//		Пока ЕдВыб.Следующий() Цикл
	//			Если НовДокСтрТов.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
	//				НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
	//				прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//		НовДокСтрТов.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ст, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),ЛБАрт);
	//	КонецЦикла;			
	//КонецЕсли;   	
	//Попытка
	//	Док.Записать(РежимЗаписиДокумента.Проведение);
	//Исключение   		
	//КонецПопытки;
	// 17.04.17 автор Рустам, внес Вялов (подтвержение Иванова письмом 17.04.17) >
	
	
	// ОПТ
	Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	Док.Дата = ТекущаяДата();
	Док.ЗаписыватьОперативно = Истина;
	Док.НеПроводитьНулевыеЗначения=Истина;
		
	НовДокСтр = Док.ТипыЦен.Добавить();
	НовДокСтр.ТипЦен = СЦЗ;

	Для Каждого Выб Из ТабКУстановке Цикл
	
				
		НовДокСтрТов = Док.Товары.Добавить();
		НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
		НовДокСтрТов.Номенклатура = Выб.Номенклатура;
		НовДокСтрТов.ТипЦен = СЦЗ;
		НовДокСтрТов.Валюта = СЦЗ.ВалютаЦены;
		ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,Выб.Номенклатура);
		Пока ЕдВыб.Следующий() Цикл
			Если Выб.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
				НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
				прервать;
			КонецЕсли;
		КонецЦикла;
		
		//++ Кузнецов С.А. - Добавил попытку - 10.02.2016
		Попытка
			НовДокСтрТов.Цена = ((Выб.СЦЗ_Цена/100)*Выб.НаценкаСЦЗ)+Выб.СЦЗ_Цена;
		Исключение
		КонецПопытки;		
		//-- Кузнецов С.А. - 10.02.2016				
		
		Если (Выб.НаценкаСЦЗ = 0) И (ТоварСписок=Неопределено) Тогда //чтобы зря не снижать цены
			НовДокСтрТов.Цена = 0;
		КонецЕсли;

		//++ Кузнецов С.А. - Устанавливаем минимально возможную оптовую цену - 24.03.2016
		Если ЗначениеЗаполнено(Выб.СЦЗ_Цена) И ЗначениеЗаполнено(НовДокСтрТов.Цена) Тогда
			минимальноВозможнаяОптоваяЦена = Выб.СЦЗ_Цена;
			Если НовДокСтрТов.Цена < минимальноВозможнаяОптоваяЦена Тогда
				НовДокСтрТов.Цена = минимальноВозможнаяОптоваяЦена;
			КонецЕсли;	
		КонецЕсли;	
		//-- Кузнецов С.А. - 24.03.2016
				
	КонецЦикла;
	Док.Комментарий = "Создан машиной для установки курсовой наценки на СЦЗ "+?(Источник = Неопределено,"","по "+Источник);		
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение   		
	КонецПопытки;

	// 11.11.16 Вялов - Магалан - Задача № 3934                                                                             
	// "Внести корректировки в механизм изменения цен по итогам совещания 07.11.16" >	
	
КонецПроцедуры

// 05.04.17 Вялов - создана отдельная процедура (для СЦЗ) - указание (устно) Иванов, утв. Агафонов - 05.04.17 12:24
Процедура АнализКурсовойНаценкиСЦЗ(ТоварСписок, Источник = Неопределено, ИзОбработки = Ложь) Экспорт
	
	//++ Кузнецов С.А. - Исключаем номенклатуру из групп указанных в регистре "ИсключенияИзАнализаКурсовойНаценки"  - 04.03.2016
	//++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016
	//++ Кузнецов С.А. - Добавляем признак "Используется рекомендованная наценка" - 06.06.2016
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КурсоваяНац.Номенклатура,
	|	МАКСИМУМ(КурсоваяНац.Наценка) КАК Наценка,
	|	ЕСТЬNULL(МАКСИМУМ(КурсоваяНацВчера.Наценка), 0) КАК НаценкаВчера,
	|	ЕСТЬNULL(МАКСИМУМ(Порог.ПроцентРозница), 1) КАК Порог,
	|	ЕСТЬNULL(МАКСИМУМ(Порог.ПроцентЗакупка), 1) КАК ПорогЗакупка,
	|	ВЫБОР КОГДА ЛбАртем.Номенклатура ЕСТЬ NULL Тогда 0 Иначе ЕстьNULL(МАКСИМУМ(ЛбАртем.Цена), 0) Конец КАК Цена,
	|	ЕстьNULL(МАКСИМУМ(СЦЗ.Цена), 0) КАК СЦЗ_Цена,
	|   ЕстьNULL(МАКСИМУМ(ЛБ.Цена), 0) КАК ЦенаЛБ,
	|   ЕстьNULL(МАКСИМУМ(РНаценка.Наценка), 32) КАК РекомендованнаяНаценка,
	|   ЕСТЬNULL(МАКСИМУМ(РНаценка.Наценка), 0) КАК ИспользуетсяРекомендованнаяНаценка
	|ИЗ
	|	РегистрСведений.КурсоваяНаценка.СрезПоследних(, ) КАК КурсоваяНац
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсоваяНаценка.СрезПоследних(&Вчера, ) КАК КурсоваяНацВчера
	|		ПО КурсоваяНац.Номенклатура = КурсоваяНацВчера.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ЛбАрт) КАК ЛбАртем
	|		ПО КурсоваяНац.Номенклатура = ЛбАртем.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &СЦЗ) КАК СЦЗ
	|		ПО КурсоваяНац.Номенклатура = СЦЗ.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ЛБ) КАК ЛБ
	|		ПО КурсоваяНац.Номенклатура = ЛБ.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РекомендованнаяНаценка.СрезПоследних(&ТекДата, ) КАК РНаценка
	|		ПО КурсоваяНац.Номенклатура.Родитель = РНаценка.Номенклатура,
	|	РегистрСведений.КурсоваяНаценкаПорог.СрезПоследних(, ) КАК Порог
	|ГДЕ 
	|   НЕ КурсоваяНац.Номенклатура В Иерархии (Выбрать ГруппаНоменклатуры Из РегистрСведений.ИсключенияИзАнализаКурсовойНаценки) И ";
	
	Если (ТоварСписок<>Неопределено) И (ТоварСписок.Количество())>0 Тогда
		Запрос.Текст = Запрос.Текст+"
		|КурсоваяНац.Номенклатура В (&СписокНом)
		|СГРУППИРОВАТь ПО 
		|КурсоваяНац.Номенклатура,
		|ЛбАртем.Номенклатура";
		Запрос.УстановитьПараметр("СписокНом",ТоварСписок);
	ИначеЕсли ТоварСписок=Неопределено Тогда
		Запрос.Текст = Запрос.Текст+"
		//++ Кузнецов С.А. - Отрицательную наценку убираем!!! - 10.06.2016
		//++ Кузнецов С.А. - Отрицательную наценку тоже берем - 24.03.2016
		|КурсоваяНац.Наценка > 0		
		//|КурсоваяНац.Наценка <> 0		
		//-- Кузнецов С.А. - 24.03.2016		
		//-- Кузнецов С.А. - 10.06.2016		
		|СГРУППИРОВАТь ПО 
		|КурсоваяНац.Номенклатура,
		|ЛбАртем.Номенклатура";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Вчера",НачалоДня(ТекущаяДата()-86400));
	Запрос.УстановитьПараметр("ЛбАрт",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000020")); // "5LB_Artem"
	Запрос.УстановитьПараметр("СЦЗ",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000015")); // "СредняяЦенаЗакупки"
	Запрос.УстановитьПараметр("ЛБ",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001")); // "5LB"
	
	Рез = Запрос.Выполнить();	
	//-- Кузнецов С.А. - 04.03.2016	/ 31.05.2016 / 06.06.2016
	
	
	Если (Рез.Пустой()) И (Не ИзОбработки) Тогда
		возврат;
	КонецЕсли;
	
	ТабКУстановке = Новый ТаблицаЗначений;
	ТабКУстановке.Колонки.Добавить("Номенклатура");
	ТабКУстановке.Колонки.Добавить("Цена");
	ТабКУстановке.Колонки.Добавить("СЦЗ_Цена");
	ТабКУстановке.Колонки.Добавить("ЦенаЛБ");
	ТабКУстановке.Колонки.Добавить("Наценка");
	ТабКУстановке.Колонки.Добавить("НаценкаСЦЗ");
	//++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016 / 06.06.2016
	ТабКУстановке.Колонки.Добавить("РекомендованнаяНаценка");
	ТабКУстановке.Колонки.Добавить("ИспользуетсяРекомендованнаяНаценка");
	//-- Кузнецов С.А. - 31.05.2016 / 06.06.2016
	
	Выб = Рез.Выбрать();
	Пока Выб.Следующий() Цикл
		Если (Выб.Порог = 0) ИЛИ (Выб.ПорогЗакупка=0) Тогда
			Прервать;
		КонецЕсли;
		
		НовСтр = ТабКУстановке.Добавить();
		НовСтр.Номенклатура = Выб.Номенклатура;
		НовСтр.Цена = Выб.Цена;
		НовСтр.СЦЗ_Цена = Выб.СЦЗ_Цена;
		НовСтр.ЦенаЛБ = Выб.ЦенаЛБ;
		НовСтр.Наценка = 0;
		НовСтр.НаценкаСЦЗ = 0;		
		//++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016 / 06.06.2016
		НовСтр.РекомендованнаяНаценка = Выб.РекомендованнаяНаценка;
		НовСтр.ИспользуетсяРекомендованнаяНаценка = Выб.ИспользуетсяРекомендованнаяНаценка;
		//-- Кузнецов С.А. - 31.05.2016 / 06.06.2016
				
		ЗаходилиРоз = Ложь;
		ЗаходилиОпт = Ложь;
		
		// Для Розницы
		ПрошлоеДеление = Выб.НаценкаВчера/Выб.Порог;
		ТекущееДеление = Выб.Наценка/Выб.Порог;
		Если ПрошлоеДеление = 0 Тогда //Только текущую наценку анализируем
			Если Цел(ТекущееДеление) >1 Тогда //Наценка = Наценке,т.к превысили порог ))
				НовСтр.Наценка = Выб.Наценка;
				ЗаходилиРоз = Истина;
			КонецЕсли;
		ИначеЕсли (Цел(ПрошлоеДеление)<>Цел(ТекущееДеление)) 
			И 
			//++ Кузнецов С.А. - Уменьшаем цену в случае уменьшения курсы (с учетом порога) - 24.03.2016
			//(Выб.Наценка>Выб.Порог)
			(?(Выб.Наценка < 0, -1*Выб.Наценка, Выб.Наценка)>Выб.Порог)
			//-- Кузнецов С.А. - 24.03.2016
			Тогда //джигурдим (хотя и не джигурдим)) )
			НовСтр.Наценка = Выб.Наценка;
			ЗаходилиРоз = Истина;
		ИначеЕсли (Выб.НаценкаВчера=Выб.Наценка) 
			И 
		    //++ Кузнецов С.А. - Уменьшаем цену в случае уменьшения курсы (с учетом порога) - 24.03.2016
			//(Выб.Наценка>Выб.Порог) 
			(?(Выб.Наценка < 0, -1*Выб.Наценка, Выб.Наценка)>Выб.Порог)
			//-- Кузнецов С.А. - 24.03.2016
			Тогда 
			НовСтр.Наценка = Выб.Наценка;
			ЗаходилиРоз = Истина;
		КонецЕсли;
		
		
		// Для ОПТа - "СЦЗ_Машина"
		ПрошлоеДелениеЗак = Выб.НаценкаВчера/Выб.ПорогЗакупка;
		ТекущееДелениеЗак = Выб.Наценка/Выб.ПорогЗакупка;
		Если ПрошлоеДелениеЗак = 0 Тогда //Только текущую наценку анализируем
			Если Цел(ТекущееДелениеЗак) >1 Тогда //Наценка = Наценке,т.к превысили порог ))
				Если НовСтр = Неопределено Тогда 
					НовСтр = ТабКУстановке.Добавить();
					НовСтр.Номенклатура = Выб.Номенклатура;
					НовСтр.СЦЗ_Цена = Выб.СЦЗ_Цена;
					НовСтр.НаценкаСЦЗ = Выб.Наценка;
				Иначе
					НовСтр.НаценкаСЦЗ = Выб.Наценка;
				КонецЕсли;
				ЗаходилиОпт = Истина;
			ИначеЕсли Выб.Наценка>Выб.ПорогЗакупка Тогда
				Если НовСтр = Неопределено Тогда 
					НовСтр = ТабКУстановке.Добавить();
					НовСтр.Номенклатура = Выб.Номенклатура;
					НовСтр.СЦЗ_Цена = Выб.СЦЗ_Цена;
					НовСтр.НаценкаСЦЗ = Выб.Наценка;
				Иначе
					НовСтр.НаценкаСЦЗ = Выб.Наценка;
				КонецЕсли;
				ЗаходилиОпт = Истина;
			КонецЕсли;
		ИначеЕсли (Цел(ПрошлоеДелениеЗак)<>Цел(ТекущееДелениеЗак)) 
			И 
		    //++ Кузнецов С.А. - Уменьшаем цену в случае уменьшения курсы (с учетом порога) - 24.03.2016
			//(Выб.Наценка>Выб.ПорогЗакупка) 
			(?(Выб.Наценка < 0, -1*Выб.Наценка, Выб.Наценка)>Выб.ПорогЗакупка)
			//-- Кузнецов С.А. - 24.03.2016
			Тогда //джигурдим (хотя и не джигурдим)) )
			Если НовСтр = Неопределено Тогда 
				НовСтр = ТабКУстановке.Добавить();
				НовСтр.Номенклатура = Выб.Номенклатура;
				НовСтр.СЦЗ_Цена = Выб.СЦЗ_Цена;
				НовСтр.НаценкаСЦЗ = Выб.Наценка;
			Иначе
				НовСтр.НаценкаСЦЗ = Выб.Наценка;
			КонецЕсли;
			ЗаходилиОпт = Истина;
		ИначеЕсли (Выб.НаценкаВчера=Выб.Наценка) 
			И 			 
		    //++ Кузнецов С.А. - Уменьшаем цену в случае уменьшения курсы (с учетом порога) - 24.03.2016
			//(Выб.Наценка>Выб.ПорогЗакупка)
			(?(Выб.Наценка < 0, -1*Выб.Наценка, Выб.Наценка)>Выб.ПорогЗакупка)
			//-- Кузнецов С.А. - 24.03.2016
			Тогда 
			Если НовСтр = Неопределено Тогда 
				НовСтр = ТабКУстановке.Добавить();
				НовСтр.Номенклатура = Выб.Номенклатура;
				НовСтр.СЦЗ_Цена = Выб.СЦЗ_Цена;
				НовСтр.НаценкаСЦЗ = Выб.Наценка;
			Иначе
				НовСтр.НаценкаСЦЗ = Выб.Наценка;
			КонецЕсли;
			ЗаходилиОпт = Истина;
		КонецЕсли;
	
	КонецЦикла;	
	
	Если (ТабКУстановке.Количество()=0) И (Не ИзОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	ЛБ = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
	ЛБАрт = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000020");
	СЦЗ = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000021");   // СЦЗ_Машина (Для ОПТа)
	
	
	// < 11.11.16 Вялов - Магалан - Задача № 3934 (пункты 1-2)
	// "Внести корректировки в механизм изменения цен по итогам совещания 07.11.16"
	// т.к. нужно ОПТ делать "сегодня", а РОЗНИЦА - завтра, то разделем алгоритм на два документа (раньше было в одном документе!)...
	
	//Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	//// 07.11.16 Вялов - задача Мегаплан 3934
	//Док.Дата = ТекущаяДата();
	////Док.Дата = ОбщегоНазначения5LB.ПолучитьВремяПоследнегоДокументаНаДату("УстановкаЦенНоменклатуры", КонецДня(ТекущаяДата()) + 1) - 1;
	//Если ТоварСписок = Неопределено Тогда
	//	Док.ЗаписыватьОперативно = Истина;
	//Иначе
	//	Док.ЗаписыватьОперативно = Ложь;
	//КонецЕсли; 
	////Док.Дата = КонецДня(ТекущаяДата());

	//Док.НеПроводитьНулевыеЗначения=Истина;
	//	
	//НовДокСтр = Док.ТипыЦен.Добавить();
	//НовДокСтр.ТипЦен = ЛБ;
	//НовДокСтр = Док.ТипыЦен.Добавить();
	//НовДокСтр.ТипЦен = СЦЗ;
	//НовДокСтр = Док.ТипыЦен.Добавить();
	//НовДокСтр.ТипЦен = ЛБАрт;

	//Для Каждого Выб Из ТабКУстановке Цикл
	//	
	//	Если (Выб.Цена = 0) И (НЕ ЗначениеЗаполнено(Выб.Номенклатура.НоменклатурнаяГруппа)) Тогда   //фигачим 5LB_Artem
	//		НовДокСтрТов = Док.Товары.Добавить();
	//		НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
	//		НовДокСтрТов.Номенклатура = Выб.Номенклатура;
	//		НовДокСтрТов.ТипЦен = ЛБАрт;
	//		НовДокСтрТов.Валюта = ЛБАрт.ВалютаЦены;
	//		ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,Выб.Номенклатура);
	//		Пока ЕдВыб.Следующий() Цикл
	//			Если Выб.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
	//				НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
	//				прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		//++ Кузнецов С.А. - В ценообразовании везде 32% - 24.03.2016
	//	    //++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016
	//	    //++ Кузнецов С.А. - Установка цен в зависимости от "Используется рекомендованная наценка" - 31.05.2016
	//		Если Выб.ИспользуетсяРекомендованнаяНаценка Тогда
	//			НовДокСтрТов.Цена = ОКР(((Выб.СЦЗ_Цена/100)* Выб.РекомендованнаяНаценка)+Выб.СЦЗ_Цена,-1,1);
	//		Иначе
	//	        цена_32 = ОКР(((Выб.СЦЗ_Цена/100)*32)+Выб.СЦЗ_Цена,-1,1);
	//			НовДокСтрТов.Цена = цена_32;
	//		КонецЕсли;
	//		//-- Кузнецов С.А. - 24.03.2016 / 31.05.2016 / 06.06.2016
	//		
	//		Если ЗначениеЗаполнено(НовДокСтрТов.ЕдиницаИзмерения) Тогда
	//			Если НовДокСтрТов.ЕдиницаИзмерения.Коэффициент>1 Тогда 
	//				ТМП = Окр(НовДокСтрТов.Цена/НовДокСтрТов.ЕдиницаИзмерения.Коэффициент)*НовДокСтрТов.ЕдиницаИзмерения.Коэффициент;
	//				НовДокСтрТов.Цена = ТМП;
	//			КонецЕсли;
	//		КонецЕсли;
	//		ЦенаЛБАрт = НовДокСтрТов.Цена;	
	//	КонецЕсли;
	//			
	//	НовДокСтрТов = Док.Товары.Добавить();
	//	НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
	//	НовДокСтрТов.Номенклатура = Выб.Номенклатура;
	//	НовДокСтрТов.ТипЦен = ЛБ;
	//	НовДокСтрТов.Валюта = ЛБ.ВалютаЦены;
	//	ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,Выб.Номенклатура);
	//	Пока ЕдВыб.Следующий() Цикл
	//		Если Выб.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
	//			НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
	//			прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Если (Выб.Цена = 0) И (НЕ ЗначениеЗаполнено(Выб.Номенклатура.НоменклатурнаяГруппа)) Тогда 
	//		НовДокСтрТов.Цена = ОКР(((ЦенаЛБАрт/100)*Выб.Наценка)+ЦенаЛБАрт,-1,1);
	//	Иначе
	//		НовДокСтрТов.Цена = ОКР(((Выб.Цена/100)*Выб.Наценка)+Выб.Цена,-1,1);
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(НовДокСтрТов.ЕдиницаИзмерения) Тогда
	//		Если НовДокСтрТов.ЕдиницаИзмерения.Коэффициент>1 Тогда 
	//			ТМП = Окр(НовДокСтрТов.Цена/НовДокСтрТов.ЕдиницаИзмерения.Коэффициент)*НовДокСтрТов.ЕдиницаИзмерения.Коэффициент;
	//			НовДокСтрТов.Цена = ТМП;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если НовДокСтрТов.Цена = Выб.ЦенаЛБ Тогда //Цена 5лб не поменялась
	//		НовДокСтрТов.Цена = 0;
	//	КонецЕсли;
	//	// ++ Вялов 21.06.16 - ошибка - снижение менее -32%!
	//	// изменения согласованы с Торгунским В. 
	//	Если НЕ Константы.ФлагОтключенияДопПроверкиЦенообразования.Получить() Тогда
	//	 // -- Вялов 21.06.16 - ошибка - снижение менее -32%!
	//		Если (Выб.Наценка = 0) И (ТоварСписок=Неопределено) Тогда //чтобы зря не снижать цены
	//			НовДокСтрТов.Цена = 0;
	//		КонецЕсли;
	//	// ++ Вялов 21.06.16 - ошибка - снижение менее -32%!
	//	КонецЕсли;	
	//	// -- Вялов 21.06.16 - ошибка - сниажение -32%!

	//	//++ Кузнецов С.А. - Устанавливаем минимально возможную розничную цену - 24.03.2016
	//	//++ Кузнецов С.А. - Наценка от значения в РС "Рекомендованная наценка" - Задача в МегаПлане №3329 - 31.05.2016
	//	//++ Кузнецов С.А. - В любом случае опускаем наценку до рекомендованной или 32% - Добавление наценки - 01.06.2016
	//	//++ Кузнецов С.А. - Уменьшаем только для "Используется рекомендованная наценка" - 06.06.2016
	//	Если ЗначениеЗаполнено(Выб.СЦЗ_Цена) И ЗначениеЗаполнено(НовДокСтрТов.Цена) Тогда
	//		Если Выб.ИспользуетсяРекомендованнаяНаценка Тогда
	//			минимальноВозможнаяРозничнаяЦена = ОКР(((Выб.СЦЗ_Цена/100)* Выб.РекомендованнаяНаценка)+Выб.СЦЗ_Цена, -1, 1);
	//			минимальноВозможнаяРозничнаяЦена_ПлюсНаценка = ОКР(((минимальноВозможнаяРозничнаяЦена/100)*Выб.Наценка)+ минимальноВозможнаяРозничнаяЦена, -1, 1);
	//			Если минимальноВозможнаяРозничнаяЦена_ПлюсНаценка < минимальноВозможнаяРозничнаяЦена Тогда
	//				НовДокСтрТов.Цена = минимальноВозможнаяРозничнаяЦена;			
	//			Иначе
	//				НовДокСтрТов.Цена = минимальноВозможнаяРозничнаяЦена_ПлюсНаценка;
	//			КонецЕсли;	
	//		Иначе
	//			цена_32 = ОКР(((Выб.СЦЗ_Цена/100)*32)+Выб.СЦЗ_Цена, -1, 1);
	//			Если цена_32 > НовДокСтрТов.Цена Тогда
	//				НовДокСтрТов.Цена = цена_32;
	//			КонецЕсли;	
	//		КонецЕсли;
	//	КонецЕсли;
	//	//-- Кузнецов С.А. - 24.03.2016 / 31.05.2016 / 01.06.2016
	//			
	//	НовДокСтрТов = Док.Товары.Добавить();
	//	НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
	//	НовДокСтрТов.Номенклатура = Выб.Номенклатура;
	//	НовДокСтрТов.ТипЦен = СЦЗ;
	//	НовДокСтрТов.Валюта = СЦЗ.ВалютаЦены;
	//	ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,Выб.Номенклатура);
	//	Пока ЕдВыб.Следующий() Цикл
	//		Если Выб.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
	//			НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
	//			прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	//++ Кузнецов С.А. - Добавил попытку - 10.02.2016
	//	Попытка
	//		НовДокСтрТов.Цена = ((Выб.СЦЗ_Цена/100)*Выб.НаценкаСЦЗ)+Выб.СЦЗ_Цена;
	//	Исключение
	//	КонецПопытки;		
	//	//-- Кузнецов С.А. - 10.02.2016				
	//	
	//	Если (Выб.НаценкаСЦЗ = 0) И (ТоварСписок=Неопределено) Тогда //чтобы зря не снижать цены
	//		НовДокСтрТов.Цена = 0;
	//	КонецЕсли;

	//	//++ Кузнецов С.А. - Устанавливаем минимально возможную оптовую цену - 24.03.2016
	//	Если ЗначениеЗаполнено(Выб.СЦЗ_Цена) И ЗначениеЗаполнено(НовДокСтрТов.Цена) Тогда
	//		минимальноВозможнаяОптоваяЦена = Выб.СЦЗ_Цена;
	//		Если НовДокСтрТов.Цена < минимальноВозможнаяОптоваяЦена Тогда
	//			НовДокСтрТов.Цена = минимальноВозможнаяОптоваяЦена;
	//		КонецЕсли;	
	//	КонецЕсли;	
	//	//-- Кузнецов С.А. - 24.03.2016
	//			
	//КонецЦикла;
	//Док.Комментарий = "Создан машиной для установки курсовой наценки на 5LB и СЦЗ "+?(Источник = Неопределено,"","по "+Источник);
	
	//Если ИзОбработки Тогда
	//	Для Каждого ст из ТоварСписок Цикл
	//		Если Док.Товары.Найти(ст,"Номенклатура")<>Неопределено Тогда
	//			продолжить;
	//		КонецЕсли;
	//		
	//		НовДокСтрТов = Док.Товары.Добавить();
	//		НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
	//		НовДокСтрТов.Номенклатура = ст;
	//		НовДокСтрТов.ТипЦен = ЛБ;
	//		НовДокСтрТов.Валюта = ЛБ.ВалютаЦены;
	//		ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,ст);
	//		Пока ЕдВыб.Следующий() Цикл
	//			Если НовДокСтрТов.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
	//				НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
	//				прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//		НовДокСтрТов.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ст, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),ЛБАрт);
	//	КонецЦикла;			
	//КонецЕсли;
	//
	//
	//Попытка
	//	Док.Записать(РежимЗаписиДокумента.Проведение);
	//Исключение
	//	
	//КонецПопытки;
	
	
	
	// ОПТ
	Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	Док.Дата = ТекущаяДата();
	Док.ЗаписыватьОперативно = Истина;
	Док.НеПроводитьНулевыеЗначения=Истина;
		
	НовДокСтр = Док.ТипыЦен.Добавить();
	НовДокСтр.ТипЦен = СЦЗ;

	Для Каждого Выб Из ТабКУстановке Цикл
	
				
		НовДокСтрТов = Док.Товары.Добавить();
		НовДокСтрТов.ИндексСтрокиТаблицыЦен=0;
		НовДокСтрТов.Номенклатура = Выб.Номенклатура;
		НовДокСтрТов.ТипЦен = СЦЗ;
		НовДокСтрТов.Валюта = СЦЗ.ВалютаЦены;
		ЕдВыб = Справочники.ЕдиницыИзмерения.Выбрать(,Выб.Номенклатура);
		Пока ЕдВыб.Следующий() Цикл
			Если Выб.Номенклатура.БазоваяЕдиницаИзмерения = ЕдВыб.ЕдиницаПоКлассификатору Тогда
				НовДокСтрТов.ЕдиницаИзмерения = ЕдВыб.Ссылка;
				прервать;
			КонецЕсли;
		КонецЦикла;
		
		//++ Кузнецов С.А. - Добавил попытку - 10.02.2016
		Попытка
			НовДокСтрТов.Цена = ((Выб.СЦЗ_Цена/100)*Выб.НаценкаСЦЗ)+Выб.СЦЗ_Цена;
		Исключение
		КонецПопытки;		
		//-- Кузнецов С.А. - 10.02.2016				
		
		Если (Выб.НаценкаСЦЗ = 0) И (ТоварСписок=Неопределено) Тогда //чтобы зря не снижать цены
			НовДокСтрТов.Цена = 0;
		КонецЕсли;

		//++ Кузнецов С.А. - Устанавливаем минимально возможную оптовую цену - 24.03.2016
		Если ЗначениеЗаполнено(Выб.СЦЗ_Цена) И ЗначениеЗаполнено(НовДокСтрТов.Цена) Тогда
			минимальноВозможнаяОптоваяЦена = Выб.СЦЗ_Цена;
			Если НовДокСтрТов.Цена < минимальноВозможнаяОптоваяЦена Тогда
				НовДокСтрТов.Цена = минимальноВозможнаяОптоваяЦена;
			КонецЕсли;	
		КонецЕсли;	
		//-- Кузнецов С.А. - 24.03.2016
				
	КонецЦикла;
	Док.Комментарий = "Создан машиной для установки курсовой наценки на СЦЗ "+?(Источник = Неопределено,"","по "+Источник);		
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение   		
	КонецПопытки;

	// 11.11.16 Вялов - Магалан - Задача № 3934                                                                             
	// "Внести корректировки в механизм изменения цен по итогам совещания 07.11.16" >	
	
КонецПроцедуры

//////////////////////////////////////////////////////
// ОТПРАВКА ОПОВЕЩЕНИЙ - КОНТРОЛЬ ЦЕННИКОВ


Процедура ВыполнитьРассылкуПоЦенникам() Экспорт    		

	
	ЗаголовокСобытияВЖурнале = "Ценники - контроль печати";
	
	ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, УровеньЖурналаРегистрации.Информация , , , "Запущена регламентная процедура контроля печати ценников");
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Псевдонимы.Значение КАК Склад
	               |ПОМЕСТИТЬ втСклады
	               |ИЗ
	               |	РегистрСведений.ИсторияРаботыПродавцов КАК ИсторияРаботыПродавцов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Т.ОбъектСсылка КАК ОбъектСсылка,
	               |			Т.Значение КАК Значение
	               |		ИЗ
	               |			РегистрСведений.Псевдонимы КАК Т
	               |		ГДЕ
	               |			Т.Раздел = &РазделПсевдонимов) КАК Псевдонимы
	               |		ПО (Псевдонимы.ОбъектСсылка = ИсторияРаботыПродавцов.Пользователь)
	               |ГДЕ
	               |	ИсторияРаботыПродавцов.Период МЕЖДУ &НачПериода И &КонПериода
				   // 25.07.17 Вялов - задача 3392 - Агафонов - исключить магазины
				   |	И ИсторияРаботыПродавцов.Пользователь НЕ В (&СписокИсключить)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Псевдонимы.ОбъектСсылка КАК Пользователь,
	               |	Псевдонимы.Значение КАК АдресПочты,
	               |	ВЫБОР
	               |		КОГДА ГруппыДоступности.Склад ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	               |		ИНАЧЕ ГруппыДоступности.Склад
	               |	КОНЕЦ КАК Склад,
	               |	ВЫБОР
	               |		КОГДА Псевдонимы.ОбъектСсылка.Родитель = &ГруппаПродавцы
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоПродавец
	               |ПОМЕСТИТЬ втАдреса
	               |ИЗ
	               |	РегистрСведений.Псевдонимы КАК Псевдонимы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СоставГруппДоступностиМагазинов.ГруппаДоступности КАК Пользователь,
	               |			СоставГруппДоступностиМагазинов.Склад КАК Склад
	               |		ИЗ
	               |			РегистрСведений.СоставГруппДоступностиМагазинов КАК СоставГруппДоступностиМагазинов) КАК ГруппыДоступности
	               |		ПО (ГруппыДоступности.Пользователь = Псевдонимы.ОбъектСсылка)
	               |			И (Псевдонимы.ОбъектСсылка.Родитель = &ГруппаПродавцы)
	               |ГДЕ
	               |	Псевдонимы.Раздел = &Раздел
	               |	И ТИПЗНАЧЕНИЯ(Псевдонимы.Значение) = ТИП(СТРОКА)
	               |	И Псевдонимы.Значение ПОДОБНО ""%@%""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦенникиНоменклатурыСрезПоследних.Склад КАК Склад,
	               |	ЦенникиНоменклатурыСрезПоследних.Период КАК ДатаПоказаЦенника,
	               |	ЦенникиНоменклатурыСрезПоследних.ДатаПечатиЦенника КАК ДатаПечатиЦенника,
	               |	НАЧАЛОПЕРИОДА(&Вчера, ДЕНЬ) КАК Д
	               |ПОМЕСТИТЬ втЦенникиВчера
	               |ИЗ
	               |	РегистрСведений.ЦенникиНоменклатуры.СрезПоследних(
	               |			КОНЕЦПЕРИОДА(&Вчера, ДЕНЬ),
	               |			Склад В
	               |				(ВЫБРАТЬ
	               |					Т.Склад
	               |				ИЗ
	               |					втСклады КАК Т)) КАК ЦенникиНоменклатурыСрезПоследних
	               |ГДЕ
	               |	ЦенникиНоменклатурыСрезПоследних.Период = НАЧАЛОПЕРИОДА(&Вчера, ДЕНЬ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПользовательАдрес.АдресПочты КАК АдресПочты,
	               |	Склады.Склад КАК Склад,
	               |	ЕСТЬNULL(ЦенникиВчера.ДатаПоказаЦенника, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоказаЦенника,
	               |	ЕСТЬNULL(ЦенникиВчера.ДатаПечатиЦенника, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПечатиЦенника
	               |ИЗ
	               |	втСклады КАК Склады
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК ПользовательАдрес
	               |		ПО (НЕ ПользовательАдрес.ЭтоПродавец
	               |				ИЛИ ПользовательАдрес.ЭтоПродавец
	               |					И Склады.Склад = ПользовательАдрес.Склад)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦенникиВчера КАК ЦенникиВчера
	               |		ПО (ЦенникиВчера.Склад = Склады.Склад)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПользовательАдрес.АдресПочты,
	               |	Склады.Склад.Наименование";
		
		
	Запрос.УстановитьПараметр("НачПериода", 			НачалоДня(ТекущаяДата() - 7*24*60*60));		// за последниюю неделю
	Запрос.УстановитьПараметр("КонПериода", 			КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Вчера", 					НачалоДня(ТекущаяДата())-1);
	Запрос.УстановитьПараметр("ГруппаПродавцы", 		Справочники.Пользователи.НайтиПоНаименованию("Продавцы", Истина));
	
	// < 25.07.17 Вялов - задача 3392 - Агафонов - исключить магазины
	ТаблСписок = ОбщегоНазначения5LB.ПравилаПолучитьСписок(Перечисления.Правила.Ценники, , );  
	МассивИсключений = Новый Массив;
	МассивИсключений.Очистить();
	Для Каждого ТекСтр Из ТаблСписок Цикл
		Если НЕ ТекСтр.Использовать Тогда
			МассивИсключений.Добавить(ТекСтр.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("СписокИсключить", 		МассивИсключений);
	// 25.07.17 Вялов - задача 3392 - Агафонов - исключить магазины >
	
	Запрос.УстановитьПараметр("РазделПсевдонимов", 		Справочники.ПсевдонимыРазделы.НайтиПоНаименованию("Пользователь-Склад"));		
	Запрос.УстановитьПараметр("Раздел", 				Справочники.ПсевдонимыРазделы.НайтиПоНаименованию("Ценники-контроль"));	
	
	РезультатЗапроса = Запрос.Выполнить(); 
	тз = РезультатЗапроса.Выгрузить();
	
	
	Если тз.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

		
//	КаталогФайловНаДиске = КаталогВременныхФайлов();
//	ИмяФайлаДанных = КаталогФайловНаДиске + "\control.xml";
	
	ТекАдрес = "";
	ТекстПисьма = "";
	
	ТемаПисьма = "";
	стрВремТекстПисьма = "";
	МассивПисем = Новый Массив;
	МассивПисем.Очистить();
	
	стрВчера = Формат(НачалоДня(ТекущаяДата()) - 1, "ДФ=dd.MM.yy");
	стрТекДт = Формат(ТекущаяДата(), "ДФ=dd.MM.yy");
	стрРазд = "----------------------------------------------------------------------------------------------------";

	ТекстПисьмаДоп0 = Символы.ПС + "Необходимо распечатать ценники " + стрТекДт + " по магазинам : " 
					+ Символы.ПС + стрРазд;
	ТекстПисьмаДоп = ТекстПисьмаДоп0;

	
	Для Каждого ТекСтр Из тз Цикл
		
		Если ТекАдрес <> ТекСтр.АдресПочты Тогда
			Если ТекАдрес <> "" Тогда
				// отправить 				
					ТекстПисьма = ТекстПисьма +  стрРазд + Символы.ПС + ТекстПисьмаДоп + Символы.ПС + стрРазд;
					ЭлПисьмо = Новый ИнтернетПочтовоеСообщение;
					ЭлПисьмо.Тема = ТемаПисьма;
					ЭлПисьмо.Тексты.Добавить(ТекстПисьма);
					ЭлПисьмо.Отправитель = "1cinfo@ukitgroup.ru"; //НМА 16.01.18 изменить настройки почтового ящика. Старый ящик:"1cinfo@5lb.ru". Задача от Ивана Иванова
					ЭлПисьмо.ИмяОтправителя = "1C ПЕЧАТЬ ЦЕННИКОВ";
					ЭлПисьмо.Получатели.Добавить(ТекАдрес);				
					МассивПисем.Добавить(ЭлПисьмо);	
					ТекстПисьмаДоп = ТекстПисьмаДоп0;
			КонецЕсли;
	        ТекАдрес = ТекСтр.АдресПочты;
			ТемаПисьма = "1С - оповещение о контроле работы с ценниками по магазинам " + стрВчера;
			//ТекстПисьма = "";
			ТекстПисьма = ТемаПисьма + Символы.ПС
			+ стрРазд + Символы.ПС
			+ "  Магазин                     	Дата открытия ценников   	Дата и время печати " + Символы.ПС
			+ стрРазд + Символы.ПС;         
		КонецЕсли;
		
		стрСклад = Строка(ТекСтр.Склад);
		ДлСтр = СтрДлина(стрСклад);
		Если ДлСтр > 22 Тогда
			стрСклад = Лев(стрСклад, 22);
		ИначеЕсли ДлСтр < 12 Тогда
			стрСклад = стрСклад + Символы.Таб;
			Если ДлСтр <= 5 Тогда
				стрСклад = стрСклад + Символы.Таб;
			КонецЕсли;		
		КонецЕсли;

		ТекстПисьма = ТекстПисьма 
		+ ОбщегоНазначения5LB.СтрокаСПробелами(стрСклад, 30) + Символы.Таб
		+ ОбщегоНазначения5LB.СтрокаСПробелами(Формат(ТекСтр.ДатаПоказаЦенника, "ДФ=dd.MM.yyyy; ДП=нет"), 30) + Символы.Таб
		+ ОбщегоНазначения5LB.СтрокаСПробелами(Формат(ТекСтр.ДатаПечатиЦенника, "ДФ='dd.MM.yy HH:mm:ss'; ДП=нет"), 20)
		+ Символы.ПС; 
		
		
		ТекстПисьмаДоп = ТекстПисьмаДоп + Символы.ПС + Строка(ТекСтр.Склад);
		
	КонецЦикла;
	
	// последнее - не забыть отправить!
	//Если СокрЛП(ТекстПисьма) <> "" Тогда
	ТекстПисьма = ТекстПисьма + стрРазд + Символы.ПС + ТекстПисьмаДоп + Символы.ПС + стрРазд;		
	ЭлПисьмо = Новый ИнтернетПочтовоеСообщение;
	ЭлПисьмо.Тема = ТемаПисьма;
	ЭлПисьмо.Тексты.Добавить(ТекстПисьма);
	ЭлПисьмо.Отправитель = "1cinfo@ukitgroup.ru"; //НМА 16.01.18 изменить настройки почтового ящика. Старый ящик:"1cinfo@5lb.ru". Задача от Ивана Иванова
	ЭлПисьмо.ИмяОтправителя = "1C ПЕЧАТЬ ЦЕННИКОВ";
	ЭлПисьмо.Получатели.Добавить(ТекАдрес);
	МассивПисем.Добавить(ЭлПисьмо);	
//	КонецЕсли;		
		
	// отправить
	Если МассивПисем.Количество() > 0 Тогда	
		Попытка
			Для Каждого ТекПисьмо Из МассивПисем Цикл
				МассивПисемОтправка = Новый Массив;
				МассивПисемОтправка.Очистить();
				МассивПисемОтправка.Добавить(ТекПисьмо);			
				РаботаСРегламентныеЗаданиями.ОтправитьЭлектронныеПисьма(МассивПисемОтправка);
				стрОтправленоНаАдрес = "<неизвестный адрес>";
				Если ТекПисьмо.Получатели.Количество() > 0 Тогда
					стрОтправленоНаАдрес = ТекПисьмо.Получатели[0].Адрес;
				КонецЕсли;
				ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, УровеньЖурналаРегистрации.Ошибка , , , "Отправлено письмо на адрес " 
					+ Строка(стрОтправленоНаАдрес));	
			КонецЦикла;	
			ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, УровеньЖурналаРегистрации.Ошибка , , , "Письма о контроле печати ценников отправлены");	
		Исключение
			ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, УровеньЖурналаРегистрации.Ошибка , , , "Ошибка при попытке отправить письмо на адрес " 
				+ Строка(стрОтправленоНаАдрес));	
		КонецПопытки;	
	Иначе
		ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, УровеньЖурналаРегистрации.Информация , , , "Нет адресов для отправки писем о контроле печати ценников");	
	КонецЕсли;
	
		
	//ЭлПисьмо = Новый ИнтернетПочтовоеСообщение;
	//ЭлПисьмо.Тема = Тема;
	//ТекстПисьма = Текст;
	//ЭлПисьмо.Тексты.Добавить(ТекстПисьма);
	//ЭлПисьмо.Отправитель = "1cinfo@ukitgroup.ru"; //НМА 16.01.18 изменить настройки почтового ящика. Старый ящик:"1cinfo@5lb.ru". Задача от Ивана Иванова
	//ЭлПисьмо.ИмяОтправителя = "Интеграция 1С-EME.WMS";
	//
	//Отказ = ИСТИНА; // на случай если нет адресов для рассылки
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	ЭлПисьмо.Получатели.Добавить(ВыборкаДетальныеЗаписи.ЕМэйл);
	//	Отказ = ЛОЖЬ;
	//КонецЦикла;
	//
	//МассивПисем = Новый Массив;
	//МассивПисем.Добавить(ЭлПисьмо);
	//
	//Если НЕ Отказ Тогда
	//	РаботаСРегламентныеЗаданиями.ОтправитьЭлектронныеПисьма(МассивПисем);
	//КонецЕсли;


КонецПроцедуры


Процедура УстановкаКурсовойНаценки (ТоварСписок = Неопределено) Экспорт
		
	Если ТоварСписок = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КурсоваяНац.Номенклатура,
		|	КурсоваяНац.Валюта КАК ВалютаДокумента,
		|	КурсоваяНац.ТоварныйКурс,
		|	Курсы.Курс КАК КурсБазы
		|ИЗ
		|	РегистрСведений.КурсоваяНаценка.СрезПоследних(&Вчера, ) КАК КурсоваяНац
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК Курсы
		|		ПО КурсоваяНац.Валюта = Курсы.Валюта";
		
		Запрос.УстановитьПараметр("Вчера",НачалоДня(ТекущаяДата()-86400));
		Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата()));
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Остатки.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|			ТОГДА Остатки.Ссылка
		|		ИНАЧЕ Остатки.НоменклатурнаяГруппа
		|	КОНЕЦ КАК Номенклатура,
		|	МАКСИМУМ(Рег.ДокументОприходования.Дата) КАК ДатаДока
		|ПОМЕСТИТЬ ТЗКрайняяДата
		|ИЗ
		// |	РегистрНакопления.ТоварыНаСкладах.Остатки(, Качество = &Новый) КАК Остатки
		|        Справочник.Номенклатура КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, Качество = &Новый) КАК Рег
		|		ПО Остатки.Ссылка = Рег.Номенклатура
		|ГДЕ
		//|	ВЫБОР
		//|			КОГДА Остатки.Номенклатура.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		//|				ТОГДА Остатки.КоличествоОстаток > 0
		//|		КОНЕЦ
		|	Рег.ДокументОприходования ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И Рег.ДокументОприходования.ВалютаДокумента <> &Руб
		// 16.11.16 Вялов
		|   %УСЛОВИЕ_ОТБОР_СПИСОК%
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Остатки.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|			ТОГДА Остатки.Ссылка
		|		ИНАЧЕ Остатки.НоменклатурнаяГруппа
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗКрайняяДата.Номенклатура,
		|	Рег.ДокументОприходования,
		|	Рег.ДокументОприходования.ВалютаДокумента КАК ВалютаДокумента,
		|	Рег.ДокументОприходования.КурсВзаиморасчетов КАК ТоварныйКурс,
		|	Курсы.Курс КАК КурсБазы
		|ПОМЕСТИТЬ ТЗИтог
		|ИЗ
		|	ТЗКрайняяДата КАК ТЗКрайняяДата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, Качество = &Новый) КАК Рег
		|		ПО (ВЫБОР
		|				КОГДА ТЗКрайняяДата.Номенклатура ССЫЛКА Справочник.НоменклатурныеГруппы
		|					ТОГДА ТЗКрайняяДата.Номенклатура = Рег.Номенклатура.НоменклатурнаяГруппа
		|				ИНАЧЕ ТЗКрайняяДата.Номенклатура = Рег.Номенклатура
		|			КОНЕЦ)
		|			И ТЗКрайняяДата.ДатаДока = Рег.ДокументОприходования.Дата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК Курсы
		|		ПО (Рег.ДокументОприходования.ВалютаДокумента = Курсы.Валюта)
		|ГДЕ
		|	Рег.ДокументОприходования ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И Рег.ДокументОприходования.ВалютаДокумента <> &Руб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Ссылка КАК Номенклатура,
		|	ТЗИтог.ДокументОприходования,
		|	ТЗИтог.ВалютаДокумента,
		|	ТЗИтог.ТоварныйКурс,
		|	ТЗИтог.КурсБазы
		|ИЗ
		|	ТЗИтог КАК ТЗИтог
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Остатки //РегистрНакопления.ТоварыНаСкладах.Остатки(, Качество = &Новый) КАК Остатки
		|		ПО (ВЫБОР
		|				КОГДА ТЗИтог.Номенклатура ССЫЛКА Справочник.НоменклатурныеГруппы
		|					ТОГДА ТЗИтог.Номенклатура = Остатки.НоменклатурнаяГруппа
		|				ИНАЧЕ ТЗИтог.Номенклатура = Остатки.Ссылка
		|			КОНЕЦ)";
		
		Если (ТоварСписок<>Неопределено) И (ТоварСписок.Количество())>0 Тогда
			
			// 16.11.16 Вялов
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УСЛОВИЕ_ОТБОР_СПИСОК%", "И Остатки.Ссылка В (&СписокНом)");
			
			Запрос.Текст = Запрос.Текст+"
			|ГДЕ Остатки.Ссылка В (&СписокНом)";
			Запрос.УстановитьПараметр("СписокНом",ТоварСписок);
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("Новый",Справочники.Качество.Новый);
		Запрос.УстановитьПараметр("Руб",Справочники.Валюты.НайтиПоКоду("643"));
		Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата()));
	КонецЕсли;
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	Выб = Рез.Выбрать();
	Пока Выб.Следующий() Цикл
		Набор = РегистрыСведений.КурсоваяНаценка.СоздатьНаборЗаписей();
		Набор.Отбор.Номенклатура.Установить(Выб.Номенклатура);
		Набор.Отбор.Валюта.Установить(Выб.ВалютаДокумента);
		Набор.Отбор.Период.Установить(ТекущаяДата());
		
		Строка = Набор.Добавить();
		Строка.Период = ТекущаяДата();
		Строка.Номенклатура = Выб.Номенклатура;
		Строка.Валюта = Выб.ВалютаДокумента;
		Строка.Курс = Выб.КурсБазы;
		Строка.ТоварныйКурс = Выб.ТоварныйКурс;
		Строка.Наценка = (Строка.Курс/Строка.ТоварныйКурс-1)*100;
		
		Набор.Записать();
		
	КонецЦикла;
	
	//++ Кузнецов С.А. - Анализ всех номенклатурных групп для выявление позиций без курсовой наценки, с последующей установкой - 08.02.2016
	запросДанныхДляУстановкиКурсовойНаценки = Новый Запрос("ВЫБРАТЬ
	|	Номен.НоменклатурнаяГруппа,
	|	КурсоваяНаценкаСрезПоследних.Валюта,
	|	Номен.КоличествоЭлементовГруппы КАК КоличествоЭлементовГруппы,
	|	СУММА(ВЫБОР
	|			КОГДА КурсоваяНаценкаСрезПоследних.Наценка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоКурсовыхНаценок,
	|	СУММА(ПартииТоваровНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура.Ссылка) КАК КоличествоЭлементовГруппы,
	|		Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		Номенклатура.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура.НоменклатурнаяГруппа) КАК Номен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсоваяНаценка.СрезПоследних КАК КурсоваяНаценкаСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки КАК ПартииТоваровНаСкладахОстатки
	|			ПО (ПартииТоваровНаСкладахОстатки.Номенклатура = КурсоваяНаценкаСрезПоследних.Номенклатура)
	|		ПО (КурсоваяНаценкаСрезПоследних.Номенклатура.НоменклатурнаяГруппа = Номен.НоменклатурнаяГруппа)
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсоваяНаценкаСрезПоследних.Валюта,
	|	Номен.НоменклатурнаяГруппа,
	|	Номен.КоличествоЭлементовГруппы
	|
	|ИМЕЮЩИЕ
	|	Номен.КоличествоЭлементовГруппы <> СУММА(ВЫБОР
	|			КОГДА КурсоваяНаценкаСрезПоследних.Наценка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) И
	|	СУММА(ВЫБОР
	|			КОГДА КурсоваяНаценкаСрезПоследних.Наценка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСВалютой.Ссылка КАК Номенклатура,
	|	НоменклатураСВалютой.НоменклатурнаяГруппа,
	|	НоменклатураСВалютой.Валюта
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Ссылка,
	|		ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов.Валюта КАК Валюта
	|	ИЗ
	|		ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов КАК ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|			ПО ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа) КАК НоменклатураСВалютой
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсоваяНаценка.СрезПоследних КАК КурсоваяНаценкаСрезПоследних
	|		ПО НоменклатураСВалютой.Ссылка = КурсоваяНаценкаСрезПоследних.Номенклатура
	|			И НоменклатураСВалютой.Валюта = КурсоваяНаценкаСрезПоследних.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсоваяНаценка.СрезПоследних КАК КНВсеВалюты
	|		ПО НоменклатураСВалютой.Ссылка = КНВсеВалюты.Номенклатура
	|ГДЕ
	|	КурсоваяНаценкаСрезПоследних.Наценка ЕСТЬ NULL 
	|	И КНВсеВалюты.Наценка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КурсоваяНаценкаСрезПоследних.Валюта КАК Валюта,
	|	КурсоваяНаценкаСрезПоследних.ТоварныйКурс,
	|	КурсоваяНаценкаСрезПоследних.Курс,
	|	КурсоваяНаценкаСрезПоследних.Наценка КАК Наценка,
	|	КурсоваяНаценкаСрезПоследних.Период
	|ИЗ
	|	ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов КАК ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсоваяНаценка.СрезПоследних КАК КурсоваяНаценкаСрезПоследних
	|		ПО ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов.НоменклатурнаяГруппа = КурсоваяНаценкаСрезПоследних.Номенклатура.НоменклатурнаяГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюта,
	|	Период УБЫВ
	|ИТОГИ ПО
	|	НоменклатурнаяГруппа
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	массивРезультатовЗапросов = запросДанныхДляУстановкиКурсовойНаценки.ВыполнитьПакет();
	
	// Таблица данных элементов без курсовых наценок  
	тзЭлементовБезКН = массивРезультатовЗапросов[1].Выгрузить();
	
	// Таблица данных по курсовым наценкам внутри номенклатурной группы  
	дзДанныхКНПоНГ = массивРезультатовЗапросов[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого тзЭлементовБезКН Из тзЭлементовБезКН Цикл
		
		
		// Новая запись курсовой наценки
		мзКурсоваяНаценка = РегистрыСведений.КурсоваяНаценка.СоздатьМенеджерЗаписи();
		мзКурсоваяНаценка.Номенклатура = тзЭлементовБезКН.Номенклатура;
		
		// Получим данные КН по НГ
		стрДЗКНПоНГ = дзДанныхКНПоНГ.Строки.Найти(тзЭлементовБезКН.НоменклатурнаяГруппа ,"НоменклатурнаяГруппа");
		
		перваяСтрокаСДаннымиКНПоНГ = стрДЗКНПоНГ.Строки[0];
		
		мзКурсоваяНаценка.Валюта = перваяСтрокаСДаннымиКНПоНГ.Валюта;
		мзКурсоваяНаценка.Период = перваяСтрокаСДаннымиКНПоНГ.Период;
		мзКурсоваяНаценка.Курс = перваяСтрокаСДаннымиКНПоНГ.Курс;
		мзКурсоваяНаценка.ТоварныйКурс = перваяСтрокаСДаннымиКНПоНГ.ТоварныйКурс;
		мзКурсоваяНаценка.Наценка = перваяСтрокаСДаннымиКНПоНГ.Наценка;
		
		мзКурсоваяНаценка.Записать();		
		
	КонецЦикла;			
	//-- Кузнецов С.А. - 08.02.2016
	
	Если ТоварСписок = Неопределено Тогда
		АнализКурсовойНаценки(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// 10.04.17 Вялов - создана отдельная процедура (для СЦЗ) - указание (устно) Иванов, утв. Агафонов - 05.04.17 12:24
Процедура УстановкаКурсовойНаценкиСЦЗ(ТоварСписок = Неопределено) Экспорт
		
	Если ТоварСписок = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КурсоваяНац.Номенклатура,
		|	КурсоваяНац.Валюта КАК ВалютаДокумента,
		|	КурсоваяНац.ТоварныйКурс,
		|	Курсы.Курс КАК КурсБазы
		|ИЗ
		|	РегистрСведений.КурсоваяНаценка.СрезПоследних(&Вчера, ) КАК КурсоваяНац
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК Курсы
		|		ПО КурсоваяНац.Валюта = Курсы.Валюта";
		
		Запрос.УстановитьПараметр("Вчера",НачалоДня(ТекущаяДата()-86400));
		Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата()));
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Остатки.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|			ТОГДА Остатки.Ссылка
		|		ИНАЧЕ Остатки.НоменклатурнаяГруппа
		|	КОНЕЦ КАК Номенклатура,
		|	МАКСИМУМ(Рег.ДокументОприходования.Дата) КАК ДатаДока
		|ПОМЕСТИТЬ ТЗКрайняяДата
		|ИЗ
		// |	РегистрНакопления.ТоварыНаСкладах.Остатки(, Качество = &Новый) КАК Остатки
		|        Справочник.Номенклатура КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, Качество = &Новый) КАК Рег
		|		ПО Остатки.Ссылка = Рег.Номенклатура
		|ГДЕ
		//|	ВЫБОР
		//|			КОГДА Остатки.Номенклатура.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		//|				ТОГДА Остатки.КоличествоОстаток > 0
		//|		КОНЕЦ
		|	Рег.ДокументОприходования ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И Рег.ДокументОприходования.ВалютаДокумента <> &Руб
		// 16.11.16 Вялов
		|   %УСЛОВИЕ_ОТБОР_СПИСОК%
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Остатки.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|			ТОГДА Остатки.Ссылка
		|		ИНАЧЕ Остатки.НоменклатурнаяГруппа
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗКрайняяДата.Номенклатура,
		|	Рег.ДокументОприходования,
		|	Рег.ДокументОприходования.ВалютаДокумента КАК ВалютаДокумента,
		|	Рег.ДокументОприходования.КурсВзаиморасчетов КАК ТоварныйКурс,
		|	Курсы.Курс КАК КурсБазы
		|ПОМЕСТИТЬ ТЗИтог
		|ИЗ
		|	ТЗКрайняяДата КАК ТЗКрайняяДата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, Качество = &Новый) КАК Рег
		|		ПО (ВЫБОР
		|				КОГДА ТЗКрайняяДата.Номенклатура ССЫЛКА Справочник.НоменклатурныеГруппы
		|					ТОГДА ТЗКрайняяДата.Номенклатура = Рег.Номенклатура.НоменклатурнаяГруппа
		|				ИНАЧЕ ТЗКрайняяДата.Номенклатура = Рег.Номенклатура
		|			КОНЕЦ)
		|			И ТЗКрайняяДата.ДатаДока = Рег.ДокументОприходования.Дата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК Курсы
		|		ПО (Рег.ДокументОприходования.ВалютаДокумента = Курсы.Валюта)
		|ГДЕ
		|	Рег.ДокументОприходования ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И Рег.ДокументОприходования.ВалютаДокумента <> &Руб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Ссылка КАК Номенклатура,
		|	ТЗИтог.ДокументОприходования,
		|	ТЗИтог.ВалютаДокумента,
		|	ТЗИтог.ТоварныйКурс,
		|	ТЗИтог.КурсБазы
		|ИЗ
		|	ТЗИтог КАК ТЗИтог
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Остатки //РегистрНакопления.ТоварыНаСкладах.Остатки(, Качество = &Новый) КАК Остатки
		|		ПО (ВЫБОР
		|				КОГДА ТЗИтог.Номенклатура ССЫЛКА Справочник.НоменклатурныеГруппы
		|					ТОГДА ТЗИтог.Номенклатура = Остатки.НоменклатурнаяГруппа
		|				ИНАЧЕ ТЗИтог.Номенклатура = Остатки.Ссылка
		|			КОНЕЦ)";
		
		Если (ТоварСписок<>Неопределено) И (ТоварСписок.Количество())>0 Тогда
			
			// 16.11.16 Вялов
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УСЛОВИЕ_ОТБОР_СПИСОК%", "И Остатки.Ссылка В (&СписокНом)");
			
			Запрос.Текст = Запрос.Текст+"
			|ГДЕ Остатки.Ссылка В (&СписокНом)";
			Запрос.УстановитьПараметр("СписокНом",ТоварСписок);
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("Новый",Справочники.Качество.Новый);
		Запрос.УстановитьПараметр("Руб",Справочники.Валюты.НайтиПоКоду("643"));
		Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата()));
	КонецЕсли;
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	Выб = Рез.Выбрать();
	Пока Выб.Следующий() Цикл
		Набор = РегистрыСведений.КурсоваяНаценка.СоздатьНаборЗаписей();
		Набор.Отбор.Номенклатура.Установить(Выб.Номенклатура);
		Набор.Отбор.Валюта.Установить(Выб.ВалютаДокумента);
		Набор.Отбор.Период.Установить(ТекущаяДата());
		
		Строка = Набор.Добавить();
		Строка.Период = ТекущаяДата();
		Строка.Номенклатура = Выб.Номенклатура;
		Строка.Валюта = Выб.ВалютаДокумента;
		Строка.Курс = Выб.КурсБазы;
		Строка.ТоварныйКурс = Выб.ТоварныйКурс;
		Строка.Наценка = (Строка.Курс/Строка.ТоварныйКурс-1)*100;
		
		Набор.Записать();
		
	КонецЦикла;
	
	//++ Кузнецов С.А. - Анализ всех номенклатурных групп для выявление позиций без курсовой наценки, с последующей установкой - 08.02.2016
	запросДанныхДляУстановкиКурсовойНаценки = Новый Запрос("ВЫБРАТЬ
	|	Номен.НоменклатурнаяГруппа,
	|	КурсоваяНаценкаСрезПоследних.Валюта,
	|	Номен.КоличествоЭлементовГруппы КАК КоличествоЭлементовГруппы,
	|	СУММА(ВЫБОР
	|			КОГДА КурсоваяНаценкаСрезПоследних.Наценка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоКурсовыхНаценок,
	|	СУММА(ПартииТоваровНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура.Ссылка) КАК КоличествоЭлементовГруппы,
	|		Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		Номенклатура.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура.НоменклатурнаяГруппа) КАК Номен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсоваяНаценка.СрезПоследних КАК КурсоваяНаценкаСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки КАК ПартииТоваровНаСкладахОстатки
	|			ПО (ПартииТоваровНаСкладахОстатки.Номенклатура = КурсоваяНаценкаСрезПоследних.Номенклатура)
	|		ПО (КурсоваяНаценкаСрезПоследних.Номенклатура.НоменклатурнаяГруппа = Номен.НоменклатурнаяГруппа)
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсоваяНаценкаСрезПоследних.Валюта,
	|	Номен.НоменклатурнаяГруппа,
	|	Номен.КоличествоЭлементовГруппы
	|
	|ИМЕЮЩИЕ
	|	Номен.КоличествоЭлементовГруппы <> СУММА(ВЫБОР
	|			КОГДА КурсоваяНаценкаСрезПоследних.Наценка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) И
	|	СУММА(ВЫБОР
	|			КОГДА КурсоваяНаценкаСрезПоследних.Наценка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСВалютой.Ссылка КАК Номенклатура,
	|	НоменклатураСВалютой.НоменклатурнаяГруппа,
	|	НоменклатураСВалютой.Валюта
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Ссылка,
	|		ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов.Валюта КАК Валюта
	|	ИЗ
	|		ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов КАК ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|			ПО ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа) КАК НоменклатураСВалютой
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсоваяНаценка.СрезПоследних КАК КурсоваяНаценкаСрезПоследних
	|		ПО НоменклатураСВалютой.Ссылка = КурсоваяНаценкаСрезПоследних.Номенклатура
	|			И НоменклатураСВалютой.Валюта = КурсоваяНаценкаСрезПоследних.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсоваяНаценка.СрезПоследних КАК КНВсеВалюты
	|		ПО НоменклатураСВалютой.Ссылка = КНВсеВалюты.Номенклатура
	|ГДЕ
	|	КурсоваяНаценкаСрезПоследних.Наценка ЕСТЬ NULL 
	|	И КНВсеВалюты.Наценка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КурсоваяНаценкаСрезПоследних.Валюта КАК Валюта,
	|	КурсоваяНаценкаСрезПоследних.ТоварныйКурс,
	|	КурсоваяНаценкаСрезПоследних.Курс,
	|	КурсоваяНаценкаСрезПоследних.Наценка КАК Наценка,
	|	КурсоваяНаценкаСрезПоследних.Период
	|ИЗ
	|	ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов КАК ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсоваяНаценка.СрезПоследних КАК КурсоваяНаценкаСрезПоследних
	|		ПО ВР_НоменклатурныеГруппыДляРедактированиеКурсовойНаценкиЭлементов.НоменклатурнаяГруппа = КурсоваяНаценкаСрезПоследних.Номенклатура.НоменклатурнаяГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюта,
	|	Период УБЫВ
	|ИТОГИ ПО
	|	НоменклатурнаяГруппа
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	массивРезультатовЗапросов = запросДанныхДляУстановкиКурсовойНаценки.ВыполнитьПакет();
	
	// Таблица данных элементов без курсовых наценок  
	тзЭлементовБезКН = массивРезультатовЗапросов[1].Выгрузить();
	
	// Таблица данных по курсовым наценкам внутри номенклатурной группы  
	дзДанныхКНПоНГ = массивРезультатовЗапросов[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого тзЭлементовБезКН Из тзЭлементовБезКН Цикл
		
		
		// Новая запись курсовой наценки
		мзКурсоваяНаценка = РегистрыСведений.КурсоваяНаценка.СоздатьМенеджерЗаписи();
		мзКурсоваяНаценка.Номенклатура = тзЭлементовБезКН.Номенклатура;
		
		// Получим данные КН по НГ
		стрДЗКНПоНГ = дзДанныхКНПоНГ.Строки.Найти(тзЭлементовБезКН.НоменклатурнаяГруппа ,"НоменклатурнаяГруппа");
		
		перваяСтрокаСДаннымиКНПоНГ = стрДЗКНПоНГ.Строки[0];
		
		мзКурсоваяНаценка.Валюта = перваяСтрокаСДаннымиКНПоНГ.Валюта;
		мзКурсоваяНаценка.Период = перваяСтрокаСДаннымиКНПоНГ.Период;
		мзКурсоваяНаценка.Курс = перваяСтрокаСДаннымиКНПоНГ.Курс;
		мзКурсоваяНаценка.ТоварныйКурс = перваяСтрокаСДаннымиКНПоНГ.ТоварныйКурс;
		мзКурсоваяНаценка.Наценка = перваяСтрокаСДаннымиКНПоНГ.Наценка;
		
		мзКурсоваяНаценка.Записать();		
		
	КонецЦикла;			
	//-- Кузнецов С.А. - 08.02.2016
	
	Если ТоварСписок = Неопределено Тогда
		АнализКурсовойНаценкиСЦЗ(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры
