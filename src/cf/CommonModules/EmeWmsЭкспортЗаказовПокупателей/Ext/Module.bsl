// Copyright (C) 2012-2016 Engineer Mareev Enterprises

//	Функция РазрешенКЭкспорту возвращает Истина, если заказ покупателя разрешен к экспорту.
Функция РазрешенКЭкспорту(ЗаказПокупателя) Экспорт
	
	//НМА 10.11.17 >>
	//Если ЗаказПокупателя.ПометкаУдаления Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//НМА 10.11.17 <<
	
	Если Не ЗаказПокупателя.Проведен Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собран Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Отказ Тогда
		Возврат Истина;
	КонецЕсли;


	// Катков А. 20.09.2016 >>
	//Если Не ЗаказПокупателя.адмСкладОтгрузки.EmeWmsУчет Тогда
	Если Не ЗаказПокупателя.СкладГруппа.EmeWmsУчет Тогда
	// Катков А. 20.09.2016 <<  		
		Возврат Ложь;
	КонецЕсли;
	
	// Катков А. 20.09.2016 >>
	//Если ЗаказПокупателя.адмСтатусЗаказа <> Справочники.адмСтатусы.КСборке Тогда
	Если ЗаказПокупателя.СтатусыСборкиЗаказа <> Перечисления.СтатусыСборкиЗаказа.ГотовКСборке И СокрЛП(ЗаказПокупателя.Статус.Код) <> "отмена заказа" И НЕ ЗаказПокупателя.ПометкаУдаления Тогда //НМА 10.11.17 если не отмена заказа и не ПометкаУдаления
	// Катков А. 20.09.2016 <<  
		Возврат Ложь;
	КонецЕсли;
	
	//НМА 10.11.17 >>
	Если ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке И Не ЗаказПокупателя.Проведен И СокрЛП(ЗаказПокупателя.Статус.Код) <> "отмена заказа" И НЕ ЗаказПокупателя.ПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли;
	//НМА 10.11.17 <<
	 
	Возврат Истина;
	
КонецФункции

//	Процедура ПометитьКЭкспорту помечает заказ покупателя к экспорту.
Процедура ПометитьКЭкспорту(ЗаказПокупателя) Экспорт

	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуЗаказовПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказПокупателя.Установить(ЗаказПокупателя.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.КЭкспорту = Истина;
		НаборЗаписей.Записать();
		Возврат;
	КонецЦикла;
	
  	НоваяЗапись = РегистрыСведений.EmeWmsПометкиКЭкспортуЗаказовПокупателей.СоздатьМенеджерЗаписи();
	НоваяЗапись.ЗаказПокупателя = ЗаказПокупателя.Ссылка;
	НоваяЗапись.КЭкспорту = Истина;
    НоваяЗапись.Записать(); 
		 
КонецПроцедуры

Процедура ПометитьКЭкспортуПовторно(ЗаказПокупателя) Экспорт

	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуЗаказовПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказПокупателя.Установить(ЗаказПокупателя.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.КЭкспорту = Истина;
		Запись.ДатаЭкспорта=Неопределено;
		НаборЗаписей.Записать();
		Возврат;
	КонецЦикла;
	
  	НоваяЗапись = РегистрыСведений.EmeWmsПометкиКЭкспортуЗаказовПокупателей.СоздатьМенеджерЗаписи();
	НоваяЗапись.ЗаказПокупателя = ЗаказПокупателя.Ссылка;
	НоваяЗапись.КЭкспорту = Истина;
    НоваяЗапись.Записать(); 
		 
КонецПроцедуры


//	Функция ПомеченКЭкспорту возвращает Истина, если заказ покупателя помечен к экспорту.
Функция ПомеченКЭкспорту(ЗаказПокупателя) Экспорт
	
	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуЗаказовПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказПокупателя.Установить(ЗаказПокупателя.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Возврат Запись.КЭкспорту;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//	Процедура ПодтвердитьЭкспорт подтверждает экспорт заказа покупателя.
Процедура ПодтвердитьЭкспорт(ЗаказПокупателяСсылка) Экспорт

	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуЗаказовПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказПокупателя.Установить(ЗаказПокупателяСсылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.КЭкспорту = Ложь;
		Запись.ДатаЭкспорта = ТекущаяДата();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	//ЗаказОбъект = ЗаказПокупателяСсылка.ПолучитьОбъект();
	//ЗаказОбъект.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собирается;
	//ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	// Катков А. 20.09.2016 >>
	////	Найдем перемещение СкладEME->СкладEME и изменим у него статус с Новый->Собирается
	//ПеремещениеТоваровСсылка = EmeWmsУтилиты.ПолучитьПеремещениеВнутриСклада(ЗаказПокупателяСсылка);
	//Если ПеремещениеТоваровСсылка.адмСтатусЗаказа = Справочники.адмСтатусы.Новый Тогда
	//	ПеремещениеТоваров = ПеремещениеТоваровСсылка.ПолучитьОбъект(); 
	//	ПеремещениеТоваров.адмСтатусЗаказа = Справочники.адмСтатусы.Собирается;
	//	ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Проведение);
	//КонецЕсли;
	
	//НМА 31.08.17 >>
	////	Переведем статус заказа КСборке->Собирается
	////Если ЗаказПокупателяСсылка.адмСтатусЗаказа = Справочники.адмСтатусы.КСборке Тогда
	//Если ЗаказПокупателяСсылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке ИЛИ ЗаказПокупателяСсылка.ПометкаУдаления Тогда //НМА 10.11.17
	//	ЗаказПокупателяОбъект = ЗаказПокупателяСсылка.ПолучитьОбъект();
	//	//ЗаказПокупателяОбъект.адмСтатусЗаказа = Справочники.адмСтатусы.Собирается;
	//	//ЗаказПокупателяОбъект.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собирается;     //НМА 07.09.17
	//	ЗаказПокупателяОбъект.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.ОтправленНаСклад; //НМА 07.09.17
	//	ЗаказПокупателяОбъект.Записать();
	//КонецЕсли;
    //НМА 31.08.17 <<
	
КонецПроцедуры

//	Процедура ПометитьКЭкспорту помечает заказ покупателя на событии при записи заказа покупателя.
Процедура ПометитьКЭкспортуПриЗаписиЗаказаПокупателя(Источник, Отказ) Экспорт

	ПометитьКЭкспорту(Источник);
		 
КонецПроцедуры

//	Процедура ЭкспортироватьЗаказыПокупателей экспортирует заказы покупателей, помеченные к экспорту.
Процедура ЭкспортироватьЗаказыПокупателей(ERPData) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EmeWmsПометкиКЭкспортуЗаказовПокупателей.ЗаказПокупателя.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.EmeWmsПометкиКЭкспортуЗаказовПокупателей КАК EmeWmsПометкиКЭкспортуЗаказовПокупателей
	|ГДЕ
	|	EmeWmsПометкиКЭкспортуЗаказовПокупателей.КЭкспорту
	|   И EmeWmsПометкиКЭкспортуЗаказовПокупателей.ЗаказПокупателя.Дата >= &ДатаНачалаВыгрузки
	|	И ВЫБОР
	|			КОГДА &НеВыгружатьПовторноЗаказы
	|				ТОГДА EmeWmsПометкиКЭкспортуЗаказовПокупателей.ДатаЭкспорта = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)  
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки",Константы.ДатаНачалаИспользованияИнтеграцииСEME_WMS.Получить()); //НМА 14.12.17
	Запрос.УстановитьПараметр("НеВыгружатьПовторноЗаказы",Константы.EmeWmsИмпортDespatchНеВыгружатьПовторноЗаказы.Получить()); //НМА 08.12.17 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Счетчик = 0;
	
	Пока Выборка.Следующий() Цикл
		
		//	Защита от плохих данных
		Если Выборка.Ссылка = Null Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Выборка.Ссылка.Местоположение <> Перечисления.Местоположения.Хлебниково) И 
			((Выборка.Ссылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Отказ) ИЛИ (Выборка.Ссылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УдалениеТовара)) Тогда
			
			НачатьТранзакцию();
			Попытка    		
				
				EmeWmsERPEngine.BeginExport(ERPData, "erp", "wms", "asn");
				Попытка
					ЭкспортироватьЗаказПокупателяАСН(ERPData, Выборка.Ссылка);
					ПодтвердитьЭкспорт(Выборка.Ссылка); 
					Счетчик = Счетчик + 1;
					
					EmeWmsERPEngine.CommitExport(ERPData);
					
				Исключение
					//Сообщить(ОписаниеОшибки());
					EmeWmsERPEngine.RollbackExport(ERPData);
					ВызватьИсключение(ОписаниеОшибки());
				КонецПопытки;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				Ошибка = ОписаниеОшибки();
				//Сообщить(Ошибка);
				ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт сообщения ASN-возвратЗаказов: " + Ошибка);
				ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "No: " + Выборка.Ссылка + Символы.ПС + Ошибка;
				EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Критическая ошибка экспорта сообщения ASN-возвратЗаказов", ТекстСообщения);
			КонецПопытки;
			
		Иначе
			//	ВАЖНО! Транзакция источника сообщения должна быть внешней
			НачатьТранзакцию();
			Попытка    		
				
				EmeWmsERPEngine.BeginExport(ERPData, "erp", "wms", "orders");
				Попытка
					
					Если РазрешенКЭкспорту(Выборка.Ссылка) Тогда
						EmeWmsУтилиты.ПишемВРегистр_5LB_ЭтапыОбработкиЗаказов("ДатаНачалаПередачиВEME",ТекущаяДата(),Выборка.Ссылка);
						ЭкспортироватьЗаказПокупателя(ERPData, Выборка.Ссылка);
						ПодтвердитьЭкспорт(Выборка.Ссылка); //НМА 06.12.17
						Счетчик = Счетчик + 1;
					КонецЕсли;
					
					EmeWmsERPEngine.CommitExport(ERPData);
					EmeWmsУтилиты.ПишемВРегистр_5LB_ЭтапыОбработкиЗаказов("ДатаОкончанияПередачиВEME",ТекущаяДата(),Выборка.Ссылка);
					EmeWmsУтилиты.ПишемВРегистр_5LB_ЭтапыОбработкиЗаказов("ПереданВEME",1,Выборка.Ссылка);
				Исключение
					EmeWmsERPEngine.RollbackExport(ERPData);
					ВызватьИсключение(ОписаниеОшибки());
				КонецПопытки;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				Ошибка = ОписаниеОшибки();
				//Сообщить(Ошибка);
				ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт сообщения ORDERS: " + Ошибка);
				ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "No: " + Выборка.Ссылка + Символы.ПС + Ошибка;
				EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Критическая ошибка экспорта сообщения ORDERS", ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	//Если Счетчик <> 0 Тогда
	//	Сообщить("Проэкспортировали сообщения ORDERS (" + Счетчик + "шт)");
	//КонецЕсли
			
КонецПроцедуры

//	Процедура ЭкспортироватьЗаказПокупателя экспортирует один заказ покупателя.
Процедура ЭкспортироватьЗаказПокупателя(ERPData, Заказ)
			
	// Заголовок заказа
	EmeWmsERPEngine.AppendHeaderLine(ERPData);
	ERPData.header.id            = Заказ.УникальныйИдентификатор();
	ERPData.header.order_no	  	 = СокрЛП(Заказ.Номер);
	ERPData.header.whs_code		 = EmeWmsУтилиты.ПолучитьКодСклада(Заказ.СкладГруппа);
	Если СокрЛП(Заказ.СкладГруппа.Код) = "000000005" Тогда
		ERPData.header.vendor_code	 = "7715948131"; //Заказ.Организация.ИНН;
	Иначе
		ERPData.header.vendor_code	 = "1313131313";
	КонецЕсли;
	//ERPData.header.comment		 = Строка(Лев(Заказ.Комментарий, 128))+"||"+Строка(Лев(Заказ.КомментарийВнутр, 128));
	ERPData.header.comment		 = Лев(Заказ.КомментарийВнутр, 128);
	ERPData.header.order_date	 = Заказ.Дата;
	ERPData.header.despatch_date = Заказ.ДатаОтгрузки;
	ERPData.header.order_no_internet = Заказ.НомерДокаСайт;
	ERPData.header.wrh_no_internet = Заказ.Номер4Склад;
	ERPData.header.target = Строка(Заказ.ПунктСамовывоза);
	
	
	//НМА 14.11.17 Штрихкод заказа>>
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ШтрихкодыЗаказы.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыЗаказы КАК ШтрихкодыЗаказы
	|ГДЕ
	|	ШтрихкодыЗаказы.Владелец = &ЗаказПокупателя
	|	И ТИПЗНАЧЕНИЯ(ШтрихкодыЗаказы.Владелец) = ТИП(Документ.ЗаказПокупателя)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкод УБЫВ";
	Запрос.УстановитьПараметр("ЗаказПокупателя", Заказ);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		ERPData.header.CellNumberERP = ВыборкаДетальныеЗаписи.Штрихкод;
	Иначе
		Если НЕ Заказ.ПометкаУдаления Тогда //НМА 16.11.17
			ТекЗапись = РегистрыСведений.ШтрихкодыЗаказы.СоздатьМенеджерЗаписи();
			ТекЗапись.Владелец         = Заказ;
			ТекЗапись.ТипШтрихкода     = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
			//ТекЗапись.Штрихкод         = РаботаСТорговымОборудованием.СформироватьШтрихКодЗаказа(); //НМА 16.11.17
			ТекЗапись.Штрихкод         = СформироватьШтрихКодЗаказа(); //НМА 16.11.17
			Попытка
				ТекЗапись.Записать();
				ERPData.header.CellNumberERP = ТекЗапись.Штрихкод;
			Исключение
			КонецПопытки;
		КонецЕсли; //НМА 16.11.17
	КонецЕсли;
	//НМА 14.11.17 Штрихкод заказа<<
	
	УИДПокупателя = Заказ.Контрагент.УникальныйИдентификатор();
	КодПокупателя = СокрЛП(Заказ.Контрагент.Код);
	ИмяПокупателя = Заказ.Контрагент.Наименование;
	АдресПокупателя = "";
	
	УИДАдресаДоставки = Заказ.УдалитьКонтактноеЛицо.УникальныйИдентификатор();
	КодАдресаДоставки = СокрЛП(Заказ.УдалитьКонтактноеЛицо.Код);
	ИмяАдресаДоставки = Заказ.ФИО;
	
	//НМА 20.11.17 задача объединения покупателей по группам >>
	ГруппаКонтрагентов = Справочники.Контрагенты.ПустаяСсылка();
	Если ЗначениеЗаполнено(Заказ.НомерДокаСайт) Тогда 
		Если НЕ Заказ.Опт Тогда 
			ГруппаКонтрагентов = Справочники.Контрагенты.НайтиПоКоду("000000130"); // Покупатели - ИнтернетМагазин
			Если ЗначениеЗаполнено(Заказ.ДатаОплаты) Тогда //НМА 28.11.17 Приоритет на сборку заказов
				ERPData.header.calc_priority = 1; //НМА 28.11.17 Приоритет на сборку заказов
			КонецЕсли; //НМА 28.11.17 Приоритет на сборку заказов
		Иначе                   
			ГруппаКонтрагентов = Справочники.Контрагенты.НайтиПоКоду("000000041"); // Оптовики
		КонецЕсли;
		//ИначеЕсли Внутренний покупатель?  	
	Иначе                      
		ГруппаКонтрагентов = Справочники.Контрагенты.НайтиПоКоду("000000016"); // Магазины
	КонецЕсли;
	Если ГруппаКонтрагентов <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		УИДАдресаДоставки = ГруппаКонтрагентов.УникальныйИдентификатор();
		КодАдресаДоставки = СокрЛП(ГруппаКонтрагентов.Код);
		ИмяАдресаДоставки = ГруппаКонтрагентов.Наименование;
	КонецЕсли;
	//НМА 20.11.17 задача объединения покупателей по группам <<
	
	//НМА 20.11.17 задача объединения покупателей по группам >>
	Если ГруппаКонтрагентов = Справочники.Контрагенты.НайтиПоКоду("000000016") Тогда // Магазины
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗначенияСвойствОбъектов.Значение КАК Адрес
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Склад
		|	И ЗначенияСвойствОбъектов.Свойство.Наименование = ""Адрес""
		|	И ТИПЗНАЧЕНИЯ(ЗначенияСвойствОбъектов.Объект) = ТИП(Справочник.Склады)";
		Запрос.УстановитьПараметр("Склад", Заказ.СкладГруппа);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			АдресАдресаДоставки = ВыборкаДетальныеЗаписи.Адрес;
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Заказы4Logistic.Время,
		|	Заказы4Logistic.Метро,
		|	Заказы4Logistic.АдресДоставки,
		|	Заказы4Logistic.Округ,
		|	Заказы4Logistic.Зона,
		|	Заказы4Logistic.Телефон,
		|	Заказы4Logistic.Дата,
		|	Заказы4Logistic.Ответственный,
		|	Заказы4Logistic.Срочность,
		|	Заказы4Logistic.ТекстЗадачи,
		|	Заказы4Logistic.ФИО,
		|	Заказы4Logistic.Вес,
		|	Заказы4Logistic.Затраты,
		|	Заказы4Logistic.Район,
		|	Заказы4Logistic.НаселённыйПункт,
		|	Заказы4Logistic.Улица,
		|	Заказы4Logistic.Дом,
		|	Заказы4Logistic.Корпус,
		|	Заказы4Logistic.Строение,
		|	Заказы4Logistic.Подъезд,
		|	Заказы4Logistic.Квартира,
		|	Заказы4Logistic.Индекс,
		|	Заказы4Logistic.email,
		|	Заказы4Logistic.Страна
		|ИЗ
		|	РегистрСведений.Заказы4Logistic КАК Заказы4Logistic
		|ГДЕ
		|	Заказы4Logistic.Заказ = &Заказ";
		
		Запрос.УстановитьПараметр("Заказ", Заказ);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			АдресДоставки = "" + ВыборкаДетальныеЗаписи.АдресДоставки + ", тел." + ВыборкаДетальныеЗаписи.Телефон 
			+ ", зона " + ВыборкаДетальныеЗаписи.Зона + ", м." + ВыборкаДетальныеЗаписи.Метро 
			+ ", e-mail " + ВыборкаДетальныеЗаписи.email;
		КонецЕсли; 
		АдресАдресаДоставки = Лев(АдресДоставки, 256);
		
	КонецЕсли; //НМА 20.11.17 задача объединения покупателей по группам <<
	
	ERPData.header.customer_id   =	УИДПокупателя;
	ERPData.header.customer_code =	КодПокупателя;
	ERPData.header.customer_name =	ИмяПокупателя;
	ERPData.header.customer_addr = 	АдресПокупателя;
	ERPData.header.delivery_id 	 =	УИДАдресаДоставки;
	ERPData.header.delivery_code =	КодАдресаДоставки;
	ERPData.header.delivery_name =	ИмяАдресаДоставки;
	ERPData.header.delivery_addr =	АдресАдресаДоставки;
	
	Если ЗначениеЗаполнено(Заказ.ТранспортнаяКомп) Тогда // транспортная компания
		//ERPData.header.eorder 	= 3;
		ERPData.header.eorder 	= "3"+Прав(Заказ.ТранспортнаяКомп.Код,4); //НМА 31.08.17
	ИначеЕсли ЗначениеЗаполнено(Заказ.НомерДокаСайт) Тогда // интернет-магазин
		ERPData.header.eorder 	= 1;
	Иначе // ...
		ERPData.header.eorder 	= 2;
	КонецЕсли; 
	
	Если (Заказ.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Отказ) И (Заказ.Проведен) Тогда
		ERPData.header.total_lines = 0;
	ИначеЕсли СокрЛП(Заказ.Статус.Код) <> "отмена заказа" и Заказ.Проведен Тогда //НЕ Заказ.ПометкаУдаления Тогда //НМА 10.11.17 если не отмена заказа и не ПометкаУдаления
		
		//	Строки заказа
		EmeWmsERPEngine.SelectChild(ERPData, "lines");
		УИДСтроки = 0;
		Для Каждого СтрокаТовара Из Заказ.Товары Цикл
			
			УИДСтроки = УИДСтроки + 1;
			
			//НМА 02.11.17 >>
			Если Константы.EmeWmsНеУчитыватьДопТоварыСоСроками.Получить() Тогда //НМА 08.11.17
				Если СтрокаТовара.Номенклатура.емеЭтоДополнительнаяНоменклатура И ЗначениеЗаполнено(СтрокаТовара.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру) Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли; //НМА 08.11.17
			//НМА 02.11.17 <<
			
			Если СокрЛП(СтрокаТовара.Номенклатура.Артикул) = "Упаковка" Тогда
				Продолжить;
			КонецЕсли;
			
			
			EmeWmsERPEngine.AppendChildLine(ERPData);
			ERPData.lines.id			= СтрокаТовара.КлючСтроки;//УИДСтроки;
			ERPData.lines.order_line_no	= СтрокаТовара.КлючСтроки;//СтрокаТовара.НомерСтроки;
			ERPData.lines.goods_id		= EmeWmsУтилиты.ПолучитьКод(СтрокаТовара.Номенклатура);
			ERPData.lines.goods_code	= EmeWmsУтилиты.ПолучитьКодСпрНоменклатура_НеДляСинхронизации(СтрокаТовара.Номенклатура);
			ERPData.lines.lot_no = "-";
			//НМА 31.08.17 >>
			Если СтрокаТовара.Номенклатура.емеЭтоДополнительнаяНоменклатура И ЗначениеЗаполнено(СтрокаТовара.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру) Тогда //НМА 11.10.17 Срок годности дополнительных
				ERPData.lines.bbd = СтрокаТовара.Номенклатура.емеСрокГодностиДляДополнительных; //НМА 11.10.17 Срок годности дополнительных
			ИначеЕсли ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры) Тогда
				Если ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры.СрокГодности) Тогда
					ERPData.lines.bbd = СтрокаТовара.СерияНоменклатуры.СрокГодности;
				КонецЕсли;
			КонецЕсли;
			//НМА 31.08.17 <<
			
			//НМА 19.10.17 >>
			Если ЗначениеЗаполнено(ERPData.lines.bbd) Тогда
				Если ERPData.lines.bbd >= НачалоДня(ТекущаяДата()) Тогда 
					ERPData.lines.stock_status = "N";
				Иначе
					ERPData.lines.stock_status = "E";
				КонецЕсли;
			Иначе
				ERPData.lines.stock_status = "N";
			КонецЕсли;
			//НМА 19.10.17 <<
			
			ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			
			// выберем как базовую Единицу измерения с коэффициентом 1
			ЕдИзм_К1 = EmeWmsУтилиты.ПолучитьБазовуюЕдиницуИзмеренияК1(СтрокаТовара.Номенклатура);
			
			Если СтрокаТовара.ЕдиницаИзмерения = ЕдИзм_К1 Тогда // берем кол-во в базовых единицах
				ERPData.lines.quantity		= СтрокаТовара.Количество;
				ЕдиницаИзмерения 			= ЕдИзм_К1;
			Иначе
				Если ЕдИзм_К1 <> Неопределено Тогда
					ERPData.lines.quantity	= СтрокаТовара.Количество * СтрокаТовара.Коэффициент; // берем кол-во в базовых единицах
					ЕдиницаИзмерения 		= ЕдИзм_К1;
				Иначе
					ERPData.lines.quantity	= СтрокаТовара.Количество;  // не нашли базовую единицу берем кол-во в текущих единицах (ОШИБКА!)
					ЕдиницаИзмерения 		= СтрокаТовара.ЕдиницаИзмерения;
					ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт док-та: """ + Заказ + """, не найдена Базовая единица измерения у """ + СтрокаТовара.Номенклатура + """");
				КонецЕсли;
			КонецЕсли; 
			Если ЗначениеЗаполнено(ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации) Тогда
				ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации;
			Иначе
				ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование;
			КонецЕсли; 
		КонецЦикла;	
		
		//Проверить наличие удалённых строк
		EmeWmsERPEngine.ПроверитьУдаленныеСтрокиВДокументе(ERPData,Заказ,УИДСтроки);		
	ИначеЕсли НЕ Заказ.Проведен Тогда
		ERPData.header.total_lines = 0;
	КонецЕсли;  //НМА 09.11.17 если не отмена заказа

КонецПроцедуры

Процедура ЭкспортироватьЗаказПокупателяАСН(ERPData, Заказ)
	
	// Заголовок заказа
	EmeWmsERPEngine.AppendHeaderLine(ERPData);
	ERPData.header.id            = Заказ.УникальныйИдентификатор();
	ERPData.header.asn_reg_no	 = СокрЛП(Заказ.Номер)+" (возврат заказа)";
	ERPData.header.whs_to_code 	 = EmeWmsУтилиты.ПолучитьКодСклада(Заказ.СкладГруппа);
	Если ERPData.header.whs_to_code = "5LB" Тогда
		ERPData.header.vendor_to_code	 = "7715948131"; //Заказ.Организация.ИНН;
	Иначе
		ERPData.header.vendor_to_code	 = "1313131313";
	КонецЕсли;
	ERPData.header.supplier_id 		= EmeWmsУтилиты.ПолучитьКод(Заказ.Контрагент);
	ERPData.header.supplier_code  	= EmeWmsУтилиты.ПолучитьКод(Заказ.Контрагент) + " (возврат заказа)";
	ERPData.header.supplier_name  	= Заказ.Контрагент.Наименование;
	ERPData.header.comment		 = Лев(Заказ.Комментарий, 128);
	
	//ERPData.header.whs_code		 = EmeWmsУтилиты.ПолучитьКодСклада(Заказ.СкладГруппа);
    //ERPData.header.order_date	 = Заказ.Дата;
	//ERPData.header.despatch_date = Заказ.ДатаОтгрузки;
	//ERPData.header.order_no_internet = Заказ.НомерДокаСайт;
	//ERPData.header.wrh_no_internet = Заказ.Номер4Склад;
	//ERPData.header.target = Строка(Заказ.ПунктСамовывоза);
	
		
		
		//	Строки заказа
		EmeWmsERPEngine.SelectChild(ERPData, "lines");
		//УИДСтроки = 0;
		Для Каждого СтрокаТовара Из Заказ.Товары Цикл
			
			//УИДСтроки = УИДСтроки + 1;
			
			Если Константы.EmeWmsНеУчитыватьДопТоварыСоСроками.Получить() Тогда 
				Если СтрокаТовара.Номенклатура.емеЭтоДополнительнаяНоменклатура И ЗначениеЗаполнено(СтрокаТовара.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру) Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли; 
						
			Если СокрЛП(СтрокаТовара.Номенклатура.Артикул) = "Упаковка" Тогда
				Продолжить;
			КонецЕсли;
			
			
			EmeWmsERPEngine.AppendChildLine(ERPData);
			ERPData.lines.id			= СтрокаТовара.КлючСтроки;
			ERPData.lines.asn_line_no	= СтрокаТовара.КлючСтроки;
			ERPData.lines.goods_id		= EmeWmsУтилиты.ПолучитьКод(СтрокаТовара.Номенклатура);
			ERPData.lines.goods_code	= EmeWmsУтилиты.ПолучитьКодСпрНоменклатура_НеДляСинхронизации(СтрокаТовара.Номенклатура);
			ERPData.lines.lot_no = "-";
			
						
			ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			
			// выберем как базовую Единицу измерения с коэффициентом 1
			ЕдИзм_К1 = EmeWmsУтилиты.ПолучитьБазовуюЕдиницуИзмеренияК1(СтрокаТовара.Номенклатура);
			
			Если Заказ.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УдалениеТовара Тогда
				Если СтрокаТовара.ЕдиницаИзмерения = ЕдИзм_К1 Тогда 
					ERPData.lines.quantity		= СтрокаТовара.КоличествоСобрано;
					ЕдиницаИзмерения 			= ЕдИзм_К1;
				Иначе
					Если ЕдИзм_К1 <> Неопределено Тогда
						ERPData.lines.quantity	= СтрокаТовара.КоличествоСобрано * СтрокаТовара.Коэффициент;
						ЕдиницаИзмерения 		= ЕдИзм_К1;
					Иначе
						ERPData.lines.quantity	= СтрокаТовара.КоличествоСобрано;
						ЕдиницаИзмерения 		= СтрокаТовара.ЕдиницаИзмерения;
						ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт док-та: """ + Заказ + """, не найдена Базовая единица измерения у """ + СтрокаТовара.Номенклатура + """");
					КонецЕсли;
				КонецЕсли; 
			Иначе
				Если СтрокаТовара.ЕдиницаИзмерения = ЕдИзм_К1 Тогда // берем кол-во в базовых единицах
					ERPData.lines.quantity		= СтрокаТовара.Количество;
					ЕдиницаИзмерения 			= ЕдИзм_К1;
				Иначе
					Если ЕдИзм_К1 <> Неопределено Тогда
						ERPData.lines.quantity	= СтрокаТовара.Количество * СтрокаТовара.Коэффициент; // берем кол-во в базовых единицах
						ЕдиницаИзмерения 		= ЕдИзм_К1;
					Иначе
						ERPData.lines.quantity	= СтрокаТовара.Количество;  // не нашли базовую единицу берем кол-во в текущих единицах (ОШИБКА!)
						ЕдиницаИзмерения 		= СтрокаТовара.ЕдиницаИзмерения;
						ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт док-та: """ + Заказ + """, не найдена Базовая единица измерения у """ + СтрокаТовара.Номенклатура + """");
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;
		
			Если ЗначениеЗаполнено(ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации) Тогда
				ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации;
			Иначе
				ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование;
			КонецЕсли; 
		КонецЦикла;	
			
КонецПроцедуры



//НМА 16.11.17 >>
Функция СформироватьШтрихКодЗаказа(Знач ПрефиксШтучногоТовара = Неопределено, Знач ПрефиксВнутреннегоШтрихкода = Неопределено) Экспорт
	
	Если ПрефиксШтучногоТовара = Неопределено Тогда
		ПрефиксШтучногоТовара = СокрЛП(Константы.ПрефиксШтучногоТовара.Получить());
	КонецЕсли;

	Если ПрефиксВнутреннегоШтрихкода = Неопределено Тогда
		ПрефиксВнутреннегоШтрихкода = Константы.ПрефиксВнутреннегоШтрихкода.Получить();
	КонецЕсли;

	
	ПрефиксШтучногоТовара = ?(ПустаяСтрока(ПрефиксШтучногоТовара), "0", ПрефиксШтучногоТовара);
	ПрефиксВнутреннегоШтрихкода = Формат(ПрефиксВнутреннегоШтрихкода, "ЧЦ=2; ЧН=; ЧВН=");


	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(РегШтрихКоды.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	РегистрСведений.ШтрихкодыЗаказы КАК РегШтрихКоды
	|ГДЕ
	|	РегШтрихКоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13)
	|	И РегШтрихКоды.Штрихкод ПОДОБНО ""2" + ПрефиксШтучногоТовара + ПрефиксВнутреннегоШтрихкода + "_________""
	|");

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ТекКод = ?(Выборка.Код = NULL, 1, Мин(ОбщегоНазначения.ПривестиСтрокуКЧислу(Выборка.Код) + 1, 99999999));

	Штрихкод = "2" + ПрефиксШтучногоТовара + ПрефиксВнутреннегоШтрихкода + Формат(ТекКод, "ЧЦ=8; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);

	Возврат Штрихкод;

КонецФункции // СформироватьШтрихКод()

// Функция вычисляет контрольный символ кода EAN
//
// Параметры:
//  ШтрихКод     - штрихкод (без контрольной цифры)
//  Тип          - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение:
//  Контрольный символ штрихкода
//
Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции // КонтрольныйСимволEAN()
//НМА 16.11.17 <<


