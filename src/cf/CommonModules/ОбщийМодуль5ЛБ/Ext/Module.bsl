
//pryan@inbox.ru
//Параметры:
//АдресЭлектроннойПочты
//ИмяОтправителя
//Тема
//ТекстПисьма
//ПолноеИмяФайла
Функция ОтправитьПоПочте(Параметры) Экспорт
	Результат = Ложь;
	
	если Параметры.АдресЭлектроннойПочты = неопределено тогда
		сообщить("не задан Адрес электронной почты Получателя");
		возврат Ложь;
	конецесли;
	
	АдресЭлектроннойПочты = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(сокрлп(Параметры.АдресЭлектроннойПочты),";");
	если ТипЗнч(АдресЭлектроннойПочты) <> Тип("Массив") тогда
		сообщить("не правильно задан Адрес электронной почты Получателя");
		возврат Ложь;
	конецесли;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераSMTP = "smtp.mastermail.ru";
	Профиль.ПортSMTP = 25;
	Профиль.ПользовательSMTP = "zakaz.shop@5lb.ru";
	Профиль.ПарольSMTP = "l4hQoHc9bQ";
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	
	ИнтернетПочта  = Новый ИнтернетПочта; 
	
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
	Исключение
		Сообщить("Ошибка при подключении к почтовому серверу" + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Письмо=Новый ИнтернетПочтовоеСообщение; 
	
	для н = 0 по АдресЭлектроннойПочты.Количество()-1 цикл 
		если сокрлп(АдресЭлектроннойПочты[н])<>"" тогда
			Письмо.Получатели.Добавить(сокрлп(АдресЭлектроннойПочты[н]));
		конецесли;	
	конеццикла;	
	
	Письмо.ИмяОтправителя = Параметры.ИмяОтправителя; 
	Письмо.Отправитель = "zakaz.shop@5lb.ru"; 
	Письмо.Кодировка = "utf-8"; 
	Письмо.Тема = Параметры.Тема;
	
	Текст = новый ТекстовыйДокумент;
	ТекстПисьма = Параметры.ТекстПисьма;
	
	для н = 1 по ТекстПисьма.КоличествоСтрок() цикл
		Текст.ДобавитьСтроку(ТекстПисьма.ПолучитьСтроку(н)+Символы.ВК);
	конеццикла;	
	
	Письмо.Тексты.Добавить(Текст.ПолучитьТекст(),ТипТекстаПочтовогоСообщения.ПростойТекст);
	
	если не Параметры.ПолноеИмяФайла = неопределено тогда
		Письмо.Вложения.Добавить(Параметры.ПолноеИмяФайла)
	конецесли;
	
	Попытка
		ИнтернетПочта.Послать(Письмо);
		Результат = Истина;
		сообщить("Заказ отправлен на адрес эл.почты: "+Параметры.АдресЭлектроннойПочты);
	Исключение
		сообщить("ошибка при отправке "+Параметры.АдресЭлектроннойПочты+" "+ОписаниеОшибки());
	КонецПопытки; 
	
	ИнтернетПочта.Отключиться();
	
	возврат Результат;
	
КонецФункции

Функция ВернутьАдресПочтыКонтрагента(Контрагент) Экспорт
	
	Адрес = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК Адрес
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Адрес = сокрлп(Выборка.Адрес);
	КонецЦикла;
	
	возврат Адрес;
	
КонецФункции	

Функция ПоставщикБренда(Бренд) Экспорт
	
	СтруктураПоставщикБренда = новый Структура("Поставщик,Псевдоним");
	
	Поставщик = Справочники.Контрагенты.ПустаяСсылка();
	Псевдоним = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыБренды.Ссылка КАК Поставщик,
	               |	КонтрагентыБренды.Ссылка.Псевдоним
	               |ИЗ
	               |	Справочник.Контрагенты.Бренды КАК КонтрагентыБренды
	               |ГДЕ
	               |	КонтрагентыБренды.Бренд = &Бренд
	               |	И НЕ КонтрагентыБренды.Ссылка.ПометкаУдаления
	               |	И НЕ КонтрагентыБренды.Бренд.ПометкаУдаления
	               |	И НЕ КонтрагентыБренды.Ссылка В ИЕРАРХИИ (&Схема)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КонтрагентыБренды.Ссылка,
	               |	КонтрагентыБренды.Ссылка.Псевдоним";
	
	Запрос.УстановитьПараметр("Бренд", Бренд);
	Запрос.УстановитьПараметр("Схема",Справочники.Контрагенты.НайтиПоКоду("000025707"));
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	если Выборка.Следующий() тогда
		Поставщик = Выборка.Поставщик;
		Псевдоним = сокрлп(Выборка.Псевдоним);
	конецесли;
	
	СтруктураПоставщикБренда.Поставщик = Поставщик;
	СтруктураПоставщикБренда.Псевдоним = Псевдоним;
	
	возврат СтруктураПоставщикБренда;
	
КонецФункции	

Функция ОрганизацияМагазина(Склад) Экспорт
	
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(сокрлп(Склад.Наименование),Истина);
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И ЗначенияСвойствОбъектов.Значение ССЫЛКА Справочник.Организации";
	
	Запрос.УстановитьПараметр("Объект", Склад);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	если Выборка.Следующий() тогда
		Организация = Выборка.Значение;
	конецесли;
	
	возврат Организация;
	
КонецФункции	



Процедура XОтчёт() Экспорт 
	//20.02.2017, Юра
	Если НЕ ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		ECR = Неопределено;
	КонецЕсли;
	
	Если ECR = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ECR.GetStatus() <> 0 тогда
		Возврат;
	КонецЕсли;
	
	Если ECR.SessionOpened = 0 Тогда
		Сообщить ("Смена не открыта");
		возврат;
	КонецЕсли;
	
	//Вопросы можно только на клиенте 20.02.2017, Юра
	#Если Клиент Тогда
	Ответ = Вопрос ("Сформировать суточный отчёт без гашения (Х Отчёт)?",РежимДиалогаВопрос.ДаНет);
	Если Ответ=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	// X - отчет
	// устанавливаем пароль администратора ККМ
	ECR.Password = "30";
	// входим в режим отчетов без гашения
	ECR.Mode = 2;
	Если ECR.SetMode() <> 0 тогда
		//Предупреждать можно только на клиенте 20.02.2017, Юра
		#Если Клиент Тогда
		Предупреждение ("Не удалось получить Х отчёт"); 
		#КонецЕсли
		Возврат;
	КонецЕсли;
	// снимаем отчет
	ECR.ReportType = 2;
	Если ECR.Report() <> 0 тогда
		//Предупреждать можно только на клиенте 20.02.2017, Юра
		#Если Клиент Тогда
		Предупреждение ("Не удалось получить Х отчёт"); 
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если ECR.ResetMode() <> 0 тогда
		Возврат;
	КонецЕсли;
	
	ECR.Mode = 1;
	Если ECR.SetMode() <> 0 тогда
		//Предупреждать можно только на клиенте 20.02.2017, Юра
		#Если Клиент Тогда
		Предупреждение ("Не удалось установить нужный режим. Перезагрузите программу!");
		//и завершать работу можно только на клиенте 20.02.2017, Юра
		ЗавершитьРаботуСистемы();
		#КонецЕсли
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ZОтчёт () Экспорт
	//20.02.2017, Юра
	Если НЕ ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		ECR = Неопределено;
	КонецЕсли;
	
	Если ECR = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ECR.GetStatus() <> 0 тогда
		Возврат;
	КонецЕсли;
	
	Если ECR.SessionOpened = 0 Тогда
		Сообщить ("Смена не открыта");
		возврат;
	КонецЕсли;
	
	//Вопросы можно только на клиенте 20.02.2017, Юра
	#Если Клиент Тогда
	Ответ = Вопрос ("Сформировать суточный отчёт С ГАШЕНИЕМ(!) (Z Отчёт)?",РежимДиалогаВопрос.ДаНет);
	Если Ответ=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос ("Z Отчёт ЗАКРОЕТ текущую смену! Уверены?",РежимДиалогаВопрос.ДаНет);
	Если Ответ=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	//Z - отчет
	// устанавливаем пароль системного администратора ККМ
	ECR.Password = "30";
	// входим в режим отчетов с гашением
	ECR.Mode = 3;
	Если ECR.SetMode() <> 0 тогда
		//Предупреждать можно только на клиенте 20.02.2017, Юра
		#Если Клиент Тогда
		Предупреждение ("Не удалось сформировать Z отчёт"); 
		#КонецЕсли
		Возврат;
	КонецЕсли;
	// снимаем отчет
	ECR.ReportType = 1;
	Если ECR.Report() <> 0 тогда
		//Предупреждать можно только на клиенте 20.02.2017, Юра
		#Если Клиент Тогда
		Предупреждение ("Не удалось сформировать Z отчёт"); 
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если ECR.ResetMode() <> 0 тогда
		Возврат;
	КонецЕсли;
		
	// Катков А. 05.08.2016 >> перенес ниже и добавил условие проверки формирования ОРП И Ордеров
	//Если Час(ТекущаяДата()) > 19 Тогда
	//	//открываем форму регистрации сумм
	//	Об = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Регистрируем выручку и расходы");
	//	Если Об<>Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда
	//		
	//		ДвоичныеДанные = Об.ХранилищеВнешнейОбработки.Получить();
	//		ИмяФайла = ПолучитьИмяВременногоФайла();
	//		ДвоичныеДанные.Записать(ИмяФайла);
	//		
	//		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	//		Обработка.ПолучитьФорму("ФормаПринуждения").ОткрытьМодально();
	//		УдалитьФайлы(ИмяФайла);
	//	КонецЕсли; 
	//КонецЕсли;
	// Катков А. 05.08.2016 <<  
	
	НомерZ=ECR.Session;
	ECR.GetLastSummary();
	СуммаНаНачало = ECR.Summ;
	
	// Катков А. 05.08.2016 >>
	//СформироватьОРП(НомерZ,СуммаНаНачало);
	ОРП = Неопределено;
	ОРП_Сформирован = СформироватьОРП(НомерZ, СуммаНаНачало, ОРП);
	Если ОРП_Сформирован И ЗначениеЗаполнено(ОРП) Тогда
		
		РезультатФормированияОрдеров = СформироватьОрдера(ОРП);
		Если РезультатФормированияОрдеров = Неопределено Тогда  // не удалось сформировать ордера - отрабатываем как и раньше (см.закомметированное выше)
			
			Если Час(ТекущаяДата()) > 19 Тогда
				//открываем форму регистрации сумм
				Об = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Регистрируем выручку и расходы");
				Если Об<>Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда
					
					ДвоичныеДанные = Об.ХранилищеВнешнейОбработки.Получить();
					ИмяФайла = ПолучитьИмяВременногоФайла();
					ДвоичныеДанные.Записать(ИмяФайла);
					
					Обработка = ВнешниеОбработки.Создать(ИмяФайла);
					Обработка.ПолучитьФорму("ФормаПринуждения").ОткрытьМодально();
					УдалитьФайлы(ИмяФайла);
				КонецЕсли; 
			КонецЕсли;
			
		Иначе  // удалось сформировать ордера - открываем форму для изменения Ордеров (ПО УМОЛЧАНИЮ ДОЛЖНО ПОПАДАТЬ СЮДА !!!!!!!)
			
			//открываем форму регистрации сумм 
			Об = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Регистрируем выручку и расходы");
			Если Об <> Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда
				
				ДвоичныеДанные = Об.ХранилищеВнешнейОбработки.Получить();
				ИмяФайла = ПолучитьИмяВременногоФайла();
				ДвоичныеДанные.Записать(ИмяФайла);
				
				Обработка = ВнешниеОбработки.Создать(ИмяФайла);
				
				Обработка.ДатаРегистрации 	= РезультатФормированияОрдеров.ОРП.Дата;
				Обработка.КассаТекЮзера 	= РезультатФормированияОрдеров.ТекКасса;
				Обработка.СкладТекЮзера 	= РезультатФормированияОрдеров.ТекСклад;
				Обработка.КонтрикТекЮзера 	= РезультатФормированияОрдеров.ТекКонтрагент;
				
				Если РезультатФормированияОрдеров.ПКО <> Неопределено Тогда
					Обработка.ПКО 			= РезультатФормированияОрдеров.ПКО;	
				КонецЕсли; 
				Если РезультатФормированияОрдеров.ПоступлениеДС <> Неопределено Тогда
					Обработка.ПоступлениеДС = РезультатФормированияОрдеров.ПоступлениеДС;	
				КонецЕсли; 
				Если РезультатФормированияОрдеров.РКО <> Неопределено Тогда
					Обработка.РКО 			= РезультатФормированияОрдеров.РКО;	
				КонецЕсли;
				Обработка.ОРП 				= РезультатФормированияОрдеров.ОРП;
				
				Обработка.ПолучитьФорму("ФормаМ").ОткрытьМодально();
				
				УдалитьФайлы(ИмяФайла);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	Иначе // не удалось сформировать ОРП - отрабатываем как и раньше (см.закомметированное выше)
		
		Если Час(ТекущаяДата()) > 19 Тогда
			//открываем форму регистрации сумм
			Об = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Регистрируем выручку и расходы");
			Если Об<>Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда
				
				ДвоичныеДанные = Об.ХранилищеВнешнейОбработки.Получить();
				ИмяФайла = ПолучитьИмяВременногоФайла();
				ДвоичныеДанные.Записать(ИмяФайла);
				
				Обработка = ВнешниеОбработки.Создать(ИмяФайла);
				Обработка.ПолучитьФорму("ФормаПринуждения").ОткрытьМодально();
				УдалитьФайлы(ИмяФайла);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли; 
	// Катков А. 05.08.2016 <<  
	
КонецПроцедуры

//08122016 Выгрузка продаж ИМ в БУХ
Процедура ZОтчётСклад () Экспорт
	//20.02.2017, Юра
	Если НЕ ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		ECR = Неопределено;
	КонецЕсли;
	
	Если ECR = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ECR.GetStatus() <> 0 тогда
		Возврат;
	КонецЕсли;
	
	Если ECR.SessionOpened = 0 Тогда
		Сообщить ("Смена не открыта");
		возврат;
	КонецЕсли;
	
	//Вопросы можно только на клиенте 20.02.2017, Юра
	#Если Клиент Тогда
	Ответ = Вопрос ("Сформировать суточный отчёт С ГАШЕНИЕМ(!) (Z Отчёт)?",РежимДиалогаВопрос.ДаНет);
	Если Ответ=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос ("Z Отчёт ЗАКРОЕТ текущую смену! Уверены?",РежимДиалогаВопрос.ДаНет);
	Если Ответ=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли

	ECR.Password = "30";
	ECR.Mode = 3;
	Если ECR.SetMode() <> 0 тогда
		//Предупреждать можно только на клиенте 20.02.2017, Юра
		#Если Клиент Тогда
		Предупреждение ("Не удалось сформировать Z отчёт"); 
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	ECR.ReportType = 1;
	Если ECR.Report() <> 0 тогда
		//Предупреждать можно только на клиенте 20.02.2017, Юра
		#Если Клиент Тогда
		Предупреждение ("Не удалось сформировать Z отчёт"); 
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если ECR.ResetMode() <> 0 тогда
		Возврат;
	КонецЕсли;
			
	НомерZ=ECR.Session;
	ECR.GetLastSummary();
	СуммаНаНачало = ECR.Summ;
	
	
	СформироватьОРПСклад(НомерZ,СуммаНаНачало);
		
КонецПроцедуры

Процедура СформироватьОРПСклад(З,СуммаНаНачало) 
	СкладОРП = Справочники.Склады.НайтиПоКоду("000000005");
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Тов.ЕдиницаИзмерения,
	|	Тов.Количество,
	|	Тов.КоличествоМест,
	|	Тов.Коэффициент,
	|	Тов.Номенклатура,
	|	Тов.ПроцентСкидкиНаценки,
	|	Тов.СерияНоменклатуры,
	|	Тов.СтавкаНДС,
	|	Тов.Сумма,
	|	Тов.СуммаНДС,
	|	Тов.ХарактеристикаНоменклатуры,
	|	Тов.Цена,
	|	Тов.ПроцентАвтоматическихСкидок,
	|	Тов.УсловиеАвтоматическойСкидки,
	|	Тов.ЗначениеУсловияАвтоматическойСкидки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Тов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЧекиККМ КАК Чеки
	|		ПО (Чеки.Документ = Тов.Ссылка.Сделка)
	|ГДЕ
	|	Тов.Ссылка.Проведен
	|	И НЕ Тов.Номенклатура В ИЕРАРХИИ (&Реклама)
	|	И Чеки.Документ ЕСТЬ НЕ NULL 
	|	И Тов.Ссылка.Дата МЕЖДУ &Дат1 И &Дат2
	|	И Тов.Ссылка.Склад = &Склад";
	Запрос.УстановитьПараметр("Дат1",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дат2",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Склад",СкладОРП);
	Запрос.УстановитьПараметр("Реклама",Справочники.Номенклатура.НайтиПоКоду("244"));
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщить ("Продаж не обнаружено");
		Возврат;
	КонецЕсли;
	Выборка = Рез.Выбрать();
	
	
	
	ОРП = СоздатьОРП(СкладОРП);
	ОРП.Дата        = ТекущаяДата();
	ОРП.Склад       = СкладОРП;
	ОРП.КассаККМ    = Справочники.КассыККМ.НайтиПоКоду("000000001");
	ОРП.Организация = Справочники.Организации.НайтиПоКоду("000000001");
	
	ОРП.ИнициализироватьДокумент(Неопределено, Неопределено);
	
	ОРП.УчитыватьНДС     = Истина;
	ОРП.СуммаВключаетНДС = Истина;
	ОРП.ZОтчетНомер = З;
	ОРП.ZСуммаНач = СуммаНаНачало;
	
	ОРП.Товары.Очистить();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти=ОРП.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		Если СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда 
			СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - (100 * СтрокаТабличнойЧасти.Сумма / (100 + 18));
		КонецЕсли;
	КонецЦикла;
	
	ОРП.ZСуммаКон = СуммаНаНачало + ОРП.Товары.Итог("Сумма");
	
	Попытка
		ОРП.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить (ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры
//08122016 Выгрузка продаж ИМ в БУХ

// Катков А. 05.08.2016 >> добавил параметр ссылку на ОРП
//Функция СформироватьОРП(З,СуммаНаНачало) 
Функция СформироватьОРП(З, СуммаНаНачало, СсылкаНаОРП = Неопределено)
// Катков А. 05.08.2016 <<  

	СкладОРП = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ЗначениеНастроек.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
	|ГДЕ
	|   ЗначениеНастроек.Пользователь = &Юзер
	|И  ЗначениеНастроек.Настройка = &Скл";
	Запрос.УстановитьПараметр("Юзер", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Скл", ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойСклад);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщить ("Вы не прикреплены к магазину. Обратитесь к руководству");
		Возврат Ложь;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Выб.Следующий();
	Если Выб.Значение = Справочники.Склады.ПустаяСсылка() Тогда
		Сообщить("Вы не прикреплены к магазину. Обратитесь к руководству");
		Возврат Ложь;
	КонецЕсли;
	
	СкладОРП = Выб.Значение;
	
	Запрос = Новый Запрос;
					 
	//++ Кузнецов С.А. - Изменение формировния ОРП на основании РС "Чеки ККМ" - 08.07.2016	
	
	//Запрос.Текст="ВЫБРАТЬ
	//             |	Тов.ЕдиницаИзмерения,
	//             |	Тов.Количество,
	//             |	Тов.КоличествоМест,
	//             |	Тов.Коэффициент,
	//             |	Тов.Номенклатура,
	//             |	Тов.ПроцентСкидкиНаценки,
	//             |	Тов.СерияНоменклатуры,
	//             |	Тов.СтавкаНДС,
	//             |	Тов.Сумма,
	//             |	Тов.СуммаНДС,
	//             |	Тов.ХарактеристикаНоменклатуры,
	//             |	Тов.Цена,
	//             |	Тов.ПроцентАвтоматическихСкидок,
	//             |	Тов.УсловиеАвтоматическойСкидки,
	//             |	Тов.ЗначениеУсловияАвтоматическойСкидки
	//             |ИЗ
	//             |	Документ.РеализацияТоваровУслуг.Товары КАК Тов
	//             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК Воз
	//             |		ПО (Воз.Сделка = Тов.Ссылка)
	//             |			И (Воз.Проведен = ИСТИНА)
	//             |ГДЕ
	//             |	Тов.Ссылка.Проведен
	//             |	И НЕ Тов.Номенклатура В ИЕРАРХИИ (&Реклама)
	//             |	И Воз.Сделка ЕСТЬ NULL 
	//             |	И Тов.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	//             |	И Тов.Ссылка.Склад = &Склад";
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ЧекиККМ.Период, ДЕНЬ) КАК Период,
	               |	ЧекиККМ.Документ,
	               |	ЧекиККМ.Склад,
	               |	ЧекиККМ.Сумма КАК СуммаЧекаККМ,
	               |	РеализацияТоваровУслугТовары.Ссылка.СуммаДокумента КАК СуммаДокумента1С,
	               |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	               |	РеализацияТоваровУслугТовары.Количество,
	               |	РеализацияТоваровУслугТовары.Коэффициент,
	               |	РеализацияТоваровУслугТовары.Номенклатура,
	               |	РеализацияТоваровУслугТовары.ПроцентСкидкиНаценки,
	               |	РеализацияТоваровУслугТовары.СерияНоменклатуры,
	               |	РеализацияТоваровУслугТовары.СтавкаНДС,
	               |	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА ЧекиККМ.ВидОплатыЧекаККМ = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.Наличные)
	               |			ТОГДА 0
	               |		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма
	               |	КОНЕЦ КАК СуммаБезНал,
	               |	РеализацияТоваровУслугТовары.СуммаНДС,
	               |	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
	               |	РеализацияТоваровУслугТовары.Цена,
	               |	РеализацияТоваровУслугТовары.ПроцентАвтоматическихСкидок,
	               |	РеализацияТоваровУслугТовары.УсловиеАвтоматическойСкидки,
	               |	РеализацияТоваровУслугТовары.ЗначениеУсловияАвтоматическойСкидки
	               |ПОМЕСТИТЬ ЧекиПродаж
	               |ИЗ
	               |	РегистрСведений.ЧекиККМ КАК ЧекиККМ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ПО ЧекиККМ.Документ = РеализацияТоваровУслугТовары.Ссылка
	               |ГДЕ
	               |	ЧекиККМ.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ЧекиККМ.Склад = &Склад
	               |	И ЧекиККМ.ВидыОперацийЧекККМ = &ВидыОперацийЧекККМ_Продажа
	               |	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ЧекиККМ.Период, ДЕНЬ) КАК Период,
	               |	ЧекиККМ.Склад,
	               |	-1 * ЧекиККМ.Сумма КАК СуммаЧекаККМ,
	               |	-1 * ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаДокумента КАК СуммаДокумента1С,
	               |	ВозвратТоваровОтПокупателяТовары.Ссылка.Сделка КАК Документ,
	               |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	               |	-1 * ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
	               |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения,
	               |	ВозвратТоваровОтПокупателяТовары.Коэффициент,
	               |	ВозвратТоваровОтПокупателяТовары.Цена,
	               |	ВозвратТоваровОтПокупателяТовары.ПроцентСкидкиНаценки,
	               |	-1 * ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА ЧекиККМ.ВидОплатыЧекаККМ = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.Наличные)
	               |			ТОГДА 0
	               |		ИНАЧЕ -1 * ВозвратТоваровОтПокупателяТовары.Сумма
	               |	КОНЕЦ КАК СуммаБезНал,
	               |	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	               |	-1 * ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
	               |	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры,
	               |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры,
	               |	ВозвратТоваровОтПокупателяТовары.ПроцентАвтоматическихСкидок,
	               |	ВозвратТоваровОтПокупателяТовары.УсловиеАвтоматическойСкидки,
	               |	ВозвратТоваровОтПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки
	               |ПОМЕСТИТЬ ЧекиВозвратов
	               |ИЗ
	               |	РегистрСведений.ЧекиККМ КАК ЧекиККМ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	               |		ПО ЧекиККМ.Документ = ВозвратТоваровОтПокупателяТовары.Ссылка
	               |ГДЕ
	               |	ЧекиККМ.ВидыОперацийЧекККМ = &ВидыОперацийЧекККМ_Возврат
	               |	И ЧекиККМ.Склад = &Склад
	               |	И ЧекиККМ.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ВозвратТоваровОтПокупателяТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				   
				   //Органичиваем только возвратами "день в день" 02.08.2017, Юра
				   |	И Выразить(ВозвратТоваровОтПокупателяТовары.Ссылка.Сделка КАК Документ.РеализацияТоваровУслуг).Дата МЕЖДУ &НачалоПериода И &КонецПериода
				   
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъединениеПродажИВозвратов.Период,
	               |	ОбъединениеПродажИВозвратов.Документ,
	               |	ОбъединениеПродажИВозвратов.Склад,
	               |	ОбъединениеПродажИВозвратов.Номенклатура,
	               |	ОбъединениеПродажИВозвратов.ЕдиницаИзмерения,
	               |	ОбъединениеПродажИВозвратов.Коэффициент,
	               |	ОбъединениеПродажИВозвратов.Цена,
	               |	ОбъединениеПродажИВозвратов.ПроцентСкидкиНаценки,
	               |	ОбъединениеПродажИВозвратов.СуммаДокумента1С КАК СуммаДокумента1С,
	               |	ОбъединениеПродажИВозвратов.СтавкаНДС,
	               |	ОбъединениеПродажИВозвратов.ХарактеристикаНоменклатуры,
	               |	ОбъединениеПродажИВозвратов.СерияНоменклатуры,
	               |	ОбъединениеПродажИВозвратов.ПроцентАвтоматическихСкидок,
	               |	ОбъединениеПродажИВозвратов.УсловиеАвтоматическойСкидки,
	               |	ОбъединениеПродажИВозвратов.ЗначениеУсловияАвтоматическойСкидки,
	               |	ОбъединениеПродажИВозвратов.СуммаЧекаККМ КАК СуммаЧекаККМ,
	               |	ОбъединениеПродажИВозвратов.Количество КАК Количество,
	               |	ОбъединениеПродажИВозвратов.Сумма КАК Сумма,
	               |	ОбъединениеПродажИВозвратов.СуммаНДС КАК СуммаНДС,
	               |	ОбъединениеПродажИВозвратов.СуммаБезНал КАК СуммаБезНал
	               |ПОМЕСТИТЬ ВР_ПродажиИВозвраты
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЧекиВозвратов.Период КАК Период,
	               |		ЧекиВозвратов.Документ КАК Документ,
	               |		ЧекиВозвратов.Склад КАК Склад,
	               |		ЧекиВозвратов.Сумма КАК Сумма,
	               |		ЧекиВозвратов.Номенклатура КАК Номенклатура,
	               |		ЧекиВозвратов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		ЧекиВозвратов.Коэффициент КАК Коэффициент,
	               |		ЧекиВозвратов.Цена КАК Цена,
	               |		ЧекиВозвратов.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	               |		ЧекиВозвратов.СуммаДокумента1С КАК СуммаДокумента1С,
	               |		ЧекиВозвратов.СтавкаНДС КАК СтавкаНДС,
	               |		ЧекиВозвратов.СуммаНДС КАК СуммаНДС,
	               |		ЧекиВозвратов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |		ЧекиВозвратов.СерияНоменклатуры КАК СерияНоменклатуры,
	               |		ЧекиВозвратов.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	               |		ЧекиВозвратов.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	               |		ЧекиВозвратов.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	               |		ЧекиВозвратов.Количество КАК Количество,
	               |		ЧекиВозвратов.СуммаЧекаККМ КАК СуммаЧекаККМ,
	               |		ЧекиВозвратов.СуммаБезНал КАК СуммаБезНал
	               |	ИЗ
	               |		ЧекиВозвратов КАК ЧекиВозвратов
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЧекиПродаж.Период,
	               |		ЧекиПродаж.Документ,
	               |		ЧекиПродаж.Склад,
	               |		ЧекиПродаж.Сумма,
	               |		ЧекиПродаж.Номенклатура,
	               |		ЧекиПродаж.ЕдиницаИзмерения,
	               |		ЧекиПродаж.Коэффициент,
	               |		ЧекиПродаж.Цена,
	               |		ЧекиПродаж.ПроцентСкидкиНаценки,
	               |		ЧекиПродаж.СуммаДокумента1С,
	               |		ЧекиПродаж.СтавкаНДС,
	               |		ЧекиПродаж.СуммаНДС,
	               |		ЧекиПродаж.ХарактеристикаНоменклатуры,
	               |		ЧекиПродаж.СерияНоменклатуры,
	               |		ЧекиПродаж.ПроцентАвтоматическихСкидок,
	               |		ЧекиПродаж.УсловиеАвтоматическойСкидки,
	               |		ЧекиПродаж.ЗначениеУсловияАвтоматическойСкидки,
	               |		ЧекиПродаж.Количество,
	               |		ЧекиПродаж.СуммаЧекаККМ,
	               |		ЧекиПродаж.СуммаБезНал
	               |	ИЗ
	               |		ЧекиПродаж КАК ЧекиПродаж) КАК ОбъединениеПродажИВозвратов
	               |ГДЕ
	               |	НЕ ОбъединениеПродажИВозвратов.Номенклатура В ИЕРАРХИИ (&Реклама)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВР_ПродажиИВозвраты.Период,
	               |	ВР_ПродажиИВозвраты.Документ,
	               |	ВР_ПродажиИВозвраты.Склад,
	               |	ВР_ПродажиИВозвраты.Номенклатура,
	               |	ВР_ПродажиИВозвраты.ЕдиницаИзмерения,
	               |	ВР_ПродажиИВозвраты.Коэффициент,
	               |	ВР_ПродажиИВозвраты.Цена,
	               |	ВР_ПродажиИВозвраты.ПроцентСкидкиНаценки,
	               |	ВР_ПродажиИВозвраты.СтавкаНДС,
	               |	ВР_ПродажиИВозвраты.ХарактеристикаНоменклатуры,
	               |	ВР_ПродажиИВозвраты.СерияНоменклатуры,
	               |	ВР_ПродажиИВозвраты.ПроцентАвтоматическихСкидок,
	               |	ВР_ПродажиИВозвраты.УсловиеАвтоматическойСкидки,
	               |	ВР_ПродажиИВозвраты.ЗначениеУсловияАвтоматическойСкидки,
	               |	СУММА(ВР_ПродажиИВозвраты.Сумма) КАК Сумма,
	               |	СУММА(ВР_ПродажиИВозвраты.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ВР_ПродажиИВозвраты.Количество) КАК Количество,
	               |	СУММА(ВР_ПродажиИВозвраты.СуммаБезНал) КАК СуммаБезНал
	               |ИЗ
	               |	ВР_ПродажиИВозвраты КАК ВР_ПродажиИВозвраты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВР_ПродажиИВозвраты.Склад,
	               |	ВР_ПродажиИВозвраты.СтавкаНДС,
	               |	ВР_ПродажиИВозвраты.СерияНоменклатуры,
	               |	ВР_ПродажиИВозвраты.Период,
	               |	ВР_ПродажиИВозвраты.Документ,
	               |	ВР_ПродажиИВозвраты.Номенклатура,
	               |	ВР_ПродажиИВозвраты.ХарактеристикаНоменклатуры,
	               |	ВР_ПродажиИВозвраты.УсловиеАвтоматическойСкидки,
	               |	ВР_ПродажиИВозвраты.ЕдиницаИзмерения,
	               |	ВР_ПродажиИВозвраты.Коэффициент,
	               |	ВР_ПродажиИВозвраты.Цена,
	               |	ВР_ПродажиИВозвраты.ПроцентСкидкиНаценки,
	               |	ВР_ПродажиИВозвраты.ПроцентАвтоматическихСкидок,
	               |	ВР_ПродажиИВозвраты.ЗначениеУсловияАвтоматическойСкидки
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ВР_ПродажиИВозвраты.Количество) <> 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИтоговаяЗаСмены.Период,
	               |	СУММА(ИтоговаяЗаСмены.Сумма) КАК Сумма,
	               |	СУММА(ИтоговаяЗаСмены.СуммаДокумента1С) КАК СуммаДокумента1С,
	               |	СУММА(ИтоговаяЗаСмены.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ИтоговаяЗаСмены.СуммаЧекаККМ) КАК СуммаЧекаККМ,
	               |	СУММА(ИтоговаяЗаСмены.СуммаБезНал) КАК СуммаБезНал
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВР_ПродажиИВозвраты.Период КАК Период,
	               |		ВР_ПродажиИВозвраты.СуммаДокумента1С КАК СуммаДокумента1С,
	               |		ВР_ПродажиИВозвраты.СуммаЧекаККМ КАК СуммаЧекаККМ,
	               |		СУММА(ВР_ПродажиИВозвраты.СуммаНДС) КАК СуммаНДС,
	               |		СУММА(ВР_ПродажиИВозвраты.Сумма) КАК Сумма,
	               |		СУММА(ВР_ПродажиИВозвраты.СуммаБезНал) КАК СуммаБезНал
	               |	ИЗ
	               |		ВР_ПродажиИВозвраты КАК ВР_ПродажиИВозвраты
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВР_ПродажиИВозвраты.Период,
	               |		ВР_ПродажиИВозвраты.СуммаДокумента1С,
	               |		ВР_ПродажиИВозвраты.СуммаЧекаККМ) КАК ИтоговаяЗаСмены
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИтоговаяЗаСмены.Период";
				   
	Запрос.УстановитьПараметр("ВидыОперацийЧекККМ_Возврат", Перечисления.ВидыОперацийЧекККМ.Возврат);
	Запрос.УстановитьПараметр("ВидыОперацийЧекККМ_Продажа", Перечисления.ВидыОперацийЧекККМ.Продажа);					 				 
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Склад", СкладОРП);
	Запрос.УстановитьПараметр("Реклама", Справочники.Номенклатура.НайтиПоКоду("244"));
	
	массивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	Рез = массивРезультатовЗапроса[3]; // Построчные продажи
	результатИтоговыеЗаСмену = массивРезультатовЗапроса[4]; // Итоговые значения смены
	//-- Кузнецов С.А. - 08.07.2016
	
	Если Рез.Пустой() Тогда
		Сообщить ("Продаж не обнаружено");
		Возврат Ложь;
	КонецЕсли;
	Выборка = Рез.Выбрать();
		
	ОРП = СоздатьОРП(СкладОРП);
	ОРП.Дата        = ТекущаяДата();
	ОРП.Склад       = СкладОРП;
	ОРП.КассаККМ    = Справочники.КассыККМ.НайтиПоКоду("000000001");
	ОРП.Организация = Справочники.Организации.НайтиПоКоду("000000001");
	
	ОРП.ИнициализироватьДокумент(Неопределено, Неопределено);
	
	ОРП.УчитыватьНДС     = Истина;
	ОРП.СуммаВключаетНДС = Истина;
	ОРП.ZОтчетНомер = З;
	ОРП.ZСуммаНач = СуммаНаНачало;
	
	ОРП.Товары.Очистить();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти=ОРП.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
	КонецЦикла;
	
	//++ Кузнецов С.А. - Заполняем Оплаты по банковской карте - 08.07.2016
	ОРП.ОплатаПлатежнымиКартами.Очистить();
	новСтрокаОплатаПлКартами = ОРП.ОплатаПлатежнымиКартами.Добавить();
	новСтрокаОплатаПлКартами.ВидОплаты = Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("Банковский перевод");
	новСтрокаОплатаПлКартами.Сумма = результатИтоговыеЗаСмену.Выгрузить()[0].СуммаБезНал;
	//-- Кузнецов С.А. - 08.07.2016	
	
	ОРП.ZСуммаКон = СуммаНаНачало + ОРП.Товары.Итог("Сумма");
	
	Попытка
		ОРП.Записать(РежимЗаписиДокумента.Запись);
		// Катков А. 09.08.2016 >>
		СсылкаНаОРП = ОРП.Ссылка;
		// Катков А. 09.08.2016 <<   
		ОРП.Печать("ОтчетККМ",1,Ложь);
		Возврат Истина;
	Исключение
		Сообщить (ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
		
КонецФункции

Функция СоздатьОРП(Склад,ДатаДок="")
	//09.03.2017, Юра
	Если НЕ ЗначениеЗаполнено(ДатаДок) Тогда
		ДатаДок = ТекущаяДата()
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	Орп.Ссылка
	             |ИЗ
	             |	Документ.ОтчетОРозничныхПродажах КАК Орп
	             |ГДЕ
	             |	Орп.Дата МЕЖДУ &Дат1 И &Дат2
	             |	И Орп.Склад = &Склад
	             |	И Орп.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Дат1",НачалоДня(ДатаДок));
	Запрос.УстановитьПараметр("Дат2",КонецДня(ДатаДок));
	Запрос.УстановитьПараметр("Склад",Склад);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		ОРП = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	Иначе
		Выб = Рез.Выбрать();
		Выб.Следующий();
		ОРП = Выб.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ОРП;
КонецФункции

// Катков А. 08.08.2016 >>
Функция СформироватьОрдера(ОРП)

	РезультатФормированияОрдеров = Неопределено; // либо Неопределено, либо Структура
	
	Сумма1С = ОРП.СуммаДокумента;
	Если Сумма1С = 0 Тогда
		Возврат РезультатФормированияОрдеров;
	КонецЕсли;
	ВыручкаТерминал = ОРП.ОплатаПлатежнымиКартами.Итог("Сумма");
	СуммаНаличные = Сумма1С - ВыручкаТерминал;
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПКО.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.ПриходныйКассовыйОрдер КАК ПКО
	             |ГДЕ
	             |	ПКО.Дата МЕЖДУ &Дат1 И &Дат2
	             |	И ПКО.Касса = &Касса
	             |	И ПКО.ПометкаУдаления = ЛОЖЬ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	РКО.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.РасходныйКассовыйОрдер КАК РКО
	             |ГДЕ
	             |	РКО.Дата МЕЖДУ &Дат1 И &Дат2
	             |	И РКО.Касса = &Касса
	             |	И РКО.ПометкаУдаления = ЛОЖЬ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПоступлениеДС.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК ПоступлениеДС
	             |ГДЕ
	             |	ПоступлениеДС.Дата МЕЖДУ &Дат1 И &Дат2
	             |	И ПоступлениеДС.Контрагент = &Контр
	             |	И ПоступлениеДС.ПометкаУдаления = ЛОЖЬ";

	Запрос.УстановитьПараметр("Дат1",НачалоДня(ОРП.Дата));
	Запрос.УстановитьПараметр("Дат2",КонецДня(ОРП.Дата));
	
	ТекСклад = ОРП.Склад;
	НаименованиеМагазина = СокрЛП(ТекСклад.Наименование);
	
	ТекКасса = Справочники.Кассы.НайтиПоНаименованию(НаименованиеМагазина, Истина);
	Если ТекКасса.Пустая() Тогда
		Сообщить("Не найдена касса по наименованию " + НаименованиеМагазина + "!" + " Обратитесь к руководству");
		Возврат РезультатФормированияОрдеров;
	КонецЕсли;
	
	ТекКонтрагент = Справочники.Контрагенты.НайтиПоНаименованию(НаименованиеМагазина, Истина);
	Если ТекКонтрагент.Пустая() Тогда
		Сообщить("Не найден магазин терминала оплаты по наименованию " + НаименованиеМагазина + "!" + " Обратитесь к руководству");
		Возврат РезультатФормированияОрдеров;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Касса", ТекКасса);
	Запрос.УстановитьПараметр("Контр", ТекКонтрагент);

	МассивРезультатов = Запрос.ВыполнитьПакет();
		
	// Регистрируем Сумму выручки (СуммаНаличные = Сумма1С - ВыручкаТерминал //(- Расходы))
	Если СуммаНаличные > 0 Тогда
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			
			ВыборкаПКО = МассивРезультатов[0].Выбрать();
			ВыборкаПКО.Следующий();
			ПКО = ВыборкаПКО.Ссылка;
			Попытка
				ПКО_Объект = ПКО.ПолучитьОбъект();
			Исключение
				Сообщить("Внимание! Не удалось получить ПКО: " + ПКО + " для изменения.");
				ПКО_Объект = Неопределено;
			КонецПопытки; 
			
		Иначе
			ПКО_Объект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		Если ПКО_Объект <> Неопределено  Тогда
			
			// заполним док
			ПКО_Объект.Организация 				= ОРП.Организация;
			ПКО_Объект.Касса 					= ТекКасса;
			ПКО_Объект.Дата						= ОРП.Дата;
			
			ТЧ_РасшифровкаПлатежа 				= ПКО_Объект.РасшифровкаПлатежа;
			ТЧ_РасшифровкаПлатежа.Очистить();
			НоваяСтрока 						= ТЧ_РасшифровкаПлатежа.Добавить();
			НоваяСтрока.СуммаПлатежа            = СуммаНаличные;
			НоваяСтрока.СуммаВзаиморасчетов     = СуммаНаличные;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ПриходДенежныхСредствРозничнаяВыручка;
			
			ПКО_Объект.СуммаДокумента			= СуммаНаличные;
			ПКО_Объект.ВалютаДокумента			= Константы.ВалютаРегламентированногоУчета.Получить();
			ПКО_Объект.Оплачено					= ИСТИНА;
			ПКО_Объект.СтатьяДвиженияДенежныхСредств	= Справочники.СтатьиДвиженияДенежныхСредств.ПриходДенежныхСредствРозничнаяВыручка;
			ПКО_Объект.ВыручкаСНТТ				= ЛОЖЬ;
			ПКО_Объект.ВидПриемаРозничнойВыручки		= Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
			ПКО_Объект.СчетОрганизации			= ОРП.Организация.ОсновнойБанковскийСчет;
			
			ПКО_Объект.ВидОперации 				= Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
			ПКО_Объект.ОтражатьВБухгалтерскомУчете		= ЛОЖЬ;
			ПКО_Объект.ОтражатьВУправленческомУчете		= ИСТИНА;
			ПКО_Объект.ОтражатьВНалоговомУчете 			= ЛОЖЬ;
			ПКО_Объект.ОтраженоВОперУчете				= ИСТИНА;
			ПКО_Объект.Ответственный					= ПараметрыСеанса.ТекущийПродавец;
			ПКО_Объект.Комментарий 						= "Z № " + ОРП.ZОтчетНомер;
			
			Попытка
				ПКО_Объект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить("Не удалось записать Приходный кассовый ордер (Выручка (нал.))");
			КонецПопытки;
		КонецЕсли;
	Иначе
		
		Если НЕ МассивРезультатов[0].Пустой() Тогда // на тот случай когда выручки нет, а ордер есть, для дальнейшего использования
			
			ВыборкаПКО = МассивРезультатов[0].Выбрать();
			ВыборкаПКО.Следующий();
			ПКО = ВыборкаПКО.Ссылка;
			Попытка
				ПКО_Объект = ПКО.ПолучитьОбъект();
			Исключение
				ПКО_Объект = Неопределено;
			КонецПопытки; 
			
		Иначе
			
			ПКО_Объект = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПКО = ?(ПКО_Объект = Неопределено, Неопределено, ПКО_Объект.Ссылка);
	
	
	// Регистрируем Сумму выручки по терминалу (ВыручкаТерминал)
	Если ВыручкаТерминал > 0 Тогда
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			
			ВыборкаПоступлениеДС = МассивРезультатов[2].Выбрать();
			ВыборкаПоступлениеДС.Следующий();
			ПоступлениеДС = ВыборкаПоступлениеДС.Ссылка;
			Попытка
				ПоступлениеДС_Объект = ПоступлениеДС.ПолучитьОбъект();
			Исключение
				Сообщить("Внимание! Не удалось получить поступление ДС: " + ПоступлениеДС + " для изменения.");
				ПоступлениеДС_Объект = Неопределено;
			КонецПопытки; 
			
		Иначе
			ПоступлениеДС_Объект = Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.СоздатьДокумент();
		КонецЕсли; 
		
		Если ПоступлениеДС_Объект <> Неопределено  Тогда
			
			// заполним док
			ПоступлениеДС_Объект.Организация	= ОРП.Организация;
			ПоступлениеДС_Объект.Контрагент 	= ТекКонтрагент;
			ПоступлениеДС_Объект.Дата			= ОРП.Дата;
			
			ТЧ_РасшифровкаПлатежа 				= ПоступлениеДС_Объект.РасшифровкаПлатежа;
			ТЧ_РасшифровкаПлатежа.Очистить();
			НоваяСтрока 						= ТЧ_РасшифровкаПлатежа.Добавить();
			НоваяСтрока.СуммаПлатежа            = ВыручкаТерминал;
			НоваяСтрока.СуммаВзаиморасчетов     = ВыручкаТерминал;
			НоваяСтрока.КратностьВзаиморасчетов = 1;
			НоваяСтрока.КурсВзаиморасчетов 		= 1;
			ТекДоговор 							= Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Эквайринг",,,ТекКонтрагент);
			Если НЕ ЗначениеЗаполнено(ТекДоговор) Тогда
				Сообщить("Договор Эквайринга для текущего магазина не найден! Пожалуйста, сообщите программистам.");
			Иначе
				НоваяСтрока.ДоговорКонтрагента	= ТекДоговор;
				ПоступлениеДС_Объект.ДоговорКонтрагента = ТекДоговор;
			КонецЕсли; 
			
			ПоступлениеДС_Объект.СуммаДокумента						= ВыручкаТерминал;
			ПоступлениеДС_Объект.ВалютаДокумента					= Константы.ВалютаРегламентированногоУчета.Получить();
			ПоступлениеДС_Объект.СчетОрганизации					= ОРП.Организация.ОсновнойБанковскийСчет;
			ПоступлениеДС_Объект.ВидОперации 						= Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам;
			ПоступлениеДС_Объект.Оплачено							= ИСТИНА;
			ПоступлениеДС_Объект.ДатаОплаты 						= ОРП.Дата;
			ПоступлениеДС_Объект.ОтражатьВБухгалтерскомУчете		= ЛОЖЬ;
			ПоступлениеДС_Объект.ОтражатьВНалоговомУчете 			= ЛОЖЬ;
			ПоступлениеДС_Объект.ОтраженоВОперУчете					= ИСТИНА;
			ПоступлениеДС_Объект.СтатьяДвиженияДенежныхСредств		= Справочники.СтатьиДвиженияДенежныхСредств.ПриходДенежныхСредствРозничнаяВыручка;
			ПоступлениеДС_Объект.Ответственный						= ПараметрыСеанса.ТекущийПродавец;
			ПоступлениеДС_Объект.Комментарий 						= "Z № " + ОРП.ZОтчетНомер;
			
			Попытка
				ПоступлениеДС_Объект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить("Не удалось записать Платежный ордер на поступление (Терминал (безнал.))");
			КонецПопытки;
		КонецЕсли; 
		
	Иначе
		
		Если НЕ МассивРезультатов[2].Пустой() Тогда // на тот случай когда выручки по терминалу нет, а ордер есть, для дальнейшего использования
			
			ВыборкаПоступлениеДС = МассивРезультатов[2].Выбрать();
			ВыборкаПоступлениеДС.Следующий();
			ПоступлениеДС = ВыборкаПоступлениеДС.Ссылка;
			Попытка
				ПоступлениеДС_Объект = ПоступлениеДС.ПолучитьОбъект();
			Исключение
				ПоступлениеДС_Объект = Неопределено;
			КонецПопытки; 
			
		Иначе
			
			ПоступлениеДС_Объект = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоступлениеДС = ?(ПоступлениеДС_Объект = Неопределено, Неопределено, ПоступлениеДС_Объект.Ссылка);
	
	
	// Ищем нету ли РКО
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		
		ВыборкаРКО = МассивРезультатов[1].Выбрать();
		ВыборкаРКО.Следующий();
		РКО = ВыборкаРКО.Ссылка;
		
	Иначе
		
		РКО = Неопределено;
		
	КонецЕсли;
	
	
	РезультатФормированияОрдеров = Новый Структура("Сумма1С, ВыручкаТерминал, СуммаНаличные, ТекСклад, ТекКасса, ТекКонтрагент, ПКО, ПоступлениеДС, РКО, ОРП", 
		Сумма1С, ВыручкаТерминал, СуммаНаличные, ТекСклад, ТекКасса, ТекКонтрагент, ПКО, ПоступлениеДС, РКО, ОРП);
	
	//////////////////////////////////////////////////////////
	// Регистрируем расходы (И.Лосев говорит, что не нужно) //
	//////////////////////////////////////////////////////////
	
	Возврат РезультатФормированияОрдеров;

КонецФункции
// Катков А. 08.08.2016 <<  

Функция ПокраситьСтрокуСписка(ДокументСсылка) Экспорт
	Покрасить = Ложь;
	если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.ЗаказПоставщику") тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Проведен
		|	И ПоступлениеТоваровУслуг.Сделка = &ДокументСсылка";
		
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		если Выборка.Следующий() тогда
			Покрасить = Истина;
		конецесли;
	конецесли;
	возврат Покрасить;
КонецФункции	

Процедура ПоискЗаказаПоШтриху () Экспорт
	
	Результат = "";
	//Интерактивная работа с пользователем возможна только на клиенте 20.02.2017, Юра
	#Если Клиент Тогда
	Пока ВвестиСтроку(Результат, "Введите штрихкод") Цикл
		Если ЗначениеЗаполнено(Результат) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|Р.Владелец
			|ИЗ РегистрСведений.ШтрихкодыЗаказы КАК Р
			|ГДЕ Р.Штрихкод = &Штрих";
			Запрос.УстановитьПараметр("Штрих",Результат);
			
			Рез = Запрос.Выполнить();
			Если Рез.Пустой() Тогда
				Сообщить ("Штрих-код "+Результат+" не найден");
				возврат;
			КонецЕсли;
			
			Выб = Рез.Выбрать();
			Если Выб.Количество()>1 Тогда
				Сообщить ("Нарушение штрих-кодирования заказов! Обратитесь к руководству!");
				возврат;
			КонецЕсли;
			
			Выб.Следующий();
			Док = Выб.Владелец;
			Если ТипЗнч(Док)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Если Док.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собран Тогда
					Форма = Док.ПолучитьФорму("ФормаДокументаСклад");
					Форма.ОткрытьМодально();
				ИначеЕсли Док.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Отказ Тогда
					//Вопросы можно только на клиенте 20.02.2017, Юра
					#Если Клиент Тогда
					Ответ = КодВозвратаДиалога.Да;
					Пока Ответ = КодВозвратаДиалога.Да Цикл
						Ответ = Вопрос("Этот заказ необходимо разобрать! Повторить это сообщение?",РежимДиалогаВопрос.ДаНет);
					КонецЦикла;
					#КонецЕсли
					
					//Форма = Док.ПолучитьФорму("ФормаДокументаСклад");
					//Форма.ОткрытьМодально();
					
					Об = Док.ПолучитьОбъект();
					Об.Местоположение = Перечисления.Местоположения.РЦ;
					Попытка
						Об.Записать(РежимЗаписиДокумента.Запись);
						Сообщить ("Заказ можно разобрать",СтатусСообщения.Информация);
					Исключение
						Сообщить (ОписаниеОшибки());
						Результат = "";
						продолжить;
					КонецПопытки;

					
				//20062018 Теперь неактуально
				//ИначеЕсли Док.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УдалениеТовара Тогда
				//	//Вопросы можно только на клиенте 20.02.2017, Юра
				//	#Если Клиент Тогда
				//	Ответ = КодВозвратаДиалога.Да;
				//	Пока Ответ = КодВозвратаДиалога.Да Цикл
				//		Ответ = Вопрос("Необходимо разобрать некоторые товары! Повторить это сообщение?",РежимДиалогаВопрос.ДаНет);
				//	КонецЦикла;
				//	#КонецЕсли
				//	
				//	Форма = Док.ПолучитьФорму("ФормаДокументаСклад");
				//	Форма.ОткрытьМодально();
				//	
				//ИначеЕсли Док.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Корректировка Тогда
				//	//Вопросы можно только на клиенте 20.02.2017, Юра
				//	#Если Клиент Тогда
				//	Ответ = КодВозвратаДиалога.Да;
				//	Пока Ответ = КодВозвратаДиалога.Да Цикл
				//		Ответ = Вопрос("Необходимо передать заказ на сборку для добавления товара! Повторить это сообщение?",РежимДиалогаВопрос.ДаНет);
				//	КонецЦикла;
				//	#КонецЕсли
				//	
				//	Об = Док.ПолучитьОбъект();
				//	Об.Ответственный = Справочники.Пользователи.ПустаяСсылка();
				//	Об.Записать(РежимЗаписиДокумента.Запись);
					
				ИначеЕсли Док.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УКурьера Тогда
					//Вопросы можно только на клиенте 20.02.2017, Юра
					#Если Клиент Тогда
					Ответ = Вопрос("Заказ вернётся на склад. Возвращаем? (Для возврата нажмите ""Нет"")",РежимДиалогаВопрос.ДаНет);
					Если Ответ=КодВозвратаДиалога.Да Тогда
						Результат = "";
						продолжить;
					КонецЕсли;
					#КонецЕсли
						
					//20062018 Теперь неактуально
					//Если Док.Ответственный = Справочники.Пользователи.ПустаяСсылка() Тогда
					//	Форма = Док.ПолучитьФорму("ФормаДокументаСклад");
					//	Форма.ОткрытьМодально();
					//	Результат = "";
					//	продолжить;
					//КонецЕсли;
					
					ДокВозврата = ПоискВозвратаПоЗаказу (Док);
					Об = Док.ПолучитьОбъект();
					Об.Ответственный = Справочники.Пользователи.ПустаяСсылка();
					//Об.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собран;
					Об.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Отказ;
					Об.Местоположение = Перечисления.Местоположения.РЦ;
					Попытка
						Об.Записать(РежимЗаписиДокумента.Запись);
						EmeWmsЭкспортЗаказовПокупателей.ПометитьКЭкспортуПовторно(Об);
					Исключение
						Сообщить (ОписаниеОшибки());
						Результат = "";
						продолжить;
					КонецПопытки;
					
					//Пишем в рег.история ответственного по заказу
					Набор = РегистрыСведений.ИсторияОтветственногоПоЗаказу.СоздатьНаборЗаписей();
					
					Набор.Отбор.Документ.Установить(Об.Ссылка);
					Набор.Отбор.Период.Установить(ТекущаяДата());
					
					СтрокаДанных = Набор.Добавить();
					
					СтрокаДанных.Ответственный = Об.Ответственный;
					СтрокаДанных.Документ = Об.Ссылка;
					СтрокаДанных.Период = ТекущаяДата();
					Набор.Записать();
					
					
					Если ДокВозврата = Неопределено Тогда
						Сообщить (" "+Док+" принят обратно на склад. Его нужно разобрать.",СтатусСообщения.Информация);
					Иначе
						Форма = ДокВозврата.ПолучитьФорму("ФормаДокументаСклад");
						Форма.ОткрытьМодально();
					КонецЕсли;
				Иначе
					//Предупреждать можно только на клиенте 20.02.2017, Юра
					#Если Клиент Тогда
					Предупреждение ("Заказ не готов ни к выдаче, ни к приёмке! Обратитесь к руководству!");
					Сообщить ("Некорректный статус заказа! Текущий статус: "+Строка(Док.СтатусыСборкиЗаказа),СтатусСообщения.Важное);
					#КонецЕсли
				КонецЕсли;
			ИначеЕсли ТипЗнч(Док)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				Форма = Док.ПолучитьФорму("ФормаДокумента");
				Форма.ОткрытьМодально();
			КонецЕсли;
		КонецЕсли;
		Результат = "";
	КонецЦикла;
	#КонецЕсли

КонецПроцедуры

Процедура ПоискЗаказаПоНомеру () Экспорт
	Результат = "";
	
	//Интерактивная работа с пользователем возможна только на клиенте 20.02.2017, Юра
	#Если Клиент Тогда
	ВвестиСтроку(Результат, "Введите номер заказа",6);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Сообщить ("Нужно набрать номер заказа");
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	З.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК З
	|ГДЕ
	|	З.Проведен = ИСТИНА
	|	И З.Дата МЕЖДУ &Дат1 И &Дат2
	|	И З.Номер = &Номер";
	Запрос.УстановитьПараметр("Дат1",НачалоГода(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дат2",ТекущаяДата());
	Запрос.УстановитьПараметр("Номер",СокрЛП(Результат));
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщить ("Заказ не найден");
		Возврат;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Выб.Следующий();
	Док = Выб.Ссылка.ПолучитьОбъект();
	Если Док.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Отказ Тогда
		//Об = Док.ПолучитьОбъект();
		//Об.Ответственный = Справочники.Пользователи.ПустаяСсылка();
		//Об.Записать(РежимЗаписиДокумента.Запись);
		
		//Пишем в рег.история ответственного по заказу
		//Набор = РегистрыСведений.ИсторияОтветственногоПоЗаказу.СоздатьНаборЗаписей();
		//
		//Набор.Отбор.Документ.Установить(Об.Ссылка);
		//Набор.Отбор.Период.Установить(ТекущаяДата());
		//
		//СтрокаДанных = Набор.Добавить();
		//
		//СтрокаДанных.Ответственный = Об.Ответственный;
		//СтрокаДанных.Документ = Об.Ссылка;
		//СтрокаДанных.Период = ТекущаяДата();
		//Набор.Записать();
		
		//Вопросы можно только на клиенте 20.02.2017, Юра
		#Если Клиент Тогда
		Ответ = КодВозвратаДиалога.Да;
		Пока Ответ = КодВозвратаДиалога.Да Цикл
			Ответ = Вопрос("Этот заказ необходимо разобрать! Повторить это сообщение?",РежимДиалогаВопрос.ДаНет);
		КонецЦикла;
		#КонецЕсли
			
		Форма = Док.ПолучитьФорму("ФормаДокумента");
		Форма.ОткрытьМодально();
	Иначе
		//Предупреждать можно только на клиенте 20.02.2017, Юра
		#Если Клиент Тогда
		Предупреждение ("Заказ не готов к приёмке");
		#КонецЕсли
	КонецЕсли;
			
КонецПроцедуры

Процедура ПечатьЧекаДляЗаказа (Заказ) Экспорт
	Отказ = Ложь;
	Если (Заказ.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные) ИЛИ (Заказ.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка()) Тогда
		ВидОплаты = "Нал";
	Иначе
		//pryan@inbox.ru 09/09/2015	
		//Сообщить ("Не предусмотрено для безналичного вида оплаты");
		//Возврат;
		ВидОплаты ="БезНал";
	КонецЕсли;
	
	//pryan@inbox.ru 09/09/2015	
	если ВидОплаты ="БезНал" и Заказ.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен тогда
		Заказ.Печать("Заказ", 1, Истина);
		Заказ.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УКурьера;
		попытка
			Заказ.Записать(РежимЗаписиДокумента.Проведение);
		исключение
			сообщить("ош при перезаписи документа "+ОписаниеОшибки());
		конецпопытки;	
		//если Заказ.ПодарочныеКарты.Количество()>0 тогда
		//	РаботаСЗаказами.ПередЗаписьюЗаказаПередЗаписью(Заказ);
		//конецесли;	
		возврат;
	конецесли;
	
	Если (Заказ.СуммаДокумента<=10) И (Заказ.ПодарочныеКарты.Количество()=0) Тогда
		Сообщить ("Для заказа "+Заказ.Номер+" печать чека не предусмотрена. Заказ можно передать курьеру",СтатусСообщения.Информация);
		Заказ.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УКурьера;
		Заказ.Записать(РежимЗаписиДокумента.Проведение);
		Возврат;
	КонецЕсли;

	Если АНужноЛиПечатать(Заказ)=Ложь Тогда
		//Добавлено/////////////////////
		//Автор: Тасмаджиев 08/12/2017//
		//+НАЧАЛО+//////////////////////
		Заказ.Записать(РежимЗаписиДокумента.Запись);
		//Добавлено/////////////////////
		//Автор: Тасмаджиев 08/12/2017//
		//-КОНЕЦ-//////////////////////
		Заказ.Печать("Заказ", 1, Истина);
		Заказ.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УКурьера;
		Заказ.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить ("По техническим причинам, чек будет распечатан позже. Распечатан Бланк. Заказ можно передать курьеру.",СтатусСообщения.Важное);
		возврат;
	КонецЕсли;
	
	Если АПечаталсяЛиЧек(Заказ) Тогда
		АНуженЛиДопЧек(Заказ,ВидОплаты);
		Заказ.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УКурьера;
		Заказ.Записать(РежимЗаписиДокумента.Проведение);
		возврат;
	КонецЕсли;
	
	Если ПодготовитьФРКПродаже(Ложь)=Истина Тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ст из Заказ.Товары Цикл
		Если ПродажаПоФР(Ложь,ст.Номенклатура.Наименование,ст.Сумма,ст.Количество,ст.ПроцентСкидкиНаценки+ст.ПроцентАвтоматическихСкидок,ст.НомерСтроки)=Истина Тогда
			Отказ=Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ст из Заказ.Услуги Цикл
		Если ПродажаПоФР(Ложь,ст.Номенклатура.Наименование,ст.Сумма,ст.Количество,ст.ПроцентСкидкиНаценки+ст.ПроцентАвтоматическихСкидок,ст.НомерСтроки)=Истина Тогда
			Отказ=Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;

	Если ЗакрытьЧекФР(Ложь,Заказ.СуммаДокумента,ВидОплаты) = Истина  Тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;

	Если Не Отказ Тогда
		Набор = РегистрыСведений.ЧекиККМ.СоздатьНаборЗаписей();
		
		Набор.Отбор.Документ.Установить(Заказ.Ссылка);
		Набор.Отбор.Период.Установить (ТекущаяДата());
		
		СтрокаДанных = Набор.Добавить();
		
		СтрокаДанных.Период = ТекущаяДата();
		СтрокаДанных.Документ = Заказ.Ссылка;
		СтрокаДанных.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
		Попытка
			Набор.Записать();
		Исключение
		КонецПопытки;
		
		Заказ.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УКурьера;
		Заказ.Записать(РежимЗаписиДокумента.Проведение);
		
		СписатьИзЧекиРаспечатаны(Заказ,Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПродажаПоФР (Отказ,Товар,Сумма,Количество,Скидка,СтрокаСкидки)
	//20.02.2017, Юра
	Если НЕ ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		ECR = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Количество) Тогда
		Количество = 1;
	КонецЕсли;
	
	Попытка
		Сумма = Число(Сумма);
		Количество = Число(Количество);
	Исключение
	КонецПопытки;
	
	Отказ = Ложь;
	
	Цена = Окр(Сумма/Количество,2,1);
	
	ECR.Name = Товар;
	ECR.Price = Цена;
	ECR.Quantity = Количество;
	ECR.Department = 1;
	Если ECR.Registration() <> 0 тогда
		//Предупреждать можно только на клиенте 20.02.2017, Юра
		#Если Клиент Тогда
			Предупреждение ("Не удалось зарегистрировать продажу");
		#КонецЕсли
		Отказ = Истина;
		Возврат Отказ;
	КонецЕсли;
	//Если Скидка>0 Тогда
	//	ECR.Percents = Скидка;
	//	ECR.Destination = СтрокаСкидки;
	//	Если ECR.PercentsDiscount() <> 0 тогда
	//		//Предупреждать можно только на клиенте 20.02.2017, Юра
	//		#Если Клиент Тогда
	//		Предупреждение ("Не удалось зарегистрировать продажу (скидки)");
	//		#КонецЕсли
	//		Отказ = Истина;
	//		Возврат Отказ;
	//	КонецЕсли;
	//КонецЕсли;
	
	
	Возврат Отказ;
		
КонецФункции
	
Функция ЗакрытьЧекФР (Отказ,СуммаОпл,ВидОплаты)
	//20.02.2017, Юра
	Если НЕ ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		ECR = Неопределено;
	КонецЕсли;
	
		Отказ = Ложь;
		Если ВидОплаты = "БезНал" Тогда
			ECR.TypeClose = 3;
			Если ECR.CloseCheck() <> 0 тогда
				//Предупреждать можно только на клиенте 20.02.2017, Юра
				#Если Клиент Тогда
				Предупреждение ("Не удалось зарегистрировать продажу");
				#КонецЕсли
				Отказ = Истина;
				Возврат Отказ;
			КонецЕсли;
		Иначе
			// закрытие чека наличными без ввода полученной от клиента суммы
			ECR.TypeClose = 0;
			Если ECR.CloseCheck() <> 0 тогда
				//Предупреждать можно только на клиенте 20.02.2017, Юра
				#Если Клиент Тогда
				Предупреждение ("Не удалось зарегистрировать продажу");
				#КонецЕсли
				Отказ = Истина;
				Возврат Отказ;
			КонецЕсли;
		КонецЕсли;
КонецФункции
	
Функция ПодготовитьФРКПродаже (Отказ)
	//20.02.2017, Юра
	Если НЕ ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		ECR = Неопределено;
	КонецЕсли;
	
		Отказ=Ложь;
		
		Если ECR.GetStatus() <> 0 тогда
			//Предупреждать можно только на клиенте 20.02.2017, Юра
			#Если Клиент Тогда
			Предупреждение ("Нет связи с ККМ!");
			#КонецЕсли
			Отказ = Истина;
			Возврат Отказ;
		КонецЕсли;
		
		Если ECR.SessionOpened = 0 Тогда
			//Предупреждать можно только на клиенте 20.02.2017, Юра
			#Если Клиент Тогда
			Предупреждение ("Торговая смена НЕ открыта! Продажа невозможна!");
			#КонецЕсли
			Отказ = Истина;
			Возврат Отказ;
		КонецЕсли;
		
		// если есть открытый чек, то отменяем его
		Если ECR.CheckState <> 0 тогда
			Если ECR.CancelCheck() <> 0 тогда
				//Предупреждать можно только на клиенте 20.02.2017, Юра
				#Если Клиент Тогда
				Предупреждение ("Есть открытый чек, который не удалось отменить");
				#КонецЕсли
				Отказ = Истина;
				Возврат Отказ;
			КонецЕсли;
		КонецЕсли;
		
		//// входим в режим регистрации
		//// устанавливаем пароль кассира
		ECR.Password = "1";
		//// входим в режим регистрации
		ECR.Mode = 1;
		Если ECR.SetMode() <> 0 тогда
			//Предупреждать можно только на клиенте 20.02.2017, Юра
			#Если Клиент Тогда
			Предупреждение ("Не удалось установить нужный режим");
			#КонецЕсли
			Отказ = Истина;
			Возврат Отказ;
		КонецЕсли;
		
		Возврат Отказ;
КонецФункции

Функция ПоискВозвратаПоЗаказу (Заказ)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Воз.Ссылка
	               |ИЗ
	               |	Документ.ВозвратТоваровОтПокупателя КАК Воз
	               |ГДЕ
	               |	Воз.Сделка = &Заказ
	               |	И Воз.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Заказ",Заказ);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Выб.Следующий();
	Возврат Выб.Ссылка;
КонецФункции

Функция АПечаталсяЛиЧек(Заказ)
    Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Р.Документ
	             |ИЗ
	             |	РегистрСведений.ЧекиККМ.СрезПоследних(, Документ = &Док) КАК Р";
	Запрос.УстановитьПараметр("Док",Заказ.Ссылка);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	
КонецФункции

Функция АНужноЛиПечатать (Заказ) Экспорт
	//25.05.2017 Переход на новый документооборот
	//06.06.2017 Отмена ограничения
	//02.10.2017 Останавливаем печать чеков
	//Если (ТекущаяДата()>'20171003000001') ИЛИ (ТекущаяДата() <'20171005235959') Тогда
	//07.12.2017 Останавливаем печать чеков
	//Если ТекущаяДата()>'20171208000001' Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	//20122017 Дата отмены печати чеков
	ДатаОтмены = Константы.НеПечататьЧеки.Получить();
	Если ЗначениеЗаполнено(ДатаОтмены) И (НачалоДня(ТекущаяДата())>=ДатаОтмены) Тогда
		Возврат Ложь;
	КонецЕсли;

	
	
	//06.06.2017 Признак печати чека
	СвЧек = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ЧекЗаказ");
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Р.Объект
	             |ИЗ
	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК Р
	             |ГДЕ
	             |	Р.Объект = &Заказ
	             |	И Р.Свойство = &Св
	             |	И Р.Значение = ЛОЖЬ";
	Запрос.УстановитьПараметр("Заказ",Заказ.Ссылка);
	Запрос.УстановитьПараметр("Св",СвЧек);

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;


	Шалим = Константы.ШалимСМашинкой.Получить();
	Если Шалим Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	Р.Заказ
		|ИЗ
		|	РегистрСведений.Шалость КАК Р
		|ГДЕ
		|	Р.Заказ = &Заказ";
		Запрос.УстановитьПараметр("Заказ",Заказ.Ссылка);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	СвЧек = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ЧекЗаказ");
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Р.Объект
	             |ИЗ
	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК Р
	             |ГДЕ
	             |	Р.Объект = &Заказ
	             |	И Р.Свойство = &Св
	             |	И Р.Значение = ИСТИНА";
	Запрос.УстановитьПараметр("Заказ",Заказ.Ссылка);
	Запрос.УстановитьПараметр("Св",СвЧек);

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	СвЧек = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ЧекКонтр");
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Р.Объект
	             |ИЗ
	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК Р
	             |ГДЕ
	             |	Р.Объект = &Покупатель
	             |	И Р.Свойство = &Св
	             |	И Р.Значение = ИСТИНА";
	Запрос.УстановитьПараметр("Покупатель",Заказ.УдалитьКонтактноеЛицо);
	Запрос.УстановитьПараметр("Св",СвЧек);

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	
	СвЧек = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000000050");
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Р.Объект
	             |ИЗ
	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК Р
	             |ГДЕ
	             |	Р.Объект В(&Список)
	             |	И Р.Свойство = &Св
	             |	И Р.Значение = ИСТИНА";
	Запрос.УстановитьПараметр("Список",Заказ.Товары.Выгрузить(,"Номенклатура"));
	Запрос.УстановитьПараметр("Св",СвЧек);

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	//Возврат Ложь;
	
КонецФункции

Процедура СписатьИзЧекиРаспечатаны(Заказ,СписокТоваров) 
	
	Если (Заказ.Дата>Дата(2015,01,31)) И (Заказ.СкладГруппа = Справочники.Склады.НайтиПоКоду("000000005")) Тогда
		СистемныйЧек = Документы.ЧекККМ.НайтиПоНомеру("И-М00000001",ТекущаяДата());
		Если СистемныйЧек.Пустая() Тогда
			Сообщить ("При отгрузке заказа, возникла очень серьёзная проблема! Обратитесь к руководству!",СтатусСообщения.ОченьВажное);
			возврат;
		КонецЕсли;
		
		СистемныйЧек = СистемныйЧек.ПолучитьОбъект();
		
		НаборДвижений = СистемныйЧек.Движения.ЧекиРаспечатаны;
		Для Каждого ст из ?(СписокТоваров=Неопределено,Заказ.Товары,СписокТоваров) Цикл
			ПриходЧек = НаборДвижений.ДобавитьРасход();
			ПриходЧек.Активность=Истина;
			ЗаполнитьЗначенияСвойств(ПриходЧек,ст);
			ПриходЧек.Период = ТекущаяДата();
			ПриходЧек.ЗаказПокупателя = Заказ.Ссылка;
			НаборДвижений.Записать(Ложь);
		КонецЦикла;				
	КонецЕсли;
	


КонецПроцедуры

Процедура АНуженЛиДопЧек(Заказ,ВидОплаты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Остаток.Номенклатура КАК Номенклатура,
	               |	Остаток.КоличествоОстаток КАК Количество,
	               |	Остаток.СуммаОстаток / ЕСТЬNULL(Остаток.КоличествоОстаток, 1) КАК Цена,
	               |	Остаток.СуммаОстаток КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ЧекиРаспечатаны.Остатки(, ЗаказПокупателя = &Заказ) КАК Остаток
	               |ГДЕ
	               |	Остаток.КоличествоОстаток > 0";
	Запрос.УстановитьПараметр("Заказ",Заказ.Ссылка);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщить ("По данному заказу чек ужЕ был распечатан. Заказ можно передать курьеру",СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ПодготовитьФРКПродаже(Ложь)=Истина Тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;

	ст = Рез.Выбрать();
	Пока ст.Следующий() Цикл
		Если ПродажаПоФР(Ложь,ст.Номенклатура.Наименование,ст.Сумма,ст.Количество,0,0)=Истина Тогда
			Отказ=Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗакрытьЧекФР(Ложь,0,ВидОплаты) = Истина  Тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		СписатьИзЧекиРаспечатаны(Заказ,Рез.Выгрузить())
	КонецЕсли;


	
КонецПроцедуры

//pryan@inbox.ru 13/11/2015
Функция СформироватьПарольДляСкидок(ВыбранныйДокумент) Экспорт
	
	ПарольДляСкидки = "";
	
	НомерДокумента = сокрлп(ВыбранныйДокумент.Номер);
	если НомерДокумента <> "" тогда
		ПравоТри = Прав(НомерДокумента,3);
		ПравоТриЧисло = 0;
		попытка
			ПравоТриЧисло = Число(ПравоТри);
		исключение
		конецпопытки;	
		СерединаЧисло1 = (((ПравоТриЧисло + 26) * 10) + 26) * 10; 
		СерединаСтрока1 = прав("000"+прав(Формат(СерединаЧисло1,"ЧГ=0"),3),3); 
		СерединаЧисло2 = (((ПравоТриЧисло + 9) * 12) + 9) * 12; 
		СерединаСтрока2 = прав("000"+прав(Формат(СерединаЧисло2,"ЧГ=0"),3),3); 
		СерединаЧисло3 = (((ПравоТриЧисло + 19) * 1) + 19) * 1; 
		СерединаСтрока3 = прав("000"+прав(Формат(СерединаЧисло3,"ЧГ=0"),3),3); 
		ПарольДляСкидки = СерединаСтрока1 + СерединаСтрока2 + СерединаСтрока3;
	иначе
		сообщить("Для формирования пароля необходимо сохранить документ.");
	конецесли;
	
	возврат ПарольДляСкидки;
	
КонецФункции


Процедура ПоискПакетаПоШтриху() Экспорт
	
	//Интерактивная работа с пользователем возможна только на клиенте 20.02.2017, Юра
	#Если Клиент Тогда
	
	Результат = "";
	ВвестиСтроку(Результат,"Введите штрихкод пакета");
	Если ЗначениеЗаполнено(Результат) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|Р.Владелец
		|ИЗ РегистрСведений.ШтрихкодыПакетыСклДоков КАК Р
		|ГДЕ Р.Штрихкод = &Штрих";
		Запрос.УстановитьПараметр("Штрих",Результат);
		
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Сообщить ("Штрихкод "+Результат+" не найден");
			возврат;
		КонецЕсли;
		
		Выб = Рез.Выбрать();
		Если Выб.Количество()>1 Тогда
			Сообщить ("Нарушение штрихкодирования заказов! Обратитесь к руководству!");
			возврат;
		КонецЕсли;
		
		Выб.Следующий();
		Док = Выб.Владелец;
		Форма = Док.ПолучитьФорму("ФормаДокумента");
		Форма.ОткрытьМодально();
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры

Процедура ПеремещениеНаРЦ_ПоЗаказу (Таб,НомерЗак,ТекКладовщик,Статус) Экспорт
	
	НовПеремещ = Документы.ПеремещениеТоваров.СоздатьДокумент();
	НовПеремещ.Дата = ТекущаяДата();
	НовПеремещ.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	НовПеремещ.Комментарий = "Создан для заказа "+НомерЗак;
	НовПеремещ.ОтражатьВУправленческомУчете=Истина;
	НовПеремещ.Организация = Справочники.Организации.НайтиПоКоду("000000001");
	НовПеремещ.СкладОтправитель = Справочники.Склады.НайтиПоКоду("000000005");
	НовПеремещ.СкладПолучатель = Справочники.Склады.НайтиПоКоду("000000010");
	НовПеремещ.Ответственный = ТекКладовщик;
	
	НовПеремещ.Товары.Загрузить(Таб);
	
	к=0;
	Пока к<НовПеремещ.Товары.Количество() Цикл
		Если НовПеремещ.Товары[к].Количество = 0 Тогда
			СсылкаЗак = Документы.ЗаказПокупателя.НайтиПоНомеру(НомерЗак,ТекущаяДата()).Ссылка;
			НовПеремещ.Товары[к].Количество = СсылкаЗак.Товары[к].КоличествоСобрано;
		КонецЕсли;
		к=к+1;
	КонецЦикла;
	
	Если Статус = Перечисления.СтатусыСборкиЗаказа.УдалениеТовара Тогда
		к=0;
		Пока к<НовПеремещ.Товары.Количество() Цикл
			Если НовПеремещ.Товары[к].Количество = НовПеремещ.Товары[к].КоличествоСобрано Тогда
				НовПеремещ.Товары.Удалить(к);
				продолжить;
			ИначеЕсли НовПеремещ.Товары[к].КоличествоСобрано<НовПеремещ.Товары[к].Количество Тогда
				НовПеремещ.Товары[к].Количество = НовПеремещ.Товары[к].Количество - НовПеремещ.Товары[к].КоличествоСобрано;
			КонецЕсли;
			к=к+1;
		КонецЦикла;
	КонецЕсли;
	
	
	//Для Каждого ст из Таб Цикл
	//	Нов = НовПеремещ.Товары.Добавить();
	//	Нов.Номенклатура = ст.Номенклатура;
	//	Нов.Количество = ст.Количество;
	//	Нов.ЕдиницаИзмерения = ст.ЕдиницаИзмерения;
	//	Нов
	//КонецЦикла;
	
	Попытка
		НовПеремещ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		НовПеремещ.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
КонецПроцедуры


//30012017 Задача по регистрации сотрудников в магазинах
Процедура РегистрацияСотрудникаВМагазине () Экспорт
	Результат = Неопределено;
	Уход = Ложь;
	
	//Интерактивная работа с пользователем возможна только на клиенте 20.02.2017, Юра
	#Если Клиент Тогда
	ВвестиСтроку(Результат, "Введите штрихкод");
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Штрих.Владелец КАК Сотрудник,
	             |	Настройки.Значение КАК Магазин
	             |ИЗ
	             |	РегистрСведений.ШтрихкодыПользователи КАК Штрих,
	             |	РегистрСведений.НастройкиПользователей КАК Настройки
	             |ГДЕ
	             |	Штрих.Штрихкод = &Штрих
	             |	И Настройки.Пользователь = &Юзер
	             |	И Настройки.Настройка = &Скл";
	Запрос.УстановитьПараметр("Штрих",Результат);
	Запрос.УстановитьПараметр("Скл", ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойСклад);
	Запрос.УстановитьПараметр("Юзер", ПараметрыСеанса.ТекущийПользователь);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщить ("Штрих-код "+Результат+" не найден");
		возврат;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Если Выб.Количество()>1 Тогда
		Сообщить ("Нарушение штрих-кодирования! Обратитесь к руководству!");
		возврат;
	КонецЕсли;
	
	Выб.Следующий();
	
	Набор = РегистрыСведений.РегистрацияСотрудниковВМагазинах.СоздатьНаборЗаписей();
	Набор.Отбор.Сотрудник.Установить (Выб.Сотрудник);
	Набор.Отбор.Магазин.Установить (Выб.Магазин);
	Набор.Отбор.Дата.Установить (ТекущаяДата());
	
	Набор.Прочитать();
	
	Если Набор.Количество()>0 Тогда
		Уход = Истина;
		Набор[0].Уход = ТекущаяДата();
	Иначе
		Запись = Набор.Добавить();
		Запись.Дата = ТекущаяДата();
		Запись.Магазин = Выб.Магазин;
		Запись.Сотрудник = Выб.Сотрудник;
		Запись.Приход = ТекущаяДата();
	КонецЕсли;
	
	Попытка
		Набор.Записать();
	Исключение
		Сообщить ("Не удалось зарегистрировать сотрудника. Повторите попытку");
		Сообщить (ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если Уход Тогда
		Сообщить ("Вы "+Выб.Сотрудник+" успешно завершили регистрацию в магазине");
	Иначе
		Сообщить ("Регистрация "+Выб.Сотрудник+" прошла успешно");
	КонецЕсли;
			
			
КонецПроцедуры
//30012017

//17.02.2017, Юра
Процедура _5LB_ПолучитьДанныеИзРозницыОРегистрацииСотрудниковВМагазинах() Экспорт
	//{+НАЧАЛО+Изменения} Автор: Тасмаджиев 15/05/2018//=============================================================================================
	УстановитьПривилегированныйРежим(Истина);
	
	ПапкаПродавцов = Справочники.Пользователи.НайтиПоНаименованию("Продавцы",Истина);
	
	Прокси = РегистрыСведений._5LB_ОписанияWebСервисов.СоздатьПрокси("ИзРозницыДляВсех");
	XDTOРезультат = Прокси.GetPrihodUhod(НачалоДня(ТекущаяДата()-2*24*60*60),КонецДня(ТекущаяДата())); //берем последние 2 дня + сегодня
	Для Каждого element Из XDTOРезультат.Element Цикл
		//добавил условие на непустую строку (они делаются умышленно, чтобы структуру правильно передать) 20.02.2017, Юра
		Если ЗначениеЗаполнено(element.Sotrudnik) ИЛИ ЗначениеЗаполнено(element.Magazin) ИЛИ ЗначениеЗаполнено(element.DataDen) Тогда //ЗначениеЗаполнено(element.DataTimePrihod) ИЛИ ЗначениеЗаполнено(element.DataTimeUhod) Тогда
			
			//13.03.2017, Юра
			Если ЗначениеЗаполнено(element.Sotrudnik) и element.Sotrudnik = "Администратор" Тогда
				Продолжить;
			КонецЕсли;
			
			ЧтоНеПолучилось = "";
			
			//03.03.2017, Юра
			Если ЗначениеЗаполнено(element.Sotrudnik) и Найти(element.Sotrudnik,"*Доставил*")>0 Тогда
				//Обработаем доставку товаров водителем.
				//Нужно из строки "*Доставил*9780201371253*НомерДок*555-98И*ДатаДок*2017.03.01" вятянуть всё:
				ПозицияНачалаКодаПользователя = 1 + СтрДлина("*Доставил*");
				ПозицияОкончанияКодаПользователя = Найти(element.Sotrudnik,"*НомерДок*");
				КодПользователя = Сред(element.Sotrudnik,ПозицияНачалаКодаПользователя,ПозицияОкончанияКодаПользователя-ПозицияНачалаКодаПользователя);
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ШтрихкодыПользователи.Владелец КАК Пользователь
				               |ИЗ
				               |	РегистрСведений.ШтрихкодыПользователи КАК ШтрихкодыПользователи
				               |ГДЕ
				               |	ШтрихкодыПользователи.Штрихкод = &Штрихкод";
				Запрос.УстановитьПараметр("Штрихкод", КодПользователя);
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Водитель = ?(ВыборкаДетальныеЗаписи.Следующий(),ВыборкаДетальныеЗаписи.Пользователь,"");
				
				Если ЗначениеЗаполнено(Водитель) Тогда
					ПозицияНачалаНомераДокумента = Найти(element.Sotrudnik,"*НомерДок*") + СтрДлина("*НомерДок*");
					ПозицияОкончанияНомераДокумента = Найти(element.Sotrudnik,"*ДатаДок*");
					НомерДокумента = Сред(element.Sotrudnik,ПозицияНачалаНомераДокумента,ПозицияОкончанияНомераДокумента-ПозицияНачалаНомераДокумента);
					
					ПозицияНачалаДатыДокумента = Найти(element.Sotrudnik,"*ДатаДок*") + СтрДлина("*ДатаДок*");
					ПозицияОкончанияДатыДокумента = СтрДлина(element.Sotrudnik);
					ДатаДокумента = Сред(element.Sotrudnik,ПозицияНачалаДатыДокумента,ПозицияОкончанияДатыДокумента-ПозицияНачалаДатыДокумента+1);
					//ДатаДокумента = Дата(СтрЗаменить(ДатаДокумента,".",""));
					ДатаДокумента = Дата(Прав(ДатаДокумента,4),Сред(ДатаДокумента,4,2),Лев(ДатаДокумента,2));//13.03.2017, Юра
				
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	ПеремещениеТоваров.Ссылка
					               |ИЗ
					               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
					               |ГДЕ
					               |	ПеремещениеТоваров.Номер = &Номер";
								   //06.03.2017, Юра
								   //Проблема обнаружилась: в УТ10 при каждой перезаписи документа дата ставится текущая.
								   //Поэтому условие на дату тупо убираю
					               //|	И НАЧАЛОПЕРИОДА(ПеремещениеТоваров.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ)
								   //И убираю это условие, чтобы точно понимать: то ли документа нет, то ли он уже со статусом "Доставлено"
					               //|	И НЕ ПеремещениеТоваров.СтатусДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусПеревозки.Доставлено)";
					//Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента); 
					Запрос.УстановитьПараметр("Номер", НомерДокумента);
					РезультатЗапроса = Запрос.Выполнить();
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						СсылкаНаДокумент = ВыборкаДетальныеЗаписи.Ссылка;//06.03.2017, Юра
						Если СсылкаНаДокумент.СтатусДоставки = Перечисления.СтатусПеревозки.Доставлено Тогда //06.03.2017, Юра
							//Всё хорошо, в документе уже проставлен нужный статус, трогать его не будем
						Иначе
							//13.03.2017, Юра
							Попытка
								ДокПеремещения = СсылкаНаДокумент.ПолучитьОбъект();
								ДокПеремещения.Ответственный = Водитель;
								ДокПеремещения.СтатусДоставки = Перечисления.СтатусПеревозки.Доставлено;
								ДокПеремещения.Записать();
							Исключение
								ЧтоНеПолучилось = ОписаниеОшибки();
							КонецПопытки;
						КонецЕсли;
					Иначе
						ЧтоНеПолучилось = "Не найден документ ""Перемещение товаров"" № "+НомерДокумента;//06.03.2017, Юра +" от "+ДатаДокумента;//06.03.2017, Юра	
					КонецЕсли;
				Иначе
					ЧтоНеПолучилось = "Не определен водитель по коду "+КодПользователя;//06.03.2017, Юра
				КонецЕсли;
				
				//06.03.2017, Юра
				Если ЗначениеЗаполнено(ЧтоНеПолучилось) Тогда
					ЧтоНеПолучилось = "Не могу записать информацию о доставке водителем товара в магазин. " +ЧтоНеПолучилось+Символы.ПС+ "Переданы из 1С:Розница: "+element.Sotrudnik;
					ЗаписьЖурналаРегистрации("Получение данных из 1С:Розница о регистрации сотрудников в магазинах",УровеньЖурналаРегистрации.Ошибка,Метаданные.РегламентныеЗадания._5LB_ПолучитьДанныеИзРозницыОРегистрацииСотрудниковВМагазинах,,ЧтоНеПолучилось,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
				КонецЕсли;
			Иначе
				//Было до 03.03.2017, Юра
				Если ЗначениеЗаполнено(element.Sotrudnik) Тогда
					Сотрудник = Справочники.Пользователи.НайтиПоНаименованию(element.Sotrudnik,Истина);
					Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
						//28.03.2017, Юра
						Сотрудник = Справочники.Пользователи.НайтиПоКоду(element.Sotrudnik,Истина);
						Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
							ЧтоНеПолучилось = "В УТ10 не найден пользователь по наименованию или коду "+element.Sotrudnik+".";
						КонецЕсли;
					КонецЕсли;
				Иначе
					ЧтоНеПолучилось = "Не переданы ФИО пользователя.";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(element.Magazin) Тогда
					Магазин	= Справочники.Склады.НайтиПоНаименованию(element.Magazin,Истина);
					Если НЕ ЗначениеЗаполнено(Магазин) Тогда
						 ЧтоНеПолучилось = "В УТ10 не найден магазин (склад) по наименованию "+element.Magazin+".";
					КонецЕсли;
				Иначе
					ЧтоНеПолучилось = "Не передано название магазина (склада).";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЧтоНеПолучилось) Тогда
					ЧтоНеПолучилось = "Не могу создать запись в регистре ""Регистрация сотрудников в магазинах"". " +ЧтоНеПолучилось+Символы.ПС+
						"Переданы из 1С:Розница: сотрудник = "+element.Sotrudnik+", магазин(склад) = "+element.Magazin+", день = "+element.DataDen+", приход = "+element.DataTimePrihod+", уход = "+element.DataTimeUhod;
					ЗаписьЖурналаРегистрации("Получение данных из 1С:Розница о регистрации сотрудников в магазинах",УровеньЖурналаРегистрации.Ошибка,Метаданные.РегламентныеЗадания._5LB_ПолучитьДанныеИзРозницыОРегистрацииСотрудниковВМагазинах,,ЧтоНеПолучилось,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
				Иначе
					МенеджерЗаписи = РегистрыСведений.РегистрацияСотрудниковВМагазинах.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Магазин	= Магазин;
					МенеджерЗаписи.Сотрудник= Сотрудник;
					МенеджерЗаписи.Дата		= element.DataDen;
					МенеджерЗаписи.Приход	= element.DataTimePrihod;
					МенеджерЗаписи.Уход		= element.DataTimeUhod;
					МенеджерЗаписи.Записать();
				КонецЕсли;
				
				//21.02.2017, Юра
				//И дополнительно добавим запись в РС.ИсторияРаботыПродавцов (записи будем делать только для продавцов).
				Если ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(Сотрудник.Наименование) И Сотрудник.Родитель = ПапкаПродавцов И ЗначениеЗаполнено(element.DataDen) 
					И ЗначениеЗаполнено(element.DataTimePrihod) И ЗначениеЗаполнено(element.DataTimeUhod) Тогда
					МенеджерЗаписи = РегистрыСведений.ИсторияРаботыПродавцов.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период = element.DataDen;
					МенеджерЗаписи.Пользователь = СоответствиеПользователь_ПользовательМагазин(Сотрудник,КонецДня(МенеджерЗаписи.Период)); //28.02.2017, Юра
					МенеджерЗаписи.Продавец = Сотрудник;
					МенеджерЗаписи.PIN = Сотрудник.Код;
					МенеджерЗаписи.ФИО = Сотрудник.Наименование;
					МенеджерЗаписи.ДатаНачала = element.DataTimePrihod;
					МенеджерЗаписи.ДатаОкончания = element.DataTimeUhod;
					МенеджерЗаписи.Продолжительность = МенеджерЗаписи.ДатаОкончания - МенеджерЗаписи.ДатаНачала;
					МенеджерЗаписи.НомерСеанса = 1;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//15.03.2017, Юра
	//Добавим получение данных из "1С:Розница" о печати ценников в магазинах
	XDTOРезультат = Прокси.DatePrintingPriceLabels(НачалоДня(ТекущаяДата()-24*60*60),КонецДня(ТекущаяДата())); //с начала вчерашнего дня по конец текущего дня
	Для Каждого element Из XDTOРезультат.Element Цикл
		Если ЗначениеЗаполнено(element.Object) ИЛИ ЗначениеЗаполнено(element.Date) Тогда
			ЧтоНеПолучилось = "";
			
			Если ЗначениеЗаполнено(element.Object) Тогда
				Магазин	= Справочники.Склады.НайтиПоНаименованию(element.Object,Истина);
				Если НЕ ЗначениеЗаполнено(Магазин) Тогда
					ЧтоНеПолучилось = "В УТ10 не найден магазин (склад) по наименованию "+element.Object+".";
				КонецЕсли;
			Иначе
				ЧтоНеПолучилось = "Не передано название магазина (склада).";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЧтоНеПолучилось) Тогда
				ЧтоНеПолучилось = "Не могу создать запись в регистре ""Ценники номенклатуры"" (фиксация даты печати ценника). " +ЧтоНеПолучилось+Символы.ПС+
					"Переданы из 1С:Розница: магазин(склад) = "+element.Object+", Date = "+element.Date;
				ЗаписьЖурналаРегистрации("Получение данных из 1С:Розница о печати ценников в магазинах",УровеньЖурналаРегистрации.Ошибка,Метаданные.РегламентныеЗадания._5LB_ПолучитьДанныеИзРозницыОРегистрацииСотрудниковВМагазинах,,ЧтоНеПолучилось,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			Иначе
				МенеджерЗаписи = РегистрыСведений.ЦенникиНоменклатуры.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период			= НачалоДня(element.Date);
				МенеджерЗаписи.Склад			= Магазин;
				//МенеджерЗаписи.Номенклатура	= ;
				МенеджерЗаписи.ДатаПечатиЦенника= element.Date;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); //20.02.2017, Юра
	//{-КОНЕЦ-Изменения} Автор: Тасмаджиев 15/05/2018//==============================================================================================
КонецПроцедуры

//28.02.2017, Юра
Функция СоответствиеПользователь_ПользовательМагазин(Пользователь,ДатаСреза)
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	Псевдонимы.ОбъектСсылка КАК Пользователь
	               	|ИЗ
	               	|	РегистрСведений.КадроваяИстория.СрезПоследних(&ДатаСреза, Сотрудник = &Пользователь) КАК КадроваяИсторияСрезПоследних
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Псевдонимы КАК Псевдонимы
	               	|		ПО КадроваяИсторияСрезПоследних.Магазин = Псевдонимы.Значение
	               	|ГДЕ
	               	|	Псевдонимы.Раздел = &Раздел";
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Раздел", Справочники.ПсевдонимыРазделы.НайтиПоНаименованию("Пользователь-Магазин"));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		//Сообщить("Пользователю "+Пользователь+" соответствует "+ВыборкаДетальныеЗаписи.Пользователь);
		Возврат ВыборкаДетальныеЗаписи.Пользователь;
	Иначе
		Возврат Пользователь;
	КонецЕсли;
КонецФункции

//28.03.2017, Юра
Процедура _5LB_ПолучитьДанныеИзРозницыПоОплатеИВозвратахДС_И_СформироватьДокументыОплаты() Экспорт 
	//{+НАЧАЛО+Изменения} Автор: Тасмаджиев 15/05/2018//=============================================================================================
	//УстановитьПривилегированныйРежим(Истина);
	//Валюта = Константы.ВалютаРегламентированногоУчета.Получить();//Справочники.Валюты.НайтиПоКоду("643");//рубли
	//Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//ОсновнойБанковскийСчет = Организация.ОсновнойБанковскийСчет;
	//ДДС_ПриходРозничнаяВыручка = Справочники.СтатьиДвиженияДенежныхСредств.ПриходДенежныхСредствРозничнаяВыручка;
	//ДДС_ВозвратПокупателю = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствПокупателю;
	//
	//Прокси = РегистрыСведений._5LB_ОписанияWebСервисов.СоздатьПрокси("ИзРозницыДляВсех");
	//XDTOРезультат = Прокси.PaymentMethodsRetailSales(НачалоДня(ТекущаяДата()-24*60*60),КонецДня(ТекущаяДата())); //с начала вчерашнего дня по конец текущего дня
	//Для Каждого element Из XDTOРезультат.Element Цикл
	//	Если ЗначениеЗаполнено(element.TypeOfPayment) ИЛИ ЗначениеЗаполнено(element.TypeOfOperation) ИЛИ ЗначениеЗаполнено(element.Shop) Тогда
	//		//Сообщить("TypeOfPayment "+element.TypeOfPayment+", TypeOfOperation "+element.TypeOfOperation+", Shop "+element.Shop+", Date "+element.Date+", Seller "+element.Seller+", Summa "+element.Summa);
	//		ЧтоНеПолучилось = "";
	//		
	//		Если НЕ ЗначениеЗаполнено(element.TypeOfPayment) Тогда
	//			ЧтоНеПолучилось = "Не передан тип оплаты (Платёжная карта / Наличные / Подарочный сертификат). ";
	//		КонецЕсли;
	//		
	//		Если НЕ ЗначениеЗаполнено(element.TypeOfOperation) Тогда
	//			ЧтоНеПолучилось = ЧтоНеПолучилось + "Не передан тип операции (ПРОДАЖА / ВОЗВРАТ). ";
	//		КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено(element.Shop) Тогда
	//			Магазин	= Справочники.Склады.НайтиПоНаименованию(element.Shop,Истина);
	//			Если НЕ ЗначениеЗаполнено(Магазин) Тогда
	//				ЧтоНеПолучилось = ЧтоНеПолучилось +"В УТ10 не найден магазин (склад) по наименованию "+element.Shop+". ";
	//			КонецЕсли;
	//			
	//			ТекКасса = Справочники.Кассы.НайтиПоНаименованию(element.Shop,Истина);
	//			Если НЕ ЗначениеЗаполнено(ТекКасса) Тогда
	//				ЧтоНеПолучилось = ЧтоНеПолучилось +"В УТ10 не найдена касса по наименованию "+element.Shop+". ";
	//			КонецЕсли;
	//			
	//			ТекКонтрагент = Справочники.Контрагенты.НайтиПоНаименованию(element.Shop, Истина);
	//			Если Не ЗначениеЗаполнено(ТекКонтрагент) Тогда
	//				ЧтоНеПолучилось = ЧтоНеПолучилось +"В УТ10 не найден контрагент по наименованию "+element.Shop+". ";
	//			КонецЕсли;
	//			
	//			ТекДоговор = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Эквайринг",,,ТекКонтрагент);
	//			Если НЕ ЗначениеЗаполнено(ТекДоговор) Тогда
	//				ЧтоНеПолучилось = ЧтоНеПолучилось +"В УТ10 не найден договор эквайринга для магазина = "+element.Shop+". ";
	//			КонецЕсли;
	//		Иначе
	//			ЧтоНеПолучилось = ЧтоНеПолучилось + "Не передано название магазина (склада). ";
	//		КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено(element.Seller) Тогда
	//			Продавец = Справочники.Пользователи.НайтиПоНаименованию(element.Seller,Истина);
	//			Если НЕ ЗначениеЗаполнено(Продавец) Тогда
	//				ЧтоНеПолучилось = ЧтоНеПолучилось +"В УТ10 не найден продавец по наименованию "+element.Seller+". ";
	//			КонецЕсли;
	//		Иначе
	//			ЧтоНеПолучилось = ЧтоНеПолучилось + "Не передано ФИО продавца. ";
	//		КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено(element.Date) Тогда
	//			ДатаДокумента = КонецДня(element.Date);
	//		Иначе
	//			ЧтоНеПолучилось = ЧтоНеПолучилось + "Не передана дата операции. ";
	//		КонецЕсли;
	//		
	//		Если НЕ ЗначениеЗаполнено(element.Summa) Тогда
	//			ЧтоНеПолучилось = ЧтоНеПолучилось + "Не передана сумма операции. ";
	//		КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено(ЧтоНеПолучилось) Тогда
	//			ЧтоНеПолучилось = "Не могу создать документ оплаты/возврата. " +ЧтоНеПолучилось+Символы.ПС+
	//				"Переданы из 1С:Розница: тип оплаты = "+element.TypeOfPayment+", тип операции = "+element.TypeOfOperation+", магазин = "+element.Shop+", дата = "+element.Date+", продацец = "+element.Seller+", сумма = "+element.Summa;
	//			ЗаписьЖурналаРегистрации("Получение данных из 1С:Розница по оплате/возвратам ДС в магазинах",УровеньЖурналаРегистрации.Ошибка,Метаданные.РегламентныеЗадания._5LB_ПолучитьДанныеИзРозницыОРегистрацииСотрудниковВМагазинах,,ЧтоНеПолучилось,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	//		Иначе
	//			//Всё ок, обрабатываем:
	//			Если element.TypeOfPayment = "Платёжная карта" Тогда
	//				Если element.TypeOfOperation = "ПРОДАЖА" Тогда
	//					ТекДок = НайтиИлиСоздатьДокумент("ПлатежныйОрдерПоступлениеДенежныхСредств",ДатаДокумента,ТекКонтрагент);
	//					ТекДок.Организация					= Организация;
	//					ТекДок.СчетОрганизации				= ОсновнойБанковскийСчет;
	//					ТекДок.Контрагент					= ТекКонтрагент;
	//					ТекДок.ДоговорКонтрагента			= ТекДоговор;
	//					ТекДок.Дата							= ДатаДокумента;
	//					ТекДок.ДатаОплаты					= ТекДок.Дата;
	//					ТекДок.ВидОперации					= Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам;
	//					ТекДок.НазначениеПлатежа			= "Оплата от розничных покупателей";
	//					ТекДок.ВалютаДокумента				= Валюта;
	//					ТекДок.КратностьДокумента			= 1;
	//					ТекДок.КурсДокумента				= 1;
	//					//заполним ТЧ:
	//					ТекДок.РасшифровкаПлатежа.Очистить();
	//					НС			 						= ТекДок.РасшифровкаПлатежа.Добавить();
	//					НС.СуммаПлатежа						= element.Summa;
	//					НС.СуммаВзаиморасчетов    			= element.Summa;
	//					НС.КратностьВзаиморасчетов			= 1;
	//					НС.КурсВзаиморасчетов 				= 1;
	//					НС.ДоговорКонтрагента				= ТекДоговор;
	//					НС.СтатьяДвиженияДенежныхСредств	= ДДС_ПриходРозничнаяВыручка;
	//					ТекДок.СуммаДокумента				= element.Summa;
	//					ТекДок.Оплачено						= ИСТИНА;
	//					ТекДок.ОтражатьВБухгалтерскомУчете	= ЛОЖЬ;
	//					ТекДок.ОтражатьВНалоговомУчете 		= ЛОЖЬ;
	//					ТекДок.ОтраженоВОперУчете			= ИСТИНА;
	//					ТекДок.СтатьяДвиженияДенежныхСредств= ДДС_ПриходРозничнаяВыручка;
	//					ТекДок.Ответственный				= Продавец;
	//					ТекДок.Комментарий 					= "Сформирован автоматически по данным 1С:Розница "+ТекущаяДата();
	//					
	//					ТекДок.Записать(РежимЗаписиДокумента.Проведение);
	//				Иначе //"ВОЗВРАТ"
	//					ТекДок = НайтиИлиСоздатьДокумент("ПлатежныйОрдерСписаниеДенежныхСредств",ДатаДокумента,ТекКонтрагент);
	//					ТекДок.Организация					= Организация;
	//					ТекДок.СчетОрганизации				= ОсновнойБанковскийСчет;
	//					ТекДок.Контрагент					= ТекКонтрагент;
	//					ТекДок.ДоговорКонтрагента			= ТекДоговор;
	//					ТекДок.Дата							= ДатаДокумента;
	//					ТекДок.ДатаОплаты					= ТекДок.Дата;
	//					ТекДок.ВидОперации					= Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
	//					ТекДок.ВалютаДокумента				= Валюта;
	//					ТекДок.КратностьДокумента			= 1;
	//					ТекДок.КурсДокумента				= 1;
	//					//заполним ТЧ:
	//					ТекДок.РасшифровкаПлатежа.Очистить();
	//					НС 									= ТекДок.РасшифровкаПлатежа.Добавить();
	//					НС.СуммаПлатежа            			= element.Summa;
	//					НС.СуммаВзаиморасчетов				= element.Summa;
	//					НС.КратностьВзаиморасчетов			= 1;
	//					НС.КурсВзаиморасчетов 				= 1;
	//					НС.ДоговорКонтрагента				= ТекДоговор;
	//					НС.СтатьяДвиженияДенежныхСредств	= ДДС_ВозвратПокупателю;
	//					ТекДок.СуммаДокумента				= element.Summa;
	//					ТекДок.Оплачено						= ИСТИНА;
	//					ТекДок.ОтражатьВБухгалтерскомУчете	= ЛОЖЬ;
	//					ТекДок.ОтражатьВНалоговомУчете 		= ЛОЖЬ;
	//					ТекДок.ОтраженоВОперУчете			= ИСТИНА;
	//					ТекДок.СтатьяДвиженияДенежныхСредств= ДДС_ВозвратПокупателю;
	//					ТекДок.Ответственный				= Продавец;
	//					ТекДок.Комментарий 					= "Сформирован автоматически по данным 1С:Розница "+ТекущаяДата();
	//					
	//					ТекДок.Записать(РежимЗаписиДокумента.Проведение);
	//				КонецЕсли;
	//			ИначеЕсли element.TypeOfPayment = "Наличные" Тогда
	//				Если element.TypeOfOperation = "ПРОДАЖА" Тогда
	//					ТекДок = НайтиИлиСоздатьДокумент("ПриходныйКассовыйОрдер",ДатаДокумента,ТекКасса);
	//					ТекДок.Организация 					= Организация;
	//					ТекДок.СчетОрганизации				= ОсновнойБанковскийСчет;
	//					ТекДок.Касса 						= ТекКасса;
	//					ТекДок.Дата							= ДатаДокумента;
	//					ТекДок.ВидОперации 					= Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
	//					//заполним ТЧ:
	//					ТекДок.РасшифровкаПлатежа.Очистить();
	//					НС 									= ТекДок.РасшифровкаПлатежа.Добавить();
	//					НС.СуммаПлатежа            			= element.Summa;
	//					НС.СуммаВзаиморасчетов     			= element.Summa;
	//					НС.КурсВзаиморасчетов				= 1;
	//					НС.КратностьВзаиморасчетов			= 1;
	//					НС.СтавкаНДС						= Перечисления.СтавкиНДС.НДС18;
	//					НС.СуммаНДС							= Окр(element.Summa*18/118,2);
	//					НС.СтатьяДвиженияДенежныхСредств	= ДДС_ПриходРозничнаяВыручка;
	//					ТекДок.СуммаДокумента				= element.Summa;
	//					ТекДок.ВалютаДокумента				= Валюта;
	//					ТекДок.Оплачено						= ИСТИНА;
	//					ТекДок.СтатьяДвиженияДенежныхСредств= ДДС_ПриходРозничнаяВыручка;
	//					ТекДок.ВыручкаСНТТ					= ЛОЖЬ;
	//					ТекДок.ВидПриемаРозничнойВыручки	= Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
	//					ТекДок.ОтражатьВБухгалтерскомУчете	= ЛОЖЬ;
	//					ТекДок.ОтражатьВУправленческомУчете	= ИСТИНА;
	//					ТекДок.ОтражатьВНалоговомУчете 		= ЛОЖЬ;
	//					ТекДок.ОтраженоВОперУчете			= ИСТИНА;
	//					ТекДок.Ответственный				= Продавец;
	//					ТекДок.Комментарий 					= "Сформирован автоматически по данным 1С:Розница "+ТекущаяДата();
	//					
	//					ТекДок.Записать(РежимЗаписиДокумента.Проведение);
	//				Иначе //"ВОЗВРАТ"
	//					//ТекДок = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	//					ТекДок = НайтиИлиСоздатьДокумент("РасходныйКассовыйОрдер",ДатаДокумента,ТекКасса);
	//					ТекДок.Организация 					= Организация;
	//					ТекДок.СчетОрганизации				= ОсновнойБанковскийСчет;
	//					ТекДок.Касса 						= ТекКасса;
	//					ТекДок.Дата							= ДатаДокумента;
	//					ТекДок.ВидОперации 					= Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
	//					//заполним ТЧ:
	//					ТекДок.РасшифровкаПлатежа.Очистить();
	//					НС 									= ТекДок.РасшифровкаПлатежа.Добавить();
	//					НС.СуммаПлатежа            			= element.Summa;
	//					НС.СуммаВзаиморасчетов     			= element.Summa;
	//					НС.КурсВзаиморасчетов				= 1;
	//					НС.КратностьВзаиморасчетов			= 1;
	//					НС.СтавкаНДС						= Перечисления.СтавкиНДС.НДС18;
	//					НС.СуммаНДС							= Окр(element.Summa*18/118,2);
	//					НС.СтатьяДвиженияДенежныхСредств	= ДДС_ВозвратПокупателю;
	//					
	//					ТекДок.СуммаДокумента				= element.Summa;
	//					ТекДок.ВалютаДокумента				= Валюта;
	//					ТекДок.Оплачено						= ИСТИНА;
	//					ТекДок.СтатьяДвиженияДенежныхСредств= ДДС_ВозвратПокупателю;
	//					ТекДок.ВыручкаСНТТ					= ЛОЖЬ;
	//					ТекДок.ВидВыдачиДенежныхСредств		= Перечисления.ВидВыдачиДенежныхСредств.КассеККМ;
	//					ТекДок.ОтражатьВБухгалтерскомУчете	= ЛОЖЬ;
	//					ТекДок.ОтражатьВУправленческомУчете	= ИСТИНА;
	//					ТекДок.ОтражатьВНалоговомУчете 		= ЛОЖЬ;
	//					ТекДок.ОтраженоВОперУчете			= ИСТИНА;
	//					ТекДок.Ответственный				= Продавец;
	//					ТекДок.Комментарий 					= "Сформирован автоматически по данным 1С:Розница "+ТекущаяДата();
	//					
	//					ТекДок.Записать(РежимЗаписиДокумента.Проведение);
	//				КонецЕсли;
	//					
	//			Иначе //"Подарочный сертификат"
	//				Продолжить; //никак не обрабатываем пока, но передаем для порядка, так как м.быть потом будем обрабатывать
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//{-КОНЕЦ-Изменения} Автор: Тасмаджиев 15/05/2018//==============================================================================================
	
КонецПроцедуры
//30012017

//25.07.2017, Юра
Функция ПроверитьПравоНаРедактированиеДокументовТовародвижения(ТекДокумент,Отказ) Экспорт
	
	Если НЕ ТекДокумент.ОбменДанными.Загрузка Тогда
		Если Метаданные.РегистрыНакопления.ТоварыНаСкладах.СтандартныеРеквизиты.Регистратор.Тип.СодержитТип(ТипЗнч(ТекДокумент.Ссылка)) Тогда
			Если Не РольДоступна("_5LB_РедактированиеДокументовТовародвиженияВЗакрытомОтРедактированияПериоде") Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ Первые 1
				               |	_5LB_ДатаЗапретаРедактированияДокументовТовародвиженияСрезПоследних.Период КАК Период
				               |ИЗ
				               |	РегистрСведений._5LB_ДатаЗапретаРедактированияДокументовТовародвижения.СрезПервых(&ДатаСреза, Склад В (&СписокСкладов)) КАК _5LB_ДатаЗапретаРедактированияДокументовТовародвиженияСрезПоследних";
				Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ТекДокумент.Дата));
				СписокСкладов = Новый СписокЗначений;
				Для Каждого Реквизит из ТекДокумент.Метаданные().Реквизиты Цикл //Метаданные.Документы.ПеремещениеТоваров.Реквизиты Цикл
					Если Реквизит.Тип = Новый ОписаниеТипов("СправочникСсылка.Склады") Тогда
						//Сообщить(Реквизит.Имя);
						СписокСкладов.Добавить(ТекДокумент[Реквизит.Имя])
					КонецЕсли;
				КонецЦикла;
					
				Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
				
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() ТОгда					
					#Если Клиент Тогда
						Сообщить("Запрещено. У вас нет роли ""Редактирование документов товародвижения в закрытом от редактирования периоде.""",СтатусСообщения.ОченьВажное);
					#КонецЕсли
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;	

	Возврат Отказ;
	
КонецФункции
