// Copyright (C) 2012-2016 Engineer Mareev Enterprises

//	Функция РазрешенКЭкспорту возвращает Истина, если перемещение товаров разрешено к экспорту.
Функция РазрешенКЭкспорту(ПеремещениеТоваров) Экспорт
	
	//НМА 10.11.17 >>
	//Если ПеремещениеТоваров.ПометкаУдаления Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//НМА 10.11.17 <<

	//НМА 15.09.17 >>
	//Если Не ПеремещениеТоваров.Проведен Тогда
	//	Возврат Ложь;
	//КонецЕсли;
    //НМА 15.09.17 <<

	//Если ПеремещениеТоваровКакПриход(ПеремещениеТоваров) Тогда
	//	Если ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран ИЛИ ПеремещениеТоваров.ПометкаУдаления Тогда //НМА 10.11.17 >> пометка удаления
	//		Возврат Истина;
	//	КонецЕсли
	//КонецЕсли;

	//Если ПеремещениеТоваровКакОтгрузка(ПеремещениеТоваров) Тогда
	//	Если ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке ИЛИ ПеремещениеТоваров.ПометкаУдаления Тогда //НМА 10.11.17 >> пометка удаления
	//		Возврат Истина;
	//	КонецЕсли
	//КонецЕсли;

	Возврат Истина;
	
КонецФункции

//	Процедура ПометитьКЭкспорту помечает перемещение товаров к экспорту.
Процедура ПометитьКЭкспорту(ПеремещениеТоваров) Экспорт

	Если Не РазрешенКЭкспорту(ПеремещениеТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуПеремещенийТоваров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПеремещениеТоваров.Установить(ПеремещениеТоваров.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.КЭкспорту = Истина;
		НаборЗаписей.Записать();
		Возврат;
	КонецЦикла;
	
  	НоваяЗапись = РегистрыСведений.EmeWmsПометкиКЭкспортуПеремещенийТоваров.СоздатьМенеджерЗаписи();
	НоваяЗапись.ПеремещениеТоваров = ПеремещениеТоваров.Ссылка;
	НоваяЗапись.КЭкспорту = Истина;
    НоваяЗапись.Записать(); 
		 
КонецПроцедуры

Процедура ПометитьКЭкспортуПовторно(ПеремещениеТоваров) Экспорт

	//Если Не РазрешенКЭкспорту(ПеремещениеТоваров) Тогда
	//	Возврат;
	//КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуПеремещенийТоваров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПеремещениеТоваров.Установить(ПеремещениеТоваров.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.КЭкспорту = Истина;
		Запись.ДатаЭкспорта=Неопределено;
		НаборЗаписей.Записать();
		Возврат;
	КонецЦикла;
	
  	НоваяЗапись = РегистрыСведений.EmeWmsПометкиКЭкспортуПеремещенийТоваров.СоздатьМенеджерЗаписи();
	НоваяЗапись.ПеремещениеТоваров = ПеремещениеТоваров.Ссылка;
	НоваяЗапись.КЭкспорту = Истина;
    НоваяЗапись.Записать(); 
		 
КонецПроцедуры


//	Функция ПомеченКЭкспорту возвращает Истина, если перемещение товаров помечено к экспорту.
Функция ПомеченКЭкспорту(ПеремещениеТоваров) Экспорт
	
	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуПеремещенийТоваров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПеремещениеТоваров.Установить(ПеремещениеТоваров.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Возврат Запись.КЭкспорту;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//	Процедура ПодтвердитьЭкспорт подтверждает экспорт перемещения товаров.
Процедура ПодтвердитьЭкспорт(ПеремещениеТоваровСсылка) Экспорт

	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуПеремещенийТоваров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПеремещениеТоваров.Установить(ПеремещениеТоваровСсылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.КЭкспорту = Ложь;
		Запись.ДатаЭкспорта = ТекущаяДата();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	//НМА 31.08.17 >>
	//Если ПеремещениеТоваровКакОтгрузка(ПеремещениеТоваровСсылка) Тогда
	//	Если ПеремещениеТоваровСсылка.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке ИЛИ ПеремещениеТоваровСсылка.ПометкаУдаления Тогда
	//		ПеремещениеТоваров = ПеремещениеТоваровСсылка.ПолучитьОбъект();
	//		//ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собирается;     //НМА 10.11.17
	//		ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ОтправленНаСклад; //НМА 10.11.17
	//		ПеремещениеТоваров.Записать();
	//	КонецЕсли;
	//КонецЕсли;
    //НМА 31.08.17 <<
	
	Если ПеремещениеТоваровКакПриход(ПеремещениеТоваровСсылка) Тогда
		 ПеремещениеТоваров = ПеремещениеТоваровСсылка.ПолучитьОбъект();
		 ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ОтправленНаСклад;
		 ПеремещениеТоваров.Записать();
	КонецЕсли;

КонецПроцедуры

//	Процедура ПометитьКЭкспорту помечает перемещение товаров на событии при записи перемещения товаров.
Процедура ПометитьКЭкспортуПриЗаписиПеремещенияТоваров(Источник, Отказ) Экспорт

	ПометитьКЭкспорту(Источник);
		 
КонецПроцедуры

//	Функция ПеремещениеТоваровКакПриход возвращает Истина, если перемещение товара - это приход на склад EME
Функция ПеремещениеТоваровКакПриход(ПеремещениеТоваров)
	
	Возврат Не ПеремещениеТоваров.СкладОтправитель.EmeWmsУчет И ПеремещениеТоваров.СкладПолучатель.EmeWmsУчет;

КонецФункции

//	Функция ПеремещениеТоваровКакОтгрузка возвращает Истина, если перемещение товара - это отгрузка со склада EME
Функция ПеремещениеТоваровКакОтгрузка(ПеремещениеТоваров)
	
	Возврат ПеремещениеТоваров.СкладОтправитель.EmeWmsУчет И Не ПеремещениеТоваров.СкладПолучатель.EmeWmsУчет;

КонецФункции

Функция ПеремещениеТоваровКакВнутреннее(ПеремещениеТоваров)
	
	Возврат ПеремещениеТоваров.СкладОтправитель.EmeWmsУчет И ПеремещениеТоваров.СкладПолучатель.EmeWmsУчет;

КонецФункции


//	Процедура ЭкспортироватьПеремещенияТоваровКакПриходы экспортирует перемещения товаров, помеченные к экспорту.
Процедура ЭкспортироватьПеремещенияТоваровКакПриходы(ERPData) Экспорт
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	EmeWmsПометкиКЭкспортуПеремещенийТоваров.ПеремещениеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.EmeWmsПометкиКЭкспортуПеремещенийТоваров КАК EmeWmsПометкиКЭкспортуПеремещенийТоваров
		|ГДЕ
		|	EmeWmsПометкиКЭкспортуПеремещенийТоваров.КЭкспорту
		|	И EmeWmsПометкиКЭкспортуПеремещенийТоваров.ПеремещениеТоваров.Дата >= &ДатаНачалаВыгрузки
		|	И ВЫБОР
		|			КОГДА &НеВыгружатьПовторноЗаказы
		|				ТОГДА EmeWmsПометкиКЭкспортуПеремещенийТоваров.ДатаЭкспорта = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки",Константы.ДатаНачалаИспользованияИнтеграцииСEME_WMS.Получить()); 
	Запрос.УстановитьПараметр("НеВыгружатьПовторноЗаказы",Константы.EmeWmsИмпортDespatchНеВыгружатьПовторноЗаказы.Получить());
		
	Выборка = Запрос.Выполнить().Выбрать();
	Счетчик = 0;
	
	Пока Выборка.Следующий() Цикл
					
		//	Защита от плохих данных
		Если Выборка.Ссылка = Null Тогда
			Продолжить;
		КонецЕсли;
			
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней
		НачатьТранзакцию();
		Попытка    		
				
			EmeWmsERPEngine.BeginExport(ERPData, "erp", "wms", "asn");
			Попытка
				
				Если РазрешенКЭкспорту(Выборка.Ссылка) Тогда
					Если ПеремещениеТоваровКакПриход(Выборка.Ссылка) Тогда
						////	Вначале подтверждаем экспорт,
						//ПодтвердитьЭкспорт(Выборка.Ссылка);
						////	а только потом экспортируем, чтобы не потерять флажок КЭКспорту при параллельном изменении данных.
						ЭкспортироватьПеремещениеТоваровКакПриход(ERPData, Выборка.Ссылка);
						ПодтвердитьЭкспорт(Выборка.Ссылка); //НМА 06.12.17
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЕсли;
					
				EmeWmsERPEngine.CommitExport(ERPData);
				
			Исключение
				Сообщить(ОписаниеОшибки());
				EmeWmsERPEngine.RollbackExport(ERPData);
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт сообщения ASN-трансфер: " + Ошибка);
			ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "No: " + Выборка.Ссылка + Символы.ПС + Ошибка;
			EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Критическая ошибка экспорта сообщения ASN-трансфер", ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если Счетчик <> 0 Тогда
		Сообщить("Проэкспортировали сообщения ASN-трансфер (" + Счетчик + "шт)");
	КонецЕсли;
	
КонецПроцедуры

//	Процедура ЭкспортироватьПеремещениеТоваровКакПриход экспортирует одно перемещение товаров, как приход на текущий склад.
Процедура ЭкспортироватьПеремещениеТоваровКакПриход(ERPData, ПеремещениеТовара)
	
	//	Заголовок перемещения
	EmeWmsERPEngine.AppendHeaderLine(ERPData);
	ERPData.header.id             	= ПеремещениеТовара.УникальныйИдентификатор();
	ERPData.header.asn_reg_no	  	= ПеремещениеТовара.Номер + " (трансфер)";
	//ERPData.header.whs_code 	  	= EmeWmsУтилиты.ПолучитьКодСклада(ПеремещениеТовара.СкладОтправитель);
	ERPData.header.whs_to_code 	  	= EmeWmsУтилиты.ПолучитьКодСклада(ПеремещениеТовара.СкладПолучатель);
	Если СокрЛП(ПеремещениеТовара.СкладПолучатель.Код) = "547" Тогда //Склад Развития
		ERPData.header.vendor_to_code 	= "1313131313";
	Иначе
		ERPData.header.vendor_to_code 	= "7715948131";
	КонецЕсли;
	// Катков А. 04.10.2016 >>
	ERPData.header.supplier_id 		= EmeWmsУтилиты.ПолучитьКод(ПеремещениеТовара.Организация);
	// Катков А. 04.10.2016 <<  
	ERPData.header.supplier_code  	= EmeWmsУтилиты.ПолучитьКод(ПеремещениеТовара.Организация) + " (трансфер)";
	ERPData.header.supplier_name  	= ПеремещениеТовара.Организация.Наименование;
	ERPData.header.comment        	= Лев(ПеремещениеТовара.Комментарий, 128);
																				  
	//	Строки перемещения
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	УИДСтроки = 0;
	Для Каждого СтрокаТовара Из ПеремещениеТовара.Товары Цикл
		УИДСтроки = УИДСтроки + 1;
		EmeWmsERPEngine.AppendChildLine(ERPData);
		ERPData.lines.id			= УИДСтроки;
		ERPData.lines.asn_line_no	= СтрокаТовара.НомерСтроки;
		// Катков А. 04.10.2016 >>
		//ERPData.lines.goods_id		= СтрокаТовара.Номенклатура.УникальныйИдентификатор(); 
		ERPData.lines.goods_id		= EmeWmsУтилиты.ПолучитьКод(СтрокаТовара.Номенклатура);
		//ERPData.lines.goods_code	= СокрЛП(СтрокаТовара.Номенклатура.Код);
		ERPData.lines.goods_code	= EmeWmsУтилиты.ПолучитьКодСпрНоменклатура_НеДляСинхронизации(СтрокаТовара.Номенклатура);
		//ERPData.lines.lot_no		= EmeWmsУтилиты.ПолучитьНомерПартии(ПеремещениеТовара.адмЗаказПокупателя);
		ERPData.lines.lot_no		= "-";
		//ERPData.lines.quantity		= СтрокаТовара.Количество * СтрокаТовара.Коэффициент;
		//ERPData.lines.mu_code		= СокрЛП(СтрокаТовара.Номенклатура.БазоваяЕдиницаИзмерения.Код);
		
		// выберем как базовую Единицу измерения с коэффициентом 1
		ЕдИзм_К1 = EmeWmsУтилиты.ПолучитьБазовуюЕдиницуИзмеренияК1(СтрокаТовара.Номенклатура);
		
		Если СтрокаТовара.ЕдиницаИзмерения = ЕдИзм_К1 Тогда // берем кол-во в базовых единицах
			ERPData.lines.quantity		= СтрокаТовара.Количество;
			ЕдиницаИзмерения 			= ЕдИзм_К1;
		Иначе
			Если ЕдИзм_К1 <> Неопределено Тогда
				ERPData.lines.quantity	= СтрокаТовара.Количество * СтрокаТовара.Коэффициент; // берем кол-во в базовых единицах
				ЕдиницаИзмерения 		= ЕдИзм_К1;
			Иначе
				ERPData.lines.quantity	= СтрокаТовара.Количество;  // не нашли базовую единицу берем кол-во в текущих единицах (ОШИБКА!)
				ЕдиницаИзмерения 		= СтрокаТовара.ЕдиницаИзмерения;
				ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт док-та: """ + ПеремещениеТовара + """, не найдена Базовая единица измерения у """ + СтрокаТовара.Номенклатура + """");
			КонецЕсли; 
		КонецЕсли; 
		Если ЗначениеЗаполнено(ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации) Тогда
			ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации;
		Иначе
			ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование;
		КонецЕсли;
		// Катков А. 04.10.2016 <<
	КонецЦикла;		
	
КонецПроцедуры

//	Процедура ЭкспортироватьПеремещенияТоваровКакОтгрузки экспортирует перемещения товаров, помеченные к экспорту.
Процедура ЭкспортироватьПеремещенияТоваровКакОтгрузки(ERPData) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EmeWmsПометкиКЭкспортуПеремещенийТоваров.ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.EmeWmsПометкиКЭкспортуПеремещенийТоваров КАК EmeWmsПометкиКЭкспортуПеремещенийТоваров
	|ГДЕ
	|	EmeWmsПометкиКЭкспортуПеремещенийТоваров.КЭкспорту
	|	И EmeWmsПометкиКЭкспортуПеремещенийТоваров.ПеремещениеТоваров.Дата >= &ДатаНачалаВыгрузки
	////НМА 08.12.17
	|И ВЫБОР
	|			КОГДА &НеВыгружатьПовторноЗаказы
	|				ТОГДА EmeWmsПометкиКЭкспортуПеремещенийТоваров.ДатаЭкспорта = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)  
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки",Константы.ДатаНачалаИспользованияИнтеграцииСEME_WMS.Получить()); //НМА 14.12.17
	Запрос.УстановитьПараметр("НеВыгружатьПовторноЗаказы",Константы.EmeWmsИмпортDespatchНеВыгружатьПовторноЗаказы.Получить()); //НМА 08.12.17
	
	Выборка = Запрос.Выполнить().Выбрать();
	Счетчик = 0;
	
	Пока Выборка.Следующий() Цикл
		
		//	Защита от плохих данных
		Если Выборка.Ссылка = Null Тогда
			Продолжить;
		КонецЕсли;
			
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней
		НачатьТранзакцию();
		Попытка    		
				
			EmeWmsERPEngine.BeginExport(ERPData, "erp", "wms", "orders");
			Попытка
				
				Если РазрешенКЭкспорту(Выборка.Ссылка) Тогда
					Если ПеремещениеТоваровКакОтгрузка(Выборка.Ссылка) Тогда
						////	Вначале подтверждаем экспорт,
						//ПодтвердитьЭкспорт(Выборка.Ссылка);
						////	а только потом экспортируем, чтобы не потерять флажок КЭКспорту при параллельном изменении данных.
						ЭкспортироватьПеремещениеТоваровКакОтгрузку(ERPData, Выборка.Ссылка);
						ПодтвердитьЭкспорт(Выборка.Ссылка); //НМА 06.12.17
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЕсли;
					
				EmeWmsERPEngine.CommitExport(ERPData);
				
			Исключение
				Сообщить(ОписаниеОшибки());
				EmeWmsERPEngine.RollbackExport(ERPData);
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт сообщения ORDERS-трансфер: " + Ошибка);
			ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "No: " + Выборка.Ссылка + Символы.ПС + Ошибка;
			EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Критическая ошибка экспорта сообщения ORDERS-трансфер", ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если Счетчик <> 0 Тогда
		Сообщить("Проэкспортировали сообщения ORDERS-трансфер (" + Счетчик + "шт)");
	КонецЕсли
	
КонецПроцедуры

//	Процедура ЭкспортироватьПеремещениеТоваровКакОтгрузку экспортирует одно перемещение товаров, как приход на текущий склад.
Процедура ЭкспортироватьПеремещениеТоваровКакОтгрузку(ERPData, ПеремещениеТовара)
	
	//	Заголовок перемещения
	EmeWmsERPEngine.AppendHeaderLine(ERPData);
	ERPData.header.id             	= ПеремещениеТовара.УникальныйИдентификатор();
	ERPData.header.order_no	  	  	= ПеремещениеТовара.Номер + " (трансфер)";
	ERPData.header.order_date	  	= ПеремещениеТовара.Дата;
	ERPData.header.despatch_date    = ПеремещениеТовара.ДатаПлан; //НМА 22.11.17
	ERPData.header.whs_code 	  	= EmeWmsУтилиты.ПолучитьКодСклада(ПеремещениеТовара.СкладОтправитель);
	Если СокрЛП(ПеремещениеТовара.СкладОтправитель.Код) = "000000005" Тогда
		ERPData.header.vendor_code 	  	=  "7715948131"; //НМА 22.11.17 ПеремещениеТовара.Организация.ИНН;
	Иначе
		ERPData.header.vendor_code	 = "1313131313";
	КонецЕсли;
	ERPData.header.customer_id  	= EmeWmsУтилиты.ПолучитьКод(ПеремещениеТовара.Организация);
	ERPData.header.customer_code  	= EmeWmsУтилиты.ПолучитьКод(ПеремещениеТовара.Организация) + " (трансфер)";
	ERPData.header.customer_name  	= ПеремещениеТовара.Организация.Наименование;
	// Катков А. 04.10.2016 >>
	//ERPData.header.delivery_id  	= EmeWmsУтилиты.ПолучитьКод(ПеремещениеТовара.Организация); //НМА 20.11.17
	//// Катков А. 04.10.2016 << //НМА 20.11.17 
	//ERPData.header.delivery_code  	= EmeWmsУтилиты.ПолучитьКод(ПеремещениеТовара.Организация) + " (трансфер)"; //НМА 20.11.17
	//ERPData.header.delivery_name  	= ПеремещениеТовара.Организация.Наименование; //НМА 20.11.17
	ERPData.header.comment        	= Лев(ПеремещениеТовара.Комментарий, 128);
	ERPData.header.order_no_internet = "Перемещение";
	ERPData.header.target = Строка(ПеремещениеТовара.СкладПолучатель);
	
	
	//НМА 20.11.17 задача объединения покупателей по группам >>
	// Магазины
	ГруппаКонтрагентов = Справочники.Контрагенты.НайтиПоКоду("000000016");
	Если ГруппаКонтрагентов <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		УИДАдресаДоставки = ГруппаКонтрагентов.УникальныйИдентификатор();
		КодАдресаДоставки = СокрЛП(ГруппаКонтрагентов.Код);
		ИмяАдресаДоставки = ГруппаКонтрагентов.Наименование;
		ERPData.header.delivery_id   = УИДАдресаДоставки;
		ERPData.header.delivery_code = КодАдресаДоставки;
		ERPData.header.delivery_name = ИмяАдресаДоставки;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗначенияСвойствОбъектов.Значение КАК Адрес
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Склад
	|	И ЗначенияСвойствОбъектов.Свойство.Наименование = ""Адрес""
	|	И ТИПЗНАЧЕНИЯ(ЗначенияСвойствОбъектов.Объект) = ТИП(Справочник.Склады)";
	Запрос.УстановитьПараметр("Склад", ПеремещениеТовара.СкладПолучатель);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		АдресАдресаДоставки = ВыборкаДетальныеЗаписи.Адрес;
		ERPData.header.delivery_addr = АдресАдресаДоставки;
	КонецЦикла;
	//НМА 20.11.17 задача объединения покупателей по группам <<
	
	ERPData.header.eorder			= 2;
	
	Если НЕ ПеремещениеТовара.ПометкаУдаления Тогда //НМА 10.11.17 если не ПометкаУдаления
		
		//	Строки перемещения
		EmeWmsERPEngine.SelectChild(ERPData, "lines");
		УИДСтроки = 0;
		Для Каждого СтрокаТовара Из ПеремещениеТовара.Товары Цикл
			УИДСтроки = УИДСтроки + 1;
			//НМА 02.11.17 >>
			Если Константы.EmeWmsНеУчитыватьДопТоварыСоСроками.Получить() Тогда //НМА 08.11.17
				Если СтрокаТовара.Номенклатура.емеЭтоДополнительнаяНоменклатура И ЗначениеЗаполнено(СтрокаТовара.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру) Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли; //НМА 08.11.17
			//НМА 02.11.17 <<
			
			Если СокрЛП(СтрокаТовара.Номенклатура.Артикул) = "Упаковка" Тогда
				Продолжить;
			КонецЕсли;
			
			EmeWmsERPEngine.AppendChildLine(ERPData);
			ERPData.lines.id			= СтрокаТовара.КлючСтроки;//УИДСтроки;
			ERPData.lines.order_line_no	= СтрокаТовара.КлючСтроки;//УИДСтроки;
			// Катков А. 04.10.2016 >>
			//ERPData.lines.goods_id		= СтрокаТовара.Номенклатура.УникальныйИдентификатор(); 
			ERPData.lines.goods_id		= EmeWmsУтилиты.ПолучитьКод(СтрокаТовара.Номенклатура);
			//ERPData.lines.goods_code	= СокрЛП(СтрокаТовара.Номенклатура.Код);
			ERPData.lines.goods_code	= EmeWmsУтилиты.ПолучитьКодСпрНоменклатура_НеДляСинхронизации(СтрокаТовара.Номенклатура);
			//ERPData.lines.lot_no		= EmeWmsУтилиты.ПолучитьНомерПартии(ПеремещениеТовара.адмЗаказПокупателя);
			ERPData.lines.lot_no		= "-";
			
			//НМА 31.08.17 >>
			Если СтрокаТовара.Номенклатура.емеЭтоДополнительнаяНоменклатура И ЗначениеЗаполнено(СтрокаТовара.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру) Тогда //НМА 11.10.17 Срок годности дополнительных
				ERPData.lines.bbd = СтрокаТовара.Номенклатура.емеСрокГодностиДляДополнительных; //НМА 11.10.17 Срок годности дополнительных
			ИначеЕсли ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры) Тогда
				Если ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры.СрокГодности) Тогда
					ERPData.lines.bbd = СтрокаТовара.СерияНоменклатуры.СрокГодности;
				КонецЕсли;
			КонецЕсли;
			//НМА 31.08.17 <<
			
			//НМА 19.10.17 >>
			Если ЗначениеЗаполнено(ERPData.lines.bbd) Тогда
				Если ERPData.lines.bbd >= НачалоДня(ТекущаяДата()) Тогда 
					ERPData.lines.stock_status = "N";
				Иначе
					ERPData.lines.stock_status = "E";
				КонецЕсли;
			Иначе
				ERPData.lines.stock_status = "N";
			КонецЕсли;
			//НМА 19.10.17 <<
			
			// выберем как базовую Единицу измерения с коэффициентом 1
			ЕдИзм_К1 = EmeWmsУтилиты.ПолучитьБазовуюЕдиницуИзмеренияК1(СтрокаТовара.Номенклатура);
			
			Если СтрокаТовара.ЕдиницаИзмерения = ЕдИзм_К1 Тогда // берем кол-во в базовых единицах
				ERPData.lines.quantity		= СтрокаТовара.Количество;
				ЕдиницаИзмерения 			= ЕдИзм_К1;
			Иначе
				Если ЕдИзм_К1 <> Неопределено Тогда
					ERPData.lines.quantity	= СтрокаТовара.Количество * СтрокаТовара.Коэффициент; // берем кол-во в базовых единицах
					ЕдиницаИзмерения 		= ЕдИзм_К1;
				Иначе
					ERPData.lines.quantity	= СтрокаТовара.Количество;  // не нашли базовую единицу берем кол-во в текущих единицах (ОШИБКА!)
					ЕдиницаИзмерения 		= СтрокаТовара.ЕдиницаИзмерения;
					ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт док-та: """ + ПеремещениеТовара + """, не найдена Базовая единица измерения у """ + СтрокаТовара.Номенклатура + """");
				КонецЕсли; 
			КонецЕсли; 
			Если ЗначениеЗаполнено(ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации) Тогда
				ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации;
			Иначе
				ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование;
			КонецЕсли;
			// Катков А. 04.10.2016 <<
		КонецЦикла;
		
		//Проверить наличие удалённых строк
		EmeWmsERPEngine.ПроверитьУдаленныеСтрокиВДокументе(ERPData,ПеремещениеТовара,УИДСтроки);
	ИначеЕсли ПеремещениеТовара.ПометкаУдаления Тогда	
		ERPData.header.total_lines = 0;
	КонецЕсли;  //НМА 10.11.17 если не ПометкаУдаления
	
КонецПроцедуры

Процедура ЭкспортироватьПеремещенияТоваровКакВнутренние(ERPData) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EmeWmsПометкиКЭкспортуПеремещенийТоваров.ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.EmeWmsПометкиКЭкспортуПеремещенийТоваров КАК EmeWmsПометкиКЭкспортуПеремещенийТоваров
	|ГДЕ
	|	EmeWmsПометкиКЭкспортуПеремещенийТоваров.КЭкспорту
	|	И EmeWmsПометкиКЭкспортуПеремещенийТоваров.ПеремещениеТоваров.Дата >= &ДатаНачалаВыгрузки
	|И ВЫБОР
	|			КОГДА &НеВыгружатьПовторноЗаказы
	|				ТОГДА EmeWmsПометкиКЭкспортуПеремещенийТоваров.ДатаЭкспорта = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)  
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки",Константы.ДатаНачалаИспользованияИнтеграцииСEME_WMS.Получить()); 
	Запрос.УстановитьПараметр("НеВыгружатьПовторноЗаказы",Константы.EmeWmsИмпортDespatchНеВыгружатьПовторноЗаказы.Получить()); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Счетчик = 0;
	
	Пока Выборка.Следующий() Цикл
		
		//	Защита от плохих данных
		Если Выборка.Ссылка = Null Тогда
			Продолжить;
		КонецЕсли;
			
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней
		НачатьТранзакцию();
		Попытка    		
				
			EmeWmsERPEngine.BeginExport(ERPData, "erp", "wms", "change");
			Попытка
				
				Если РазрешенКЭкспорту(Выборка.Ссылка) Тогда
					Если ПеремещениеТоваровКакВнутреннее(Выборка.Ссылка) Тогда
						ЭкспортироватьПеремещениеТоваровКакВнутреннее(ERPData, Выборка.Ссылка);
						ПодтвердитьЭкспорт(Выборка.Ссылка); 
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЕсли;
					
				EmeWmsERPEngine.CommitExport(ERPData);
				
			Исключение
				Сообщить(ОписаниеОшибки());
				EmeWmsERPEngine.RollbackExport(ERPData);
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Ошибка = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт сообщения CHANGE: " + Ошибка);
			ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "No: " + Выборка.Ссылка + Символы.ПС + Ошибка;
			//EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Критическая ошибка экспорта сообщения ORDERS-трансфер", ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если Счетчик <> 0 Тогда
		Сообщить("Проэкспортировали сообщения CHANGE (" + Счетчик + "шт)");
	КонецЕсли
	
КонецПроцедуры

Процедура ЭкспортироватьПеремещениеТоваровКакВнутреннее(ERPData, ПеремещениеТовара)
	
	//	Заголовок перемещения
	EmeWmsERPEngine.AppendHeaderLine(ERPData);
	ERPData.header.id             	= ПеремещениеТовара.УникальныйИдентификатор();
	ERPData.header.change_reg_no  	= ПеремещениеТовара.Номер;
	ERPData.header.whs_code 	  	= EmeWmsУтилиты.ПолучитьКодСклада(ПеремещениеТовара.СкладОтправитель);
	Если СокрЛП(ПеремещениеТовара.СкладОтправитель.Код) = "000000005" Тогда
		ERPData.header.vendor_code 	  	=  "7715948131";
		ERPData.header.vendor_to_code 	=  "1313131313";
	Иначе
		ERPData.header.vendor_code	  = "1313131313";
		ERPData.header.vendor_to_code = "7715948131";
	КонецЕсли;
	ERPData.header.is_vendor_change  	= 1;
	ERPData.header.comment        	= Лев(ПеремещениеТовара.Комментарий, 128);
	ERPData.header.Reason_code = "Z02";
					
	Если НЕ ПеремещениеТовара.ПометкаУдаления Тогда 		
		EmeWmsERPEngine.SelectChild(ERPData, "lines");
		УИДСтроки = 0;
		Для Каждого СтрокаТовара Из ПеремещениеТовара.Товары Цикл
			УИДСтроки = УИДСтроки +1;			
			Если Константы.EmeWmsНеУчитыватьДопТоварыСоСроками.Получить() Тогда 
				Если СтрокаТовара.Номенклатура.емеЭтоДополнительнаяНоменклатура И ЗначениеЗаполнено(СтрокаТовара.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру) Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
						
			Если СокрЛП(СтрокаТовара.Номенклатура.Артикул) = "Упаковка" Тогда
				Продолжить;
			КонецЕсли;
			
			EmeWmsERPEngine.AppendChildLine(ERPData);
			ERPData.lines.id			= СтрокаТовара.КлючСтроки;
			ERPData.lines.change_line_no = СтрокаТовара.КлючСтроки;
			ERPData.lines.goods_id		= EmeWmsУтилиты.ПолучитьКод(СтрокаТовара.Номенклатура);
			ERPData.lines.goods_code	= EmeWmsУтилиты.ПолучитьКодСпрНоменклатура_НеДляСинхронизации(СтрокаТовара.Номенклатура);
			ERPData.lines.old_lot_no		= "-";
			ERPData.lines.old_lot_id		= "-";
			ERPData.lines.new_lot_no		= "-";
			ERPData.lines.new_lot_id		= "-";
			
			Если СтрокаТовара.Номенклатура.емеЭтоДополнительнаяНоменклатура И ЗначениеЗаполнено(СтрокаТовара.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру) Тогда //НМА 11.10.17 Срок годности дополнительных
				ERPData.lines.old_bbd = СтрокаТовара.Номенклатура.емеСрокГодностиДляДополнительных;
				ERPData.lines.new_bbd = СтрокаТовара.Номенклатура.емеСрокГодностиДляДополнительных;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры) Тогда
				Если ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры.СрокГодности) Тогда
					ERPData.lines.old_bbd = СтрокаТовара.СерияНоменклатуры.СрокГодности;
					ERPData.lines.new_bbd = СтрокаТовара.СерияНоменклатуры.СрокГодности;
				КонецЕсли;
			КонецЕсли;
						
			
			Если ЗначениеЗаполнено(ERPData.lines.bbd) Тогда
				Если ERPData.lines.bbd >= НачалоДня(ТекущаяДата()) Тогда 
					ERPData.lines.old_stock_status = "N";
					ERPData.lines.new_stock_status = "N";
				Иначе
					ERPData.lines.old_stock_status = "E";
					ERPData.lines.new_stock_status = "E";
				КонецЕсли;
			Иначе
				ERPData.lines.old_stock_status = "N";
				ERPData.lines.new_stock_status = "N";
			КонецЕсли;
						
			ЕдИзм_К1 = EmeWmsУтилиты.ПолучитьБазовуюЕдиницуИзмеренияК1(СтрокаТовара.Номенклатура);
			
			Если СтрокаТовара.ЕдиницаИзмерения = ЕдИзм_К1 Тогда // берем кол-во в базовых единицах
				ERPData.lines.quantity		= СтрокаТовара.Количество;
				ЕдиницаИзмерения 			= ЕдИзм_К1;
			Иначе
				Если ЕдИзм_К1 <> Неопределено Тогда
					ERPData.lines.quantity	= СтрокаТовара.Количество * СтрокаТовара.Коэффициент; // берем кол-во в базовых единицах
					ЕдиницаИзмерения 		= ЕдИзм_К1;
				Иначе
					ERPData.lines.quantity	= СтрокаТовара.Количество;  // не нашли базовую единицу берем кол-во в текущих единицах (ОШИБКА!)
					ЕдиницаИзмерения 		= СтрокаТовара.ЕдиницаИзмерения;
					ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт док-та: """ + ПеремещениеТовара + """, не найдена Базовая единица измерения у """ + СтрокаТовара.Номенклатура + """");
				КонецЕсли; 
			КонецЕсли; 
			Если ЗначениеЗаполнено(ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации) Тогда
				ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации;
			Иначе
				ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ПеремещениеТовара.ПометкаУдаления Тогда	
		ERPData.header.total_lines = 0;
	КонецЕсли;  
	
КонецПроцедуры
