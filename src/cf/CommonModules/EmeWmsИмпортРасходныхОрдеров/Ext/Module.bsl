// Copyright (C) 2012-2016 Engineer Mareev Enterprises

//	Процедура ИмпортироватьРасходныеОрдера импортирует расходные ордера
Процедура ИмпортироватьРасходныеОрдера(ERPData) Экспорт
	 
	ЗаголовкиСообщений = Новый ТаблицаЗначений();
	EmeWmsERPEngine.GetHeaders(ERPData, "wms", "erp", "despatch", "NEW,WRN", ЗаголовкиСообщений);
	Счетчик = 0;
	Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней	
		EmeWmsERPEngine.BeginImport(ERPData, "wms", "erp", "despatch", ЗаголовокСообщения.id);
		Попытка
			НовоеСообщение = (ЗаголовокСообщения.state = "NEW");
			Трассировка = "";
			ТемаСообщения = "";
			НачатьТранзакцию();
			Попытка
				Пока EmeWmsERPEngine.NextHeaderLine(ERPData) Цикл
					Если Не EmeWmsУтилиты.ЭтоТрансфер(ERPData.header.order_no) Тогда
						ИмпортироватьРасходныйОрдер(ERPData, Трассировка, ТемаСообщения);
						Счетчик = Счетчик + 1;
						EmeWmsУтилиты.ЗафиксируемПоступлениеПервогоdespatch(ERPData.header.order_no);
					КонецЕсли;
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
			EmeWmsERPEngine.CommitImport(ERPData);
			Если НовоеСообщение И ТемаСообщения <> "" Тогда
				ТекстСообщения 	= "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС 
					+ "ID: " + ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.order_no + Символы.ПС + Трассировка;
				EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
			КонецЕсли
		Исключение
			EmeWmsERPEngine.RollbackImport(ERPData);
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Импорт сообщений DESPATCH: " + Ошибка);
			ТемаСообщения 	= "Критическая ошибка импорта сообщения DESPATCH";
			ТекстСообщения 	= "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС 
				+ "ID: " + ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.order_no + Символы.ПС + Ошибка;
			EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если Счетчик <> 0 Тогда
		Сообщить("Проимпортировали сообщения DESPATCH (" + Счетчик + "шт)");
	КонецЕсли

КонецПроцедуры

Процедура ИмпортироватьРасходныйОрдер(ERPData, Трассировка, ТемаСообщения)
	
	//*** Делаем проверки ***
	//	Найдем заказ покупателя
	ЗаказПокупателяСсылка = EmeWmsУтилиты.ПолучитьЗаказПокупателя(ERPData.header.id);
	Если ЗаказПокупателяСсылка.Пустая() или ЗаказПокупателяСсылка.ПолучитьОбъект()=Неопределено Тогда //НМА 07.12.17
		EmeWmsERPEngine.ErrorHeader(ERPData, "ORDBAD");
		Возврат;
	КонецЕсли;
	
	Если ЗаказПокупателяСсылка.ПолучитьОбъект() <> Неопределено Тогда //НМА 07.11.17
		
		//НМА 07.11.17 >>
		//	Соберем товары и количества в карту соответствий (ключ - ссылка на товар, значение - количество)
		//КоличестваТоваровПоПеремещению = Новый Соответствие();
		//EmeWmsERPEngine.SelectChild(ERPData, "lines");
		//EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваровПоПеремещению, "shipped_qty", Истина);
		//
		//КоличестваТоваровПоЗаказу = Новый Соответствие();
		//EmeWmsERPEngine.SelectChild(ERPData, "lines");
		//EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваровПоЗаказу, "shipped_qty", Ложь);
		//
		//Если КоличестваТоваровПоПеремещению.Количество() <> 0 Тогда
		//	Трассировка = Трассировка + Символы.ПС + "Подборка по EME:" + Символы.ПС;
		//	EmeWmsУтилиты.ТрассировкаКоличествТоваров(Трассировка, КоличестваТоваровПоПеремещению);
		//КонецЕсли;
		//	
		//Трассировка = Трассировка + Символы.ПС + "Отгрузка по EME:" + Символы.ПС;
		//EmeWmsУтилиты.ТрассировкаКоличествТоваров(Трассировка, КоличестваТоваровПоЗаказу);
		
		ЗаказПокупателя = ЗаказПокупателяСсылка.ПолучитьОбъект();
		
		КоличестваТоваровПоЗаказу = Новый Соответствие();
		EmeWmsERPEngine.SelectChild(ERPData, "lines");
		Если ERPData.header.order_status = "Подобран" Тогда
			EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваровПоЗаказу, "shipped_qty", Ложь,ЗаказПокупателя);
		Иначе
			EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваровПоЗаказу, "picked_qty", Ложь,ЗаказПокупателя);
		КонецЕсли;
		//НМА 07.11.17 <<
		
		Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
			Возврат;
		КонецЕсли;
		
		//*** Проверки сделали, пишем в базу данных 1C ***
		//Если ЗаказПокупателяСсылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собирается И ERPData.header.order_status <> "Закрыт" Тогда
		//	
		//	//	Сверим количества в заказе и уведомлении
		//	EmeWmsУтилиты.ВычестьКоличестваТоваровПоДокументу(КоличестваТоваровПоПеремещению, ЗаказПокупателяСсылка.Товары);
		//	Если КоличестваТоваровПоПеремещению.Количество() <> 0 Тогда
		//		
		//		Трассировка = Трассировка + Символы.ПС + "Остался нераспределенный товар:" + Символы.ПС;
		//		EmeWmsУтилиты.ТрассировкаКоличествТоваров(Трассировка, КоличестваТоваровПоПеремещению);
		//		ТемаСообщения = "Избыток/недостача товара в " + ERPData.header.order_no;
		//		//EmeWmsERPEngine.WarningHeader(ERPData, "QTYBAD");
		//		//EmeWmsERPEngine.ErrorHeader(ERPData, "QTYBAD");
		//		
		//		// запишем несоответствия
		//		EmeWmsУтилиты.ЗаписатьНесоответствияОтгрузкиЗаказуПокупателя(ЗаказПокупателяСсылка, Трассировка);
		//		Возврат;
		//		
		//	КонецЕсли;
		//			
		//	ЗаказПокупателя = ЗаказПокупателяСсылка.ПолучитьОбъект();
		//	ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собран;
		//	// проставим во все строки "КоличествоСобрано" равные "Количеству", мы обрабатываем только такой случай
		//	Для каждого СтрокаТЧ Из ЗаказПокупателя.Товары Цикл
		//		СтрокаТЧ.КоличествоСобрано = СтрокаТЧ.Количество;
		//	КонецЦикла; 
		//	ЗаказПокупателя.Записать();
		//	
		//	// очистим несоответствия
		//	EmeWmsУтилиты.ОчиститьНесоответствияОтгрузкиЗаказуПокупателя(ЗаказПокупателяСсылка);
		
		//ИначеЕсли ЗаказПокупателяСсылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собран И ERPData.header.order_status = "Закрыт" Тогда
		
		//НМА 17.07.17 >>
		//Если (ERPData.header.order_status = "Подобран" и ЗаказПокупателяСсылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собирается) ИЛИ
		//	(ERPData.header.order_status = "Закрыт" и ЗаказПокупателяСсылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собирается) Тогда 
		Если (ERPData.header.order_status = "Подобран") ИЛИ
			(ERPData.header.order_status = "Закрыт") Тогда 
			
						
			Если Константы.EmeWmsИмпортDespatchПроставлятьСобрано.Получить() Тогда //НМА 06.12.17 константа EmeWmsИмпортDespatchПроставлятьСобрано
				//НМА 06.12.17 >>
				Если Константы.EmeWmsИмпортDespatchОбрабатыватьСРасхождениями.Получить() = Ложь Тогда
					Если ERPData.header.is_exist_no_loaded = 1 Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				//НМА 06.12.17 <<
					
				//ЗаказПокупателя = ЗаказПокупателяСсылка.ПолучитьОбъект();
												
				Для каждого СтрокаТЧ Из ЗаказПокупателя.Товары Цикл
					Если СтрокаТЧ.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру = Справочники.Номенклатура.ПустаяСсылка() Тогда
						WMSКоличествоСобрано = КоличестваТоваровПоЗаказу.Получить(СтрокаТЧ.Номенклатура);
					Иначе
						WMSКоличествоСобрано = КоличестваТоваровПоЗаказу.Получить(СтрокаТЧ.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру);
					КонецЕсли;
					Если WMSКоличествоСобрано=Неопределено Тогда
						WMSКоличествоСобрано=0;
					КонецЕсли;
					СтрокаТЧ.КоличествоСобрано = (WMSКоличествоСобрано/?(СтрокаТЧ.Коэффициент=0,1,СтрокаТЧ.Коэффициент));
					Если СтрокаТЧ.КоличествоСобрано>СтрокаТЧ.Количество Тогда
						//Возврат;
						СтрокаТЧ.КоличествоСобрано=0;
					КонецЕсли;
					
					Если СтрокаТЧ.КоличествоСобрано>0 Тогда
						EMEWMSУтилиты.РегистрируемСборку(СтрокаТЧ,ЗаказПокупателяСсылка);
					КонецЕсли;
					
					//СтрокаТЧ.Количество = СтрокаТЧ.КоличествоСобрано;
				КонецЦикла; 
				
				Если EmeWmsУтилиты.ЕстьРасхожденияВЗаказе(ЗаказПокупателя.Товары) Тогда
					Если ERPData.header.order_status = "Закрыт" Тогда
						ЗаказПокупателя.Местоположение = Неопределено; 
						Если НЕ ЗаказПокупателя.ПометкаУдаления Тогда
							Попытка
								ЗаказПокупателя.Записать(РежимЗаписиДокумента.ОтменаПроведения);
								ЗаказПокупателя.ПометкаУдаления = Истина;
							Исключение
							КонецПопытки;
						КонецЕсли;
					Иначе
						ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Недостача; 
						ЗаказПокупателя.Местоположение = Перечисления.Местоположения.Хлебниково;
					КонецЕсли;
				ИначеЕсли ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Отказ Тогда
					Возврат;
				ИначеЕсли (ERPData.header.order_status = "Подобран") И  (ERPData.header.is_packed=0) Тогда
					ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собирается;
					ЗаказПокупателя.Местоположение = Перечисления.Местоположения.Хлебниково;
				ИначеЕсли (ERPData.header.order_status = "Подобран") И  (ERPData.header.is_packed=1) Тогда
					ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собран; 
					ЗаказПокупателя.Местоположение = Перечисления.Местоположения.Хлебниково;
					Если НЕ ЗначениеЗаполнено(ЗаказПокупателя.Номер4Склад) Тогда
						ЗаказПокупателя.Номер4Склад = СформироватьУстановитьСкладскойНомер (ЗаказПокупателяСсылка);
						EmeWmsЭкспортЗаказовПокупателей.ПометитьКЭкспортуПовторно(ЗаказПокупателя);
					КонецЕсли;
				ИначеЕсли ERPData.header.order_status = "Закрыт" Тогда
					ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собран; 
					ЗаказПокупателя.Местоположение = Перечисления.Местоположения.Транзит;
				КонецЕсли;
				
				ЗаказПокупателя.КомментарийВнутр = ERPData.header.comment;
				
				ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
			
			
				//НМА 07.11.17 <<
				
				ЗафиксироватьСтатусСборки(ЗаказПокупателя.Ссылка,ЗаказПокупателя.СтатусыСборкиЗаказа);
				
				Если ERPData.header.is_packed=1 Тогда
					EmeWmsУтилиты.ЗаписатьДанныеПоКоробкам(ERPData.header.sscc_array,ЗаказПокупателя);
				КонецЕсли;
				
				//НМА 04.12.17 >>
				//////НМА 08.11.17 Отменить строки заказа >>
				////Если ЗаказПокупателяСсылка.Проведен Тогда //НМА 10.11.17
				////	Запрос = Новый Запрос;
				////	Запрос.Текст = 
				////	"ВЫБРАТЬ
				////	|	КорректировкаЗаказаПокупателя.Ссылка
				////	|ИЗ
				////	|	Документ.КорректировкаЗаказаПокупателя КАК КорректировкаЗаказаПокупателя
				////	|ГДЕ
				////	|	КорректировкаЗаказаПокупателя.Проведен = ИСТИНА
				////	|	И КорректировкаЗаказаПокупателя.ЗаказПокупателя = &ЗаказПокупателя";
				////	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателяСсылка);
				////	РезультатЗапроса = Запрос.Выполнить();
				////	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				////	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
				////		ВыборкаДетальныеЗаписи.Следующий();
				////		ДокКорректировкаЗаказа = ВыборкаДетальныеЗаписи.ЗаказПокупателяСсылка.ПолучитьОбъект();
				////		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				////		//КонецЦикла;
				////	Иначе
				////		ДокКорректировкаЗаказа = Документы.КорректировкаЗаказаПокупателя.СоздатьДокумент();
				////		ДокКорректировкаЗаказа.Заполнить(ЗаказПокупателяСсылка);
				////	КонецЕсли;
				////	ОтборТолькоПоОтмененнымСтрокам = Новый Структура();
				////	ОтборТолькоПоОтмененнымСтрокам.Вставить("ОтменитьСтроку",Истина);
				////	ТЗОтмененныхСтрок = ЗаказПокупателяСсылка.Товары.Выгрузить(ОтборТолькоПоОтмененнымСтрокам);
				////	Если ТЗОтмененныхСтрок.Количество()>0 Тогда
				////		ДокКорректировкаЗаказа.Дата = ТекущаяДата();
				////		ДокКорректировкаЗаказа.Товары.Загрузить(ТЗОтмененныхСтрок);
				////		Для каждого стрТовар из ДокКорректировкаЗаказа.Товары Цикл
				////			стрТовар.Количество = -1;
				////		КонецЦикла;
				////		ДокКорректировкаЗаказа.Записать(РежимЗаписиДокумента.Проведение);
				////	КонецЕсли;
				////КонецЕсли; //НМА 10.11.17
				////НМА 08.11.17 Отменить строки заказа <<
				
				EmeWmsУтилиты.ЗаписатьЗакрытиеЗаказаВРегистреНесоответствий(ЗаказПокупателяСсылка);
				
				////НМА 27.10.17 >>
				//Если ЗначениеЗаполнено(ЗаказПокупателяСсылка.СкладКонтрагента) и ЗаказПокупателяСсылка.Проведен Тогда //НМА 10.11.17
				//	//Создадим реализацию товаров
				//	ДокРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				//	ДокРеализация.Заполнить(ЗаказПокупателяСсылка);
				//	ДокРеализация.Комментарий = ДокРеализация.Комментарий+" Создан на основании Заказа покупателя №"+ЗаказПокупателяСсылка.Номер+" от "+ЗаказПокупателяСсылка.Дата+" магазина "+ЗаказПокупателяСсылка.СкладКонтрагента;
				//	ДокРеализация.Записать(РежимЗаписиДокумента.Проведение);
				//	//Создадим заказ поставщику
				//	ДокЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
				//	ДокЗаказПоставщику.Заполнить(ЗаказПокупателяСсылка);
				//	ОрганизацияЗаказаПоставщику = Справочники.Организации.НайтиПоРеквизиту("ИНН",ЗаказПокупателяСсылка.Контрагент.ИНН);
				//	Если ОрганизацияЗаказаПоставщику = Справочники.Организации.ПустаяСсылка() Тогда
				//		Справочники.Организации.НайтиПоНаименованию(ЗаказПокупателяСсылка.Контрагент.Наименование,Истина);
				//	КонецЕсли;	
				//	ДокЗаказПоставщику.Организация = ОрганизацияЗаказаПоставщику;
				//	ДокЗаказПоставщику.Склад = ЗаказПокупателяСсылка.СкладКонтрагента;  
				//	КонтрагентЗаказаПоставщику = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ЗаказПокупателяСсылка.Организация.ИНН);
				//	Если КонтрагентЗаказаПоставщику = Справочники.Контрагенты.ПустаяСсылка() Тогда
				//		Справочники.Контрагенты.НайтиПоНаименованию(ЗаказПокупателяСсылка.Организация.Наименование,Истина);
				//	КонецЕсли;
				//	ДокЗаказПоставщику.Контрагент = КонтрагентЗаказаПоставщику;
				//	Запрос = Новый Запрос;
				//	Запрос.Текст = 
				//	"ВЫБРАТЬ
				//	|	ДоговорыКонтрагентов.Владелец,
				//	|	ДоговорыКонтрагентов.Организация,
				//	|	ДоговорыКонтрагентов.ВидДоговора,
				//	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
				//	|	ДоговорыКонтрагентов.Ссылка
				//	|ИЗ
				//	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				//	|ГДЕ
				//	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
				//	|	И ДоговорыКонтрагентов.Владелец = &Владелец
				//	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
				//	|	И ДоговорыКонтрагентов.Организация = &Организация
				//	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
				//	|";
				//	Запрос.УстановитьПараметр("Владелец",ДокЗаказПоставщику.Контрагент);
				//	Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				//	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",ДокЗаказПоставщику.ВалютаДокумента);
				//	Запрос.УстановитьПараметр("Организация",ДокЗаказПоставщику.Организация);
				//	РезультатЗапроса = Запрос.Выполнить();
				//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				//		ДокЗаказПоставщику.ДоговорКонтрагента = ВыборкаДетальныеЗаписи.Ссылка;
				//	КонецЦикла;
				//	ДокЗаказПоставщику.Комментарий = ДокЗаказПоставщику.Комментарий+" Создан на основании Заказа покупателя №"+ЗаказПокупателяСсылка.Номер+" от "+ЗаказПокупателяСсылка.Дата+" магазина "+ЗаказПокупателяСсылка.СкладКонтрагента;
				//	ДокЗаказПоставщику.Записать(РежимЗаписиДокумента.Проведение);
				//КонецЕсли;
				////НМА 27.10.17 <<
				//НМА 04.12.17 <<
				
				EmeWmsERPEngine.Success(ERPData); //НМА 07.11.17
				
			КонецЕсли; //НМА 06.12.17 константа EmeWmsИмпортDespatchПроставлятьСобрано
			
			//НМА 07.09.17 >> Перемещается в пикинг/OA = Собирается
			//ИначеЕсли ЗаказПокупателяСсылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.ОтправленНаСклад И (ERPData.header.order_status = "Перемещается в пикинг/OA" ИЛИ ERPData.header.order_status = "В подборке" ИЛИ ERPData.header.order_status = "Подобран") Тогда
			//ИначеЕсли ERPData.header.order_status = "Перемещается в пикинг/OA" ИЛИ ERPData.header.order_status = "В подборке" ИЛИ ERPData.header.order_status = "Подобран" Тогда  //НМА 04.12.17
		//ИначеЕсли ERPData.header.order_status = "Перемещается в пикинг/OA" ИЛИ ERPData.header.order_status = "Просчитан" ИЛИ ERPData.header.order_status = "В пачке" Тогда //НМА 04.12.17
		//	ЗаказПокупателя = ЗаказПокупателяСсылка.ПолучитьОбъект();
		//	//НМА 07.11.17 >>
		//	
		//	//НМА 06.12.17 >> константа EmeWmsИмпортDespatchОбрабатыватьСРасхождениями
		//	Если Константы.EmeWmsИмпортDespatchОбрабатыватьСРасхождениями.Получить() = Ложь Тогда
		//		Если ERPData.header.is_exist_no_loaded = 1 Тогда
		//			Возврат;
		//		КонецЕсли;
		//	КонецЕсли;
		//	//НМА 06.12.17 << константа EmeWmsИмпортDespatchОбрабатыватьСРасхождениями

		//	//Если ERPData.header.is_exist_no_loaded = 1 Тогда //Требуется корректировка заказа в 1С  //НМА 06.12.17
		//		//НМА 04.12.17 >>
		//		//ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.КорректировкаЗаказа;
		//		//Для каждого СтрокаТЧ Из ЗаказПокупателя.Товары Цикл
		//		//	СтрокаТЧ.КоличествоСобрано = КоличестваТоваровПоЗаказу.Получить(СтрокаТЧ.Номенклатура);
		//		//КонецЦикла;
		//		//ЗаказПокупателя.Записать(); //НМА 23.11.17
		//		//////НМА 08.11.17 Отменить строки заказа >>
		//		////Если ЗаказПокупателяСсылка.Проведен Тогда //НМА 10.11.17
		//		////	Запрос = Новый Запрос;
		//		////	Запрос.Текст = 
		//		////	"ВЫБРАТЬ
		//		////	|	КорректировкаЗаказаПокупателя.Ссылка
		//		////	|ИЗ
		//		////	|	Документ.КорректировкаЗаказаПокупателя КАК КорректировкаЗаказаПокупателя
		//		////	|ГДЕ
		//		////	|	КорректировкаЗаказаПокупателя.Проведен = ИСТИНА
		//		////	|	И КорректировкаЗаказаПокупателя.ЗаказПокупателя = &ЗаказПокупателя";
		//		////	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателяСсылка);
		//		////	РезультатЗапроса = Запрос.Выполнить();
		//		////	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		//		////	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		//		////		ВыборкаДетальныеЗаписи.Следующий();
		//		////		ДокКорректировкаЗаказа = ВыборкаДетальныеЗаписи.ЗаказПокупателяСсылка.ПолучитьОбъект();
		//		////		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//		////		//КонецЦикла;
		//		////	Иначе
		//		////		ДокКорректировкаЗаказа = Документы.КорректировкаЗаказаПокупателя.СоздатьДокумент();
		//		////		ДокКорректировкаЗаказа.Заполнить(ЗаказПокупателяСсылка);
		//		////	КонецЕсли;
		//		////	ОтборТолькоПоОтмененнымСтрокам = Новый Структура();
		//		////	ОтборТолькоПоОтмененнымСтрокам.Вставить("ОтменитьСтроку",Истина);
		//		////	ТЗОтмененныхСтрок = ЗаказПокупателяСсылка.Товары.Выгрузить(ОтборТолькоПоОтмененнымСтрокам);
		//		////	Если ТЗОтмененныхСтрок.Количество()>0 Тогда
		//		////		ДокКорректировкаЗаказа.Дата = ТекущаяДата();
		//		////		ДокКорректировкаЗаказа.Товары.Загрузить(ТЗОтмененныхСтрок);
		//		////		Для каждого стрТовар из ДокКорректировкаЗаказа.Товары Цикл
		//		////			стрТовар.Количество = -1;
		//		////		КонецЦикла;
		//		////		ДокКорректировкаЗаказа.Записать(РежимЗаписиДокумента.Проведение);
		//		////	КонецЕсли;
		//		////КонецЕсли; //НМА 10.11.17
		//		//////НМА 08.11.17 Отменить строки заказа <<
		//		//НМА 04.12.17 <<
		//		//ИначеЕсли ЗаказПокупателяСсылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.ОтправленНаСклад Тогда //НМА 04.12.17
		//	//ИначеЕсли ЗаказПокупателяСсылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке Тогда //НМА 04.12.17
		//	Если ЗаказПокупателяСсылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке И НЕ ЗаказПокупателяСсылка.Распечатан Тогда //НМА 06.12.17
		//		ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Собирается;   //НМА 07.09.17 << Перемещается в пикинг/OA = Собирается
		//		ЗаказПокупателя.Распечатан = Истина; //НМА 04.12.17
		//		ЗаказПокупателя.Записать(); //НМА 23.11.17
		//		//НМА 06.12.17 >> РегистрыСведений.ДействияСДокументами 
		//		НоваяЗаписьДействияСДокументами = РегистрыСведений.ДействияСДокументами.СоздатьМенеджерЗаписи();
		//		НоваяЗаписьДействияСДокументами.Документ     = ЗаказПокупателяСсылка;     
		//		НоваяЗаписьДействияСДокументами.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("EME",Истина);
		//		НоваяЗаписьДействияСДокументами.Действие     = Перечисления.ВидыДействийСДоками.РаспечатанБланкПодбора;
		//		НоваяЗаписьДействияСДокументами.Дата         = ERPData.header.created_at;
		//		НоваяЗаписьДействияСДокументами.Записать();
		//		//НМА 06.12.17 << РегистрыСведений.ДействияСДокументами
		//	КонецЕсли;
		//	//НМА 07.11.17 <<
		//	//НМА 07.09.17 << Перемещается в пикинг/OA = Собирается
		//	
		//Иначе
		//	
		//	EmeWmsERPEngine.ErrorHeader(ERPData, "STATUS");
		//	
		//	ТекстПоСтатусу = "";
		//	Если ERPData.header.order_status <> "Закрыт" Тогда
		//		
		//		ТекстПоСтатусу = "Статус заказа в базе УТ: """ + ЗаказПокупателяСсылка.СтатусыСборкиЗаказа + """, а должен быть ""Собирается""";
		//		
		//	ИначеЕсли ERPData.header.order_status = "Закрыт" Тогда
		//		
		//		ТекстПоСтатусу = "Статус заказа в базе УТ: """ + ЗаказПокупателяСсылка.СтатусыСборкиЗаказа + """, а должен быть ""Собран""";
		//		
		//	Иначе
		//		
		//		ТекстПоСтатусу = "Статус заказа в базе УТ: """ + ЗаказПокупателяСсылка.СтатусыСборкиЗаказа + """, а в WMS """ + ERPData.header.order_status + """";
		//		
		//	КонецЕсли; 
		//	
		//	ТемаСообщенияОСтатусе 	= "Критическая ошибка импорта сообщения DESPATCH";
		//	ТекстСообщенияОСтатусе 	= "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС 
		//	+ "ID: " + ERPData.header.id + Символы.ПС + "No: " + ERPData.header.order_no + Символы.ПС
		//	+ ТекстПоСтатусу;
		//	EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщенияОСтатусе, ТекстСообщенияОСтатусе);
		//	Возврат;
		//	
		//	EmeWmsERPEngine.Success(ERPData); //НМА 17.07.17
			
	ИначеЕсли ERPData.header.order_status = "Отклонен" Тогда
		//ЗаказПокупателя = ЗаказПокупателяСсылка.ПолучитьОбъект();
		
		
		ЗаказПокупателя.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.Недостача; 
		ЗаказПокупателя.Местоположение = Перечисления.Местоположения.Хлебниково;
		
		ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьСтатусСборки(ЗаказПокупателя.Ссылка,ЗаказПокупателя.СтатусыСборкиЗаказа);
		
		EmeWmsУтилиты.ЗаписатьЗакрытиеЗаказаВРегистреНесоответствий(ЗаказПокупателяСсылка);
		EmeWmsERPEngine.Success(ERPData); 
	КонецЕсли;
		
		//EmeWmsERPEngine.Success(ERPData); //НМА 17.07.17
		
	КонецЕсли; //НМА 07.11.17
	
КонецПроцедуры

Процедура ИмпортироватьВозвратыЗаказов (ERPData) Экспорт

	ЗаголовкиСообщений = Новый ТаблицаЗначений();
	EmeWmsERPEngine.GetHeaders(ERPData, "wms", "erp", "receipt", "NEW,WRN", ЗаголовкиСообщений);
	Счетчик = 0;
	Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
		EmeWmsERPEngine.BeginImport(ERPData, "wms", "erp", "receipt", ЗаголовокСообщения.id);
		Попытка
			НовоеСообщение = (ЗаголовокСообщения.state = "NEW");
			Трассировка = "";
			ТемаСообщения = "";
			НачатьТранзакцию();
			Попытка
				Пока EmeWmsERPEngine.NextHeaderLine(ERPData) Цикл
					Если EmeWmsУтилиты.ЭтоВозвратЗаказа(ERPData.header.asn_reg_no) Тогда
						ИмпортироватьВозвратЗаказа(ERPData, Трассировка, ТемаСообщения);
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЦикла;
			
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
			EmeWmsERPEngine.CommitImport(ERPData);
			Если НовоеСообщение И ТемаСообщения <> "" Тогда
				ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " 
					+ ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Трассировка;
				EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
			КонецЕсли
		Исключение
			EmeWmsERPEngine.RollbackImport(ERPData);
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Импорт сообщений RECEIPT-возвратЗаказов: " + Ошибка);
			ТемаСообщения = "Критическая ошибка импорта сообщения RECEIPT-возвратЗаказов";
			ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " 
				+ ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Ошибка;
			EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

	Если Счетчик <> 0 Тогда
		Сообщить("Проимпортировали сообщения RECEIPT-возвратЗаказов (" + Счетчик + "шт)");
	КонецЕсли

КонецПроцедуры

Процедура ИмпортироватьВозвратЗаказа(ERPData, Трассировка, ТемаСообщения)
	
	Если Не ЗначениеЗаполнено(ERPData.header.asn_id) Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "RETNUL");
		Возврат;
	КонецЕсли;
	
	ЗаказПокупателяСсылка = EmeWmsУтилиты.ПолучитьЗаказПокупателя(ERPData.header.asn_id);
	Если ЗаказПокупателяСсылка.Пустая() или ЗаказПокупателяСсылка.ПолучитьОбъект()=Неопределено Тогда 
		EmeWmsERPEngine.ErrorHeader(ERPData, "RETBAD");
		Возврат;
	КонецЕсли;

	
	КоличестваТоваровПоЗаказу = Новый Соответствие();
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваровПоЗаказу, "receipt_qty", Ложь);
	
	Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
		Возврат;
	КонецЕсли;

	ЗаказПокупателя = ЗаказПокупателяСсылка.ПолучитьОбъект();
	
	
	Если ЗаказПокупателяСсылка.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УдалениеТовара Тогда
		Для каждого СтрокаТЧ Из ЗаказПокупателя.Товары Цикл
			WMSКоличествоСобрано = КоличестваТоваровПоЗаказу.Получить(СтрокаТЧ.Номенклатура);
			Если WMSКоличествоСобрано=Неопределено Тогда
				WMSКоличествоСобрано=0;
			КонецЕсли;
			СтрокаТЧ.Количество = (WMSКоличествоСобрано/?(СтрокаТЧ.Коэффициент=0,1,СтрокаТЧ.Коэффициент));
			Если СтрокаТЧ.Количество>СтрокаТЧ.КоличествоСобрано Тогда
				EmeWmsERPEngine.ErrorHeader(ERPData, "QntBad");
				возврат;
			КонецЕсли;
		КонецЦикла;
		
				
		Если EmeWmsУтилиты.ЕстьРасхожденияВЗаказе(ЗаказПокупателя.Товары) Тогда
			к=0;
			Пока к<ЗаказПокупателя.Товары.Количество() Цикл
				Если ЗаказПокупателя.Товары[к].Количество = ЗаказПокупателя.Товары[к].КоличествоСобрано Тогда
					ЗаказПокупателя.Товары.Удалить(к);
					продолжить;
				КонецЕсли;
				к=к+1;
			КонецЦикла;
			
			Для Каждого ст из ЗаказПокупателя.Товары Цикл
				Если ст.Количество = 0 Тогда
					ст.Количество=ст.КоличествоСобрано;
				ИначеЕсли ст.Количество<ст.КоличествоСобрано Тогда
					ст.КоличествоСобрано = ст.Количество;
				КонецЕсли;
			КонецЦикла;
			Попытка
				ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		Иначе
			ЗаказПокупателя.Местоположение = Неопределено;
			Попытка
				ЗаказПокупателя.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ЗаказПокупателя.ПометкаУдаления = Истина;
				ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		Для каждого СтрокаТЧ Из ЗаказПокупателя.Товары Цикл
			WMSКоличествоСобрано = КоличестваТоваровПоЗаказу.Получить(СтрокаТЧ.Номенклатура);
			Если WMSКоличествоСобрано=Неопределено Тогда
				WMSКоличествоСобрано=0;
			КонецЕсли;
			СтрокаТЧ.КоличествоСобрано = (WMSКоличествоСобрано/?(СтрокаТЧ.Коэффициент=0,1,СтрокаТЧ.Коэффициент));
			Если СтрокаТЧ.КоличествоСобрано>СтрокаТЧ.Количество Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		Если EmeWmsУтилиты.ЕстьРасхожденияВЗаказе(ЗаказПокупателя.Товары) Тогда
			Для Каждого ст из ЗаказПокупателя.Товары Цикл
				Если ст.Количество=ст.КоличествоСобрано Тогда
					ЗаказПокупателя.Товары.Удалить(ст);
					Продолжить;
				КонецЕсли;
				Если ст.Количество<>ст.КоличествоСобрано Тогда
					ст.Количество=ст.КоличествоСобрано;
				КонецЕсли;
			КонецЦикла;
			Попытка
				ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		Иначе
			ЗаказПокупателя.Местоположение = Неопределено;
			Попытка
				ЗаказПокупателя.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ЗаказПокупателя.ПометкаУдаления = Истина;
				ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	EmeWmsERPEngine.Success(ERPData); 
	
КонецПроцедуры

Процедура ЗафиксироватьСтатусСборки(Документ,Статус) Экспорт
	
	ОтветственныйПользователь = Справочники.Пользователи.НайтиПоНаименованию("EME",Истина);
	
	НаборЗаписей = РегистрыСведений.ИсторияСтатусовДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Отбор.Статус.Установить(Статус);
	НаборЗаписей.Отбор.Ответственный.Установить(ОтветственныйПользователь);
	
	НаборЗаписей.Прочитать();
	если НаборЗаписей.Количество()>0 тогда
		НаборЗаписей[0].ДатаСтатуса = ТекущаяДата();	
	иначе
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДатаСтатуса = ТекущаяДата();
		НоваяЗапись.Документ = Документ;
		НоваяЗапись.Статус = Статус;
		НоваяЗапись.Ответственный = ОтветственныйПользователь;
	конецесли;
	
	попытка
		НаборЗаписей.Записать();
	исключение
	конецпопытки;	
	
КонецПроцедуры	

Функция СформироватьУстановитьСкладскойНомер (Заказ) Экспорт
	
	Если ЗначениеЗаполнено(Заказ.Номер4Склад) Тогда
		Возврат Заказ.Номер4Склад;
	КонецЕсли;
	
	Ззона = "";
	лНомер4Склад = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Р.Зона
	|ИЗ
	|	РегистрСведений.Заказы4Logistic КАК Р
	|ГДЕ
	|	Р.Заказ = &Зак";
	Запрос.УстановитьПараметр("Зак",Заказ);
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Ззона = Справочники.ЛогистикЗоны.НайтиПоРеквизиту("Зона",СокрЛП(Рез.Зона)).Префикс;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекНомер = Справочники.СчётчикНомер4Склад.НайтиПоКоду("1");
	
	Если ТекНомер = Справочники.СчётчикНомер4Склад.ПустаяСсылка() Тогда
		Префикс = ПолучитьПрефиксПоДате(ТекущаяДата());
		НомерОк = Строка(Префикс)+"1";
		лНомер4Склад=Строка(Ззона)+"-"+Строка(НомерОК);
		Попытка 
			НовСчётчик = Справочники.СчётчикНомер4Склад.СоздатьЭлемент();
			НовСчётчик.Дата = ТекущаяДата();
			НовСчётчик.Код="1";
			НовСчётчик.Наименование = НомерОК;
			НовСчётчик.Записать();
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Если ТекНомер.Дата = НачалоДня(ТекущаяДата()) Тогда
			Префикс = ПолучитьПрефиксПоДате(ТекущаяДата());
			ЧС = Число (Сред (ТекНомер.Наименование,3));
			ЧС = ЧС+1;
			НомерОк = Префикс+Строка(ЧС);
			лНомер4Склад = Строка(Ззона)+"-"+Строка(НомерОк);
			Попытка 
				ТекНомерОб = ТекНомер.ПолучитьОбъект();
				ТекНомерОб.Наименование = НомерОк;
				ТекНомерОб.Записать();
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		Иначе
			Префикс = ПолучитьПрефиксПоДате(ТекущаяДата());
			НомерОк = Префикс+"1";
			лНомер4Склад=Строка(Ззона)+"-"+Строка(НомерОк);
			
			Попытка 
				ТекНомерОб = ТекНомер.ПолучитьОбъект();
				ТекНомерОб.Дата = ТекущаяДата();
				ТекНомерОб.Наименование = НомерОК;
				ТекНомерОб.Записать();
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат  лНомер4Склад;
КонецФункции

Функция ПолучитьПрефиксПоДате (ТекДата)
	
	Если ДеньНедели(ТекДата) = 5 Тогда
		Возврат "ПТ";
	Иначе
		 Возврат Лев(Формат(ТекДата,"ДФ=ддд"),2);
	КонецЕсли;
	
КонецФункции

	