// Copyright (C) 2012-2016 Engineer Mareev Enterprises

//	Функция ПутьДоERPEngine возвщает путь до файла ERPEngin.xml
Функция ПутьДоERPEngine() Экспорт
	
	Возврат Константы.EmeWmsПутьДоERPEngine.Получить();
		
КонецФункции

//	Функция ПолучитьНомерПартии возвращает номер партии для заказа в формате <Год>/<Номер>
Функция ПолучитьНомерПартии(ЗаказСсылка) Экспорт
	
	Возврат Формат(Год(ЗаказСсылка.Дата), "ЧГ=0") + "/" + ЗаказСсылка.Номер;
	
КонецФункции

//	Функция ПолучитьКодСклада возвращает код склада
Функция ПолучитьКодСклада(СкладСсылка) Экспорт
	
	КодСклада = СокрЛП(СкладСсылка.EmeWmsКод);
	
	Если КодСклада = "" Тогда
		КодСклада = СокрЛП(СкладСсылка.Код);
	КонецЕсли;
	
	Возврат КодСклада;
	
КонецФункции

//	Функция ПолучитьЕдиницуИзмерения возращает единицу измерения номенклатуры
Функция ПолучитьЕдиницуИзмерения(Номенклатура, КлассификаторЕдиницыИзмерения) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец = &Владелец И
		|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &Классификатор И
		|	НЕ ЕдиницыИзмерения.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("Классификатор", КлассификаторЕдиницыИзмерения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
КонецФункции

//	Функция ПолучитьСсылкуНаТовар возращает ссылку на товар по его УИД
Функция ПолучитьСсылкуНаТовар(СтрокаУИДТовара) Экспорт
	
	Попытка
		УИД = Новый УникальныйИдентификатор(СтрокаУИДТовара);
		Возврат Справочники.Номенклатура.ПолучитьСсылку(УИД);
	Исключение
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки
	
КонецФункции

//	Функция ПолучитьСсылкуНаОрганизацию возращает ссылку на организацию
Функция ПолучитьСсылкуНаОрганизацию() Экспорт
	
	Возврат Справочники.Организации.НайтиПоНаименованию("ИП Дубов Борис Львович");
	
КонецФункции

//	Фунцкия ЭтоТрансфер возвращает Истина, если документ НомерEME - трансфер
Функция ЭтоТрансфер(НомерEME) Экспорт
	Возврат Найти(НомерEME, "(трансфер)") > 0;
КонецФункции

//	Фунцкия ЭтоВозврат возвращает Истина, если документ НомерEME - возврат
Функция ЭтоВозврат(НомерEME) Экспорт
	Возврат Найти(НомерEME, "(возврат)") > 0;
КонецФункции

Функция ЭтоВозвратЗаказа(НомерEME) Экспорт
	Возврат Найти(НомерEME, "(возврат заказа)") > 0;
КонецФункции


//	Функция ПолучитьЗаказПоставщику возращает ссылку на заказ поставщику по его УИД
Функция ПолучитьЗаказПоставщику(СтрокаУИДЗаказа) Экспорт
	
	Попытка
		УИД = Новый УникальныйИдентификатор(СтрокаУИДЗаказа);
		Возврат Документы.ЗаказПоставщику.ПолучитьСсылку(УИД);
	Исключение
		Возврат Документы.ЗаказПоставщику.ПустаяСсылка();
	КонецПопытки
	
КонецФункции

//НМА 01.07.17
//	Функция ПолучитьЗаказПоставщику возращает ссылку на заказ поставщику по его УИД
Функция ПолучитьПоступлениеТоваров(СтрокаУИД_ПТУ) Экспорт
	
	Попытка
		УИД = Новый УникальныйИдентификатор(СтрокаУИД_ПТУ);
		Возврат Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД);
	Исключение
		Возврат Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	КонецПопытки
	
КонецФункции
//НМА 01.07.17

//НМА 02.10.17 >>
//	Функция ПолучитьВозвратТоваровПоставщику возращает ссылку на возврат поставщику по его УИД
Функция ПолучитьВозвратТоваровПоставщику(СтрокаУИДЗаказа) Экспорт
	
	Попытка
		УИД = Новый УникальныйИдентификатор(СтрокаУИДЗаказа);
		Возврат Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(УИД);
	Исключение
		Возврат Документы.ВозвратТоваровПоставщику.ПустаяСсылка();
	КонецПопытки
	
КонецФункции
//НМА 02.10.17 <<

//	Функция ПолучитьЗаказПокупателя возращает ссылку на заказ покупателя по его УИД
Функция ПолучитьЗаказПокупателя(СтрокаУИДЗаказа) Экспорт
	
	Попытка
		УИД = Новый УникальныйИдентификатор(СтрокаУИДЗаказа);
		Возврат Документы.ЗаказПокупателя.ПолучитьСсылку(УИД);
	Исключение
		Возврат Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецПопытки
	
КонецФункции

//	Функция ПолучитьПеремещениеТоваров возращает ссылку на перемещение товаров по его УИД
Функция ПолучитьПеремещениеТоваров(СтрокаУИДПеремещения) Экспорт
	
	Попытка
		УИД = Новый УникальныйИдентификатор(СтрокаУИДПеремещения);
		Возврат Документы.ПеремещениеТоваров.ПолучитьСсылку(УИД);
	Исключение
		Возврат Документы.ПеремещениеТоваров.ПустаяСсылка();
	КонецПопытки
	
КонецФункции

//	Функция ПолучитьВозвратТоваровОтПокупателя возращает ссылку на возврат по его УИД
Функция ПолучитьВозвратТоваровОтПокупателя(СтрокаУИДВозврата) Экспорт
	
	Попытка
		УИД = Новый УникальныйИдентификатор(СтрокаУИДВозврата);
		Возврат Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(УИД);
	Исключение
		Возврат Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка();
	КонецПопытки
	
КонецФункции

//	Функция ПолучитьКомплектациюНоменклатуры возращает ссылку на комплектацию номенклатуры по ее УИД
Функция ПолучитьКомплектациюТовара(СтрокаУИДКомплектации) Экспорт
	
	Попытка
		УИД = Новый УникальныйИдентификатор(СтрокаУИДКомплектации);
		Возврат Документы.КомплектацияНоменклатуры.ПолучитьСсылку(УИД);
	Исключение
		Возврат Документы.КомплектацияНоменклатуры.ПустаяСсылка();
	КонецПопытки
	
КонецФункции

//	Функция ПолучитьПТУ возращает ссылку на ПТУ
Функция ПолучитьПТУ(ЗаказПоставщикуСсылка, НомерПриходаEME) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Сделка = &ЗаказПоставщику И
		|	ПоступлениеТоваровУслуг.EmeWmsНомер = &НомерПриходаEME И
		|	НЕ ПоступлениеТоваровУслуг.ПометкаУдаления";
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщикуСсылка);
	Запрос.УстановитьПараметр("НомерПриходаEME", НомерПриходаEME);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();

КонецФункции

//	Функция ПолучитьРТУ возращает ссылку на РТУ
Функция ПолучитьРТУ(ЗаказПокупателяСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Сделка = &Сделка
	               |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления";
	Запрос.УстановитьПараметр("Сделка", ЗаказПокупателяСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();

КонецФункции

//	Функция ПолучитьРасходныйОрдер возвращает ссылку на расходный ордер
Функция ПолучитьРасходныйОрдер(РТУСсылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерНаТовары.Ссылка
	               |ИЗ
	               |	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	               |ГДЕ
	               |	РасходныйОрдерНаТовары.ДокументПередачи = &ДокументПередачи
	               |	И НЕ РасходныйОрдерНаТовары.ПометкаУдаления";
	Запрос.УстановитьПараметр("ДокументПередачи", РТУСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
		
	Возврат Документы.РасходныйОрдерНаТовары.ПустаяСсылка();

КонецФункции

//	Функция ПолучитьПеремещениеВнутриСклада для заказа покупателя возвращает перемещение СкладEME->СкладEME
Функция ПолучитьПеремещениеВнутриСклада(ЗаказПокупателяСсылка) Экспорт
	
	//	Найдем перемещение СкладEME->СкладEME и изменим у него статус с Новый->Собирается
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	Не ПеремещениеТоваров.ПометкаУдаления И
		|	ПеремещениеТоваров.адмЗаказПокупателя = &ЗаказПокупателяСсылка";
		
	Запрос.УстановитьПараметр("ЗаказПокупателяСсылка", ЗаказПокупателяСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		ПеремещениеТоваров = Выборка.Ссылка;
		
		Если ПеремещениеТоваров.ПометкаУдаления Тогда
			Продолжить
		КонецЕсли;
		
		Если ПеремещениеТоваров.СкладОтправитель.EmeWmsУчет И ПеремещениеТоваров.СкладПолучатель.EmeWmsУчет Тогда
			Возврат ПеремещениеТоваров;
		КонецЕсли
		
	КонецЦикла;
	
	Возврат Документы.ПеремещениеТоваров.ПустаяСсылка();
	
КонецФункции

//	Функция ПолучитьСписаниеТоваров возвращает ссылку на списание по номеру EME
Функция ПолучитьСписаниеТоваров(НомерEME) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СписаниеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СписаниеТоваров КАК СписаниеТоваров
		|ГДЕ
		|	СписаниеТоваров.EmeWmsНомер = &НомерEME И
		|	НЕ СписаниеТоваров.ПометкаУдаления";
	Запрос.УстановитьПараметр("НомерEME", НомерEME);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;

	Возврат Документы.СписаниеТоваров.ПустаяСсылка();
	
КонецФункции

//	Функция ПолучитьОприходованиеТоваров возвращает ссылку на оприходование по номеру EME
Функция ПолучитьОприходованиеТоваров(НомерEME) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОприходованиеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
		|ГДЕ
		|	ОприходованиеТоваров.EmeWmsНомер = &НомерEME И
		|	НЕ ОприходованиеТоваров.ПометкаУдаления";
	Запрос.УстановитьПараметр("НомерEME", НомерEME);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;

	Возврат Документы.ОприходованиеТоваров.ПустаяСсылка();

КонецФункции

//	Процедура ПолучитьКоличестваТоваров заполняет карту соответствий КоличестваТоваров:
//	ключ - ссылка на товар, значение - количество
Процедура ПолучитьКоличестваТоваров(ERPData, КоличестваТоваров, ПолеКоличества, ТолькоEMEСклад,ЗаказПокупателя = Неопределено) Экспорт
	
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		
		Если ТолькоEMEСклад Тогда
			Если ERPData.lines.lot_no <> "-" Тогда
				Продолжить
			КонецЕсли
		КонецЕсли;
		
		//КодТовара = ERPData.lines.goods_code; 
		КодТовара = ERPData.lines.goods_id;
		Если КодТовара = "" Тогда
			EmeWmsERPEngine.ErrorChild(ERPData, "GDSNUL");
			Продолжить;
		КонецЕсли;
		
		СсылкаНаТовар = ПолучитьСсылку("Номенклатура", КодТовара);
		Если СсылкаНаТовар = Справочники.Номенклатура.ПустаяСсылка() Тогда
			EmeWmsERPEngine.ErrorChild(ERPData, "GDSBAD");
			Продолжить;
		КонецЕсли;
		
		Если (ERPData.lines.analytics_codes <> "") И (ЗаказПокупателя<>Неопределено) Тогда
			ЗаписатьДанныеПоПодарочнымКартам(ERPData.lines.analytics_codes,ERPData,ЗаказПокупателя.ПодарочныеКарты);
			Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		
		Количество = ERPData.lines[ПолеКоличества];
		СтароеКоличество = КоличестваТоваров.Получить(СсылкаНаТовар);
		Если СтароеКоличество = Неопределено Тогда
			НовоеКоличество = Количество;
		Иначе
			НовоеКоличество = СтароеКоличество + Количество;
		КонецЕсли;
		
		КоличестваТоваров.Вставить(СсылкаНаТовар, НовоеКоличество);
		
	КонецЦикла;		
	
КонецПроцедуры

//НМА 12.12.16 >>
Процедура ПолучитьТЗИзWMS(ERPData, ТЗИзWMS, ТолькоEMEСклад) Экспорт
	
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		
		Если ТолькоEMEСклад Тогда
			Если ERPData.lines.lot_no <> "-" Тогда
				Продолжить
			КонецЕсли
		КонецЕсли;
		
		//КодТовара = ERPData.lines.goods_code; 
		КодТовара = ERPData.lines.goods_id;
		Если КодТовара = "" Тогда
			EmeWmsERPEngine.ErrorChild(ERPData, "GDSNUL");
			Продолжить;
		КонецЕсли;
		
		СсылкаНаТовар = ПолучитьСсылку("Номенклатура", КодТовара);
		Если СсылкаНаТовар = Справочники.Номенклатура.ПустаяСсылка() Тогда
			EmeWmsERPEngine.ErrorChild(ERPData, "GDSBAD");
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТЗИзWMS.Добавить();
		НоваяСтрока.Номенклатура = СсылкаНаТовар;
		НоваяСтрока.КоличествоПринято = ERPData.lines["receipt_qty"]; 
		//НоваяСтрока.КачествоТовара = ERPData.lines["stock_status"]; //НМА 07.07.17
		НоваяСтрока.ЭтоБрак = Ложь;
		Если ERPData.lines["stock_status"]<>"N" Тогда
			НоваяСтрока.ЭтоБрак = Истина;
		КонецЕсли;
		////НМА 24.08.17
		//Если ERPData.lines["defect_qty"]>0 Тогда
		//	НоваяСтрока.ЭтоБрак = Истина;
		//КонецЕсли;
		////НМА 24.08.17
		//НМА 07.07.17 //ERPData.lines.defect_qty
		НоваяСтрока.КоличествоБрака = ERPData.lines["defect_qty"];
		НоваяСтрока.СрокГодности    = ERPData.lines["bbd"];
		НоваяСтрока.ДатаПроизводства= ERPData.lines["prd"];
		НоваяСтрока.Штрихкод        = ERPData.lines["bar_code"];
		НоваяСтрока.ТипШтрихкода    = ПланыВидовХарактеристик.ТипыШтрихкодов.НайтиПоНаименованию(ERPData.lines["bar_code_type"],Истина);
		//НоваяСтрока.НомерГТДПоставщика        = ERPData.lines["gtd_reg_no"];
		//НоваяСтрока.КодНоменклатурыПоставщика = ERPData.lines["gtd_line_no"];
		//НМА 07.07.17
		Если ЗначениеЗаполнено(ERPData.lines["mu_code"]) Тогда
			НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ERPData.lines["mu_code"],Истина,,СсылкаНаТовар);
		КонецЕсли;
	
		КонецЦикла;		
	
КонецПроцедуры
//НМА 12.12.16 <<


//	Процедура ВычестьКоличестваТоваровПоДокументу вычитает из таблицы соответствий
//	КоличестваТоваров количества товаров из табличной части документа
Процедура ВычестьКоличестваТоваровПоДокументу(КоличестваТоваров, ТабличнаяЧастьТоваров) Экспорт
	
	Для Каждого СтрокаТовара Из ТабличнаяЧастьТоваров Цикл
		
		//	Получим количество товара из сообщения
		СтароеКоличество = КоличестваТоваров.Получить(СтрокаТовара.Номенклатура);
		Если СтароеКоличество = Неопределено Тогда
			СтароеКоличество = 0;
		КонецЕсли;
		
		Количество = СтрокаТовара.Количество * СтрокаТовара.Коэффициент;
		
		//	Изменим остаток
		НовоеКоличество = СтароеКоличество - Количество;
		Если НовоеКоличество = 0 Тогда
			КоличестваТоваров.Удалить(СтрокаТовара.Номенклатура);
		Иначе
			КоличестваТоваров.Вставить(СтрокаТовара.Номенклатура, НовоеКоличество);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//	Процедура СкорректироватьКоличестваТоваровПоДокументу корректирует количества товаров
//	в табличной части документа
Процедура СкорректироватьКоличестваТоваровПоДокументу(Документ, ИсходныеКоличестваТоваров) Экспорт
	
	//	Скопируем исходный количества товаров - мы их изменять не будем
	КоличестваТоваров = Новый Соответствие();
	Для Каждого КоличествоТовара Из ИсходныеКоличестваТоваров Цикл
		КоличестваТоваров.Вставить(КоличествоТовара.Ключ, КоличествоТовара.Значение);
	КонецЦикла;
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТовара Из Документ.Товары Цикл
		
		СтароеКоличество = КоличестваТоваров.Получить(СтрокаТовара.Номенклатура);
		Если СтароеКоличество = Неопределено Тогда
			СтрокаТовара.Количество = 0;
			МассивСтрокКУдалению.Добавить(СтрокаТовара);
			Продолжить;
		КонецЕсли;

		//	Ограничим количество заказанное количество принятым.
		Количество = СтрокаТовара.Количество * СтрокаТовара.Коэффициент;
		Если Количество > СтароеКоличество Тогда
			Количество = СтароеКоличество;
		КонецЕсли;
		
		//	Найдем целое число упаковок
		КоличествоУпаковок = Окр(Количество / СтрокаТовара.Коэффициент, 0, РежимОкругления.Окр15как10);
		
		//	Нормализуем количество
		Количество = КоличествоУпаковок * СтрокаТовара.Коэффициент;
		
		//	Изменим остаток
		НовоеКоличество = СтароеКоличество - Количество;
		Если НовоеКоличество = 0 Тогда
			КоличестваТоваров.Удалить(СтрокаТовара.Номенклатура);
		Иначе
			КоличестваТоваров.Вставить(СтрокаТовара.Номенклатура, НовоеКоличество);
		КонецЕсли;

		СтрокаТовара.Количество = Количество;
		
		Если СтрокаТовара.Количество = 0 Тогда
			МассивСтрокКУдалению.Добавить(СтрокаТовара);
			Продолжить;
		КонецЕсли; 
		
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТовара, Документ);
		Если Документ.Метаданные().Имя <> "РасходныйОрдерНаТовары" Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТовара, Документ);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовара, Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из МассивСтрокКУдалению Цикл
		Документ.Товары.Удалить(СтрокаУдаления);	
	КонецЦикла; 
	
КонецПроцедуры

//	Процедура ТрассировкаКоличествТоваров распечатывает таблицу количеств товара
Процедура ТрассировкаКоличествТоваров(Трассировка, КоличестваТоваров) Экспорт
	
	Для Каждого КоличествоТовара Из КоличестваТоваров Цикл
		ТоварСсылка = КоличествоТовара.Ключ;
		Трассировка = Трассировка + СокрЛП(ТоварСсылка.Код) + " [" + СокрЛП(ТоварСсылка.Наименование) + "] = " +
			КоличествоТовара.Значение + ТоварСсылка.БазоваяЕдиницаИзмерения + Символы.ПС;
	КонецЦикла
	
КонецПроцедуры

//	Процедура ТрассировкаТабличнойЧастиТоваров распечатывает таблицу количеств товара
Процедура ТрассировкаТабличнойЧастиТоваров(Трассировка, ТабличнаяЧастьТоваров) Экспорт
	
	Для Каждого СтрокаТовара Из ТабличнаяЧастьТоваров Цикл
		Количество = СтрокаТовара.Количество * СтрокаТовара.Коэффициент;
		ТоварСсылка = СтрокаТовара.Номенклатура;
		Трассировка = Трассировка + СокрЛП(ТоварСсылка.Код) + " [" + СокрЛП(ТоварСсылка.Наименование) + "] = " +
			Количество + ТоварСсылка.БазоваяЕдиницаИзмерения + Символы.ПС;
	КонецЦикла;
	
КонецПроцедуры

//	Процедура ПолучитьСписокУтилит заполняет СписокУтилит доступными утилитами
Процедура ПолучитьСписокУтилит(СписокУтилит) Экспорт
	
	СписокУтилит.Колонки.Добавить("Утилита");
	СписокУтилит.Добавить().Утилита = "ПометитьВсюНоменклатуруКЭкспорту";
	СписокУтилит.Добавить().Утилита = "ПометитьВсеЗаказыПоставщикамКЭкспорту";
	СписокУтилит.Добавить().Утилита = "ПометитьВсеЗаказыПокупателейКЭкспорту";
	СписокУтилит.Добавить().Утилита = "ПометитьВсеПеремещенияТоваровКЭкспорту";
	СписокУтилит.Добавить().Утилита = "ПометитьВсеВозвратыТоваровОтПокупателейКЭкспорту";
	СписокУтилит.Добавить().Утилита = "ПометитьВсеКомплектацииНоменклатурыКЭкспорту";
	СписокУтилит.Добавить().Утилита = "ПротестироватьОтсылкуДиагностики";
	
КонецПроцедуры

Процедура ПометитьВсюНоменклатуруКЭкспорту() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
        |ИЗ
        |	Справочник.Номенклатура КАК Номенклатура
        |ГДЕ
        |	НЕ Номенклатура.ЭтоГруппа И
		|	НЕ Номенклатура.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сообщить("Начинаем пометку номенклатуры к экспорту");
	Счетчик = 0;
	Пока Выборка.Следующий() Цикл
		Если Не EmeWmsЭкспортНоменклатуры.ПомеченКЭкспорту(Выборка.Ссылка) Тогда
			EmeWmsЭкспортНоменклатуры.ПометитьКЭкспорту(Выборка.Ссылка.ПолучитьОбъект());
			Счетчик = Счетчик + 1;
		КонецЕсли
	КонецЦикла;
	Сообщить("Завершили пометку номенклатуры к экспорту (" + Счетчик + "шт)");
	
КонецПроцедуры

Процедура ПометитьВсеЗаказыПоставщикамКЭкспорту() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК Ссылка
	    |ИЗ
	    |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	    |ГДЕ
		|	НЕ ЗаказПоставщику.ПометкаУдаления И
		|	ЗаказПоставщику.Дата > &ДатаЗаказа";
		
	Запрос.УстановитьПараметр("ДатаЗаказа", ДобавитьМесяц(ТекущаяДата(), -3));
	Выборка = Запрос.Выполнить().Выбрать();
	Сообщить("Начинаем пометку заказов поставщикам к экспорту");
	Счетчик = 0;
	Пока Выборка.Следующий() Цикл
		Если Не EmeWmsЭкспортЗаказовПоставщикам.ПомеченКЭкспорту(Выборка.Ссылка) Тогда
			EmeWmsЭкспортЗаказовПоставщикам.ПометитьКЭкспорту(Выборка.Ссылка.ПолучитьОбъект());
			Счетчик = Счетчик + 1;
		КонецЕсли
	КонецЦикла;
	Сообщить("Завершили пометку заказов поставщикам к экспорту (" + Счетчик + "шт)");
	
КонецПроцедуры

Процедура ПометитьВсеЗаказыПокупателейКЭкспорту() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК Ссылка
	    |ИЗ
	    |	Документ.ЗаказПокупателя КАК ЗаказКлиента
	    |ГДЕ
		|	НЕ ЗаказКлиента.ПометкаУдаления И
		|	ЗаказКлиента.Дата > &ДатаЗаказа";
		
	Запрос.УстановитьПараметр("ДатаЗаказа", ДобавитьМесяц(ТекущаяДата(), -3));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сообщить("Начинаем пометку заказов покупателей для экспорта");
	Счетчик = 0;
	Пока Выборка.Следующий() Цикл
		Если Не EmeWmsЭкспортЗаказовПокупателей.ПомеченКЭкспорту(Выборка.Ссылка) Тогда
			EmeWmsЭкспортЗаказовПокупателей.ПометитьКЭкспорту(Выборка.Ссылка.ПолучитьОбъект());
			Счетчик = Счетчик + 1;
		КонецЕсли
	КонецЦикла;
	Сообщить("Завершили пометку заказов покупателей для экспорта (" + Счетчик + "шт)");
	
КонецПроцедуры

Процедура ПометитьВсеПеремещенияТоваровКЭкспорту() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка КАК Ссылка
	    |ИЗ
	    |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	    |ГДЕ
		|	НЕ ПеремещениеТоваров.ПометкаУдаления И
		|	ПеремещениеТоваров.Дата > &ДатаПеремещения";
		
	Запрос.УстановитьПараметр("ДатаПеремещения", ДобавитьМесяц(ТекущаяДата(), -3));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сообщить("Начинаем пометку перемещений товаров для экспорта");
	Счетчик = 0;
	Пока Выборка.Следующий() Цикл
		Если Не EmeWmsЭкспортПеремещенийТоваров.ПомеченКЭкспорту(Выборка.Ссылка) Тогда
			EmeWmsЭкспортПеремещенийТоваров.ПометитьКЭкспорту(Выборка.Ссылка.ПолучитьОбъект());
			Счетчик = Счетчик + 1;
		КонецЕсли
	КонецЦикла;
	Сообщить("Завершили пометку перемещений товаров для экспорта (" + Счетчик + "шт)");
	
КонецПроцедуры

Процедура ПометитьВсеВозвратыТоваровОтПокупателейКЭкспорту() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка
	    |ИЗ
	    |	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	    |ГДЕ
		|	НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления И
		|	ВозвратТоваровОтПокупателя.Дата > &ДатаВозврата";
		
	Запрос.УстановитьПараметр("ДатаВозврата", ДобавитьМесяц(ТекущаяДата(), -3));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сообщить("Начинаем пометку возвратов товаров от покупателей для экспорта");
	Счетчик = 0;
	Пока Выборка.Следующий() Цикл
		Если Не EmeWmsЭкспортВозвратовТоваровОтПокупателей.ПомеченКЭкспорту(Выборка.Ссылка) Тогда
			EmeWmsЭкспортВозвратовТоваровОтПокупателей.ПометитьКЭкспорту(Выборка.Ссылка.ПолучитьОбъект());
			Счетчик = Счетчик + 1;
		КонецЕсли
	КонецЦикла;
	Сообщить("Завершили пометку возвратов товаров от покупателей для экспорта (" + Счетчик + "шт)");
	
КонецПроцедуры

Процедура ПометитьВсеКомплектацииНоменклатурыКЭкспорту() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	КомплектацияНоменклатуры.Ссылка КАК Ссылка
	    |ИЗ
	    |	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	    |ГДЕ
		|	НЕ КомплектацияНоменклатуры.ПометкаУдаления И
		|	КомплектацияНоменклатуры.Дата > &ДатаКомплектации";
		
	Запрос.УстановитьПараметр("ДатаКомплектации", ДобавитьМесяц(ТекущаяДата(), -3));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сообщить("Начинаем пометку комплектаций номенклатуры от покупателей для экспорта");
	Счетчик = 0;
	Пока Выборка.Следующий() Цикл
		Если Не EmeWmsЭкспортКомплектацийНоменклатуры.ПомеченКЭкспорту(Выборка.Ссылка) Тогда
			EmeWmsЭкспортКомплектацийНоменклатуры.ПометитьКЭкспорту(Выборка.Ссылка.ПолучитьОбъект());
			Счетчик = Счетчик + 1;
		КонецЕсли
	КонецЦикла;
	Сообщить("Завершили пометку комплектаций номенклатуры для экспорта (" + Счетчик + "шт)");
	
КонецПроцедуры

// Катков А. 20.09.2016 >>
//Процедура ПротестироватьОтсылкуДиагностики() Экспорт
Процедура ПротестироватьОтсылкуДиагностики(Тема = "Тест диагностики", Текст = "Тест диагностики") Экспорт
	//EmeWmsУтилиты.СообщитьПоПочте("Тест диагностики", "Тест диагностики");
	EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(Тема, Текст);
	// Катков А. 20.09.2016 <<  
КонецПроцедуры

// Катков А. 27.09.2016 >>
Процедура ЗаписатьНесоответствияОтгрузкиЗаказуПокупателя(Заказ, ТекстТрассировки) Экспорт

	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.EmeWmsНесоответствиеОтгрузокЗаказамПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказПокупателя.Установить(Заказ);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НоваяЗаписьРегистра = НаборЗаписей.Добавить();
	НоваяЗаписьРегистра.ЗаказПокупателя = Заказ;
	НоваяЗаписьРегистра.Трассировка = ТекстТрассировки;
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ОчиститьНесоответствияОтгрузкиЗаказуПокупателя(Заказ) Экспорт

	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.EmeWmsНесоответствиеОтгрузокЗаказамПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказПокупателя.Установить(Заказ);
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ЗаписатьЗакрытиеЗаказаВРегистреНесоответствий(Заказ) Экспорт

	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.EmeWmsНесоответствиеОтгрузокЗаказамПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказПокупателя.Установить(Заказ);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 1 Тогда
		НаборЗаписей[0].Закрыт = ИСТИНА;
		НаборЗаписей.Записать();
	КонецЕсли; 

КонецПроцедуры
// Катков А. 27.09.2016 << 

// Катков А. 28.09.2016 >>
// Функция ПолучитьКодСпрНоменклатура_НеДляСинхронизации возвращает Код номенклатуры для полей "GOODS_CODE" (не ID!)
Функция ПолучитьКодСпрНоменклатура_НеДляСинхронизации(ОбъектСправочника) Экспорт
	
	Если ОбъектСправочника.емеЭтоДополнительнаяНоменклатура И ЗначениеЗаполнено(ОбъектСправочника.емеСсылкаНаОсновнуюНоменклатуру) Тогда
		Код = СокрЛП(ОбъектСправочника.емеСсылкаНаОсновнуюНоменклатуру.Код);
	Иначе
		Код = СокрЛП(ОбъектСправочника.Код);
	КонецЕсли; 
	
	Возврат Код;
	
КонецФункции
// Катков А. 28.09.2016 <<   

// Катков А. 09.09.2016 >>
Процедура ОтправитьСообщениеПоЭлектроннойПочте(Тема, Текст, Предупреждения1С_WMS="Предупреждения1С_WMS") Экспорт  //НМА 05.12.17 Предупреждения1С_WMS
//Процедура ОтправитьСообщениеПоЭлектроннойПочте(Тема, Текст) Экспорт //НМА 05.12.17 Предупреждения1С_WMS
	//Запрос = Новый Запрос;  // адреса для рассылки храним в рег.сведений "Псевдонимы"
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Псевдонимы.Значение КАК ЕМэйл
	//	|ИЗ
	//	|	РегистрСведений.Псевдонимы КАК Псевдонимы
	//	|ГДЕ
	//	|	Псевдонимы.Раздел.Наименование = &Предупреждения1С_WMS
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	Псевдонимы.Значение";
	//
	//Запрос.УстановитьПараметр("Предупреждения1С_WMS",Предупреждения1С_WMS); //НМА 05.12.17 Предупреждения1С_WMS
	//РезультатЗапроса = Запрос.Выполнить();
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//
	//ЭлПисьмо = Новый ИнтернетПочтовоеСообщение;
	//ЭлПисьмо.Тема = Тема;
	//ТекстПисьма = Текст;
	//ЭлПисьмо.Тексты.Добавить(ТекстПисьма);
	//ЭлПисьмо.Отправитель = "1cinfo@ukitgroup.ru"; //НМА 16.01.18 изменить настройки почтового ящика. Старый ящик:"1cinfo@5lb.ru". Задача от Ивана Иванова
	//ЭлПисьмо.ИмяОтправителя = "Интеграция 1С-EME.WMS";
	//
	//Отказ = ИСТИНА; // на случай если нет адресов для рассылки
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	ЭлПисьмо.Получатели.Добавить(ВыборкаДетальныеЗаписи.ЕМэйл);
	//	Отказ = ЛОЖЬ;
	//КонецЦикла;
	//
	//МассивПисем = Новый Массив;
	//МассивПисем.Добавить(ЭлПисьмо);
	//
	//Если НЕ Отказ Тогда
	//	РаботаСРегламентныеЗаданиями.ОтправитьЭлектронныеПисьма(МассивПисем);
	//КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьОбменСEmeWms() Экспорт

	EmeWmsЭкспорт.Экспортировать();
	EmeWmsИмпорт.Импортировать();

КонецПроцедуры
// Катков А. 09.09.2016 << 

// Катков А. 28.09.2016 >>
//Функция ПолучитьБазовуюЕдиницуИзмерения возвращает Единицу измерения с коэффициентом 1 или Неопределено, если она задвоена или не найдена
Функция ПолучитьБазовуюЕдиницуИзмеренияК1(Номенклатура) Экспорт

	БазоваяЕдиницаИзмерения = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат БазоваяЕдиницаИзмерения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка КАК ЕдИзм
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец = &Номенклатура
		|	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
		|	И ЕдиницыИзмерения.Коэффициент = 1";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() < 1 Тогда
		#Если Клиент Тогда
		Сообщить("!Для |" + Номенклатура + "| не найдена Ед.изм. с коэфф-ом 1");
		#КонецЕсли
		Возврат БазоваяЕдиницаИзмерения;
	ИначеЕсли ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
		#Если Клиент Тогда
			Сообщить("!У |" + Номенклатура + "| существует более одной Ед.изм. с коэфф-ом 1");
		#КонецЕсли
		//НМА 21.07.17 выгрузим единицу измерения, если она указана как единица хранения остатков >> 
		Если ЗначениеЗаполнено(Номенклатура.ЕдиницаХраненияОстатков) и Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796") Тогда;  //шт  
			ВыборкаДетальныеЗаписи.Следующий();
			Если ВыборкаДетальныеЗаписи.ЕдИзм = Номенклатура.ЕдиницаХраненияОстатков Тогда
				БазоваяЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдИзм;
				Сообщить("|" + Номенклатура + "| выгружена в EME с единицей измерения хранения остатков");
			КонецЕсли;
		Иначе
			Сообщить("У |" + Номенклатура + "| в поле единица хранения остатков указана не штука");
		КонецЕсли;
		//НМА 21.07.17 выгрузим единицу измерения, если она указана как единица хранения остатков <<
		Возврат БазоваяЕдиницаИзмерения;
	КонецЕсли; 
	
	ВыборкаДетальныеЗаписи.Следующий();
	БазоваяЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдИзм;
	Возврат БазоваяЕдиницаИзмерения;
	
КонецФункции // ПолучитьБазовуюЕдиницуИзмерения()
// Катков А. 28.09.2016 <<   


// из "старого"
//

//	Процедура СверитьКоличестваТоваров сверяет карту соответствий КоличестваТоваров
//	и табличную часть документа "Товары"
Процедура СверитьКоличестваТоваров(ERPData, КоличестваТоваров, ТабличнаяЧастьТоваров, СтрогаяПроверка) Экспорт
	
	Для Каждого СтрокаТовара Из ТабличнаяЧастьТоваров Цикл
		
		//	Получим количество товара из сообщения
		СтароеКоличество = КоличестваТоваров.Получить(СтрокаТовара.Номенклатура);
		Если СтароеКоличество = Неопределено Тогда
			СтароеКоличество = 0;
		КонецЕсли;
		
		Количество = СтрокаТовара.Количество * СтрокаТовара.Коэффициент;
		
		Если Количество > СтароеКоличество Тогда
			Если СтрогаяПроверка Тогда
				EmeWmsERPEngine.ErrorHeader(ERPData, "GDSLES");
			Иначе
				EmeWmsERPEngine.WarningHeader(ERPData, "GDSLES");
			КонецЕсли;
			
			Сообщить("Недостаточно товара <" + СтрокаТовара.Номенклатура + "> в сообщении (есть: " +
				СтароеКоличество + ", надо: " + Количество + ")");			
			Возврат
		КонецЕсли;

		//	Изменим остаток
		НовоеКоличество = СтароеКоличество - Количество;
		Если НовоеКоличество = 0 Тогда
			КоличестваТоваров.Удалить(СтрокаТовара.Номенклатура);
		Иначе
			КоличестваТоваров.Вставить(СтрокаТовара.Номенклатура, НовоеКоличество);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КоличествоТовара Из КоличестваТоваров Цикл
		Если СтрогаяПроверка Тогда
			EmeWmsERPEngine.ErrorHeader(ERPData, "GDSMOR");
		Иначе
			EmeWmsERPEngine.WarningHeader(ERPData, "GDSMOR");
		КонецЕсли;
		
		Сообщить("Лишний товар <" + КоличествоТовара.Ключ + "> в сообщении (" +
			КоличествоТовара.Значение + ")");			
		Возврат
	КонецЦикла
	
КонецПроцедуры

//	Функция ПолучитьКод возвращает код объекта справочника. 
Функция ПолучитьКод(ОбъектСправочника) Экспорт
	
	//Код = СокрЛП(ОбъектСправочника.Код);
	//Если Код = "" Тогда
	//	Код = СтрЗаменить(ОбъектСправочника.УникальныйИдентификатор(), "-", "");
	//КонецЕсли;
	
	Если ТипЗнч(ОбъектСправочника) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ОбъектСправочника.емеЭтоДополнительнаяНоменклатура И ЗначениеЗаполнено(ОбъектСправочника.емеСсылкаНаОсновнуюНоменклатуру) Тогда
			Код = XMLСтрока(ОбъектСправочника.емеСсылкаНаОсновнуюНоменклатуру.УникальныйИдентификатор());
		Иначе
			Код = XMLСтрока(ОбъектСправочника.УникальныйИдентификатор());
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ОбъектСправочника) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		Код = XMLСтрока(ОбъектСправочника.УникальныйИдентификатор());
	Иначе
		Код = СокрЛП(ОбъектСправочника.Код);
		Если Код = "" Тогда
			Код = СтрЗаменить(ОбъектСправочника.УникальныйИдентификатор(), "-", "");
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Код;
	
КонецФункции

//	Функция ПолучитьСсылку возвращает ссылку на объект справочника. 
Функция ПолучитьСсылку(ИмяСправочника, Код) Экспорт
	
	//Сообщить(Код);
	
	Код = СокрЛП(Код);
	// Катков А. 09.09.2016 >>
	Если Метаданные.Справочники[ИмяСправочника].Имя = "Номенклатура" Тогда 
		
		ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
		
		Попытка
			УИ = Новый УникальныйИдентификатор(Код);
		Исключение
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",УровеньЖурналаРегистрации.Ошибка,,,"Не найден объект "+ИмяСправочника+ " по коду " + Код);
			Возврат ПустаяНоменклатура;
		КонецПопытки; 
		
		НайденаяНоменклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Код));
		
		Если Лев(Строка(НайденаяНоменклатура), 18) = "<Объект не найден>" Тогда
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",УровеньЖурналаРегистрации.Ошибка,,,"Не найден объект "+ИмяСправочника+ " по коду " + Код);
			Возврат ПустаяНоменклатура;
		Иначе
			Возврат НайденаяНоменклатура;
		КонецЕсли;
		
	//Если Метаданные.Справочники[ИмяСправочника].ДлинаКода <> 0 Тогда
	ИначеЕсли Метаданные.Справочники[ИмяСправочника].ДлинаКода <> 0 Тогда
	// Катков А. 09.09.2016 <<  
		//Сообщить("Поиск по коду");
		// Железов А.А. старт 02.06.2016
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.Код = &Код";
		Запрос.УстановитьПараметр("Код",СокрЛП(Код));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВозвращаемоеЗначение = Выборка.Ссылка;
		Иначе
			ВозвращаемоеЗначение = Справочники[ИмяСправочника].ПустаяСсылка();
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",УровеньЖурналаРегистрации.Ошибка,,,"Не найден объект "+ИмяСправочника+ " по коду " + Код);
		КонецЕсли;
		// Железов А.А. финиш 
		Возврат ВозвращаемоеЗначение;
	Иначе
		Сообщить("Поиск по GUID");
		УИД = Код;
		Возврат Справочники[ИмяСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	КонецЕсли;
	
КонецФункции

//	Функция ПолучитьИдентификаторДокумента возвращает идентифкатор докумена в формате <Префикс>/<Год>/<Номер>
Функция ПолучитьИдентификаторДокумента(ДокументСсылка) Экспорт
	
	ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
	Префикс = "???";
	Если ПолноеИмя = "Документ.ЗаказПоставщику" Тогда
		Префикс = "SPL";
	ИначеЕсли ПолноеИмя = "Документ.ЗаказПокупателя" Тогда
		Префикс = "CUS";
	ИначеЕсли ПолноеИмя = "Документ.ПеремещениеТоваров" Тогда
		Префикс = "TRN";
	ИначеЕсли ПолноеИмя = "Документ.ВозвратТоваровОтПокупателя" Тогда
		Префикс = "RTC";
	КонецЕсли;
	
	Возврат Префикс + "/" + Формат(Год(ДокументСсылка.Дата), "ЧГ=0") + "/" + ДокументСсылка.Номер;
	
КонецФункции

//	Функция ПолучитьСсылкуНаДокумент
Функция ПолучитьСсылкуНаДокумент(ИдентификаторДокумента) Экспорт
	
	Префикс = Лев(ИдентификаторДокумента, 3);
	Год = Сред(ИдентификаторДокумента, 5, 4);
	Номер = Сред(ИдентификаторДокумента, 10);
	Дата = Дата(Год, 1, 1);
	
	Если Префикс = "SPL" Тогда
		Возврат Документы.ЗаказПоставщику.НайтиПоНомеру(Номер, Дата);
	ИначеЕсли Префикс = "CUS" Тогда
		Возврат Документы.ЗаказПокупателя.НайтиПоНомеру(Номер, Дата);
	ИначеЕсли Префикс = "TRN" Тогда
		Возврат Документы.ПеремещениеТоваров.НайтиПоНомеру(Номер, Дата);
	ИначеЕсли Префикс = "RTC" Тогда
		Возврат Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(Номер, Дата);
	КонецЕсли;
	
	Возврат Документы.ЗаказПоставщику.ПустаяСсылка();
	
КонецФункции

Функция ЕстьРасхожденияВПеремещении (ТаблицаТовары, Перемещение) Экспорт
	
	Если ТаблицаТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПеремещениеНедостача = Перемещение.Скопировать();
	ПеремещениеНедостача.Дата = ТекущаяДата();
	ПеремещениеНедостача.Комментарий = "Создано по факту недостачи в "+Строка(Перемещение);
	ПеремещениеНедостача.СкладПолучатель = Справочники.Склады.НайтиПоКоду("5");
	ПеремещениеНедостача.ДатаСоздания = ТекущаяДата();
	ПеремещениеНедостача.ДатаФакт = ТекущаяДата();
	ПеремещениеНедостача.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	ПеремещениеНедостача.ВнутреннийЗаказ = Неопределено;

	
	ПеремещениеНедостача.Товары.Очистить();
	
	ЕстьНедостача=Ложь;
	к=0;
	Пока к<ТаблицаТовары.Количество() Цикл
		Если ТаблицаТовары[к].КоличествоСобрано = 0 Тогда
			                                       
			НовСт = ПеремещениеНедостача.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСт,ТаблицаТовары[к]);
			НовСт.ВнутреннийЗаказ = Неопределено;
			
			ТаблицаТовары.Удалить(к);
			ЕстьНедостача=Истина;
			продолжить;
		КонецЕсли;
		к=к+1;
	КонецЦикла;
	
	Для Каждого ст из ТаблицаТовары Цикл
		Если СокрЛП(ст.Номенклатура.Артикул) = "Упаковка" Тогда
			Продолжить;
		КонецЕсли;
		
		Разница = 0;
		Если ст.Количество<>ст.КоличествоСобрано Тогда
			ст.КоличествоСобрано = Цел(ст.КоличествоСобрано);
			Разница = ст.Количество-ст.КоличествоСобрано;
			
			НовСт = ПеремещениеНедостача.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСт,ст);
			НовСт.Количество = Разница;
			НовСт.ВнутреннийЗаказ = Неопределено;
			
			ст.Количество=ст.КоличествоСобрано;
			ЕстьНедостача=Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНедостача Тогда
		
		Попытка
			ПеремещениеНедостача.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеНедостача.Ссылка,ОписаниеОшибки());
		КонецПопытки;
		
		EmeWmsЭкспортПеремещенийТоваров.ПометитьКЭкспортуПовторно(Перемещение);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ЕстьРасхожденияВЗаказе (ТаблицаТовары) Экспорт
	
	Если ТаблицаТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьНедостача=Ложь;
	Для Каждого ст из ТаблицаТовары Цикл
		Если СокрЛП(ст.Номенклатура.Артикул) = "Упаковка" Тогда
			Продолжить;
		КонецЕсли;
		Если ст.Количество<>ст.КоличествоСобрано Тогда
			ст.КоличествоСобрано = Цел(ст.КоличествоСобрано);
			ЕстьНедостача=Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНедостача Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура ЗаписатьДанныеПоКоробкам(sscc_array,Заказ) Экспорт
	
	ТабУпаковки = Новый ТаблицаЗначений;
	ТабУпаковки.Колонки.Добавить("Номенклатура");
	ТабУпаковки.Колонки.Добавить("Количество");
	
	JSON = Новый ЧтениеJSON;
	JSON.УстановитьСтроку(sscc_array);
	Попытка
		JSONДанные = ПрочитатьJSON(JSON);
	Исключение
		Возврат;
	КонецПопытки;
	JSON.Закрыть();
	Если JSONДанные.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Массив = JSONДанные.sscc_array;
	к= 0;
	Для Каждого ст Из Массив Цикл
		к = к+1;
		ТекШтрих = "00"+Строка(СокрЛП(ст.sscc));
		
		НаборЗаказыПВЗ = РегистрыСведений.ШтрихКодыЗаказыПВЗ.СоздатьНаборЗаписей();
		НаборЗаказыПВЗ.Отбор.Штрихкод.Установить(ТекШтрих);
		НаборЗаказыПВЗ.Отбор.ТипШтрихкода.Установить(ПланыВидовХарактеристик.ТипыШтрихкодов.Code128);
		НаборЗаказыПВЗ.Отбор.Владелец.Установить(Заказ.Ссылка);
		
		СтрокаЗаказыПВЗ = НаборЗаказыПВЗ.Добавить();
		СтрокаЗаказыПВЗ.Штрихкод = ТекШтрих;
		СтрокаЗаказыПВЗ.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code128;
		СтрокаЗаказыПВЗ.Владелец = Заказ.Ссылка;
		СтрокаЗаказыПВЗ.Вес = СокрЛП(ст.weight);
		СтрокаЗаказыПВЗ.НомерМеста = к;
		СтрокаЗаказыПВЗ.КоличествоМест = 1;
		
		Попытка
			НаборЗаказыПВЗ.Записать();
		Исключение
		КонецПопытки;
		
		НовСт = ТабУпаковки.Добавить();
		НовСт.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(ст.tareCode));
		НовСт.Количество = 1;
		
	КонецЦикла;
	
	ТабУпаковки.Свернуть("Номенклатура","Количество");
	
	Если ТабУпаковки.Количество()>0 Тогда
		Для Каждого стр из ТабУпаковки Цикл
			Если НЕ ЗначениеЗаполнено(стр.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Пакет = стр.Номенклатура;
			
			НовСт = Заказ.Товары.Найти(Пакет,"Номенклатура");
			Если НовСт=Неопределено Тогда		
				НовСт = Заказ.Товары.Добавить();
			КонецЕсли;
			НовСт.Номенклатура = Пакет;
			НовСт.Количество = стр.Количество;
			НовСт.КоличествоСобрано = стр.Количество;
			НовСт.ЕдиницаИзмерения = НовСт.Номенклатура.ЕдиницаХраненияОстатков;
			НовСт.Коэффициент = НовСт.ЕдиницаИзмерения.Коэффициент;
			НовСт.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			НовСт.СуммаНДС = 0;
			НовСт.Сумма = 0.01;
			НовСт.Цена = 0.01;
			НовСт.Размещение = Справочники.Склады.НайтиПоКоду(Заказ.СкладГруппа.Код); 
		КонецЦикла;
		
		
		Заказ.КоличествоМест = к;
		
		Попытка 
			Заказ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.ЗаявкаВТК.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(Заказ.Ссылка);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.Мест = к;
			Запись.Поддонов = к;
			Попытка
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеПоКоробкамВПеремещение(sscc_array,Перемещение) Экспорт
	
	ТабУпаковки = Новый ТаблицаЗначений;
	ТабУпаковки.Колонки.Добавить("Номенклатура");
	ТабУпаковки.Колонки.Добавить("Количество");
	
	JSON = Новый ЧтениеJSON;
	JSON.УстановитьСтроку(sscc_array);
	Попытка
		JSONДанные = ПрочитатьJSON(JSON);
	Исключение
		Возврат;
	КонецПопытки;
	JSON.Закрыть();
	Если JSONДанные.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Массив = JSONДанные.sscc_array;
	к= 0;
	Для Каждого ст Из Массив Цикл
		к = к+1;
				
		НовСт = ТабУпаковки.Добавить();
		НовСт.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(ст.tareCode));
		НовСт.Количество = 1;
				
	КонецЦикла;
	
	ТабУпаковки.Свернуть("Номенклатура","Количество");
	
	Если ТабУпаковки.Количество()>0 Тогда
		Для Каждого стр из ТабУпаковки Цикл
			Если НЕ ЗначениеЗаполнено(стр.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Пакет = стр.Номенклатура;
			
			НовСт = Перемещение.Товары.Найти(Пакет,"Номенклатура");
			Если НовСт=Неопределено Тогда		
				НовСт = Перемещение.Товары.Добавить();
			КонецЕсли;
			НовСт.Номенклатура = Пакет;
			НовСт.Количество = стр.Количество;
			НовСт.КоличествоСобрано = стр.Количество;
			НовСт.ЕдиницаИзмерения = НовСт.Номенклатура.ЕдиницаХраненияОстатков;
			НовСт.Коэффициент = НовСт.ЕдиницаИзмерения.Коэффициент;
		КонецЦикла;
		
		Перемещение.КоличествоМест = к;
		
		//Попытка 
		//	Перемещение.Записать(РежимЗаписиДокумента.Запись);
		//Исключение
		//КонецПопытки;
	КонецЕсли;

		
	
КонецПроцедуры

Процедура ЗаписатьДанныеПоПодарочнымКартам (analytics_codes,ERPData,ТЗПодарочныеКарты) Экспорт
	Если analytics_codes = "" Тогда
		Возврат;
	КонецЕсли;
	
	//ТЗПодарочныеКарты.Очистить();
	
	ШтрихиКартЕМЕ = analytics_codes;
	Результат=Истина;
	ЕстьНовыеКарты = Ложь;
	Если Найти(ШтрихиКартЕМЕ,";")=0 Тогда
		НомераКартЕМЕ = НайтиКартуПоШтриху(ШтрихиКартЕМЕ);
		Если НомераКартЕМЕ=Неопределено Тогда
			Результат = Ложь;
		ИначеЕсли (НомераКартЕМЕ<>Неопределено) И (ТЗПодарочныеКарты.Найти(НомераКартЕМЕ,"Номер")=Неопределено) Тогда
			НовСт = ТЗПодарочныеКарты.Добавить();
			НовСт.Номер = НомераКартЕМЕ;
			ЕстьНовыеКарты = Истина;
		КонецЕсли;
	Иначе
		РазложитьСтрокуВТаблицуПодарКарт(НомераКартЕМЕ,ТЗПодарочныеКарты,,Результат,ЕстьНовыеКарты);
	КонецЕсли;
			
	Если (Результат) И (ЕстьНовыеКарты) Тогда
		РегимПодарочныеКарты(ТЗПодарочныеКарты,Результат);
	КонецЕсли;
	
	Если Результат=Ложь Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "CARTBAD");
	КонецЕсли;
				
КонецПроцедуры

Процедура РегистрируемСборку(СтрокаТЧ,Документ) Экспорт
	
	ПользовательЕМЕ = Справочники.Пользователи.НайтиПоНаименованию("EME",Истина);
	Если ПользовательЕМЕ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.РегистрацияСкладскихДействий.СоздатьНаборЗаписей();
	
	Набор.Отбор.Документ.Установить(Документ);
	Набор.Отбор.Кладовщик.Установить(ПользовательЕМЕ);
	Набор.Отбор.Номенклатура.Установить (СтрокаТЧ.Номенклатура);
	
	СтрокаДанных = Набор.Добавить();
	
	СтрокаДанных.Документ = Документ;
	СтрокаДанных.Кладовщик = ПользовательЕМЕ;
	СтрокаДанных.Номенклатура = СтрокаТЧ.Номенклатура;
	СтрокаДанных.Количество = СтрокаТЧ.КоличествоСобрано;
	СтрокаДанных.Операция = "Сборка";
	СтрокаДанных.Дата = ТекущаяДата();
	
	
	Набор.Записать();

	
КонецПроцедуры

Процедура РегимПодарочныеКарты (ПодарочныеКарты,Результат=Истина)
	
	Если ПодарочныеКарты.Количество()>0 Тогда
		Если ПроверкаПодарочныхКарт(ПодарочныеКарты)=Ложь Тогда
			Результат = Ложь;
			возврат;
		КонецЕсли;
		
		Для Каждого ст из ПодарочныеКарты Цикл
			Если ЗначениеЗаполнено(ст.Сумма) Тогда
				Продолжить;
			КонецЕсли;
			
			Набор = РегистрыСведений.ПодарочныеКарты.СоздатьНаборЗаписей();
			
			Набор.Отбор.Номер.Установить(ст.Номер);
			Набор.Прочитать();
			
			//Если Источник.СтатусыСборкиЗаказа = Перечисления.СтатусыСборкиЗаказа.УКурьера Тогда
				//Если НЕ ЗначениеЗаполнено(Набор[0].ДатаПродажи) Тогда
					СтрокаДанных = Набор[0];
					СтрокаДанных.ДатаПродажи = ТекущаяДата();
					СтрокаДанных.МестоПродажи = Справочники.Контрагенты.НайтиПоКоду("000000059");
					Попытка
						Набор.Записать();
					Исключение
						Результат = Ложь;
						возврат;
					КонецПопытки;
				//Иначе
				//	Результат = Ложь;
				//	возврат;
				//КонецЕсли;
			//Иначе
			//	СтрокаДанных = Набор[0];
			//	СтрокаДанных.ДатаПродажи = Неопределено;
			//	СтрокаДанных.МестоПродажи = Неопределено;
			//	Попытка
			//		Набор.Записать();
			//	Исключение
			//		Сообщить ("Не удалось зарегистрировать карту "+ст.Номер);
			//		Отказ = Истина;
			//		возврат;
			//	КонецПопытки;
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
    	
КонецПроцедуры

Процедура ПроверкаОбменаС_ЕМЕ() Экспорт
	
	ПровестиНепроведенные();
	ОтправитьНеОтправленныеЗаказы ();
	
	ERPData = Новый Структура;
	EmeWmsERPEngine.Create(ERPData);
	
	ERPData.Config = EmeWmsУтилиты.ПутьДоERPEngine();
	Если ERPData.Config = Неопределено Или ERPData.Config = "" Тогда
		Сообщить("Не найден файл ERPEngine.xml!"); 
		ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Не найден файл ERPEngine.xml!");
		Возврат;
	КонецЕсли;
	
	Ошибка = EmeWmsERPEngine.Connect(ERPData);
	Если Ошибка <> "" Тогда
		Сообщить(Ошибка);
		ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Подключение к SQL базе данных: " + Ошибка);
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗафиксируемПринятыеЗаказыВЕМЕ (ERPData);
	Исключение
		
	КонецПопытки;
	
	EmeWmsERPEngine.Disconnect(ERPData);
		
КонецПроцедуры

Процедура ПишемВРегистр_5LB_ЭтапыОбработкиЗаказов (Действие,Значение,ЗаказПокупателя) Экспорт
	
	НаборЗаписей = РегистрыСведений._5LB_ЭтапыОбработкиЗаказов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЗаказа.Установить(ЗаказПокупателя.Номер);
	НаборЗаписей.Отбор.НомерЗаказаССайта.Установить(ЗаказПокупателя.НомерДокаСайт);
	//НаборЗаписей.Отбор.ВидОплаты.Установить(ЗаказПокупателя.ВидОплаты);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись[Действие] = Значение;
		Попытка
			НаборЗаписей.Записать();
		Исключение
		КонецПопытки;
		Возврат;
	КонецЦикла;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.НомерЗаказа = ЗаказПокупателя.Номер;
	НоваяЗапись.НомерЗаказаССайта = ЗаказПокупателя.НомерДокаСайт;
	НоваяЗапись.Период = ТекущаяДата();
	НоваяЗапись[Действие] = Значение;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ЗафиксируемПринятыеЗаказыВЕМЕ (ERPData)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Рег.НомерЗаказа
	               |ИЗ
	               |	РегистрСведений._5LB_ЭтапыОбработкиЗаказов КАК Рег
	               |ГДЕ
	               |	Рег.ПринятEME = 0";
	
	Выб = Запрос.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		
		ТекСтатус = ПолучитьСтатусЗаказаВЕМЕ(ERPData,Выб.НомерЗаказа);
		Если ТекСтатус="OK" Тогда
			ЗаказСсылка = Документы.ЗаказПокупателя.НайтиПоНомеру(Выб.НомерЗаказа,ТекущаяДата());
			Если ЗаказСсылка.Пустая() Тогда
				продолжить;
			КонецЕсли;
			
			ПишемВРегистр_5LB_ЭтапыОбработкиЗаказов("ДатаПринятияВEME",ТекущаяДата(),ЗаказСсылка);
			ПишемВРегистр_5LB_ЭтапыОбработкиЗаказов("ПринятEME",1,ЗаказСсылка);
		КонецЕсли;
		
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьСтатусЗаказаВЕМЕ(ERPData,НомерЗаказа)
	
	Если Не ЗначениеЗаполнено(НомерЗаказа) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаголовкиСообщений = Новый ТаблицаЗначений();
	EmeWmsERPEngine.GetHeaders(ERPData, "erp", "wms", "orders", "NEW,OK", ЗаголовкиСообщений);
	
	EmeWmsERPEngine.GetOrderState(ERPData, "erp", "wms", "orders",СокрЛП(НомерЗаказа));
	EmeWmsERPEngine.NextHeaderLine(ERPData);
		
	Возврат  ERPData.header.state;
	
	
КонецФункции

Процедура ЗафиксируемПоступлениеПервогоdespatch(НомерЗаказа) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НомерЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Рег.НомерЗаказа
	               |ИЗ
	               |	РегистрСведений._5LB_ЭтапыОбработкиЗаказов КАК Рег
	               |ГДЕ
	               |	Рег.ПолученОтветОтEME = 1
	               |	И Рег.НомерЗаказа = &ТекНом";
	Запрос.УстановитьПараметр("ТекНом",НомерЗаказа);
	
	Если Запрос.Выполнить().Пустой() Тогда
		ЗаказСсылка = Документы.ЗаказПокупателя.НайтиПоНомеру(НомерЗаказа,ТекущаяДата());
		Если ЗаказСсылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		ПишемВРегистр_5LB_ЭтапыОбработкиЗаказов("ДатаПолученияОтветаОтEME",ТекущаяДата(),ЗаказСсылка);
		ПишемВРегистр_5LB_ЭтапыОбработкиЗаказов("ПолученОтветОтEME",1,ЗаказСсылка);
	КонецЕсли;


	
КонецПроцедуры

Процедура ОтправитьНеОтправленныеЗаказы ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.EmeWmsПометкиКЭкспортуЗаказовПокупателей КАК ЕМЕ
	|		ПО Заказ.Ссылка = ЕМЕ.ЗаказПокупателя
	|ГДЕ
	|	Заказ.СтатусыСборкиЗаказа = &СтатусыСборкиЗаказа
	|	И Заказ.Дата >= &ДатаНачалаВыгрузки
	|	И Заказ.Проведен = ИСТИНА
	|	И Заказ.СкладГруппа.EmeWmsУчет = ИСТИНА
	|	И ВЫБОР
	|			КОГДА Заказ.ПунктСамовывоза <> &ПустойСклад
	|				ТОГДА Заказ.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ЕМЕ.ЗаказПокупателя ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", Константы.ДатаНачалаИспользованияИнтеграцииСEME_WMS.Получить());
	Запрос.УстановитьПараметр("СтатусыСборкиЗаказа", Перечисления.СтатусыСборкиЗаказа.ГотовКСборке);
	Запрос.УстановитьПараметр("ПустойСклад",Справочники.Склады.ПустаяСсылка());

	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Для Каждого стр из Выб.Ссылка.Товары Цикл
			Если стр.Номенклатура.емеЭтоДополнительнаяНоменклатура И ЗначениеЗаполнено(стр.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру) Тогда
				НоменклатураДляЭкспорта = стр.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру;
			Иначе
				НоменклатураДляЭкспорта = стр.Номенклатура;
			КонецЕсли;
			Если Не EmeWmsЭкспорт.НоменклатураУжеЕстьВРегистре(НоменклатураДляЭкспорта) И НоменклатураДляЭкспорта<>Справочники.Номенклатура.ПустаяСсылка() Тогда 
				EmeWmsЭкспортНоменклатуры.ПометитьКЭкспорту(НоменклатураДляЭкспорта.ПолучитьОбъект());
			КонецЕсли;
		КонецЦикла;
		EmeWmsЭкспортЗаказовПокупателей.ПометитьКЭкспорту(Выб.Ссылка.ПолучитьОбъект());
	КонецЦикла;

КонецПроцедуры

Процедура ПровестиНепроведенные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК Заказ
	|ГДЕ
	|	Заказ.Дата МЕЖДУ &Дат1 И &Дат2
	|	И Заказ.Проведен = ЛОЖЬ
	|	И Заказ.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Дат1",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дат2",КонецДня(ТекущаяДата()));
	
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		
		Об = Выб.Ссылка.ПолучитьОбъект();
		Попытка
			Об.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ШтрихкодаНет (СписокНом) Экспорт
	
	Если СписокНом = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СписокНом)<>Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипыШК = Новый СписокЗначений;
	ТипыШК.Добавить(ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	ТипыШК.Добавить(ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Тз.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ТзПроверки
	               |ИЗ
	               |	&Табл КАК Тз
	               |ГДЕ
	               |	НЕ Тз.Номенклатура В ИЕРАРХИИ (&НеТмц)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТзПроверки.Номенклатура КАК Номенклатура,
	               |	Рег.Штрихкод КАК Штрих
	               |ИЗ
	               |	ТзПроверки КАК ТзПроверки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Рег
	               |		ПО ТзПроверки.Номенклатура = Рег.Владелец
	               |			И (Рег.ТипШтрихкода В (&ТипыШК))
	               |ГДЕ
	               |	Рег.Штрихкод ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Табл",СписокНом);
	Запрос.УстановитьПараметр("ТипыШК",ТипыШК.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("НеТмц",Справочники.Номенклатура.НайтиПоКоду("06052014"));
	
	Рез = Запрос.Выполнить();
	
	Если Рез.Пустой() Тогда
		Возврат Ложь;
	Иначе
		#Если Клиент Тогда
			Выб = Рез.Выбрать();
			Пока Выб.Следующий() Цикл
				Сообщить ("У "+Строка(Выб.Номенклатура)+" нет штрихкода!",СтатусСообщения.Важное);
			КонецЦикла;
		#КонецЕсли
		Возврат Истина;
	КонецЕсли;
	
	
	
КонецФункции

Функция ПроверкаПодарочныхКарт (ПодарочныеКарты)
	Если ПодарочныеКарты.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Р.Номер,
	               |	Р.Погашена,
	               |	Р.ДатаПродажи
	               |ИЗ
	               |	РегистрСведений.ПодарочныеКарты КАК Р
	               |ГДЕ
	               |	Р.Номер В(&Нумер)";
	Запрос.УстановитьПараметр("Нумер",ПодарочныеКарты.ВыгрузитьКолонку("Номер"));
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Пока Выб.Следующий() Цикл
		Если Выб.Погашена Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выб.ДатаПродажи) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
 
КонецФункции

Процедура РазложитьСтрокуВТаблицуПодарКарт(Строчка,РезТаблица,Разделитель=";",Результат=Истина,ЕстьНовыеКарты=Ложь)
	Если РезТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТМПМногострочнТекст = СтрЗаменить(Строчка, Разделитель, Символы.ПС);
	НомерКарты = Неопределено;
	Для Сч = 1 По СтрЧислоСтрок(ТМПМногострочнТекст) Цикл        
		НомерКарты = НайтиКартуПоШтриху(СтрПолучитьСтроку(ТМПМногострочнТекст, Сч));
		Если НомерКарты=Неопределено Тогда
			Результат = Ложь;
		ИначеЕсли (НомерКарты<>Неопределено) И (РезТаблица.Найти(НомерКарты,"Номер")=Неопределено) Тогда
			НовСт = РезТаблица.Добавить();
			НовСт.Номер = НомерКарты;
			ЕстьНовыеКарты=Истина;
		КонецЕсли;
	КонецЦикла;
	
		
КонецПроцедуры

Функция НайтиКартуПоШтриху(Штрих)
	
	Если Штрих = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Р.Номер
	               |ИЗ
	               |	РегистрСведений.ПодарочныеКарты КАК Р
	               |ГДЕ
	               |	Р.ШтрихКод = &Штрих";
	Запрос.УстановитьПараметр("Штрих",Штрих);
	
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.Номер;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
