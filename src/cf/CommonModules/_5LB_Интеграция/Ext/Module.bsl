

///////////////////////////////////////////////////////
// ОБМЕН c УТ-11
///////////////////////////////////////////////////////


Функция СкладУчаствуетВОбмене(Склад)
	Рез = Ложь;
	ТаблСписок = ОбщегоНазначения5LB.ПравилаПолучитьСписок(Перечисления.Правила.Интеграция, , );  						
	Если ТаблСписок.Количество() > 0 Тогда
		Для Каждого ТекСтр Из ТаблСписок Цикл
			Если ТекСтр.ССылка = Склад Тогда
				Рез = ТекСтр.Использовать;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат Рез;
КонецФункции

Функция ПроверкаРегистрацияИзмененийПриЗаписи(Источник, ПроверятьИзменения=Истина) Экспорт
	
	Рез = Ложь;
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда			
		
		// если документ пришел из внешней ИБ - его не регистрировать
		Если СокрЛП(Источник._5LB_ИдентификаторИБ) <> "" Тогда
			Если Источник._5LB_ИдентификаторИБ <> Строка(Источник.Ссылка.УникальныйИдентификатор()) Тогда				
				Возврат Ложь;	
			КонецЕсли;
		КонецЕсли;
		 
		СкладОсн =  Справочники.Склады.НайтиПоКоду("000000005"); 				// основной
		СкладГруппаМаг = Справочники.Склады.НайтиПоКоду("000000008");			// магазины

		ДвижениеТовараСОсновгоВМагазины = 0;
	    // С основного в магазины
		Если (Источник.СкладОтправитель = СкладОсн И Источник.СкладПолучатель.Родитель = СкладГруппаМаг) Тогда
			ДвижениеТовараСОсновгоВМагазины = 1;
			СкладПроверка = Источник.СкладПолучатель;
		ИначеЕсли
		// с магазинов в основной
			(Источник.СкладОтправитель.Родитель = СкладГруппаМаг И Источник.СкладПолучатель = СкладОсн) Тогда
			ДвижениеТовараСОсновгоВМагазины = 2;
			СкладПроверка = Источник.СкладОтправитель;
		КонецЕсли;

		// *********************** Обязательные! 
		Если (НЕ Источник.Проведен 	// непроведенных		  				
			И ДвижениеТовараСОсновгоВМагазины > 0	// осн->маг или обратно
			) Тогда  // 1 - для непроведенных и собранных										
			
		//	 // 28.04.17
		//	 // 2 - если есть позиции без соответствий (хотя бы одна) - не регистрировать!
		//	ОбрСоотв = Обработки._5LB_СоответствиеНоменклатуры_УТ11;  
		//	ОбрСоотв.ПроверкаСоответсвийНоменклатурыВПеремещении(Источник);
		//    тзНоменклатураБезСоотв = ОбрСоотв.НоменклатураБезСоответсвийВПеремещении(Источник.Ссылка);												
		//	Если тзНоменклатураБезСоотв.Количество() = 0 Тогда	
			//	ОбрСоотв = Обработки._5LB_СоответствиеНоменклатуры_УТ11;  
			ПроверкаСоответсвийНоменклатурыВПеремещении(Источник);
		    тзНоменклатураБезСоотв = НоменклатураБезСоответсвийВПеремещении(Источник.Ссылка);												
			Если тзНоменклатураБезСоотв.Количество() = 0 Тогда	 		
		// *********************** Обязательные! 				
				
				Если НЕ ПроверятьИзменения Тогда    // проверять изменения реквизитов?
					 Рез = Истина;
				Иначе
					
					// < 3
					РеквизитыОбъекта = Истина;		
					// 16.03.17 Вялов - исправлена ошибка регистрации - если изм.статус на "собрано" или изм. т.ч. "Товары"
					стрИзменениеТовары = ОбщегоНазначения5LB.ПолучитьИзмененияОбъектаСтрокой(Источник.Ссылка, РеквизитыОбъекта, "Товары");
					// 07.04.17 Вялов
					// исключить если изменялись только принятые
					бИзменениеТовары = Ложь;
					бИзменениеТоварыПринято = Ложь;
					бИзменениеТоварыСобрано = Ложь;
					Для Индекс=1 по СтрЧислоСтрок(стрИзменениеТовары) Цикл
						СтрТекста = СтрПолучитьСтроку(стрИзменениеТовары, Индекс);
						Если СтрТекста <> "" Тогда
							// если изменилось кол-во принятых товаров - это не повод регистрировать изменения
							Если Найти(СтрТекста, "КоличествоПринято") > 0 Тогда
								бИзменениеТоварыПринято = Истина;
							ИначеЕсли (
								//Найти(СтрТекста, "КоличествоПринято") = 0 
								// 12.04 Вялов - исключил (игнорировать) "Собрано"
								//И 
								Найти(СтрТекста, "КоличествоСобрано") > 0
								)
								Тогда
								бИзменениеТоварыСобрано = Истина;
								Прервать;
							Иначе
								бИзменениеТовары = Истина;
								Прервать;
							КонецЕсли;					
						КонецЕсли;		
					КонецЦикла;  

					стрИзменениеСтатус = ОбщегоНазначения5LB.ПолучитьИзмененияОбъектаСтрокой(Источник.Ссылка, РеквизитыОбъекта, "СтатусСборки");			
					// 07.04.17 Вялов
					//Если (стрИзменениеТовары <> "" 
					//	ИЛИ (стрИзменениеСтатус <> "" И Источник.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран)
					//	) Тогда	
					Если (бИзменениеТовары 
						// 02.06.17 Вялов
//						ИЛИ (стрИзменениеСтатус <> "" И Источник.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран)
						ИЛИ 
						(
						стрИзменениеСтатус <> "" И 							
							(
							// с основного в магазины
						   (ДвижениеТовараСОсновгоВМагазины = 1 И Источник.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран)
						   // из магазиноы на основной
							ИЛИ (ДвижениеТовараСОсновгоВМагазины = 2 И Источник.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке)		
							)
						)
						) Тогда
						
													
							//КонецЕсли;		
							Рез = СкладУчаствуетВОбмене(СкладПроверка);
							//СкладРегистрировать = ОбщегоНазначения5LB.ПравилоСсылкаУчаствует(
							//		Перечисления.Правила.Интеграция, СкладПроверка, );			
							// 4 -для "избранных" складов		
							//Если СкладРегистрировать <> Неопределено Тогда
							//	Если СкладРегистрировать Тогда
							//		РезРегистрации = Истина;													
							//	КонецЕсли;	
							//КонецЕсли;	// 4 -для "избранных" складов
							
							
						КонецЕсли; 	// 3 - если изменилась табличная часть "Товары"	и статус стал "Собрано"				
						// > 3
				КонецЕсли;  	 // проверять изменения реквизитов?
				
		// *********************** Обязательные! 				
			КонецЕсли; 	// 2 - если вся номенклатура имеет соответствие с УТ-11 	
		
		КонецЕсли;   // 1 - для непроведенных с основного склада	
	
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда		
		// установка цен - только для цен 5LB
		Если Источник.Проведен Тогда  // 1 - для проведенных	
		ТипЦены = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("5LB");
			Если ЗначениеЗаполнено(ТипЦены) Тогда
				НайденнаяСтрока = Источник.ТипыЦен.Найти(ТипЦены, "ТипЦен");
				// 2 - только для цен 5LB
				Если НайденнаяСтрока <> Неопределено Тогда
					Попытка
						Рез = Истина;
					Исключение
					КонецПопытки;
				КонецЕсли;	// 2 - только для цен 5LB
			КонецЕсли;		// 1 - для проведенных
		КонецЕсли;
		
	Иначе
		Рез = Истина;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

// Подписка : регистрация изменений в плане обмена при записи объектов
Процедура РегистрацияИзмененийПриЗаписи(Источник, Отказ) Экспорт
	
	Если Константы._5LB_СинхронизацияДанныхСУТ11.Получить() Тогда	// 04.08.17 Вялов - константа синхронизации с УТ11
		
		ФлагРегистрации = ПроверкаРегистрацияИзмененийПриЗаписи(Источник);
		Если ФлагРегистрации Тогда
			Попытка
				Узел_УТ11 = ПланыОбмена.ОбменУправлениеТорговлей11.НайтиПоНаименованию("УТ11");
				ПланыОбмена.ЗарегистрироватьИзменения(Узел_УТ11, Источник);					
				ВидСобытия = Перечисления._5LB_СобытияОбмена.РегистрацияИзменений;
				ЗаписатьВПротоколОбмена(ВидСобытия, Источник, "Регистрация изменений в узле", Ложь);					
			Исключение
				ЗаписатьВПротоколОбмена(ВидСобытия, Источник, "Неудачная попытка регистрация изменений в узле!", Истина);
			КонецПопытки;		
					
		КонецЕсли;
		
	КонецЕсли;     // 04.08.17 Вялов - константа синхронизации с УТ11

КонецПроцедуры

Процедура ВключитьВыгрузкуПоИмениПравила_УТ11(ТекСтрПравила, Узел_УТ11)
	
	ИмяПравила = ТекСтрПравила.Имя;

	Включить = 0;
	Если 
		// Справочники
		ИмяПравила = "Номенклатура" 
		ИЛИ ИмяПравила = "ХарактеристикиНоменклатуры"
		ИЛИ ИмяПравила = "УпаковкиЕдиницыИзмерения"
		ИЛИ ИмяПравила = "ЗначенияСвойствОбъектов"
		// р.с.
		ИЛИ ИмяПравила = "ДополнительныеСведения"		
		ИЛИ ИмяПравила = "ШтрихкодыНоменклатуры"
		ИЛИ ИмяПравила = "НоменклатураПоставщиков"
		// документы
		ИЛИ ИмяПравила = "УстановкаЦенНоменклатуры"
		ИЛИ ИмяПравила = "ПеремещениеТоваров"

	Тогда
		Включить = 1; 
		ТекСтрПравила.СсылкаНаУзелОбмена = Узел_УТ11;
	КонецЕсли;
	
	ТекСтрПравила.Включить = Включить;
	//Возврат Рез;
	
КонецПроцедуры


// запись в лог-файл
Процедура ЗаписатьВФайл(ИмяФайла, ПутьКФайлу="", СтрокаИнформации, ДобавитьДату = Ложь)
	
	Попытка
		ЛогФайл = Новый ЗаписьТекста; 
		Если ПутьКФайлу = "" Тогда
	    	ПутьКФайлу = ПолучитьКаталогОбмена();
		КонецЕсли;
		ИмяФайлаПолное = ПутьКФайлу + ИмяФайла;
		
		ЛогФайл.Открыть(ИмяФайлаПолное, КодировкаТекста.ANSI, Символы.ПС, Истина); 		
		
		Если ДобавитьДату Тогда
			СтрокаИнформации = Символы.ПС + Формат(ТекущаяДата(), "ДФ='dd.MM.yy HH:mm'") 
				+ Символы.ПС + СтрокаИнформации;
		КонецЕсли;	

		ЛогФайл.Записать(СтрокаИнформации + Символы.ПС);     
		
		ЛогФайл.Закрыть();
	Исключение
		
	КонецПопытки;
	                   	
КонецПроцедуры

// каталог обмена
Функция ПолучитьКаталогОбмена()
	
	Возврат "\\192.168.12.95\1C_shared\Exchange\!UT\";
	
КонецФункции

// каталог обмена
Функция ПолучитьКаталогЛогов()
	
	Возврат "\\192.168.12.95\1C_shared\Log\";
	
КонецФункции

// Имя файла обмена (в зависимости от загрузки или выгрузки)
Функция ПолучитьИмяФайла(НаправлениеЗагрузка = Истина)
	
	стрИмяФайла = "";
	
	// 1 - проверка узлов плана обмена
  	ПланОбмена = ПланыОбмена.ОбменУправлениеТорговлей11;	 
    Узел_УТ10 = ПланОбмена.НайтиПоНаименованию("УТ10");
    Узел_УТ11 = ПланОбмена.НайтиПоНаименованию("УТ11");
   	Если НЕ ЗначениеЗаполнено(Узел_УТ10) Тогда
   		Возврат стрИмяФайла;
	КонецЕсли;	
   	Если НЕ ЗначениеЗаполнено(Узел_УТ11) Тогда
   		Возврат стрИмяФайла;
	КонецЕсли;
	
	// 2 - проверка - есть ли файл выгрузки
	//ИмяКаталога = Константы._5LB_КаталогОбмена_УТ10.Получить();
	
	ИмяФайла = "";
	Если НаправлениеЗагрузка Тогда  // загрузка
		ИмяФайла = "Message_" + Строка(Узел_УТ11) + "_" + Строка(Узел_УТ10) + ".xml";
	Иначе	// выгрузка
   		ИмяФайла = "Message_" + Строка(Узел_УТ10) + "_" + Строка(Узел_УТ11) + ".xml";
	КонецЕсли;
	ИмяФайла = СтрЗаменить(ИмяФайла, "УТ", "");   
	//НайденныеФайлы = НайтиФайлы(ИмяКаталогаЗагрузки, ИмяФайлаЗагрузки);
	//Если НайденныеФайлы.Количество() = 0 Тогда		
	//	Возврат;
	//КонецЕсли; 
	Если ИмяФайла <> "" Тогда		
 		//стрИмяФайла = ИмяКаталога + ИмяФайла;
		стрИмяФайла = ИмяФайла;
	//	Возврат;
	КонецЕсли; 
	
	Возврат стрИмяФайла;
	
КонецФункции

Функция ПолучитьИмяФайлаРезерв(НаправлениеЗагрузка = Истина, ДопСч=1)
	
	стрИмяФайла = "";
	
	// 1 - проверка узлов плана обмена
  	ПланОбмена = ПланыОбмена.ОбменУправлениеТорговлей11;	 
    Узел_УТ10 = ПланОбмена.НайтиПоНаименованию("УТ10");
    Узел_УТ11 = ПланОбмена.НайтиПоНаименованию("УТ11");
   	Если НЕ ЗначениеЗаполнено(Узел_УТ10) Тогда
   		Возврат стрИмяФайла;
	КонецЕсли;	
   	Если НЕ ЗначениеЗаполнено(Узел_УТ11) Тогда
   		Возврат стрИмяФайла;
	КонецЕсли;
	
	// 2 - проверка - есть ли файл выгрузки
	//ИмяКаталога = Константы._5LB_КаталогОбмена_УТ10.Получить();
	
	ИмяФайла = "";
	Если НаправлениеЗагрузка Тогда  // загрузка
		ИмяФайла = "Message_" + Строка(Узел_УТ11) + "_" + Строка(Узел_УТ10) + "(" + Формат(ДопСч, "ЧЦ=1; ЧДЦ=; ЧГ=0") + ").xml";
	Иначе	// выгрузка
   		ИмяФайла = "Message_" + Строка(Узел_УТ10) + "_" + Строка(Узел_УТ11) + "(" + Формат(ДопСч, "ЧЦ=1; ЧДЦ=; ЧГ=0") + ").xml";
	КонецЕсли;
	ИмяФайла = СтрЗаменить(ИмяФайла, "УТ", "");   
	//НайденныеФайлы = НайтиФайлы(ИмяКаталогаЗагрузки, ИмяФайлаЗагрузки);
	//Если НайденныеФайлы.Количество() = 0 Тогда		
	//	Возврат;
	//КонецЕсли; 
	Если ИмяФайла <> "" Тогда		
 		//стрИмяФайла = ИмяКаталога + ИмяФайла;
		стрИмяФайла = ИмяФайла;
	//	Возврат;
	КонецЕсли; 
	
	Возврат стрИмяФайла;
	
КонецФункции

// Имя файла протокола (лога)
Функция ПолучитьИмяФайлаПротокола()
	
	Возврат "UT_Exch.log";
	
КонецФункции

// Обработка файлов протоколов (логов) - рзервное копирование
Процедура ФайлыПротоколовРезервноеКопирование(ИмяПротокол)
	
	КаталогОбмена = ПолучитьКаталогОбмена();
	ИмяФайлаПротоколКопия1 = СтрЗаменить(ИмяПротокол, ".log", ".001");   	// копия позавчера
	ИмяФайлаПротоколКопия2 = СтрЗаменить(ИмяПротокол, ".log", ".002");      // копия вчера
	ДтСегодня =  НачалоДня(ТекущаяДата());
	ДтВчера =  НачалоДня(ТекущаяДата()) - (2*24*60*60);
	//ДтПозавчера =  ДтВчера - (24*60*60);

	НайденныеФайлы = НайтиФайлы(КаталогОбмена, ИмяПротокол);
	Если НайденныеФайлы.Количество() > 0 Тогда			
		Если НачалоДня(НайденныеФайлы[0].ПолучитьВремяИзменения()) = ДтВчера Тогда			
		  	//ИмяФайлаПротоколКопия = СтрЗаменить(ИмяФайлаПротокол, ".txt", ".bak");
			ПереместитьФайл(КаталогОбмена + ИмяФайлаПротоколКопия2, КаталогОбмена + ИмяФайлаПротоколКопия1);	
			ПереместитьФайл(КаталогОбмена + ИмяПротокол, КаталогОбмена + ИмяФайлаПротоколКопия2);			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры



Функция НайтиСоздатьПеремещение(стрНомерДок, стрИдентификатор, ВидДок, ЭтоНовыйДок, СкладОтправитель, СкладПолучатель)
	
	РезДок = Документы.ПеремещениеТоваров.ПустаяСсылка();
	ЭтоНовыйДок = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ВидДок) Тогда			
		ВидДок = Перечисления._5LB_ИнтеграцияВидыПередаваемыхДокументов.ПеремещениеТоваров;
	КонецЕсли;
	МассивВидов = Новый Массив(); 
	Если ВидДок = Перечисления._5LB_ИнтеграцияВидыПередаваемыхДокументов.ПеремещениеТоваров Тогда
		МассивВидов.Добавить(Перечисления._5LB_ИнтеграцияВидыПередаваемыхДокументов.ПустаяСсылка());
		МассивВидов.Добавить(ВидДок);
	Иначе
		МассивВидов.Добавить(ВидДок);
	КонецЕсли;

	
	бПродолжитьПоиск = Истина;
	Если СокрЛП(стрИдентификатор) <> "" Тогда
		//бПродолжитьПоиск = Ложь;
		// Поиск - 1 - по идентификатору, если есть	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПеремещениеТоваров.Ссылка
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			|ГДЕ
			|	НЕ ПеремещениеТоваров.ПометкаУдаления
			|	И ПеремещениеТоваров.Дата >= &ДатаС
			|	И ПеремещениеТоваров._5LB_ИдентификаторИБ = &_5LB_ИдентификаторИБ
			|	И ПеремещениеТоваров._5LB_ВидПередаваемогоДокумента В (&ВидыДок)	
			|";			
		Запрос.УстановитьПараметр("ВидыДок", МассивВидов);
		Запрос.УстановитьПараметр("_5LB_ИдентификаторИБ", стрИдентификатор);
		Запрос.УстановитьПараметр("ДатаС", ТекущаяДата() - 120*24*60*60);		// за последние 4 мес.
	
		РезультатЗапроса = Запрос.Выполнить();	
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				РезДок = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;	
		КонецЕсли;					
	КонецЕсли;		
	
	Если бПродолжитьПоиск Тогда
		Если НЕ ЗначениеЗаполнено(РезДок) Тогда
			// если не нашли по идентификатору (или его не было) - то ищем по номеру...
			Запрос = Новый Запрос;
			Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПеремещениеТоваров.Ссылка
					|ИЗ
					|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
					|ГДЕ
					|	НЕ ПеремещениеТоваров.ПометкаУдаления
					|	И ПеремещениеТоваров.Дата >= &ДатаС
					|	И ПеремещениеТоваров.Номер = &Номер
					|	И ПеремещениеТоваров._5LB_ВидПередаваемогоДокумента В (&ВидыДок)
					|";        
			Запрос.УстановитьПараметр("ВидыДок", МассивВидов);
			Запрос.УстановитьПараметр("Номер", стрНомерДок);
			Запрос.УстановитьПараметр("ДатаС", НачалоГода(ТекущаяДата()));	

			РезультатЗапроса = Запрос.Выполнить();	
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					РезДок = ВыборкаДетальныеЗаписи.Ссылка;
				КонецЦикла;				
			КонецЕсли;	
		КонецЕсли;
	 КонецЕсли;	
	// если не нашли - то создаем новый
	Если НЕ ЗначениеЗаполнено(РезДок) Тогда 	
		Попытка
			Если СтрДлина(СокрЛП(стрИдентификатор)) = 36 Тогда
				
				НовыйДок = Документы.ПеремещениеТоваров.СоздатьДокумент();
				
				НовыйДок.Номер = стрНомерДок;	
				НовыйДок.Дата = ТекущаяДата();
				
	 			НовыйДок.ОтражатьВУправленческомУчете = Истина;
				//НовыйДок.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Транзит;
				НовыйДок.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;

				НовыйДок.Организация = ОбщегоНазначения5LB.ПолучитьПсевдоним("Организация", "Настройки по умолчанию");
				НовыйДок.СкладОтправитель = СкладОтправитель;
				НовыйДок.СкладПолучатель = СкладПолучатель;
				
				НовыйДок.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;
				НовыйДок.СтатусДоставки = Перечисления.СтатусПеревозки.Доставлено;

				НовыйДок._5LB_ВидПередаваемогоДокумента = ВидДок; 
				НовыйДок._5LB_ИдентификаторИБ = стрИдентификатор;
				
				НоваяСтрока = НовыйДок.Товары.Добавить();				
				
				НовыйДок.Записать(РежимЗаписиДокумента.Запись);
				
				РезДок = НовыйДок.Ссылка;
				ЭтоНовыйДок = Истина;
				
			КонецЕсли;
		Исключение
			G = 1;	
		КонецПопытки;		
	КонецЕсли;
	
	Возврат РезДок;
	
КонецФункции


// обмен - загрузка и выгрузка
Процедура ВыполнитьОбмен_УТ11(Режим=0) Экспорт
	
	Если Режим = 0 Тогда
		Обмен_Выгрузка_УТ11();		
		Обмен_Загрузка_УТ11();
	ИначеЕсли Режим = 1 Тогда
		Обмен_Выгрузка_УТ11();		
	ИначеЕсли Режим = 2 Тогда
		Обмен_Загрузка_УТ11(); 
	КонецЕсли;		
	
КонецПроцедуры

// обмен - выгрузка
Процедура Обмен_Выгрузка_УТ11(СниматьРегистрацию=Истина) Экспорт	

	
	// Необходимые переменные-параметры	
	КаталогОбмена = ПолучитьКаталогОбмена();
	ИмяФайлаПротокол = "Temp.log";
	ИмяФайлаПротоколФинал = ПолучитьИмяФайлаПротокола();	
	ЭтоЗагрузка = Ложь;
	ИмяФайлаВыгрузки = ПолучитьИмяФайла(ЭтоЗагрузка);
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();	
	ПланОбмена = ПланыОбмена.ОбменУправлениеТорговлей11;
	Узел_УТ11 = ПланОбмена.НайтиПоНаименованию("УТ11");

	стрЗаголовокЖурнал = "Обмен УТ10-УТ11";						 
	стрОбменЗаголовок = "Обмен данными УТ10 -> УТ-11 - выгрузка данных в файл";
	//ЗаписатьВФайл(ИмяФайлаПротокол,, "**************************", Ложь);
	//ЗаписатьВФайл(ИмяФайлаПротокол,, стрОбменЗаголовок, Истина);
	ЗаписьЖурналаРегистрации(стрЗаголовокЖурнал,  УровеньЖурналаРегистрации.Информация, , , стрОбменЗаголовок);

	ВидСобытия = Перечисления._5LB_СобытияОбмена.ВыгрузкаДанных;
	ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, "Обмен данными УТ10->УТ-11 - выгрузка", Ложь);
	
	// Проверки	
	бПроверка = Истина;
	Если ИмяФайлаВыгрузки = "" Тогда
		стрСообщение = "Не удалось получить имя файла выгрузки!";
		//ЗаписатьВФайл(ИмяФайлаПротокол,, стрСообщение, Ложь);
		ЗаписьЖурналаРегистрации(стрЗаголовокЖурнал,  УровеньЖурналаРегистрации.Ошибка, , , стрСообщение);
		ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрСообщение, Истина);
	 	//Возврат;
		бПроверка = Ложь;	
	КонецЕсли;  
	
	// Правила обмена
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";
	МакетПравилОбмена = ПланОбмена.ПолучитьМакет("ПравилаОбменаТекст");
   	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);        
   	Если ПустаяСтрока(ИмяВременногоФайлаПравилОбмена) Тогда
		стрСообщение = "Не удалось получить правила обмена!";
	//	ЗаписатьВФайл(ИмяФайлаПротокол,, стрСообщение, Ложь);
		ЗаписьЖурналаРегистрации(стрЗаголовокЖурнал,  УровеньЖурналаРегистрации.Ошибка, , , стрСообщение);
		ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрСообщение, Истина);
   		//Возврат;
		бПроверка = Ложь;
	КонецЕсли;
	
	// обработка обмена
    Попытка   
	  	УниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML_218.Создать();  
	Исключение 
		стрСообщение = "Не удалось открыть обработку универсального обмена данными XML!";
		//ЗаписатьВФайл(ИмяФайлаПротокол,, стрСообщение, Ложь);
		ЗаписьЖурналаРегистрации(стрЗаголовокЖурнал,  УровеньЖурналаРегистрации.Ошибка, , , стрСообщение);
		ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрСообщение, Истина);
		//Возврат;
		бПроверка = Ложь;
	КонецПопытки;
	
    Попытка   	
		// Правила обмена
    	УниверсальнаяВыгрузкаДанных.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;	
    	УниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена();	                                  
	Исключение	
    	УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);  // Удаляем временный файл правил
		стрСообщение = "Не удалось прочитать правила обмена (универсальный обмен данными XML)!";
		//ЗаписатьВФайл(ИмяФайлаПротокол,, стрСообщение, Ложь);
		ЗаписьЖурналаРегистрации(стрЗаголовокЖурнал,  УровеньЖурналаРегистрации.Ошибка, , , стрСообщение);		
		ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрСообщение, Истина);
		//Возврат;	
		бПроверка = Ложь;
	КонецПопытки;  	
	
	// переименовать файл (не занят ли?)
	// резервная копия предыдущей выгрузки (bak)
	бФайлПеремещен = Ложь;
	СчДопФайл = 0;
	//ИмяФайлаВыгрузкиРез = ИмяФайлаВыгрузки;
	Пока (НЕ бФайлПеремещен ИЛИ СчДопФайл <= 4) Цикл 	// чтоб ен зацикливать - не больше 4 раза!!!
		
		СчДопФайл = СчДопФайл + 1;		
		Попытка
			НайденныеФайлы = НайтиФайлы(КаталогОбмена, ИмяФайлаВыгрузки);
			Если НайденныеФайлы.Количество() = 0 Тогда		
				бФайлПеремещен = Истина;
				Прервать;
			Иначе
				ЗаписатьВФайл(ИмяФайлаПротокол,, "Обнаружен файл данных предыдущей выгрузки " + НайденныеФайлы[0].Имя 
						+ " (размер " +  Формат(НайденныеФайлы[0].Размер()/1048576, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0") + " Мб)",
						Ложь);
				ИмяФайлаВыгрузкиКопия = СтрЗаменить(ИмяФайлаВыгрузки, ".xml", ".bak");
				ПереместитьФайл(КаталогОбмена + ИмяФайлаВыгрузки, КаталогОбмена + ИмяФайлаВыгрузкиКопия);
				бФайлПеремещен = Истина;	
				Прервать;
			КонецЕсли; 		
		Исключение 
			// если не удалось - резервное имя
			стрИнф = "Не удалось переименовать файл " + ИмяФайлаВыгрузки + " - возможно, файл занят другим процессом!";
		//	ЗаписатьВФайл(ИмяФайлаПротокол,, стрИнф, Ложь);
			ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрИнф, Истина);
			ИмяФайлаВыгрузки = ПолучитьИмяФайлаРезерв(ЭтоЗагрузка, СчДопФайл); 		
		КонецПопытки;  	
		
	КонецЦикла;
	
	Если НЕ бФайлПеремещен 	Тогда
		ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, "Невозможно выполнить выгрузку т.к. файл(ы) выгрузки занят другим процессом!", Истина);
		бПроверка = Ложь;
	КонецЕсли;
	 
	 Если бПроверка Тогда	// проверки пройдены
	 

		// Обработка файлов - обмена и протокола
		
		// резервная копия предыдущего (вчерашнего) протокола (bak)
		ФайлыПротоколовРезервноеКопирование(ИмяФайлаПротоколФинал); 
		 
		//// резервная копия предыдущей выгрузки (bak)
		//Попытка
		//	НайденныеФайлы = НайтиФайлы(КаталогОбмена, ИмяФайлаВыгрузки);
		//	Если НайденныеФайлы.Количество() = 0 Тогда		
		//		//ЗаписатьВФайл(ИмяФайлаПротокол, "Не обнаружен файл данных для загрузки - загрузка не выполнена!", Истина);
		//		//Возврат;
		//	Иначе
		//		ЗаписатьВФайл(ИмяФайлаПротокол,, "Обнаружен файл данных предыдущей выгрузки " + НайденныеФайлы[0].Имя 
		//			+ " (размер " +  Формат(НайденныеФайлы[0].Размер()/1048576, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0") + " Мб)",
		//			Ложь);
		//		ИмяФайлаВыгрузкиКопия = СтрЗаменить(ИмяФайлаВыгрузки, ".xml", ".bak");
		//	    ПереместитьФайл(КаталогОбмена + ИмяФайлаВыгрузки, КаталогОбмена + ИмяФайлаВыгрузкиКопия);	
		//	КонецЕсли; 		
		//Исключение 
		//КонецПопытки;  	
		
		// записать в лог - измененные объекты	
		СписокИзменений = ПланОбмена.ПолучитьСписокИзменений();	
		стрСообщение = "измененные объекты УТ10 -> УТ-11 (зарегистрированы в плане обмена) :";
		//ЗаписатьВФайл(ИмяФайлаПротокол,, стрСообщение, Ложь);	
		ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрСообщение, Ложь);	

		Для Каждого ТекОбъектИзм Из СписокИзменений Цикл
		//Если ЗначениеЗаполнено(ПланОбмена
			стр = Строка(ТекОбъектИзм.Ключ) + " = " + Строка(ТекОбъектИзм.Значение.Количество()) 
				+ ?(ТекОбъектИзм.Значение.Количество() > 0, " 1-е знач-е """ + 
				Строка(ТекОбъектИзм.Значение[0]) + """", "");
			//ЗаписатьВФайл(ИмяФайлаПротокол,, стр);
			ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стр, Ложь);

			Если ТекОбъектИзм.Значение.Количество() > 0 Тогда
				Для Каждого ТекЭлемент Из ТекОбъектИзм.Значение Цикл
					//ЗаписатьВФайл(ИмяФайлаПротокол,, "   " + Строка(ТекЭлемент));
					ЗаписатьВПротоколОбмена(ВидСобытия, ТекЭлемент.Значение, "- зарегистрирован, выгружается", Ложь, ТекОбъектИзм.Ключ);
				КонецЦикла;
			КонецЕсли;		
		КонецЦикла;
		
		// Cписок зарегистрированных изменений	 	
	   // СтруктураОтбор = ПланОбмена.ПолучитьСписокИзменений();		   

	   
		// Проверки пройдены - универсальный обмен данными

	    УниверсальнаяВыгрузкаДанных.РежимОбмена = "Выгрузка";     	
	    УниверсальнаяВыгрузкаДанных.ВыгружатьТолькоРазрешенные = Истина;
	    УниверсальнаяВыгрузкаДанных.НепосредственноеЧтениеВИБПриемнике = Ложь;	
		УниверсальнаяВыгрузкаДанных.ЭтоИнтерактивныйРежим = Ложь;                       				
		// Протокол
	    УниверсальнаяВыгрузкаДанных.ВыводВПротоколИнформационныхСообщений = Истина;
	    УниверсальнаяВыгрузкаДанных.ВыводВПротоколСообщенийОбОшибках = Истина;

	  
		Если НЕ СниматьРегистрацию Тогда
		// Не удалять регистрацию
			УниверсальнаяВыгрузкаДанных.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0; 	
		Иначе
		// удаление изменений только для метаданныех выгруженных объектов первого уровня
		//	//УниверсальнаяВыгрузкаДанных.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 1; 	
		// Удалить регистрацию только для выгруженных метаданных
			УниверсальнаяВыгрузкаДанных.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 2;
		КонецЕсли;		

		//ЗаписьЖурналаРегистрации("Обмен_УТ11", , , ,КаталогОбмена + ИмяФайлаВыгрузки,);
		//ЗаписьЖурналаРегистрации("Обмен_УТ11",  УровеньЖурналаРегистрации.Информация, , ,КаталогОбмена + ИмяФайлаВыгрузки);
	    
	   //  установить флаги выгрузки для правил
	    ТаблицаПравилВыгрузки = УниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки;	
		
	    Для Каждого ТекСтр Из ТаблицаПравилВыгрузки.Строки Цикл
	    	
	    	Если ТекСтр.ЭтоГруппа Тогда
	    		Для Каждого ТекСтрПодч Из ТекСтр.Строки Цикл	// 2 уровня - Справочники, Регистры + элементы (правила)
	    			Если ТекСтрПодч.ЭтоГруппа Тогда
	    				ТекСтрПодч.Включить = 0;
	    			Иначе
	    				ВключитьВыгрузкуПоИмениПравила_УТ11(ТекСтрПодч, Узел_УТ11);					
	    			КонецЕсли;			
	    		КонецЦикла;
	    	Иначе
	    		ТекСтр.Включить = 0;
	    	КонецЕсли;
	    	
	    КонецЦикла;

	    
	    // Выгружаем данные	    
		Попытка
			УниверсальнаяВыгрузкаДанных.ИмяФайлаОбмена =  КаталогОбмена + ИмяФайлаВыгрузки;
			УниверсальнаяВыгрузкаДанных.ВыполнитьВыгрузку();
		
			стрИнф = "Выгрузка данных выполнена успешно";
		 	ЗаписатьВФайл(ИмяФайлаПротокол,, стрИнф, Ложь);		
			//ЗаписатьВФайл(ИмяФайлаПротокол,, "", Истина);
			ЗаписьЖурналаРегистрации(стрОбменЗаголовок,  УровеньЖурналаРегистрации.Информация, , ,стрИнф); 
			ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрИнф, Ложь);
			
	 	Исключение
		 	стрИнф = "Произошла ошибка! Выгрузка данных не выполнена!";
		 	//ЗаписатьВФайл(ИмяФайлаПротокол,, стрОбменЗаголовок + " : " + стрИнф, Истина);
			ЗаписьЖурналаРегистрации(стрОбменЗаголовок,  УровеньЖурналаРегистрации.Ошибка, , ,стрИнф); 
			ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрИнф, Истина);
			
		КонецПопытки;
		
	КонецЕсли;	// проверки пройдены	

	// Финал - Копирование рабочего лога в файл копии
	Попытка
		КопироватьФайл(КаталогОбмена + ИмяФайлаПротокол, КаталогОбмена + ИмяФайлаПротоколФинал);	
	Исключение
	
	КонецПопытки;

КонецПроцедуры

// обмен - загрузка
Процедура Обмен_Загрузка_УТ11() Экспорт
	
	// Необходимые переменные-параметры	
	КаталогОбмена = ПолучитьКаталогОбмена();	
	ИмяФайлаПротокол = "Temp.log";
	ИмяФайлаПротоколФинал = ПолучитьИмяФайлаПротокола();
	ЭтоЗагрузка = Истина;
	ИмяФайлаЗагрузки = ПолучитьИмяФайла(ЭтоЗагрузка);
	//ПланОбмена = ПланыОбмена.ОбменУправлениеТорговлей11;	 
	//Узел_УТ10 = ПланОбмена.НайтиПоНаименованию("УТ10");
	//Узел_УТ11 = ПланОбмена.НайтиПоНаименованию("УТ11");
	стрЗаголовокЖурнал = "Обмен УТ10-УТ11";			
	стрОбменЗаголовок = "Обмен данными УТ10 <- УТ-11 - загрузка данных из файла";
	ЗаписатьВФайл(ИмяФайлаПротокол,, "**************************", Ложь);
	ЗаписатьВФайл(ИмяФайлаПротокол,, стрОбменЗаголовок, Истина);
	
	Узел_УТ11 = ПланыОбмена.ОбменУправлениеТорговлей11.НайтиПоНаименованию("УТ11");
	ВидСобытия = Перечисления._5LB_СобытияОбмена.ЗагрузкаДанных;
	ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, "Обмен данными УТ10<-УТ-11 - загрузка данных из файла", Ложь);
	
	// Проверки		
	бПроверка = Истина;
	Если ИмяФайлаЗагрузки = "" Тогда	
		стрСообщение = "Не удалось получить имя файла загрузки!";
		ЗаписатьВФайл(ИмяФайлаПротокол,, стрСообщение, Ложь);
		ЗаписьЖурналаРегистрации(стрЗаголовокЖурнал,  УровеньЖурналаРегистрации.Ошибка, , , стрСообщение);
	 	//Возврат;
		бПроверка = Ложь;
	КонецЕсли; 
	
	НайденныеФайлы = НайтиФайлы(КаталогОбмена, ИмяФайлаЗагрузки);
	Если НайденныеФайлы.Количество() = 0 Тогда
		стрСообщение = "Не найдено ни одного файла для загрузки данных " +  КаталогОбмена + ИмяФайлаЗагрузки + "!";
		ЗаписатьВФайл(ИмяФайлаПротокол,, стрСообщение, Ложь);
		ЗаписьЖурналаРегистрации(стрЗаголовокЖурнал,  УровеньЖурналаРегистрации.Ошибка, , , стрСообщение);
	//	Возврат;
		бПроверка = Ложь;
		ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11,стрСообщение, Ложь);
	КонецЕсли; 
	
	// 21.06.17 Вялов - "запасной" вариант
	// если файл недоступен и их несколько
	Попытка
		НайденныеФайлы = НайтиФайлы(КаталогОбмена, СтрЗаменить(ИмяФайлаЗагрузки, ".xml", "*.xml"));
		Если НайденныеФайлы.Количество() > 0 Тогда	
			Дт = Дата(1, 1, 1);
			Для Каждого ТекФайл Из НайденныеФайлы Цикл
				ДтФайла = ТекФайл.ПолучитьВремяИзменения();
				Если ДтФайла > Дт Тогда
					Дт = ДтФайла;
					ИмяФайлаЗагрузки = ТекФайл.Имя;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	Исключение 
		бПроверка = Ложь;
	КонецПопытки;


    Попытка   
	  	УниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML_218.Создать(); 
		УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	Исключение 
		стрСообщение = "Не удалось открыть обработку универсального обмена данными XML!";
		ЗаписатьВФайл(ИмяФайлаПротокол,, стрСообщение, Ложь);
		ЗаписьЖурналаРегистрации(стрЗаголовокЖурнал,  УровеньЖурналаРегистрации.Ошибка, , , стрСообщение);
		//Возврат;
		бПроверка = Ложь;
		ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрСообщение, Истина);
	КонецПопытки;         
    //УниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML_218.Создать();  

	
	Если бПроверка Тогда	// проверки пройдены
		
		// Проверки пройдены - универсальный обмен данными             	
		УниверсальнаяВыгрузкаДанных.РежимОбмена = "Загрузка";           
	   	УниверсальнаяВыгрузкаДанных.ЗагружатьДанныеВРежимеОбмена = Истина;
	   	УниверсальнаяВыгрузкаДанных.ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты = Истина;
	   	УниверсальнаяВыгрузкаДанных.ОбъектыПоСсылкеЗагружатьБезПометкиУдаления = Истина;
	   	УниверсальнаяВыгрузкаДанных.ОптимизированнаяЗаписьОбъектов = Истина;
	   	УниверсальнаяВыгрузкаДанных.ЗаписыватьРегистрыНаборамиЗаписей = Истина;   	
		УниверсальнаяВыгрузкаДанных.ЭтоИнтерактивныйРежим = Ложь;	
		
		// загрузка данных
		Попытка
		    УниверсальнаяВыгрузкаДанных.ИмяФайлаОбмена = КаталогОбмена + ИмяФайлаЗагрузки;
			УниверсальнаяВыгрузкаДанных.ВыполнитьЗагрузку();
			
			стрИнф = "Загрузка данных выполнена успешно";
		 	ЗаписатьВФайл(ИмяФайлаПротокол,, стрИнф, Ложь);		
			ЗаписатьВФайл(ИмяФайлаПротокол,, "", Истина);
			ЗаписьЖурналаРегистрации(стрОбменЗаголовок,  УровеньЖурналаРегистрации.Информация, , ,стрИнф); 
			ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрИнф, Ложь);

			Если НайденныеФайлы.Количество() > 0 Тогда		
		//	//	ЗаписатьВФайл(ИмяФайлаПротокол, "Обнаружен файл данных для загрузка " + НайденныеФайлы[0].Имя 
		//	//		+ " (размер " +  Формат(НайденныеФайлы[0].Размер()/1048576, "ЧЦ=15; ЧДЦ=; ЧГ=3,0") + ")",
		//	//		Истина);
				ИмяФайлаЗагрузкиКопия = СтрЗаменить(ИмяФайлаЗагрузки, ".xml", ".bak");
			    ПереместитьФайл(КаталогОбмена + ИмяФайлаЗагрузки, КаталогОбмена + ИмяФайлаЗагрузкиКопия);	
			КонецЕсли;
			
		//	ЗаписатьВФайл(ИмяФайлаПротокол, "Загрузка УТ10 -> УТ-11 выполнена успешно", Истина);		
		Исключение
		 	стрИнф = "Произошла ошибка! Загрузка данных не выполнена!";
		 	ЗаписатьВФайл(ИмяФайлаПротокол,, стрОбменЗаголовок + " : " + стрИнф, Истина);
			ЗаписьЖурналаРегистрации(стрОбменЗаголовок,  УровеньЖурналаРегистрации.Ошибка, , ,стрИнф); 
			ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрИнф, Истина);

		//	ЗаписатьВФайл(ИмяФайлаПротокол,, "Загрузка УТ10 -> УТ-11 - произошла ошибка. Загрузка не выполнена!", Истина);
		КонецПопытки;		
		
	
	КонецЕсли;	// проверки пройдены

	// Финал - Копирование рабочего лога в файл копии
	Попытка
		КопироватьФайл(КаталогОбмена + ИмяФайлаПротокол, КаталогОбмена + ИмяФайлаПротоколФинал);	
	Исключение
	
	КонецПопытки;
		
КонецПроцедуры

// регламент обработки загруженных при обмене объектов
Процедура Обмен_Регламент_УТ11(ПарамВыполнения="") Экспорт
	
	// период (интервал) документов
	ДатаС = НачалоДня(ТекущаяДата()) - 90*24*60*60;    // за последние 90 дней
	ДатаПо = КонецДня(ТекущаяДата());				   // конец текущего дня 	
	СкладОсн = Справочники.Склады.НайтиПоКоду("000000005");
	
	
	// Необходимые переменные-параметры	
	КаталогОбмена = ПолучитьКаталогОбмена();	
	ИмяФайлаПротокол = "Temp.log";
	ИмяФайлаПротоколФинал = ПолучитьИмяФайлаПротокола();
	
	стрЗаголовокЖурнал = "Обмен УТ10-УТ11";			
	стрОбменЗаголовок = "Обмен данными УТ10 <- УТ-11  - обработка документов";
	ЗаписатьВФайл(ИмяФайлаПротокол,, "**************************", Ложь);
	ЗаписатьВФайл(ИмяФайлаПротокол,, стрОбменЗаголовок, Истина);
	
	Узел_УТ11 = ПланыОбмена.ОбменУправлениеТорговлей11.НайтиПоНаименованию("УТ11");
	ВидСобытия = Перечисления._5LB_СобытияОбмена.Регламент;
	стрИнф = "Выполнение регламента обмена данными УТ10-УТ-11";
	Если ЗначениеЗаполнено(ПарамВыполнения) Тогда
		стрИнф = стрИнф + " (ручной запуск " + СокрЛП(Строка(ПарамВыполнения)) + ")";
	Иначе
		стрИнф = стрИнф + " (автоматический запуск)";
	КонецЕсли;
	ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрИнф, Ложь);	


	// Регламент	
	
	// *************************************************
	// Обработка перемещений - если нет идентификатора
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка,
		|	ПеремещениеТоваров.Проведен
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	НЕ ПеремещениеТоваров.ПометкаУдаления
		|	И ПеремещениеТоваров.Дата >= &Дата
		|	И ПеремещениеТоваров._5LB_ИдентификаторИБ = """"
		|";
	Запрос.УстановитьПараметр("Дата", ДатаПо - 3*24*60*60);	
	РезультатЗапроса = Запрос.Выполнить();                 
	Выборка = РезультатЗапроса.Выбрать(); 
	Если Выборка.Количество() > 0 Тогда
		ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11,  "Обработка перемещений (" + Формат(Выборка.Количество(), "ЧЦ=12; ЧДЦ=; ЧН=0; ЧГ=0") + ")", Ложь);		
		Пока Выборка.Следующий() Цикл		
			Попытка
				Док = Выборка.Ссылка.ПолучитьОбъект();
				Док._5LB_ИдентификаторИБ = Строка(Выборка.Ссылка.УникальныйИдентификатор());
				Если Выборка.Проведен Тогда
					Реж = РежимЗаписиДокумента.Проведение;
					стрРеж = "(пере)проведен";
				Иначе
					Реж = РежимЗаписиДокумента.Запись;
					стрРеж = "записан";
				КонецЕсли;
				Док.Записать(Реж);
				//ЗаписатьВФайл(ИмяФайлаПротокол, Строка(Док) + " + " + стрРеж, Ложь);
				ЗаписатьВПротоколОбмена(ВидСобытия, Док,  Строка(Док) + " + " + стрРеж, Ложь);
			Исключение
				//ЗаписатьВФайл(ИмяФайлаПротокол, Строка(Док) + " - неудачная попытка проведения или записи!", Ложь);
				//ЗаписатьВФайл(ИмяФайлаПротокол, ОписаниеОшибки(), Ложь);	
				ЗаписатьВПротоколОбмена(ВидСобытия, Док, Строка(Док) + " - неудачная попытка проведения или записи!", Истина);
			КонецПопытки; 	
		КонецЦикла;
	КонецЕсли;
	
	
	
	// *************************************************
	// Обработка перемещений - Принято - Приходные ордера
	//ЗаписатьВФайл(ИмяФайлаПротокол,, "Обработка перемещений и приходных ордеров", Истина);
	//ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъект,  "Обработка перемещений и приходных ордеров", Ложь);
	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ПеремещениеТоваровТовары.Ссылка,
//		|	ПеремещениеТоваровТовары.Ссылка.Дата КАК ПеремещениеДата,	
//		|	ПеремещениеТоваровТовары.Ссылка.Номер КАК ПеремещениеНомер,				
//		|	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
//		|	ПеремещениеТоваровТовары.Номенклатура,
//		|	ПеремещениеТоваровТовары.КоличествоМест,
//		|	ПеремещениеТоваровТовары.Коэффициент,
//		|	ПеремещениеТоваровТовары.Количество,
//		|	ПеремещениеТоваровТовары.ЕдиницаИзмерения,
//		|	ПеремещениеТоваровТовары.КоличествоСобрано,
//		|	ПеремещениеТоваровТовары.КоличествоПринято
//		|ПОМЕСТИТЬ втПеремещения
//		|ИЗ
//		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
//		|ГДЕ
//		|	НЕ ПеремещениеТоваровТовары.Ссылка.Проведен
//		|	И НЕ ПеремещениеТоваровТовары.Ссылка.ПометкаУдаления
//		|	И ПеремещениеТоваровТовары.Ссылка.Дата >= &ДатаС
//		|	И ПеремещениеТоваровТовары.Ссылка.Дата <= &ДатаПо
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	Ордера.Распоряжение,
//		|	Ордера.Номенклатура,
//		|	СУММА(Ордера.Количество) КАК Количество,
//		|	СУММА(Ордера.КоличествоЕд) КАК КоличествоБазовые
////		|	Ордера.ЕдиницаИзмерения
//		|ПОМЕСТИТЬ втОрдера
//		|ИЗ (	
//		|ВЫБРАТЬ
//		|	ТОрдера.Распоряжение,
//		|	ТОрдера.Номенклатура,
//		|   ТОрдера.Количество,
//		|	(ТОрдера.Количество * ТОрдера.Коэффициент) КАК КоличествоЕд,
//		|	ТОрдера.ЕдиницаИзмерения	
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		_5LB_ПриходныйОрдерНаТовары.Ссылка.Распоряжение КАК Распоряжение,
//		|		_5LB_ПриходныйОрдерНаТовары.Номенклатура КАК Номенклатура,
//		|		ВЫБОР
//		|			КОГДА _5LB_ПриходныйОрдерНаТовары.ЕдиницаИзмерения Есть NULL ТОГДА 1
//		|			КОГДА _5LB_ПриходныйОрдерНаТовары.ЕдиницаИзмерения = &ЕдПустая ТОГДА 1
//		|			ИНАЧЕ _5LB_ПриходныйОрдерНаТовары.ЕдиницаИзмерения.Коэффициент
//		|	     КОНЕЦ КАК Коэффициент,
//		|		_5LB_ПриходныйОрдерНаТовары.Количество КАК Количество,
//		|		_5LB_ПриходныйОрдерНаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
//		|	ИЗ
//		|		Документ._5LB_ПриходныйОрдерНаТовары.Товары КАК _5LB_ПриходныйОрдерНаТовары
//		|	ГДЕ
//		|		НЕ _5LB_ПриходныйОрдерНаТовары.Ссылка.ПометкаУдаления
//		|		И  _5LB_ПриходныйОрдерНаТовары.Ссылка.Распоряжение = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка) ИЛИ
//		|		 (_5LB_ПриходныйОрдерНаТовары.Ссылка.Распоряжение.Дата >= &ДатаС
//		|		  И _5LB_ПриходныйОрдерНаТовары.Ссылка.Распоряжение.Дата <= &ДатаПо)
//// ! 07.03.17 только необработанные - т.е. "прилетевшие" с обменом и не измененные
//		|		И _5LB_ПриходныйОрдерНаТовары.Ссылка.ДатаОбмена <> _5LB_ПриходныйОрдерНаТовары.Ссылка.ДатаИзменения 
//		|	     ) КАК ТОрдера
//		|	) КАК Ордера
//		|СГРУППИРОВАТЬ ПО
//		|	Ордера.Распоряжение,
//		|	Ордера.Номенклатура,
//		|	Ордера.ЕдиницаИзмерения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	Перемещение.Ссылка КАК ДокументПеремещение,
//		|	Перемещение.ПеремещениеНомер,		
//		|	Перемещение.ПеремещениеДата,		
//		|	Перемещение.НомерСтроки,
//		|	Перемещение.Номенклатура,
//		|	Перемещение.КоличествоМест,
//		|	Перемещение.Коэффициент,
//		|	Перемещение.Количество,
//		|	Перемещение.Коэффициент КАК Коэффициент,
//		|	Перемещение.ЕдиницаИзмерения,
//		|	Перемещение.КоличествоСобрано,
//		|	Перемещение.КоличествоПринято,
//		|	Ордера.Номенклатура КАК Номенклатура_Приходный,
//		|	Ордера.КоличествоБазовые КАК Количество_Приходный
//		//|	Ордера.ЕдиницаИзмерения.Коэффициент КАК Коэффициент_Приходный,
//		//|	Ордера.ЕдиницаИзмерения КАК ЕдиницаИзмерения_Приходный
//		|ИЗ
//		|	втПеремещения КАК Перемещение
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОрдера КАК Ордера
//		|		ПО (Ордера.Распоряжение = Перемещение.Ссылка)
//		|			И (Ордера.Номенклатура = Перемещение.Номенклатура)
//		|УПОРЯДОЧИТЬ ПО		
//		|	Перемещение.ПеремещениеДата,
//		|	Перемещение.ПеремещениеНомер,		
//		|	Перемещение.НомерСтроки
//		|";
//	
//	Запрос.УстановитьПараметр("ДатаС", 		ДатаС); 	// за последние 40 дней
//	Запрос.УстановитьПараметр("ДатаПо", 	ДатаПо);	
//	Запрос.УстановитьПараметр("ЕдПустая", 	Справочники.ЕдиницыИзмерения.ПустаяСсылка());	
//	
//	РезультатЗапроса = Запрос.Выполнить(); 	
//	тзДанныеПринято = РезультатЗапроса.Выгрузить();	
//	тзПеремещения = тзДанныеПринято.Скопировать();
//	тзПеремещения.Свернуть("ДокументПеремещение, ПеремещениеДата, ПеремещениеНомер");
//	тзПеремещения.Сортировать("ПеремещениеДата, ПеремещениеНомер");
//	тзПеремещения.Колонки[0].Имя = "Ссылка";
	

	ЗапросПО = Новый Запрос;
	ЗапросПО.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдер.Ссылка,
		|	ПриходныйОрдер.Дата,
		|	ПриходныйОрдер.ДатаОбмена,
		|	ПриходныйОрдер.ДатаИзменения,
		|	ПриходныйОрдер.Распоряжение КАК ДокументПеремещение
		|ИЗ
		|	Документ._5LB_ПриходныйОрдерНаТовары КАК ПриходныйОрдер
		|	ГДЕ
		|		НЕ ПриходныйОрдер.ПометкаУдаления
		|		И ПриходныйОрдер.Дата МЕЖДУ &ДатаС И &ДатаПо
		|
		|		И (ПриходныйОрдер.Распоряжение = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
		|			ИЛИ ПриходныйОрдер.ДатаИзменения = ДАТАВРЕМЯ(1,1,1))
		//|	 	ИЛИ (ПриходныйОрдер.Распоряжение.Дата >= &ДатаС
		//|		 И ПриходныйОрдер.Распоряжение.Дата <= &ДатаПо))         	
	// ! 07.03.17 только необработанные - т.е. "прилетевшие" с обменом и
// ! 07.03.17 только необработанные - т.е. "прилетевшие" с обменом и не измененные
//		|		ИЛИ ПриходныйОрдер.ДатаОбмена > ПриходныйОрдер.ДатаИзменения 
		//|		ИЛИ ПриходныйОрдер.ДатаИзменения = ДАТАВРЕМЯ(1,1,1))
		//|		И ПриходныйОрдер.ДатаИзменения = ДАТАВРЕМЯ(1,1,1))
		|УПОРЯДОЧИТЬ ПО
		|	ПриходныйОрдер.Дата
		|";
	//ЗапросПО.УстановитьПараметр("ДатаС", 	ДатаС); 	
	ЗапросПО.УстановитьПараметр("ДатаС", 	ДатаПо - 20*24*60*60); 	// пока - за последние 20 дней
	ЗапросПО.УстановитьПараметр("ДатаПо", 	ДатаПо);		
	тзПО = ЗапросПО.Выполнить().Выгрузить();
	
	//Если тзПеремещения.Количество() > 0 Тогда		
	//	ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11,  "Обработка приходных ордеров (" + Формат(тзПеремещения.Количество(), "ЧЦ=12; ЧДЦ=; ЧН=0; ЧГ=0") + ")", Ложь);	
	Если тзПО.Количество() > 0 Тогда		
		ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11,  "Обработка приходных ордеров (" + Формат(тзПО.Количество(), "ЧЦ=12; ЧДЦ=; ЧН=0; ЧГ=0") + ")", Ложь);	
		
		// по обрабатываем приходным
		Для Каждого ТекСтрПО Из тзПО Цикл		
			
			ТекДок = ТекСтрПО.Ссылка;
			
			стрНомерРасп 		= СокрЛП(ТекДок.РаспоряжениеНомер);
			стрНомер			= СокрЛП(ТекДок.Номер);	 			
			Если Лев(стрНомерРасп, 3) = "И-М" Тогда
				стрНомерПоиска = стрНомерРасп;
			Иначе
				стрНомерПоиска = стрНомер;
			КонецЕсли;		
			
			стрИдентификатор 	= ТекДок._5LB_ИдентификаторИБ;
			ВидДок              = ТекДок.ВидПередаваемогоДокумента;
			бЭтоНовый			= Ложь;   			
			
			ДокОбъектСсылка = НайтиСоздатьПеремещение(стрНомерПоиска, стрИдентификатор, ВидДок, бЭтоНовый, ТекДок.СкладОтправитель, ТекДок.СкладПолучатель);
	
		//Для Каждого ТекДок Из тзПеремещения Цикл		
			
			//
			//СтруктураПоиска = Новый Структура("ДокументПеремещение");
			//СтруктураПоиска.Вставить("ДокументПеремещение", ТекДок.Ссылка);
			//МассивНайденныхСтрок = тзДанныеПринято.НайтиСтроки(СтруктураПоиска); 
			
			// если есть в списке перемещения=ордера 
			//Если МассивНайденныхСтрок.Количество() > 0 Тогда			
			Если НЕ ЗначениеЗаполнено(ДокОбъектСсылка) Тогда
				ЗаписатьВПротоколОбмена(ВидСобытия, ТекДок,  "Не найдено основание-перемещение и неудачная попытка создания нового! (" + стрНомер + ")", Истина);	
	            бУспешноОбработан = Ложь;
				
			Иначе
				
				бУспешноОбработан = Истина;
				
				//ДокОбъект = ТекДок.ССылка.ПолучитьОбъект();
				ДокОбъект = ДокОбъектСсылка.ПолучитьОбъект();
				ДокОбъект._5LB_ВидПередаваемогоДокумента = ВидДок;
				ДокОбъект._5LB_НомерИсточника = стрНомерРасп;
				Если бЭтоНовый Тогда
					ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Транзит; //26.04.2017, Юра
				КонецЕсли;
				
				// проверка и удаление пустых строк
				КолВсегоСтрока = ДокОбъект.Товары.Количество();
				ТекСтр = КолВсегоСтрока - 1;
				Пока ТекСтр >= 0 Цикл
					ТекСтрПремещения = ДокОбъект.Товары[ТекСтр];
					Если НЕ ЗначениеЗаполнено(ТекСтрПремещения.Номенклатура) Тогда
						ДокОбъект.Товары.Удалить(ТекСтр);
                       КонецЕсли;
					ТекСтр = ТекСтр - 1;
				КонецЦикла;		
				// если строк нет - заполнить из ордера
				Если ДокОбъект.Товары.Количество() = 0 Тогда
					ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
					Для Каждого ТекСтр Из ТекДок.Товары Цикл
						ТекСтрПремещения = ДокОбъект.Товары.Добавить();
	                    ЗаполнитьЗначенияСвойств(ТекСтрПремещения, ТекСтр);
						Если ЗначениеЗаполнено(ТекСтр.ЕдиницаИзмерения) Тогда
							ТекСтрПремещения.Коэффициент = ТекСтр.ЕдиницаИзмерения.Коэффициент;
						Иначе
							ТекСтрПремещения.Коэффициент = 1;
						КонецЕсли;						
					КонецЦикла;
				// иначе - проверить - все ли есть?
				Иначе
					// если нет - то добавить недостающие
					Для Каждого ТекСтр Из ТекДок.Товары Цикл
						бЕстьПозиция = Ложь;
						Для Каждого ТекСтрПремещения Из ДокОбъект.Товары Цикл
							Если ТекСтр.Номенклатура = ТекСтрПремещения.Номенклатура Тогда
								бЕстьПозиция = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если НЕ бЕстьПозиция Тогда
							ТекСтрПремещения = ДокОбъект.Товары.Добавить();
	                    	ЗаполнитьЗначенияСвойств(ТекСтрПремещения, ТекСтр);
						КонецЕсли;
					КонецЦикла;

				КонецЕсли;

				
				Для Каждого ТекСтр Из ТекДок.Товары Цикл
				//Для Каждого ТекСтрПоиска Из МассивНайденныхСтрок Цикл
				
					Если ТекСтр.ЕдиницаИзмерения = NULL Тогда Коэф = 1
					ИначеЕсли ТекСтр.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка() Тогда Коэф = 1
					Иначе Коэф = ТекСтр.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;					
					Количество_Приходный = ТекСтр.Количество * Коэф; 
					
									
					Для Каждого ТекСтрПремещения Из ДокОбъект.Товары Цикл
						
						//ТекСтрПремещения = ДокОбъект.Товары[ТекСтрПоиска.НомерСтроки - 1];
						
						Если ТекСтр.Номенклатура = ТекСтрПремещения.Номенклатура Тогда
							
							КолПринято = 0;
							
							Попытка
								КолПринятоВЕдДокумента = Количество_Приходный / ТекСтрПремещения.Коэффициент;					 
							Исключение
								КолПринятоВЕдДокумента = Количество_Приходный;
							КонецПопытки;
							
							Если КолПринятоВЕдДокумента = Цел(КолПринятоВЕдДокумента) Тогда
								КолПринято = КолПринятоВЕдДокумента;
							Иначе
								КолПринято = Цел(КолПринятоВЕдДокумента);
							//Если ТекСтр.ЕдиницаИзмерения = ТекСтрПоиска.ЕдиницаИзмерения Тогда
							//	КолПринято = ТекСтрПоиска.Количество_Приходный;
							//Иначе
							//	Если ТекСтрПоиска.Коэффициент_Приходный > 0 Тогда
							//		КолПринято = ТекСтрПоиска.Количество_Приходный * (ТекСтрПоиска.Коэффициент / ТекСтрПоиска.Коэффициент_Приходный);
							//	Иначе
							//		 КолПринято = ТекСтрПоиска.Количество_Приходный;
							//	КонецЕсли;
							КонецЕсли;
							Если  КолПринято > 0 Тогда						
								ТекСтрПремещения.КоличествоПринято = КолПринято;
								Если ТекСтрПремещения.КоличествоСобрано = 0 Тогда
									ТекСтрПремещения.КоличествоСобрано = КолПринято;
			                    КонецЕсли;
							КонецЕсли;	
							
							Прервать;
						КонецЕсли;	
						
					КонецЦикла;             					
				КонецЦикла;
				
				Если ДокОбъект.Товары.Итог("КоличествоПринято") > 0 Тогда
					// проверка - отражение в УУ или БУ
					Если (НЕ ДокОбъект.ОтражатьВУправленческомУчете И НЕ ДокОбъект.ОтражатьВБухгалтерскомУчете) Тогда
						 ДокОбъект.ОтражатьВУправленческомУчете = Истина;
					КонецЕсли;
					// попытка записи документа 
					Попытка
						ДокОбъект.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;
						ДокОбъект.СтатусДоставки = Перечисления.СтатусПеревозки.Доставлено;
						
						////Распоряжение пытаться сразу проводить от Иванова Ивана (так как при проведении перемещения теперь расхождения обрабатываются) 20.04.2017, Юра
						//Попытка
						ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
						//	//ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " + проведен", Ложь);//26.04.2017, Юра
						ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъект,  Строка(ДокОбъект) + " - проведен", Ложь);
						//Исключение
						//	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
						//	//ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " + записан", Ложь);//26.04.2017, Юра
						//	ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъект,  Строка(ДокОбъект) + " - неуведен", Истина);
						бУспешноОбработан = Истина;
						//КонецПопытки;
					Исключение
						бУспешноОбработан = Ложь;
						ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъект,  Строка(ДокОбъект) + " - неудачная попытка проведения!", Истина);
					КонецПопытки;
					
					Если НЕ бУспешноОбработан Тогда
						Попытка
							ДокОбъект.Записать(РежимЗаписиДокумента.Запись);					
							ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъект,  Строка(ДокОбъект) + " - записан", Истина);
						Исключение
							бУспешноОбработан = Ложь;
							ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъект,  Строка(ДокОбъект) + " - неудачная попытка записи документа!", Истина);
						КонецПопытки;
					Иначе
					//	ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъект,  Строка(ДокОбъект) + " - записан", Истина);
					КонецЕсли;

				КонецЕсли;	
				
				Если бУспешноОбработан Тогда
					// 13.03.17 Вялов  - если все (не ТМЦ) приняты!
					ЕстьРасхождение = Ложь;			
					Для Каждого ТекСтр Из ДокОбъект.Товары Цикл
						Если (НЕ ТекСтр.Номенклатура._5LB_НеУчаствуетВСинхронизации
							И НЕ ТекСтр.Номенклатура.Родитель._5LB_НеУчаствуетВСинхронизации) Тогда
							
							Если ТекСтр.Количество <>  ТекСтр.КоличествоПринято Тогда	// есть расхождение (не ТМЦ)
								ЕстьРасхождение = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ ЕстьРасхождение Тогда	 // если нет расхождений - провести
						Попытка
							ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
							//ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " + проведен", Ложь);						
							ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъект,  Строка(ДокОбъект) + " - проведен", Истина);			
						Исключение
							//ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
							ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъект, Строка(ДокОбъект) + " - неудачная попытка проведения!", Истина);
							бУспешноОбработан = Ложь;
						КонецПопытки;	
					КонецЕсли;		
					
				КонецЕсли;
				
			КонецЕсли;	
			// если есть в списке перемещения=ордера 
			
			Если бУспешноОбработан Тогда        	// Если только все прошло успешно (перемещенние обработано!)
				// обработка приходных ордеров
				//МассивНайденныхСтрокПО = тзПО.НайтиСтроки(СтруктураПоиска); 
				//Если МассивНайденныхСтрокПО.Количество() > 0 Тогда			
				//	Для Каждого ТекПО Из МассивНайденныхСтрокПО Цикл
				//		//Если ТекПО.ОбработанУспешно Тогда
							Попытка
								ДокОбъектПО = ТекДок.ССылка.ПолучитьОбъект();      
								Если ДокОбъектПО.ДатаОбмена = Дата(1, 1, 1) Тогда
									ДокОбъектПО.ДатаОбмена = ТекущаяДата();
								КонецЕсли;	
								ДокОбъектПО.Распоряжение = ДокОбъект.Ссылка;
								ДокОбъектПО.ДатаИзменения = ДокОбъектПО.ДатаОбмена;					
								ДокОбъектПО.Записать(РежимЗаписиДокумента.Запись);
								ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъектПО, Строка(ДокОбъектПО) + " - записан", Ложь);
							Исключение
								ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъектПО, Строка(ДокОбъектПО) + " - неудачная попытка записи!", Истина);
							//	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
							КонецПопытки;
					//	Иначе
							
					//	КонецЕсли;
				//	КонецЦикла;  			
				//КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		// по обрабатываем приходным

	КонецЕсли;
		


	
	// *************************************************
	// Обработка перемещений - Отгружено - Расходные ордера
	//ЗаписатьВФайл(ИмяФайлаПротокол, "", Ложь);	
	//ЗаписатьВФайл(ИмяФайлаПротокол,, "Расходные ордера", Истина);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	    |	Ордер.Ссылка КАК Ссылка,
	    |	Ордер.Ссылка.Номер КАК ОрдерНомер,
	    |	Ордер.Ссылка.Дата КАК Дата,
	    |	Ордер.Ссылка.Распоряжение КАК Распоряжение,	
	    |	Ордер.Ссылка.РаспоряжениеНомер КАК РаспоряжениеНомер,		
	    |	Ордер.Ссылка.СкладОтправитель,
	    |	Ордер.Ссылка.СкладПолучатель,
	    |	Ордер.Ссылка.ДатаОбмена КАК ДатаОбмена,
	    |	Ордер.Ссылка.ДатаИзменения КАК ДатаИзменения,
		|	Ордер.НомерСтроки,
	    |	Ордер.Номенклатура,
	    |	Ордер.Количество,
	    |	Ордер.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	    |ИЗ
	    |	Документ._5LB_РасходныйОрдерНаТовары.Товары КАК Ордер
	    |ГДЕ
		|	НЕ Ордер.Ссылка.ПометкаУдаления
		|	И Ордер.Ссылка.СкладПолучатель = &СкладПолучатель
		|	И Ордер.Ссылка.Дата >= &ДатаС И Ордер.Ссылка.Дата <= &ДатаПо
		|	И (Ордер.Ссылка.ДатаОбмена > Ордер.Ссылка.ДатаИзменения 
		|	  ИЛИ Ордер.Ссылка.ДатаИзменения = ДАТАВРЕМЯ(1, 1, 1))
		|УПОРЯДОЧИТЬ ПО
		|	Ордер.Ссылка.Дата, Ордер.Ссылка.Номер, Ордер.НомерСтроки
		|";	
	Запрос.УстановитьПараметр("ДатаС", 				ДатаС); 
	Запрос.УстановитьПараметр("ДатаПо", 			ДатаПо);	
	Запрос.УстановитьПараметр("СкладПолучатель", 	СкладОсн);	
	
	РезультатЗапроса = Запрос.Выполнить(); 	
	тзДанныеОтгружено = РезультатЗапроса.Выгрузить();	

	ТекНомер = "";
	РаспоряжениеСсылка = Документы.ПеремещениеТоваров.ПустаяСсылка();
	ДокОбъект = Неопределено;
	ДокОрдер = Неопределено;
	ОрганизацияПоУмолчанию = ОбщегоНазначения5LB.ПолучитьПсевдоним("Организация", "Настройки по умолчанию");
	
	
	Если тзДанныеОтгружено.Количество() > 0 Тогда
		
		ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11,  "Обработка расходных ордеров", Ложь);	
		
		Для Каждого ТекСтр Из тзДанныеОтгружено Цикл		
			
			// Если номер не совпадает с текущим
			Если ТекНомер <> ТекСтр.ОрдерНомер Тогда		
				
				Если ДокОбъект <> Неопределено Тогда
					РезОперации = ЗаписатьПеремещениеСобрано(ДокОбъект, ДокОрдер, тзДанныеОтгружено);
					Если РезОперации Тогда
						ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъект,  Строка(ДокОбъект) + " - успешно обработан ""собрано""", Ложь);	
					Иначе
						ЗаписатьВПротоколОбмена(ВидСобытия, ДокОбъект,  Строка(ДокОбъект) + " - неудачная попытка записи в статусе ""собрано""", Истина);	
					КонецЕсли;
				КонецЕсли;
				
				Попытка
					ДокОрдер = ТекСтр.Ссылка.ПолучитьОбъект();
				Исключение
					Продолжить;
				КонецПопытки;
				
				стрНомерОсн = СокрЛП(ДокОрдер.РаспоряжениеНомер);
				Если Лев(стрНомерОсн, 3) = "И-М" Тогда
					стрНомер = стрНомерОсн;
				Иначе
					стрНомер = ДокОрдер.Номер;
				КонецЕсли;
				
				// < 17.05.17 Вялов                           
				бЭтоНовый = Истина;	
				
				Если ЗначениеЗаполнено(ТекСтр.Ссылка.Распоряжение) Тогда
					// проведенные пермещения - не трогать!
					Если ТекСтр.Ссылка.Распоряжение.Проведен Тогда
						ДокОрдер.ДатаИзменения = ТекущаяДата();
						ДокОрдер.ДатаОбмена = ТекущаяДата();	
						ДокОрдер.Записать(РежимЗаписиДокумента.Запись);
						ЗаписатьВПротоколОбмена(ВидСобытия, ДокОрдер,  Строка(ДокОрдер) + " - обработан и записан", Ложь);	
						Продолжить;   
					Иначе
						ДокОбъект  = ТекСтр.Ссылка.Распоряжение.ПолучитьОбъект();
						ДокОбъект.Товары.Очистить();
					КонецЕсли;
				Иначе
					
					Попытка  				
						// < 17.05.17 Вялов - создание перемещений в УТ-10
						// Изменения в механизме - добавлена передача перемещения из магазина на основной из УТ-10
						// т.е. сначала попытаться найти перемещение, а только потом (если не найдено) - создавать
						//Если стрНомер <> "" Тогда
						//	// попробуем найти перемещение по номеру
						//	//НайденДокумент = Документы.ПеремещениеТоваров.НайтиПоНомеру(стрНомер, НачалоГода(ТекущаяДата()));
						//	// < 11.06.17 Вялов - сначала ищем по идентификатору (если он есть) - а потом по номеру
						//	ИдентификаторИБ = СокрЛП(ДокОрдер._5LB_ИдентификаторИБ);
						//	Если ИдентификаторИБ <> "" Тогда						
						//		НайденДокумент = ОбщегоНазначения5LB.НайтиДокументПоРеквизиту("ПеремещениеТоваров", "_5LB_ИдентификаторИБ", ИдентификаторИБ);
						//		Если НайденДокумент = Документы.ПеремещениеТоваров.ПустаяСсылка() Тогда
						//			НайденДокумент = ОбщегоНазначения5LB.НайтиДокументПоНомеру("ПеремещениеТоваров", стрНомер);
						//		КонецЕсли;		
						//	Иначе
						//	// 11.06.17 Вялов - сначала ищем по идентификатору (если он есть) - а потом по номеру >
						//		НайденДокумент = ОбщегоНазначения5LB.НайтиДокументПоНомеру("ПеремещениеТоваров", стрНомер);
						//	// < 11.06.17 Вялов - сначала ищем по идентификатору (если он есть) - а потом по номеру
						//	КонецЕсли;	
						//	// 11.06.17 Вялов - сначала ищем по идентификатору (если он есть) - а потом по номеру >
						//	Если НайденДокумент = Документы.ПеремещениеТоваров.ПустаяСсылка() Тогда
						//		// не найден
						//		ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
						//	Иначе	
						//		ДокОбъект = НайденДокумент.Ссылка.ПолучитьОбъект();	
						//		бЭтоНовый = Ложь;
						//	КонецЕсли;															
						//Иначе
						//	стрНомер =  ДокОрдер.Номер;
						//	ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
						//КонецЕсли;
		//				ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
						// 17.05.17 Вялов >	
						
						стрИдентификатор 	= СокрЛП(ДокОрдер._5LB_ИдентификаторИБ);
						ВидДок              = ДокОрдер.ВидПередаваемогоДокумента;
						бЭтоНовый			= Ложь;
						РаспоряжениеСсылка 	= НайтиСоздатьПеремещение(стрНомер, стрИдентификатор, ВидДок, бЭтоНовый, ТекСтр.СкладОтправитель, ТекСтр.СкладПолучатель);
						Если ЗначениеЗаполнено(РаспоряжениеСсылка) Тогда
							ДокОбъект = РаспоряжениеСсылка.ПолучитьОбъект();
						Иначе
							ДокОбъект = Неопределено;
						КонецЕсли;			
								
					Исключение
						ДокОбъект = Неопределено;
					КонецПопытки;					
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РаспоряжениеСсылка) Тогда
					// 17.05.17 Вялов
					Если бЭтоНовый Тогда
						
						ЗаполнитьЗначенияСвойств(ДокОбъект, ТекСтр);
						
						//стрНомер = СокрЛП(ДокОрдер.РаспоряжениеНомер);
						ДокОбъект._5LB_НомерИсточника 	= стрНомерОсн;
						ДокОбъект.Номер 				= стрНомер;   					
						ДокОбъект._5LB_ВидПередаваемогоДокумента = ВидДок;
						//ДокОбъект._5LB_НомерИсточника = стрНомерРасп;
						//ДокОбъект._5LB_ИдентификаторИБ	= СокрЛП(ДокОрдер._5LB_ИдентификаторИБ);

						ДокОбъект.ВидОперации					= Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
						Если СокрЛП(ДокОрдер.РаспоряжениеКомментарий) <> "" Тогда
							ДокОбъект.Комментарий = СокрЛП(ДокОрдер.РаспоряжениеКомментарий) + " ";
						Иначе
							ДокОбъект.Комментарий = ДокОрдер.Комментарий;
						КонецЕсли;
						ДокОбъект.Комментарий 					= ?(ДокОбъект.Комментарий="", "", ДокОбъект.Комментарий + " ") 
							+ " #Создан автоматически регламентом обмена с УТ-11 " 
							+ Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm'")
							+ ", основние : ордер № " + ТекСтр.ОрдерНомер;
				       	ДокОбъект.ОтражатьВУправленческомУчете 	= Истина;
						ДокОбъект.Организация 					= ОрганизацияПоУмолчанию;
						
						Если ЗначениеЗаполнено(ДокОрдер.Ответственный) Тогда
							ДокОбъект.Ответственный 			= ДокОрдер.Ответственный;
						КонецЕсли;
						
					КонецЕсли;
					// 17.05.17 Вялов  

					ДокОбъект._5LB_Дата   					= ТекСтр.ДатаОбмена;
					ДокОбъект._5LB_ДатаИзменения			= ТекущаяДата();
					//ДокОбъект.ИнициализироватьНовыйДокумент(
					//ДокОбъект.СтатусСборки				= Перечисления.СтатусыСборкиЗаказа.ГотовКСборке;
					ДокОбъект.СтатусСборки					= Перечисления.СтатусыСборкиЗаказа.Собран;
						
			     КонецЕсли;


			КонецЕсли;
			// Если номер не совпадает с текущим

			
			// *****************	
			// т.ч. Товары
			
			// если одна строка и там ничего нет - очистить!
			Если ДокОбъект.Товары.Количество() = 1 Тогда
				Если НЕ ЗначениеЗаполнено(ДокОбъект.Товары[0].Номенклатура) Тогда
					ДокОбъект.Товары.Очистить();
				КонецЕсли;
			КонецЕсли;
			
			// добавление новых строк, которых еще не было в документе
		 	//СтруктураПоиск = Новый Структура("Номенклатура, ЕдиницаИзмерения");
			СтруктураПоиск = Новый Структура("Номенклатура");
			СтруктураПоиск.Вставить("Номенклатура", ТекСтр.Номенклатура);					
			//СтруктураПоиск.Вставить("ЕдиницаИзмерения", ТекСтр.ЕдиницаИзмерения);
			//СтруктураПоиск.Вставить("ЕдиницаИзмерения", ЕдИзм);
			НайденыСтроки = ДокОбъект.Товары.НайтиСтроки(СтруктураПоиск);
			Если НайденыСтроки.Количество() = 0 Тогда
					
				ЕдИзм = ТекСтр.ЕдиницаИзмерения;
				Если НЕ ЗначениеЗаполнено(ЕдИзм) Тогда
					ЕдИзм = ТекСтр.Номенклатура.ЕдиницаХраненияОстатков;					
				КонецЕсли;
				КоэффЕдИзм = ЕдИзм.Коэффициент;		
				КоэффЕдИзм = ?(КоэффЕдИзм = 0, 1, КоэффЕдИзм);
				
				НоваяСтрока = ДокОбъект.Товары.Добавить();	
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтр);
				НоваяСтрока.Качество				= Справочники.Качество.Новый;
				КоэффЕдОст							= ТекСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
				КоэффЕдОст                          = ?(КоэффЕдОст = 0, 1, КоэффЕдОст);
				НоваяСтрока.Коэффициент    			= КоэффЕдОст;
				НоваяСтрока.ЕдиницаИзмерения        = ТекСтр.Номенклатура.ЕдиницаХраненияОстатков;			
				НоваяСтрока.Количество				= ТекСтр.Количество * КоэффЕдИзм / КоэффЕдОст;				
				
			//Иначе
				//	НоваяСтрока = НайденыСтроки[0];			
			КонецЕсли; 		
				// *****************
				
				
				// присвоить текущий (актуальный) номер
			ТекНомер = ТекСтр.ОрдерНомер;
			
		
			// < 17.05.17 Вялов - создание перемещений в УТ-10
			//Если бЭтоНовый Тогда
			//// 17.05.17 Вялов - создание перемещений в УТ-10 //
			//	НоваяСтрока = ДокОбъект.Товары.Добавить();			
			//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтр);
			//	НоваяСтрока.Качество				= Справочники.Качество.Новый;
			//	Коэффициент							= ТекСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			//	НоваяСтрока.Коэффициент    			= ?(Коэффициент = 0, 1, Коэффициент);
			//	НоваяСтрока.ЕдиницаИзмерения        = ТекСтр.Номенклатура.ЕдиницаХраненияОстатков;
			//	НоваяСтрока.Количество				= ТекСтр.Количество * ?(ТекСтр.ЕдиницаИзмерения.Коэффициент=0,1,ТекСтр.ЕдиницаИзмерения.Коэффициент) / НоваяСтрока.Коэффициент;			
			//// < 17.05.17 Вялов - создание перемещений в УТ-10
			//Иначе
			//	// если уже было (не новое) - то найти строку, а если не найдена - создать
			//	СтруктураПоиск = Новый Структура("Номенклатура, ЕдиницаИзмерения");
			//	СтруктураОтбор.Вставить("Номенклатура", ТекСтр.Номенклатура);
			//	СтруктураОтбор.Вставить("ЕдиницаИзмерения", ТекСтр.ЕдиницаИзмерения);
			//	НайденыСтроки = ДокОбъект.Товары.НайтиСтроки(СтруктураПоиск);
			//	Если НайденыСтроки.Количество() = 0 Тогда
			//		НоваяСтрока = ДокОбъект.Товары.Добавить();	
			//		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтр);
			//		НоваяСтрока.Качество				= Справочники.Качество.Новый;
			//		Коэффициент							= ТекСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			//		НоваяСтрока.Коэффициент    			= ?(Коэффициент = 0, 1, Коэффициент);
			//		НоваяСтрока.ЕдиницаИзмерения        = ТекСтр.Номенклатура.ЕдиницаХраненияОстатков;
			//		НоваяСтрока.Количество				= ТекСтр.Количество * ?(ТекСтр.ЕдиницаИзмерения.Коэффициент=0,1,ТекСтр.ЕдиницаИзмерения.Коэффициент) / НоваяСтрока.Коэффициент;				
			//	Иначе
			//		НоваяСтрока = НайденыСтроки[0];
			//	КонецЕсли;

			//	
			//КонецЕсли;
			
		
			
			// 17.05.17 Вялов - создание перемещений в УТ-10 //				
			
			// всегда к шт. с коэфф 1 (пересчет по коэфф.упаковки)
					//НоваяСтрока.Коэффициент			= ТекСтр.ЕдиницаИзмерения.Коэффициент;
			//	НоваяСтрока.КоличествоСобрано 		= НоваяСтрока.Количество;
			//ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);	
			//НоваяСтрока.Количество					= ТекСтрТЧ.Количество;
			//НоваяСтрока.КоличествоСобрано		= ТекСтр.Количество;         
		
		КонецЦикла;
	КонецЕсли;

	// последнее перемещение
	РезОперации = ЗаписатьПеремещениеСобрано(ДокОбъект, ДокОрдер, тзДанныеОтгружено);
	
		//Если ДокОбъект <> Неопределено Тогда
		//	
		//	ЗаписатьПеремещениеСобрано(ДокОбъект, ТекСтр.Ссылка, тзДанныеОтгружено);			 			
		//	Попытка
		//		ДокОрдер = ТекСтр.Ссылка.ПолучитьОбъект();
		//	Исключение
		//	//	Продолжить;
		//	КонецПопытки;			
		//	
		//	стрНомер = СокрЛП(ДокОрдер.РаспоряжениеНомер);
		//	// < 17.05.17 Вялов 
		//	бЭтоНовый = Истина;
		//	
		//	Если ЗначениеЗаполнено(ТекСтр.Ссылка.Распоряжение) Тогда
		//		// проведенные пермещения - не трогать!
		//		Если ТекСтр.Ссылка.Распоряжение.Проведен Тогда
		//			ДокОрдер.ДатаИзменения = ТекущаяДата();
		//			ДокОрдер.ДатаОбмена = ТекущаяДата();	
		//			ДокОрдер.Записать(РежимЗаписиДокумента.Запись);
		//			//Продолжить;   
		//		Иначе
		//		//	ДокОбъект  = ТекСтр.Ссылка.Распоряжение.ПолучитьОбъект();
		//			//ДокОбъект.Товары.Очистить();
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//КонецЕсли;
	
	
	стрИнф = "Обработка документов завершена успешно";
	//ЗаписатьВФайл(ИмяФайлаПротокол,, стрИнф, Ложь);		
	//ЗаписатьВФайл(ИмяФайлаПротокол,, "", Истина);   
	ЗаписатьВПротоколОбмена(ВидСобытия, Узел_УТ11, стрИнф, Ложь);	
				
	
КонецПроцедуры


Функция ЗаписатьПеремещениеСобрано(ДокОбъект, ОрдерОбъект, тзДанные)

	Рез = Ложь;
	
	Если ДокОбъект = Неопределено Тогда
		Возврат Рез;
	КонецЕсли; 
	
	бЗаписаноПеремещение = Ложь;
	
	ДокОбъект.ЗаполнитьПоСериям();			
	                                               
	
	СтруктураПоискДок = Новый Структура();
	//СтруктураПоискДок.Вставить("РаспоряжениеНомер", ДокОбъект._5LB_НомерИсточника);
	СтруктураПоискДок.Вставить("Ссылка", ОрдерОбъект.Ссылка);
	НайденыСтрокиДок = тзДанные.НайтиСтроки(СтруктураПоискДок);
	Если НайденыСтрокиДок.Количество() >  0 Тогда
		
		Для Каждого ТекСтрДанные Из НайденыСтрокиДок Цикл	// строки найденого распоряжения
	
			КоэффициентСобрано = 1;
			Если ЗначениеЗаполнено(ТекСтрДанные.ЕдиницаИзмерения) Тогда
				КоэффициентСобрано = ?(ТекСтрДанные.ЕдиницаИзмерения.Коэффициент=0,1,ТекСтрДанные.ЕдиницаИзмерения.Коэффициент);				
			КонецЕсли;					
			
			СтруктураПоискСтр = Новый Структура();
			СтруктураПоискСтр.Вставить("Номенклатура", 		ТекСтрДанные.Номенклатура);
			НайденыСтрокиСтр = ДокОбъект.Товары.НайтиСтроки(СтруктураПоискСтр);
			Если НайденыСтрокиСтр.Количество() >  0 Тогда
				
				КолСобрано = ТекСтрДанные.Количество;
				Для Каждого ТекСтрТовары Из НайденыСтрокиСтр Цикл					
					
					Если КолСобрано <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					КолНом = ТекСтрТовары.Количество * ТекСтрТовары.ЕдиницаИзмерения.Коэффициент /КоэффициентСобрано;
					
					Если КолСобрано > КолНом Тогда
						ТекСтрТовары.КоличествоСобрано = ТекСтрТовары.Количество;
					Иначе
						ТекСтрТовары.КоличествоСобрано = КолСобрано * КоэффициентСобрано / ТекСтрТовары.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					КолСобрано = КолСобрано - КолНом;  
										 
	            КонецЦикла;

			КонецЕсли; 
			
		КонецЦикла;
		
		Попытка		
			//ДокОбъект.Номер = ОрдерССылка.РаспоряжениеНомер;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			РаспоряжениеСсылка = ДокОбъект.Ссылка;
			Рез = Истина;
		//	ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " + (пере)записан", Ложь);					
		Исключение
			//Рез = Истина;
			//ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		//	ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " - неудачная попытка записи!", Ложь);
		КонецПопытки;
		
		
		Попытка
			
			бЕстьИзмененияОрдер = Ложь;
			ДокОрдер = ОрдерОбъект;
			
			Если НЕ ЗначениеЗаполнено(ДокОрдер.Ссылка.Распоряжение) Тогда
				бЕстьИзмененияОрдер = Истина;
				ДокОрдер.Распоряжение = ДокОбъект.Ссылка;
			КонецЕсли;	
			
			Если ДокОрдер.ДатаИзменения = Дата(1, 1, 1) Тогда
				бЕстьИзмененияОрдер = Истина;
				ДокОрдер.ДатаИзменения = ТекущаяДата();
			//	ДокОрдер.ДатаОбмена = ТекущаяДата();
		//		// проведенные пермещения - не трогать!
				//Если ТекСтр.Ссылка.Распоряжение.Проведен Тогда
							
		//		ДокОрдер.Записать(РежимЗаписиДокумента.Запись);
		//		//Продолжить;   
//				Иначе					
		//		//	ДокОбъект  = ТекСтр.Ссылка.Распоряжение.ПолучитьОбъект();
		//			//ДокОбъект.Товары.Очистить();
		//		КонецЕсли;
			КонецЕсли;			    						
		//КонецЕсли;
			ДокОрдер.Записать(РежимЗаписиДокумента.Запись);

		Исключение
		//	Продолжить;
		КонецПопытки;
		
		
		
	КонецЕсли; 
	
	Возврат Рез;
	
КонецФункции


Процедура Обмен_Регламент1_УТ11() Экспорт
//	
//	// период (интервал) документов
//	ДатаС = НачалоДня(ТекущаяДата()) - 60*24*60*60;    // за последние 40 дней
//	ДатаПо = КонецДня(ТекущаяДата());				   // конец текущего дня 	
//	
//	
//	// Необходимые переменные-параметры	
//	КаталогОбмена = ПолучитьКаталогОбмена();	
//	ИмяФайлаПротокол = "Temp.log";
//	ИмяФайлаПротоколФинал = ПолучитьИмяФайлаПротокола();
//	
//	стрЗаголовокЖурнал = "Обмен УТ10-УТ11";			
//	стрОбменЗаголовок = "Обмен данными УТ10 <- УТ-11  - обработка документов";
//	ЗаписатьВФайл(ИмяФайлаПротокол,, "**************************", Ложь);
//	ЗаписатьВФайл(ИмяФайлаПротокол,, стрОбменЗаголовок, Истина);


//	// Регламент	
//	
//	// *************************************************
//	// Обработка перемещений - Принято - Приходные ордера
//	ЗаписатьВФайл(ИмяФайлаПротокол,, "Обработка перемещений и приходных ордеров", Истина);
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ПеремещениеТоваровТовары.Ссылка,
//		|	ПеремещениеТоваровТовары.Ссылка.Дата КАК ПеремещениеДата,	
//		|	ПеремещениеТоваровТовары.Ссылка.Номер КАК ПеремещениеНомер,				
//		|	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
//		|	ПеремещениеТоваровТовары.Номенклатура,
//		|	ПеремещениеТоваровТовары.КоличествоМест,
//		|	ПеремещениеТоваровТовары.Коэффициент,
//		|	ПеремещениеТоваровТовары.Количество,
//		|	ПеремещениеТоваровТовары.ЕдиницаИзмерения,
//		|	ПеремещениеТоваровТовары.КоличествоСобрано,
//		|	ПеремещениеТоваровТовары.КоличествоПринято
//		|ПОМЕСТИТЬ втПеремещения
//		|ИЗ
//		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
//		|ГДЕ
//		|	НЕ ПеремещениеТоваровТовары.Ссылка.Проведен
//		|	И НЕ ПеремещениеТоваровТовары.Ссылка.ПометкаУдаления
//		|	И ПеремещениеТоваровТовары.Ссылка.Дата >= &ДатаС
//		|	И ПеремещениеТоваровТовары.Ссылка.Дата <= &ДатаПо
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	Ордера.Распоряжение,
//		|	Ордера.Номенклатура,
//		|	СУММА(Ордера.Количество) КАК Количество,
//		|	СУММА(Ордера.КоличествоЕд) КАК КоличествоБазовые
////		|	Ордера.ЕдиницаИзмерения
//		|ПОМЕСТИТЬ втОрдера
//		|ИЗ (	
//		|ВЫБРАТЬ
//		|	ТОрдера.Распоряжение,
//		|	ТОрдера.Номенклатура,
//		|   ТОрдера.Количество,
//		|	(ТОрдера.Количество * ТОрдера.Коэффициент) КАК КоличествоЕд,
//		|	ТОрдера.ЕдиницаИзмерения	
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		_5LB_ПриходныйОрдерНаТовары.Ссылка.Распоряжение КАК Распоряжение,
//		|		_5LB_ПриходныйОрдерНаТовары.Номенклатура КАК Номенклатура,
//		|		ВЫБОР
//		|			КОГДА _5LB_ПриходныйОрдерНаТовары.ЕдиницаИзмерения Есть NULL ТОГДА 1
//		|			КОГДА _5LB_ПриходныйОрдерНаТовары.ЕдиницаИзмерения = &ЕдПустая ТОГДА 1
//		|			ИНАЧЕ _5LB_ПриходныйОрдерНаТовары.ЕдиницаИзмерения.Коэффициент
//		|	     КОНЕЦ КАК Коэффициент,
//		|		_5LB_ПриходныйОрдерНаТовары.Количество КАК Количество,
//		|		_5LB_ПриходныйОрдерНаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
//		|	ИЗ
//		|		Документ._5LB_ПриходныйОрдерНаТовары.Товары КАК _5LB_ПриходныйОрдерНаТовары
//		|	ГДЕ
//		|		НЕ _5LB_ПриходныйОрдерНаТовары.Ссылка.ПометкаУдаления
//		|		И _5LB_ПриходныйОрдерНаТовары.Ссылка.Распоряжение.Дата >= &ДатаС
//		|		И _5LB_ПриходныйОрдерНаТовары.Ссылка.Распоряжение.Дата <= &ДатаПо
//// ! 07.03.17 только необработанные - т.е. "прилетевшие" с обменом и не измененные
//		|		И _5LB_ПриходныйОрдерНаТовары.Ссылка.ДатаОбмена <> _5LB_ПриходныйОрдерНаТовары.Ссылка.ДатаИзменения 
//		|	     ) КАК ТОрдера
//		|	) КАК Ордера
//		|СГРУППИРОВАТЬ ПО
//		|	Ордера.Распоряжение,
//		|	Ордера.Номенклатура,
//		|	Ордера.ЕдиницаИзмерения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	Перемещение.Ссылка КАК ДокументПеремещение,
//		|	Перемещение.ПеремещениеНомер,		
//		|	Перемещение.ПеремещениеДата,		
//		|	Перемещение.НомерСтроки,
//		|	Перемещение.Номенклатура,
//		|	Перемещение.КоличествоМест,
//		|	Перемещение.Коэффициент,
//		|	Перемещение.Количество,
//		|	Перемещение.Коэффициент КАК Коэффициент,
//		|	Перемещение.ЕдиницаИзмерения,
//		|	Перемещение.КоличествоСобрано,
//		|	Перемещение.КоличествоПринято,
//		|	Ордера.Номенклатура КАК Номенклатура_Приходный,
//		|	Ордера.КоличествоБазовые КАК Количество_Приходный
//		//|	Ордера.ЕдиницаИзмерения.Коэффициент КАК Коэффициент_Приходный,
//		//|	Ордера.ЕдиницаИзмерения КАК ЕдиницаИзмерения_Приходный
//		|ИЗ
//		|	втПеремещения КАК Перемещение
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОрдера КАК Ордера
//		|		ПО (Ордера.Распоряжение = Перемещение.Ссылка)
//		|			И (Ордера.Номенклатура = Перемещение.Номенклатура)
//		|УПОРЯДОЧИТЬ ПО		
//		|	Перемещение.ПеремещениеДата,
//		|	Перемещение.ПеремещениеНомер,		
//		|	Перемещение.НомерСтроки
//		|";
//	
//	Запрос.УстановитьПараметр("ДатаС", 		ДатаС); 	// за последние 40 дней
//	Запрос.УстановитьПараметр("ДатаПо", 	ДатаПо);	
//	Запрос.УстановитьПараметр("ЕдПустая", 	Справочники.ЕдиницыИзмерения.ПустаяСсылка());	
//	
//	РезультатЗапроса = Запрос.Выполнить(); 	
//	тзДанныеПринято = РезультатЗапроса.Выгрузить();	
//	тзПеремещения = тзДанныеПринято.Скопировать();
//	тзПеремещения.Свернуть("ДокументПеремещение, ПеремещениеДата, ПеремещениеНомер");
//	тзПеремещения.Сортировать("ПеремещениеДата, ПеремещениеНомер");
//	тзПеремещения.Колонки[0].Имя = "Ссылка";
//	

//	ЗапросПО = Новый Запрос;
//	ЗапросПО.Текст = 
//		"ВЫБРАТЬ
//		|	ПриходныйОрдер.Ссылка,
//		|	ПриходныйОрдер.Дата,
//		|	ПриходныйОрдер.ДатаОбмена,
//		|	ПриходныйОрдер.ДатаИзменения,
//		|	ПриходныйОрдер.Распоряжение КАК ДокументПеремещение
//		|ИЗ
//		|	Документ._5LB_ПриходныйОрдерНаТовары КАК ПриходныйОрдер
//		|	ГДЕ
//		|		НЕ ПриходныйОрдер.ПометкаУдаления
//		|		И ПриходныйОрдер.Распоряжение.Дата >= &ДатаС
//		|		И ПриходныйОрдер.Распоряжение.Дата <= &ДатаПо
//// ! 07.03.17 только необработанные - т.е. "прилетевшие" с обменом и не измененные
//		|		И ПриходныйОрдер.ДатаОбмена <> ПриходныйОрдер.ДатаИзменения 	
//		|";
//	ЗапросПО.УстановитьПараметр("ДатаС", 	Запрос.Параметры.ДатаС); 	
//	ЗапросПО.УстановитьПараметр("ДатаПо", 	Запрос.Параметры.ДатаПо);		
//	тзПО = ЗапросПО.Выполнить().Выгрузить();
//	

//	
//	Для Каждого ТекДок Из тзПеремещения Цикл		
//		
//		СтруктураПоиска = Новый Структура("ДокументПеремещение");
//		СтруктураПоиска.Вставить("ДокументПеремещение", ТекДок.Ссылка);
//		МассивНайденныхСтрок = тзДанныеПринято.НайтиСтроки(СтруктураПоиска); 
//		Если МассивНайденныхСтрок.Количество() > 0 Тогда			
//			
//			ДокОбъект = ТекДок.ССылка.ПолучитьОбъект();
//			ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Транзит; //26.04.2017, Юра
//			//Для Каждого ТекСтр Из ДокОбъект.Товары Цикл
//			Для Каждого ТекСтрПоиска Из МассивНайденныхСтрок Цикл
//				ТекСтр = ДокОбъект.Товары[ТекСтрПоиска.НомерСтроки - 1];
//				Если ТекСтр.Номенклатура = ТекСтрПоиска.Номенклатура Тогда
//					
//					КолПринято = 0;
//					
//					КолПринятоВЕдДокумента = ТекСтрПоиска.Количество_Приходный / ТекСтрПоиска.Коэффициент;					 
//					Если КолПринятоВЕдДокумента = Цел(КолПринятоВЕдДокумента) Тогда
//						КолПринято = КолПринятоВЕдДокумента;
//					Иначе
//						КолПринято = Цел(КолПринятоВЕдДокумента);
//					//Если ТекСтр.ЕдиницаИзмерения = ТекСтрПоиска.ЕдиницаИзмерения Тогда
//					//	КолПринято = ТекСтрПоиска.Количество_Приходный;
//					//Иначе
//					//	Если ТекСтрПоиска.Коэффициент_Приходный > 0 Тогда
//					//		КолПринято = ТекСтрПоиска.Количество_Приходный * (ТекСтрПоиска.Коэффициент / ТекСтрПоиска.Коэффициент_Приходный);
//					//	Иначе
//					//		 КолПринято = ТекСтрПоиска.Количество_Приходный;
//					//	КонецЕсли;
//					КонецЕсли;
//					Если  КолПринято > 0 Тогда						
//						ТекСтр.КоличествоПринято = КолПринято;
//						Если ТекСтр.КоличествоСобрано = 0 Тогда
//							ТекСтр.КоличествоСобрано = КолПринято;
//	                    КонецЕсли;
//					КонецЕсли;	
//				КонецЕсли;	
//				//КонецЦикла;             					
//			КонецЦикла;
//			
//			Если ДокОбъект.Товары.Итог("КоличествоПринято") > 0 Тогда
//				// проверка - отражение в УУ или БУ
//				Если (НЕ ДокОбъект.ОтражатьВУправленческомУчете И НЕ ДокОбъект.ОтражатьВБухгалтерскомУчете) Тогда
//					 ДокОбъект.ОтражатьВУправленческомУчете = Истина;
//				КонецЕсли;
//				// попытка записи документа 
//				Попытка
//					ДокОбъект.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;
//					ДокОбъект.СтатусДоставки = Перечисления.СтатусПеревозки.Доставлено;
//					
//					//Распоряжение пытаться сразу проводить от Иванова Ивана (так как при проведении перемещения теперь расхождения обрабатываются) 20.04.2017, Юра
//					Попытка
//						ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
//						ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " + проведен", Ложь);//26.04.2017, Юра
//					Исключение
//						ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
//						ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " + записан", Ложь);//26.04.2017, Юра
//					КонецПопытки;
//				Исключение
//					//ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
//					ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " - неудачная попытка записи!", Ложь);
//				КонецПопытки;
//			КонецЕсли;	
//			
//			// 13.03.17 Вялов  - если все (не ТМЦ) приняты!
//			ЕстьРасхождение = Ложь;			
//			Для Каждого ТекСтр Из ДокОбъект.Товары Цикл
//				Если (НЕ ТекСтр.Номенклатура._5LB_НеУчаствуетВСинхронизации
//					И НЕ ТекСтр.Номенклатура.Родитель._5LB_НеУчаствуетВСинхронизации) Тогда
//					
//					Если ТекСтр.Количество <>  ТекСтр.КоличествоПринято Тогда	// есть расхождение (не ТМЦ)
//						ЕстьРасхождение = Истина;
//						Прервать;
//					КонецЕсли;
//				КонецЕсли;
//			КонецЦикла;
//			Если НЕ ЕстьРасхождение Тогда	 // если нет расхождений - провести
//				Попытка
//					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
//					ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " + проведен", Ложь);
//				Исключение
//					//ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
//					ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " - неудачная попытка проведения!", Ложь);
//				КонецПопытки;	
//			КонецЕсли;
//			
//			
//		КонецЕсли;	
//		
//		// обработка приходных ордеров
//		МассивНайденныхСтрокПО = тзПО.НайтиСтроки(СтруктураПоиска); 
//		Если МассивНайденныхСтрокПО.Количество() > 0 Тогда			
//			Для Каждого ТекПО Из МассивНайденныхСтрокПО Цикл
//				Попытка
//					ДокОбъектПО = ТекПО.ССылка.ПолучитьОбъект();      
//					Если ДокОбъектПО.ДатаОбмена = Дата(1, 1, 1) Тогда
//						ДокОбъектПО.ДатаОбмена = ТекущаяДата();
//					КонецЕсли;						
//					ДокОбъектПО.ДатаИзменения = ДокОбъектПО.ДатаОбмена;					
//					ДокОбъектПО.Записать(РежимЗаписиДокумента.Запись);
//					ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " + записан", Ложь);
//				Исключение
//					ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " - неудачная попытка записи!", Ложь);
//				//	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
//				КонецПопытки;
//			КонецЦикла;
//			
//		КонецЕсли;	
//		
//	КонецЦикла;
//	
//	// *************************************************
//	// Обработка перемещений - Отгружено - Расходные ордера
//	//ЗаписатьВФайл(ИмяФайлаПротокол, "", Ложь);	
//	ЗаписатьВФайл(ИмяФайлаПротокол,, "Расходные ордера", Истина);	
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	    |	Ордер.Ссылка КАК Ссылка,
//	    |	Ордер.Ссылка.Номер КАК ОрдерНомер,
//	    |	Ордер.Ссылка.Дата КАК Дата,
//	    |	Ордер.Ссылка.Распоряжение КАК Распоряжение,				
//	    |	Ордер.Ссылка.СкладОтправитель,
//	    |	Ордер.Ссылка.СкладПолучатель,
//	    |	Ордер.Ссылка.ДатаОбмена КАК ДатаОбмена,
//	    |	Ордер.Ссылка.ДатаИзменения КАК ДатаИзменения,
//		|	Ордер.НомерСтроки,
//	    |	Ордер.Номенклатура,
//	    |	Ордер.Количество,
//	    |	Ордер.ЕдиницаИзмерения КАК ЕдиницаИзмерения
//	    |ИЗ
//	    |	Документ._5LB_РасходныйОрдерНаТовары.Товары КАК Ордер
//	    |ГДЕ
//		|	НЕ Ордер.Ссылка.ПометкаУдаления
//		|	И Ордер.Ссылка.Дата >= &ДатаС И Ордер.Ссылка.Дата <= &ДатаПо
//		|	И Ордер.Ссылка.ДатаОбмена <> Ордер.Ссылка.ДатаИзменения 
//		|УПОРЯДОЧИТЬ ПО
//		|	Ордер.Ссылка.Номер, Ордер.НомерСтроки
//		|";	
//	Запрос.УстановитьПараметр("ДатаС", 		НачалоДня(ТекущаяДата()) - 40*24*60*60); 	// за последние 40 дней
//	Запрос.УстановитьПараметр("ДатаПо", 	КонецДня(ТекущаяДата()));	
//	
//	РезультатЗапроса = Запрос.Выполнить(); 	
//	тзДанныеОтгружено = РезультатЗапроса.Выгрузить();	

//	ТекНомер = "";
//	//ТекДок = Документы.ПеремещениеТоваров.ПустаяСсылка();
//	ДокОбъект = Неопределено;
//	ОрганизацияПоУмолчанию = ОбщегоНазначения5LB.ПолучитьПсевдоним("Организация", "Настройки по умолчанию");
//	
//	Для Каждого ТекСтр Из тзДанныеОтгружено Цикл		
//		
//		Если ТекНомер <> ТекСтр.ОрдерНомер Тогда
//			
//			Попытка
//				ДокОрдер = ТекСтр.Ссылка.ПолучитьОбъект();
//				//ДокОрдер.Распоряжение = ДокОбъект.Ссылка;
//				ДокОрдер.ДатаИзменения = ДокОрдер.ДатаОбмена;					
//				ДокОрдер.Записать(РежимЗаписиДокумента.Запись);
//				ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОрдер) + " + записан", Ложь);
//			Исключение
//				//ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
//				ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОрдер) + " - неудачная попытка записи!", Ложь);
//				Продолжить;
//			КонецПопытки;	
//				
//			Если ДокОбъект <> Неопределено Тогда
//				ДокОбъект.ЗаполнитьПоСериям();
//				Попытка
//					
//					//Распоряжение пытаться сразу проводить от Иванова Ивана (так как при проведении перемещения теперь расхождения обрабатываются) 20.04.2017, Юра
//					Попытка
//						ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
//					Исключение
//						ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
//					КонецПопытки;
//					
//					ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " + (пере)записан", Ложь);
//				Исключение
//					//ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
//					ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОбъект) + " - неудачная попытка записи!", Ложь);
//				КонецПопытки;	
//				Попытка					
//					ДокОрдер.Распоряжение = ДокОбъект.Ссылка;
//					ДокОрдер.ДатаИзменения = ДокОрдер.ДатаОбмена;
//				
//					ДокОрдер.Записать(РежимЗаписиДокумента.Запись);
//					ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОрдер) + " + записан", Ложь);
//				Исключение
//					//ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
//					ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОрдер) + " - неудачная попытка записи!", Ложь);
//					Продолжить;
//				КонецПопытки;
//			
//			КонецЕсли;
//			
//			ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
//			ДокОбъект.Номер = ДокОрдер.Номер;

//			ЗаполнитьЗначенияСвойств(ДокОбъект, ТекСтр);

////			ДокОбъект.Номер 						= ТекНомер.Номер;
//			ДокОбъект.ВидОперации					= Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
//			Если СокрЛП(ДокОрдер.Комментарий) <> "" Тогда
//				ДокОбъект.Комментарий = СокрЛП(ДокОрдер.Комментарий) + " ";
//			Иначе
//				ДокОбъект.Комментарий = "";
//			КонецЕсли;
//			ДокОбъект.Комментарий 					= ДокОбъект.Комментарий  + "#Создан автоматически регламентом обмена с УТ-11 " 
//				+ Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm'")
//				+ ", основние : ордер № " + ТекСтр.ОрдерНомер;
//	       	ДокОбъект.ОтражатьВУправленческомУчете 	= Истина;
//			ДокОбъект.Организация 					= ОрганизацияПоУмолчанию;

//			//НовПеремещ.СкладОтправитель 		= Источник[0].СкладОтправитель;
//			//НовПеремещ.СкладПолучатель 			= Источник[0].СкладПолучатель;
//			//НовПеремещ.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;

//			ДокОбъект._5LB_Дата   					= ТекСтр.ДатаОбмена;
//			ДокОбъект._5LB_ДатаИзменения			= ТекущаяДата();
//			//ДокОбъект.ИнициализироватьНовыйДокумент(
//			ДокОбъект.СтатусСборки					= Перечисления.СтатусыСборкиЗаказа.ГотовКСборке;

//			// присвоить текущий (актуальный) номер
//			ТекНомер = ТекСтр.ОрдерНомер;
//			
//		КонецЕсли;
//		
//		НоваяСтрока = ДокОбъект.Товары.Добавить();	
//		
//		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтр);
//		
//		НоваяСтрока.Качество				= Справочники.Качество.Новый;
//		
//		// всегда к шт. с коэфф 1 (пересчет по коэфф.упаковки)
//		Коэффициент							= ТекСтр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
//		НоваяСтрока.Коэффициент    			= ?(Коэффициент = 0, 1, Коэффициент);
//		НоваяСтрока.ЕдиницаИзмерения        = ТекСтр.Номенклатура.ЕдиницаХраненияОстатков;
//		//НоваяСтрока.Коэффициент			= ТекСтр.ЕдиницаИзмерения.Коэффициент;
//		НоваяСтрока.Количество				= ТекСтр.Количество * ТекСтр.ЕдиницаИзмерения.Коэффициент / НоваяСтрока.Коэффициент;
//		
//		НоваяСтрока.КоличествоСобрано 		= НоваяСтрока.Количество;
//		//ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);	

//		//НоваяСтрока.Количество					= ТекСтрТЧ.Количество;
//		//НоваяСтрока.КоличествоСобрано			= ТекСтрТЧ.Количество;         
//		//НоваяСтрока.СтатусСборки				= Перечисления.СтатусыСборкиЗаказа.Собран;
//	
//	КонецЦикла;
//	
//	Если ДокОбъект <> Неопределено Тогда
//		ДокОбъект.ЗаполнитьПоСериям();
//		Попытка
//			
//			//Распоряжение пытаться сразу проводить от Иванова Ивана (так как при проведении перемещения теперь расхождения обрабатываются) 20.04.2017, Юра
//			Попытка
//				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
//			Исключение
//				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
//			КонецПопытки;
//			
//			// обработка расходных ордеров
//			ДокОрдер = ТекСтр.Ссылка.ПолучитьОбъект();
//			ДокОрдер.Распоряжение = ДокОбъект.Ссылка;
//			ДокОрдер.ДатаИзменения = ДокОрдер.ДатаОбмена;					
//			ДокОрдер.Записать(РежимЗаписиДокумента.Запись);
//			ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОрдер) + " + записан", Ложь);
//		Исключение
//			ЗаписатьВФайл(ИмяФайлаПротокол,, Строка(ДокОрдер) + " - неудачная попытка записи!", Ложь);
//			//ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
//		КонецПопытки;						
//	КонецЕсли;
//	
//	стрИнф = "Обработка документов завершена успешно";
//	ЗаписатьВФайл(ИмяФайлаПротокол,, стрИнф, Ложь);		
//	ЗаписатьВФайл(ИмяФайлаПротокол,, "", Истина);
//	
//	//// Финал - Копирование рабочего лога в файл копии
//	//Попытка
//	//	КопироватьФайл(КаталогОбмена + ИмяФайлаПротокол, КаталогОбмена + ИмяФайлаПротоколФинал);	
//	//Исключение
//	//
//	//КонецПопытки;
	
КонецПроцедуры


///////////////////////////////////////////////////////
// Соответсвие номенклатуры перемещений

Процедура ПроверкаСоответсвийНоменклатурыВПеремещении(Перемещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Товары = Перемещение.Товары.Выгрузить();
	Товары.Свернуть("Номенклатура");
	
	Запрос1 = Новый Запрос("Выбрать * ПОМЕСТИТЬ втТовары Из &Таб КАК Т");
	Запрос1.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	МенеджерВТД = Запрос1.МенеджерВременныхТаблиц;
	Запрос1.УстановитьПараметр("Таб", Товары);
	Запрос1.Выполнить(); 
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТД;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура
		|ИЗ
		|	втТовары КАК Товары 
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений._СоответствияНоменклатуры КАК СоответствияНоменклатуры
		|	ПО СоответствияНоменклатуры.Номенклатура = Товары.Номенклатура
		|ГДЕ
		|	НЕ Товары.Номенклатура._5LB_НеУчаствуетВСинхронизации
		|	И НЕ Товары.Номенклатура.Родитель._5LB_НеУчаствуетВСинхронизации
		//|	И НЕ Товары.Номенклатура.Родитель.Родитель._5LB_НеУчаствуетВСинхронизации
		|	И СоответствияНоменклатуры.Номенклатура_УТ11 Есть NULL	
		|";	
		
	тзНоменклатураБезСоответствий =	Запрос.Выполнить().Выгрузить();
		
	ЗапросУДАЛЕНИЕ = Новый Запрос;
	ЗапросУДАЛЕНИЕ.МенеджерВременныхТаблиц = МенеджерВТД;
	ЗапросУДАЛЕНИЕ.Текст = "УНИЧТОЖИТЬ втТовары";
	ЗапросУДАЛЕНИЕ.Выполнить();	
	
	Для Каждого ТекСтр Из тзНоменклатураБезСоответствий Цикл
		
		   	Номенклатура = ТекСтр.Номенклатура;
		   
			//ЗаписьСоотв = РегистрыСведений._5LB_СоответствияНоменклатурыПеремещений.СоздатьМенеджерЗаписи();
			//ЗаписьСоотв.Перемещение 		= Перемещение.Ссылка;
			//ЗаписьСоотв.Номенклатура 		= Номенклатура;
			//ЗаписьСоотв.Прочитать();
			////ЗаписьСоотв.Номенклатура 		= Номенклатура;
			//ЗаписьСоотв.Номенклатура_УТ11 	= Справочники._Номенклатура_УТ11.ПустаяСсылка();
			//ЗаписьСоотв.ДатаЗаполнения		= Дата(1, 1, 1);				
			//Попытка
			//	ЗаписьСоотв.Записать(Истина);	
			//	//Возврат Истина;
			//Исключение
			//	//Возврат Ложь;
			//КонецПопытки;
			
			
			НаборЗаписей = РегистрыСведений._5LB_СоответствияНоменклатурыПеремещений.СоздатьНаборЗаписей(); 								
			// отбор уникального значения (все измерения!)
			НаборЗаписей.Отбор.Перемещение.Установить(Перемещение.Ссылка);
			НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);													
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();	
			Иначе
				Запись = НаборЗаписей[0];
			КонецЕсли;										
			Запись.Перемещение 				= Перемещение.Ссылка;
			Запись.Номенклатура		 		= Номенклатура;
			//Запись.Номенклатура_УТ11 		= Справочники._Номенклатура_УТ11.ПустаяСсылка();
			Запись.ДатаЗаполнения			= Дата(1, 1, 1);	
				
			// сообщение и запись							
			стрИнф = Строка(Перемещение.Ссылка) + ", " + Строка(Номенклатура) + " - нет соответствия номенклатуры.";																
			Попытка
				НаборЗаписей.Записать(Истина);
				Сообщить(стрИнф);
			Исключение
				Сообщить("Не удалось внести запись : " + стрИнф + "!", СтатусСообщения.Важное);
			КонецПопытки;

	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция НоменклатураБезСоответсвийВПеремещении(ОбъектСсылка) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда	
		стрОтбор = "Соотв.Перемещение = &ОбъектСсылка"; 			
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		стрОтбор = "Соотв.Номенклатура = &ОбъектСсылка"; 
	Иначе
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;			
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Соотв.Номенклатура
		|ИЗ
		|	РегистрСведений._5LB_СоответствияНоменклатурыПеремещений КАК Соотв
		|ГДЕ
		|	" + стрОтбор + "		
//		|	И Соотв.Номенклатура_УТ11 = &Номенклатура_УТ11
		|	И Соотв.ДатаЗаполнения = &ДатаЗаполнения";
	Запрос.УстановитьПараметр("ОбъектСсылка", 		ОбъектСсылка);	
	Запрос.УстановитьПараметр("ДатаЗаполнения", 	Дата(1,1,1));
//	Запрос.УстановитьПараметр("Номенклатура_УТ11", 	Справочники._Номенклатура_УТ11.ПустаяСсылка());
	
	тзНоменклатура = Запрос.Выполнить().Выгрузить();	
	
	Возврат тзНоменклатура;

КонецФункции

Функция ОбновитьЗаписьСоответствийНоменклатурыПеремещений(ПеремещениеССылка=Неопределено, НоменклатураСсылка) Экспорт			
	
	НаборЗаписей = РегистрыСведений._5LB_СоответствияНоменклатурыПеремещений.СоздатьНаборЗаписей(); 								
	
	Если ПеремещениеССылка <> Неопределено Тогда	
		НаборЗаписей.Отбор.Перемещение.Установить(ПеремещениеССылка);
	КонецЕсли;	
	
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка);													
	
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл	
		//Запись.Номенклатура_УТ11 		= Номенклатура_УТ11Ссылка;
		Запись.ДатаЗаполнения			= ТекущаяДата();					
	КонецЦикла;
	
	// сообщение и запись							
//	стрИнф = Строка(Перемещение.Ссылка) + ", " + Строка(Номенклатура) + " - нет соответствия номенклатуры.";																
	Попытка
		НаборЗаписей.Записать(Истина);
//		Сообщить(стрИнф);
		Возврат Истина;
	Исключение
//		Сообщить("Не удалось внести запись : " + стрИнф + "!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура _5LB_ПриЗаписи_СоответствияНоменклатурыПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если ЗначениеЗаполнено(Источник.Отбор) Тогда
		Если Источник.Отбор.Номенклатура <> Справочники.Номенклатура.ПустаяСсылка() Тогда	
			НоменклатураСсылка = Источник.Отбор.Номенклатура.Значение;
			тзНоменклатураБезСоотв = НоменклатураБезСоответсвийВПеремещении(НоменклатураСсылка);												
			Если тзНоменклатураБезСоотв.Количество() > 0 Тогда	
				Для Каждого ТекСтр Из тзНоменклатураБезСоотв Цикл
				//	ТекСтр
					ОбновитьЗаписьСоответствийНоменклатурыПеремещений(, ТекСтр.Номенклатура);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;				
	КонецЕсли;
			
КонецПроцедуры

///////////////////////////////////////////////////////



///////////////////////////////////////////////////////
// 16.06.2017 Вялов

// возвращает COM-подключение, если файловый вариант - только 1-й параметр, второй - пустая строка
Функция СоздатьCOMСоединение(стрПутьСервер, стрБаза="", стрПользователь, стрПароль, ОписаниеОшибки="") Экспорт
	
  	 //СтрокаПодключения = "";
    //Если ЭтоСервер Тогда
	Если стрБаза <> "" Тогда // по этому парметру определяем файл или клиент-сервер
        СтрокаПодключения = "Srvr=" + стрПутьСервер + ";Ref=" + стрБаза + ";";
    Иначе
        СтрокаПодключения = "File=""" + стрПутьСервер + """;";
    КонецЕсли;
    СтрокаПодключения = СтрокаПодключения + ?(ПустаяСтрока(стрПользователь), "", "Usr="""  + стрПользователь + """;");
    СтрокаПодключения = СтрокаПодключения + ?(ПустаяСтрока(стрПароль), "", "Pwd="""  + стрПароль + """;");     
	
	//Если СтрокаПодключения = "" 
	
	Подключение = Новый COMОбъект("V83.ComConnector");    
	Попытка
      	DataSource = Подключение.Connect(СтрокаПодключения);
       Исключение
      	ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;    
	Если DataSource = Неопределено И ПустаяСтрока(ОписаниеОшибки) Тогда
      	ОписаниеОшибки = "Неизвестная ошибка подключения к 1С:Предприятие!";
	КонецЕсли;    
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
      	DataSource = Неопределено;
		Подключение  = Неопределено;
	КонецЕсли;    
	Возврат DataSource;    
	
КонецФункции



////////////////////////////////////////////////////////////////////////
// Аудит обмена
// 29.06.17 добавлен регистр для протоколирования обмена и регламентов, связанных с ним

//Функция ЗаписатьВПротоколОбмена() Экспорт
Процедура ЗаписатьВПротоколОбмена(Событие, ОбъектОбмена, Содержание="", ЭтоОшибка=Ложь, допИнф="") Экспорт

		
//	Рез = Ложь;

	Попытка
		ОбъектОбменаССылка = ОбъектОбмена.Ссылка;
	Исключение
		ОбъектОбменаССылка = допИнф + ?(допИнф="", "", " ") + Строка(ОбъектОбмена);
	КонецПопытки;
	
	Попытка 	
		РС = РегистрыСведений._5LB_Интеграция;	
		НаборЗаписей = РС.СоздатьНаборЗаписей(); 
		
		ТекДата = ТекущаяДата();
		НаборЗаписей.Отбор.Период.Установить(ТекДата);
		НаборЗаписей.Отбор.Событие.Установить(Событие); 
		НаборЗаписей.Отбор.ОбъектОбмена.Установить(ОбъектОбменаССылка); 	
		НаборЗаписей.Прочитать();
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Период			= ТекДата;
		НоваяЗапись.Событие 		= Событие;
		НоваяЗапись.ОбъектОбмена 	= ОбъектОбменаССылка; 
		НоваяЗапись.Содержание 		= Содержание; 
		НоваяЗапись.ЭтоОшибка 		= ЭтоОшибка;
		
		НаборЗаписей.Записать(); 
	Исключение
	КонецПопытки;
//	Возврат Рез;
	
КонецПроцедуры
//КонецФункции


////////////////////////////////////////////////////////////////////////
// Отборы для отчетов и обработок

Процедура УстановитьОтборОбъектаПоУмолчанию(ОбъектСсылка, ФормаОтчета) Экспорт
	
	
	СписокИсклОрг = Новый СписокЗначений;
	СписокИсклОрг.Добавить(Справочники.Организации.НайтиПоКоду("661")); //("ФИТМИЛС ООО"));
	СписокИсклОрг.Добавить(Справочники.Организации.НайтиПоКоду("662")); //("ГЛОБАЛ ТРЕЙД РУС ООО"));
	//#***+Добавления*** Тасмаджиев 11/10/2018// ->>
	СписокИсклОрг.Добавить(Справочники.Организации.НайтиПоКоду("677")); //("АКТИВ-ТРЕЙД ООО");
	//#***-Добавления*** Тасмаджиев 11/10/2018// <<-
	ИсклОргВкл = Ложь;
	
	СписокИсклКонтрагентов = Новый СписокЗначений;
	СписокИсклКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "9715301436")); //("ООО ФитМилс"));
	СписокИсклКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "9717039840")); //("Глобал Трейд Рус"));
	//#***+Добавления*** Тасмаджиев 11/10/2018// ->>
	СписокИсклКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "5402046325")); //("АКТИВ-ТРЕЙД ООО");
	//#***-Добавления*** Тасмаджиев 11/10/2018// <<-
	ИсклКонтрагентовВкл = Истина;
	 
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	Если ИмяОбъекта = "ВаловаяПрибыль" Тогда	   
		
		тОтбор = ОбъектСсылка.УниверсальныйОтчет.ПостроительОтчета.Отбор;
		//ЭлементОтбор = тОтбор.Найти("Организация");
		//Если ЭлементОтбор = Неопределено Тогда								
		//	ОбъектСсылка.УниверсальныйОтчет.ДобавитьОтбор("Организация");
		//КонецЕсли; 
		ЭлементОтбор = тОтбор.Найти("Организация");
		Если ЭлементОтбор <> Неопределено Тогда										
			//ОтборОрганизация = новый ПолеКомпоновкиДанных("ДокументПродажи.Организация");
			//ЭлементОтбор.ЛевоеЗначение = ОтборОрганизация;
			ЭлементОтбор.ВидСравнения = ВидСравнения.НеВСписке;		
			ЭлементОтбор.Значение = СписокИсклОрг;
			ЭлементОтбор.Использование = ИсклОргВкл;			
		КонецЕсли;
		ЭлементОтбор = тОтбор.Найти("Покупатель");
		Если ЭлементОтбор <> Неопределено Тогда										
			ЭлементОтбор.ВидСравнения = ВидСравнения.НеВСписке;		
			ЭлементОтбор.Значение = СписокИсклКонтрагентов;
			ЭлементОтбор.Использование = ИсклКонтрагентовВкл;			
		КонецЕсли;

	ИначеЕсли ИмяОбъекта = "Продажи" Тогда
		
		тОтбор = ОбъектСсылка.УниверсальныйОтчет.ПостроительОтчета.Отбор;
		//ЭлементОтбор = тОтбор.Найти("ДокументПродажиОрганизация");
		//Если ЭлементОтбор = Неопределено Тогда								
		//	ОбъектСсылка.УниверсальныйОтчет.ДобавитьОтбор("ДокументПродажи.Организация");
		//КонецЕсли; 
	   	ЭлементОтбор = тОтбор.Найти("ДокументПродажиОрганизация");
		Если ЭлементОтбор <> Неопределено Тогда		
			ЭлементОтбор.ВидСравнения = ВидСравнения.НеВСписке;		
			ЭлементОтбор.Значение = СписокИсклОрг;
			ЭлементОтбор.Использование = ИсклОргВкл;			
		КонецЕсли;
		ЭлементОтбор = тОтбор.Найти("Контрагент");
		Если ЭлементОтбор <> Неопределено Тогда										
			ЭлементОтбор.ВидСравнения = ВидСравнения.НеВСписке;		
			ЭлементОтбор.Значение = СписокИсклКонтрагентов;
			ЭлементОтбор.Использование = ИсклКонтрагентовВкл;			
		КонецЕсли;

		
	ИначеЕсли Найти(ИмяОбъекта, "НоменклатураПоКатегориям") > 0 Тогда

		// Параметры
		тПарам = ФормаОтчета.КомпоновщикНастроек.Настройки.ПараметрыДанных;	
		ПарамОтборОрганизация = новый ПараметрКомпоновкиДанных("СписокПостИскл");
		СтрокаПарам = Неопределено;
		Для Каждого ТекСтр Из тПарам.Элементы Цикл
			Если ТекСтр.Параметр = ПарамОтборОрганизация Тогда
				СтрокаПарам = ТекСтр;
				Прервать;
			КонецЕсли;      			
		КонецЦикла;
		Если СтрокаПарам <> Неопределено Тогда		
			СтрокаПарам.Значение = СписокИсклОрг;
			СтрокаПарам.Использование = Истина;
		КонецЕсли;  		
		
		// Отборы		
		тОтбор = ФормаОтчета.КомпоновщикНастроек.Настройки.Отбор;		
		//тОтбор.Элементы.Очистить();
		//НоваяСтрока = тОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборОрганизация = новый ПолеКомпоновкиДанных("ДокументПродажи.Организация");
		СтрокаОтбор = Неопределено;
		Для Каждого ТекСтр Из тОтбор.Элементы Цикл
			Если ТекСтр.ЛевоеЗначение = ОтборОрганизация Тогда
				СтрокаОтбор = ТекСтр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаОтбор = Неопределено Тогда
			СтрокаОтбор	= тОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			СтрокаОтбор.ЛевоеЗначение = ОтборОрганизация;
		КонецЕсли;
		//НоваяСтрока.ЛевоеЗначение = ОтборОрганизация;
		СтрокаОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;	
		СтрокаОтбор.ПравоеЗначение = СписокИсклОрг;
		СтрокаОтбор.Использование = ИсклОргВкл;
		
		ОтборКонтрагент = новый ПолеКомпоновкиДанных("Контрагент");
		СтрокаОтбор = Неопределено;
		Для Каждого ТекСтр Из тОтбор.Элементы Цикл
			Если ТекСтр.ЛевоеЗначение = ОтборКонтрагент Тогда
				СтрокаОтбор = ТекСтр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаОтбор = Неопределено Тогда
			СтрокаОтбор	= тОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			СтрокаОтбор.ЛевоеЗначение = ОтборКонтрагент;
		КонецЕсли;
		СтрокаОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;	
		СтрокаОтбор.ПравоеЗначение = СписокИсклКонтрагентов;
		СтрокаОтбор.Использование = ИсклКонтрагентовВкл;
		
	КонецЕсли;
	

КонецПроцедуры




////////////////////////////////////////////////////////////////////////
