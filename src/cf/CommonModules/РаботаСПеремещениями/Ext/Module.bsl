
Процедура ПередЗаписьюПеремещенияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//#***+Добавления*** Тасмаджиев 19/10/2018// ->>
	//В перемещениях менялся вид операции Транзит на Товарное при невыясненных обстоятельствах.
	//Теперь если у перемещения заполнен внутренний заказ то ВидОперации должен быть транзит.
	//Если Источник.ВнутреннийЗаказ <> Документы.ВнутреннийЗаказ.ПустаяСсылка()
	//	И Источник.ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.Транзит Тогда
	//	Источник.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Транзит;
	//КонецЕсли;
	//#***-Добавления*** Тасмаджиев 19/10/2018// <<-
	
		//Из магазины только собранные перемещения можно проводить
	#Если Клиент Тогда
		Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				Если Источник.СкладОтправитель.Родитель = Справочники.Склады.НайтиПоКоду("000000008") Тогда
					Если Источник.СтатусСборки <> Перечисления.СтатусыСборкиЗаказа.Собран Тогда
						Отказ = Истина;
						Сообщить ("Перемещение не собрано!",СтатусСообщения.Важное);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	#КонецЕсли	
	
	//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 18/06/2018//==============================================================================================
	//#Если Клиент Тогда //Нам надо чтобы всегда ветка работала, даже для внешнего соедиения 26.04.2017, Юра
	//++ Кузнецов С.А. - Добавили условие выполнения операций, если не "Отказ" - 22.03.2016
	Если (Источник.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Транзит) И (Источник.Проведен=Ложь)И НЕ Источник.ПометкаУдаления Тогда
		Если (Источник.ВнутреннийЗаказ<>Документы.ВнутреннийЗаказ.ПустаяСсылка()) И (Источник.ВнутреннийЗаказ.Проведен) Тогда
			ужЕЕсть = 1;
			ТекДок = Источник.ВнутреннийЗаказ.ПолучитьОбъект();
			ТекДок.Дата = Источник.Дата;
			ТекДок.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад;
			ТекДок.Заказчик = Источник.СкладПолучатель;
			ТекДок.Организация = Источник.Организация;
			ТекДок.Ответственный = Источник.Ответственный;
			ТекДок.Товары.Загрузить (Источник.Товары.Выгрузить(,"ЕдиницаИзмерения,ЕдиницаИзмеренияМест,Количество,КоличествоМест,Коэффициент,Номенклатура,ХарактеристикаНоменклатуры"));
			Для Каждого стр из ТекДок.Товары Цикл
				стр.Размещение = Источник.СкладОтправитель;
			КонецЦикла;
			Попытка
				Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
					ТекДок.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				Иначе
					ТекДок.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
				КонецЕсли;
			Исключение
				Сообщить ("Не удалось обновить транзит. Повторите попытку позже (ещё раз записАть перемещение)");
				Сообщить (ОписаниеОшибки());
				Отказ=Истина;
			КонецПопытки;
		Иначе
			
			ТекДок = Документы.ВнутреннийЗаказ.СоздатьДокумент();
			ТекДок.Заполнить(Источник);
			Попытка
				ТекДок.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
				Попытка
					ГУИД = ТекДок.Ссылка.УникальныйИдентификатор();
					ДокВнутреннийЗаказ = Документы.ВнутреннийЗаказ.ПолучитьСсылку(ГУИД);
					Источник.ВнутреннийЗаказ = ДокВнутреннийЗаказ;
					Сообщить ("Транзит успешно оформлен");
				Исключение
				КонецПопытки;
			Исключение
				Сообщить ("Не удалось оформить транзит. Повторите попытку позже");
				Сообщить (ОписаниеОшибки());
				Отказ=Истина;
			КонецПопытки;	
		КонецЕсли;
		//{-КОНЕЦ-Изменения} Автор: Тасмаджиев 18/06/2018//==============================================================================================	
	КонецЕсли;	
	
	
	//21.04.2017, Юра
	//Иванов Иван: доп.условие для транзитных перемещений в ТЧ заполнять колонки "ВнутреннийЗаказ" и "ДокументРезерва".
	//Подобное заполнение было ранее (см. код чуть выше, но с доп. условиями, которые теперь не нужны)
	Если (Источник.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Транзит) И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Если ЗначениеЗаполнено(Источник.ВнутреннийЗаказ) Тогда
			Для Каждого стр из Источник.Товары Цикл
				стр.ВнутреннийЗаказ=Источник.ВнутреннийЗаказ;
				стр.ДокументРезерва=Источник.ВнутреннийЗаказ;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//pryan@inbox.ru 16/12/2013
Процедура ЗафиксироватьСтатусСборки(Документ,Статус) Экспорт
	
	ОтветственныйПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей = РегистрыСведений.ИсторияСтатусовДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Отбор.Статус.Установить(Статус);
	НаборЗаписей.Отбор.Ответственный.Установить(ОтветственныйПользователь);
	
	НаборЗаписей.Прочитать();
	если НаборЗаписей.Количество()>0 тогда
		НаборЗаписей[0].ДатаСтатуса = ТекущаяДата();	
	иначе
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДатаСтатуса = ТекущаяДата();
		НоваяЗапись.Документ = Документ;
		НоваяЗапись.Статус = Статус;
		НоваяЗапись.Ответственный = ОтветственныйПользователь;
	конецесли;
	
	попытка
		НаборЗаписей.Записать();
	исключение
	конецпопытки;	
	
КонецПроцедуры	

//pryan@inbox.ru 16/12/2013
Функция ЭтоМагазин(Склад) Экспорт
	
	Если Склад = Справочники.Склады.ПустаяСсылка() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ответ = Ложь;
	Магазин = Справочники.Склады.НайтиПоКоду("000000008"); //Магазины
	
	если Склад.Уровень() > 0 тогда
		если Склад.Родитель = Магазин тогда
			Ответ = Истина;
		конецесли;
	конецесли;
	
	возврат Ответ;	
		
КонецФункции	

Функция СоздатьТаблицуТоваровНаПолке(ТаблицаПоКомплектам)
	
	ТаблицаПоТоварамРезервирование = ТаблицаПоКомплектам.Скопировать();
	
	//Если (Источник.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Отказ) ИЛИ
	//		((Источник.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собирается) И (ЭтотОбъект.Распечатан=Истина)) Тогда
	//		Для Каждого ст из ТаблицаПоТоварамРезервирование Цикл
	//			ст.КоличествоСобрано = ст.Количество;
	//		КонецЦикла;
	//КонецЕсли;

	
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КоличествоСобрано) Тогда
		 	 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	//ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
	
	Возврат ТаблицаПоТоварамРезервирование;
	
КонецФункции // СоздатьТаблицуТоваровНаПолке()

Процедура ОтправимКаПисьмо (Перемещение)
		
	Если Перемещение.СкладПолучатель <> Справочники.Склады.НайтиПоКоду("567") Тогда
		Возврат;
	КонецЕсли;
	
	Печкин = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("000000007");
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(Печкин);
	Подключились = 0;
	
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Подключились=0;
	Пока Подключились=0 Цикл
		Попытка
			ИнтернетПочта.Подключиться(Профиль);
			Подключились = 1;
		Исключение
			Подключились = 0;
		КонецПопытки;
	КонецЦикла;
	
	Если Подключились=0 Тогда
		возврат;
	КонецЕсли; 
	
	ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
	
	ПочтовоеСообщение.Кодировка = "utf-8";
	ПочтовоеСообщение.ИмяОтправителя  = Печкин.Наименование;
	ПочтовоеСообщение.Отправитель     = Печкин.АдресЭлектроннойПочты;
	ПочтовоеСообщение.Тема            = "Создано новое перемещение "+Перемещение.Номер+" "+ТекущаяДата();
	
	//++ Кузнецов С.А. - Закомментировал - 12.08.2016
	//Получатель = ПочтовоеСообщение.Получатели.Добавить();
	//Получатель.Адрес           = "robot1c@rambler.ru";
	//Получатель.ОтображаемоеИмя = "Robot";
	//Получатель.Кодировка       = "utf-8";
	//-- Кузнецов С.А. - 12.08.2016	
	
	Получатель = ПочтовоеСообщение.Получатели.Добавить();
	Получатель.Адрес           = "info@5lb.ru";
	Получатель.ОтображаемоеИмя = "5LB";
	Получатель.Кодировка       = "utf-8";
	
	
	ТекстСообщения = ПочтовоеСообщение.Тексты.Добавить();
	ТекстСообщения.Кодировка = "utf-8";
	ТекстСообщения.Текст     = "В базе создано  "+Перемещение+ " на склад "+Перемещение.СкладПолучатель+". Пользователь: "+ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;                        
	
	ЧистаяПобеда=0;
	Пока ЧистаяПобеда=0 Цикл
		Попытка
			ИнтернетПочта.Послать(ПочтовоеСообщение);
			ЧистаяПобеда = 1;
			возврат;
		Исключение
			ЧистаяПобеда=0;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьБонусныеТовары(Источник) Экспорт
	Источник.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиОсн.Номенклатура,
	               |	ОстаткиОсн.Номенклатура.Родитель КАК Родитель,
	               |	ОстаткиОсн.Номенклатура.НоменклатурнаяГруппа КАК НомГруппа,
	               |	ОстаткиОсн.КоличествоОстаток - ЕСТЬNULL(РезервыОсн.КоличествоОстаток, 0) КАК Свободно,
	               |	ЕСТЬNULL(ОстаткиМаг.КоличествоОстаток, 0) КАК Магазин,
	               |	ОстаткиОсн.Номенклатура.ВесовойКоэффициентВхождения КАК ВесВхождения
	               |ПОМЕСТИТЬ ТЗОстатки
	               |ИЗ
	               |	РегистрСведений.БонусыСроки.СрезПоследних(, ) КАК Бонусы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Основной) КАК ОстаткиОсн
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Склад = &Основной) КАК РезервыОсн
	               |			ПО ОстаткиОсн.Номенклатура = РезервыОсн.Номенклатура
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Магазин) КАК ОстаткиМаг
	               |			ПО ОстаткиОсн.Номенклатура = ОстаткиМаг.Номенклатура
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , Контрагент = &ПятьЛб) КАК Продажи
	               |			ПО ОстаткиОсн.Номенклатура = Продажи.Номенклатура
	               |		ПО (ВЫБОР
	               |				КОГДА Бонусы.Папка.Папка.ЭтоГруппа
	               |					ТОГДА Бонусы.Папка.Папка = ОстаткиОсн.Номенклатура.Родитель
	               |				ИНАЧЕ Бонусы.Папка.Папка = ОстаткиОсн.Номенклатура
	               |			КОНЕЦ)
	               |ГДЕ
	               |	ОстаткиОсн.Номенклатура.Отметить
				   |    И Бонусы.Папка.ОтправлятьВМагазин = ИСТИНА
	               |	И ОстаткиОсн.КоличествоОстаток - ЕСТЬNULL(РезервыОсн.КоличествоОстаток, 0) - ЕСТЬNULL(Продажи.КоличествоОборот, 0) > 1
				   //|	И ВЫБОР
				   //|			КОГДА Бонусы.Папка.ОтправлятьВМагазин = ЛОЖЬ
				   //|				ТОГДА Бонусы.ПроцентПродавцу > 0
				   //|			ИНАЧЕ Бонусы.Папка.ОтправлятьВМагазин = ИСТИНА
				   //|		КОНЕЦ
	               |	И ОстаткиМаг.Номенклатура ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗКол.НомГруппа,
	               |	КОЛИЧЕСТВО(ТЗКол.НомГруппа) КАК КоличествоВхождений
	               |ПОМЕСТИТЬ ТЗКолВх
	               |ИЗ
	               |	ТЗОстатки КАК ТЗКол
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЗКол.НомГруппа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗОстатки.Номенклатура,
	               |	ТЗОстатки.Свободно,
	               |	ТЗОстатки.НомГруппа,
	               |	ТЗОстатки.ВесВхождения,
	               |	ВЫБОР
	               |		КОГДА ТЗОстатки.НомГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	               |			ТОГДА ТЗКолВх.КоличествоВхождений
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТЗКолВх.КоличествоВхождений > 2
	               |					ТОГДА ВЫРАЗИТЬ(ТЗКолВх.КоличествоВхождений * 0.3 КАК ЧИСЛО(15, 0))
	               |				ИНАЧЕ ТЗКолВх.КоличествоВхождений
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ТридцатьПроце,
	               |	ТЗКолВх.КоличествоВхождений
	               |ИЗ
	               |	ТЗОстатки КАК ТЗОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗКолВх КАК ТЗКолВх
	               |		ПО ТЗОстатки.НомГруппа = ТЗКолВх.НомГруппа
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ТЗКолВх.КоличествоВхождений > 2
	               |				ТОГДА ВЫРАЗИТЬ(ТЗКолВх.КоличествоВхождений * 0.3 КАК ЧИСЛО(15, 0))
	               |			ИНАЧЕ ТЗКолВх.КоличествоВхождений
	               |		КОНЕЦ > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТЗОстатки.НомГруппа,
	               |	ТЗОстатки.ВесВхождения УБЫВ";
				   
	Запрос.УстановитьПараметр("Основной",Справочники.Склады.НайтиПоКоду("000000005"));
	Запрос.УстановитьПараметр("Магазин",Источник.СкладПолучатель);
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ТекущаяДата())-7*86400);
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПятьЛб",Справочники.Контрагенты.НайтиПоКоду("000000059"));
	
	ТабСТоваром = Новый ТаблицаЗначений;
	ТабСТоваром.Колонки.Добавить("Номенклатура");
	ТабСТоваром.Колонки.Добавить("Родитель");
	ТабСТоваром.Колонки.Добавить("Свободно");
	
				
	ТекГруппа = "";
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Если ТекГруппа<>Выб.НомГруппа Тогда
			ТридцатьПроцент = Выб.ТридцатьПроце;
		КонецЕсли;
		
		Если ТридцатьПроцент>0 Тогда
			Нов = ТабСТоваром.Добавить();
			Нов.Номенклатура = Выб.Номенклатура;
			Нов.Родитель = Выб.Номенклатура.Родитель;
			Нов.Свободно = Выб.Свободно;
			ТридцатьПроцент = ТридцатьПроцент-1;
		КонецЕсли;
		
		
		ТекГруппа = Выб.НомГруппа;
	КонецЦикла;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ОстаткиОсн.Номенклатура,
	//               |	ОстаткиОсн.Номенклатура.Родитель КАК Родитель,
	//               |	ОстаткиОсн.Номенклатура.НоменклатурнаяГруппа КАК НомГруппа,
	//               |	ОстаткиОсн.КоличествоОстаток - ЕСТЬNULL(РезервыОсн.КоличествоОстаток, 0) КАК Свободно,
	//               |	ЕСТЬNULL(ОстаткиМаг.КоличествоОстаток, 0) КАК Магазин
	//               |ИЗ
	//               |	РегистрСведений.БонусыСроки.СрезПоследних(, ) КАК Бонусы
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Основной) КАК ОстаткиОсн
	//               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Склад = &Основной) КАК РезервыОсн
	//               |			ПО ОстаткиОсн.Номенклатура = РезервыОсн.Номенклатура
	//               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Магазин) КАК ОстаткиМаг
	//               |			ПО ОстаткиОсн.Номенклатура = ОстаткиМаг.Номенклатура
	//               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , Контрагент = &ПятьЛб) КАК Продажи
	//               |			ПО ОстаткиОсн.Номенклатура = Продажи.Номенклатура
	//               |		ПО (ВЫБОР
	//               |				КОГДА Бонусы.Папка.Папка.ЭтоГруппа
	//               |					ТОГДА Бонусы.Папка.Папка = ОстаткиОсн.Номенклатура.Родитель
	//               |				ИНАЧЕ Бонусы.Папка.Папка = ОстаткиОсн.Номенклатура
	//               |			КОНЕЦ)
	//               |ГДЕ
	//               |	ОстаткиОсн.Номенклатура.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	//               |	И ОстаткиОсн.Номенклатура.Отметить
	//               |	И ОстаткиОсн.КоличествоОстаток - ЕСТЬNULL(РезервыОсн.КоличествоОстаток, 0) - ЕСТЬNULL(Продажи.КоличествоОборот, 0) > 1
	//               |	И ВЫБОР
	//               |			КОГДА Бонусы.Папка.ОтправлятьВМагазин = ЛОЖЬ
	//               |				ТОГДА Бонусы.ПроцентПродавцу > 0
	//               |			ИНАЧЕ Бонусы.Папка.ОтправлятьВМагазин = ИСТИНА
	//               |		КОНЕЦ
	//               |	И ОстаткиМаг.Номенклатура ЕСТЬ NULL ";
	//			  
	//Запрос.УстановитьПараметр("Основной",Справочники.Склады.НайтиПоКоду("000000005"));
	//Запрос.УстановитьПараметр("Магазин",Источник.СкладПолучатель);
	//Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ТекущаяДата())-7*86400);
	//Запрос.УстановитьПараметр("ДатаКон",КонецДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("ПятьЛб",Справочники.Контрагенты.НайтиПоКоду("000000059"));

	//Выб = Запрос.Выполнить().Выбрать();
	//Пока Выб.Следующий() Цикл
	//	Нов = ТабСТоваром.Добавить();
	//	Нов.Номенклатура = Выб.Номенклатура;
	//	Нов.Родитель = Выб.Родитель;
	//	Нов.Свободно = Выб.Свободно;
	//КонецЦикла;

	
	//Теперь НЕ бонусы, но тоже нужно отправить
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиОсн.Номенклатура,
	               |	ОстаткиОсн.Номенклатура.Родитель КАК Родитель,
	               |	ОстаткиОсн.Номенклатура.НоменклатурнаяГруппа КАК НомГруппа,
	               |	ОстаткиОсн.КоличествоОстаток - ЕСТЬNULL(РезервыОсн.КоличествоОстаток, 0) КАК Свободно,
	               |	ЕСТЬNULL(ОстаткиМаг.КоличествоОстаток, 0) КАК Магазин,
	               |	ОстаткиОсн.Номенклатура.ВесовойКоэффициентВхождения КАК ВесВхождения
	               |ПОМЕСТИТЬ ТЗОстатки
	               |ИЗ
	               |	РегистрСведений.АвтоДобавлениеВМагазин КАК АвтоДобавить
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Основной) КАК ОстаткиОсн
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Склад = &Основной) КАК РезервыОсн
	               |			ПО ОстаткиОсн.Номенклатура = РезервыОсн.Номенклатура
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Магазин) КАК ОстаткиМаг
	               |			ПО ОстаткиОсн.Номенклатура = ОстаткиМаг.Номенклатура
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , Контрагент = &ПятьЛб) КАК Продажи
	               |			ПО ОстаткиОсн.Номенклатура = Продажи.Номенклатура
	               |		ПО (ВЫБОР
	               |				КОГДА АвтоДобавить.Номенклатура.ЭтоГруппа
	               |					ТОГДА АвтоДобавить.Номенклатура = ОстаткиОсн.Номенклатура.Родитель
	               |				ИНАЧЕ АвтоДобавить.Номенклатура = ОстаткиОсн.Номенклатура
	               |			КОНЕЦ)
	               |ГДЕ
		 	 	   |	АвтоДобавить.Раздел = ЗНАЧЕНИЕ(Перечисление.Правила.ПустаяСсылка)
				   |	И ОстаткиОсн.Номенклатура.Отметить
                   |	И ОстаткиОсн.КоличествоОстаток - ЕСТЬNULL(РезервыОсн.КоличествоОстаток, 0) - ЕСТЬNULL(Продажи.КоличествоОборот, 0) > 1
	               |	И ОстаткиМаг.Номенклатура ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗКол.НомГруппа,
	               |	КОЛИЧЕСТВО(ТЗКол.НомГруппа) КАК КоличествоВхождений
	               |ПОМЕСТИТЬ ТЗКолВх
	               |ИЗ
	               |	ТЗОстатки КАК ТЗКол
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЗКол.НомГруппа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗОстатки.Номенклатура,
	               |	ТЗОстатки.Свободно,
	               |	ТЗОстатки.НомГруппа,
	               |	ТЗОстатки.ВесВхождения,
	               |	ВЫБОР
	               |		КОГДА ТЗОстатки.НомГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	               |			ТОГДА ТЗКолВх.КоличествоВхождений
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТЗКолВх.КоличествоВхождений > 2
	               |					ТОГДА ВЫРАЗИТЬ(ТЗКолВх.КоличествоВхождений * 0.3 КАК ЧИСЛО(15, 0))
	               |				ИНАЧЕ ТЗКолВх.КоличествоВхождений
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ТридцатьПроце,
	               |	ТЗКолВх.КоличествоВхождений
	               |ИЗ
	               |	ТЗОстатки КАК ТЗОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗКолВх КАК ТЗКолВх
	               |		ПО ТЗОстатки.НомГруппа = ТЗКолВх.НомГруппа
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ТЗКолВх.КоличествоВхождений > 2
	               |				ТОГДА ВЫРАЗИТЬ(ТЗКолВх.КоличествоВхождений * 0.3 КАК ЧИСЛО(15, 0))
	               |			ИНАЧЕ ТЗКолВх.КоличествоВхождений
	               |		КОНЕЦ > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТЗОстатки.НомГруппа,
	               |	ТЗОстатки.ВесВхождения УБЫВ";
				   
	Запрос.УстановитьПараметр("Основной",Справочники.Склады.НайтиПоКоду("000000005"));
	Запрос.УстановитьПараметр("Магазин",Источник.СкладПолучатель);
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ТекущаяДата())-7*86400);
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПятьЛб",Справочники.Контрагенты.НайтиПоКоду("000000059"));

	ТекГруппа = "";
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Если ТекГруппа<>Выб.НомГруппа Тогда
			ТридцатьПроцент = Выб.ТридцатьПроце;
		КонецЕсли;
		
		Если ТридцатьПроцент>0 Тогда
			Нов = ТабСТоваром.Добавить();
			Нов.Номенклатура = Выб.Номенклатура;
			Нов.Родитель = Выб.Номенклатура.Родитель;
			Нов.Свободно = Выб.Свободно;
			ТридцатьПроцент = ТридцатьПроцент-1;
		КонецЕсли;
		
		
		ТекГруппа = Выб.НомГруппа;
	КонецЦикла;

	
	ТабСТоваром.Сортировать("Родитель,Номенклатура");
	
	Для Каждого ст из ТабСТоваром Цикл
		Нов = Источник.Товары.Добавить();
		Нов.Номенклатура = ст.Номенклатура;
		ЛокКоэффициент = 1;
		Если ст.Номенклатура.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
			ВыбЕд = Справочники.ЕдиницыИзмерения.Выбрать(,ст.Номенклатура);
			Пока ВыбЕд.Следующий() Цикл
				Если ВыбЕд.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
					ЛокКоэффициент = ВыбЕд.Коэффициент;
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;			
		
		Нов.ЕдиницаИзмерения = Нов.Номенклатура.ЕдиницаХраненияОстатков;
		Нов.Качество=Справочники.Качество.Новый;
		Если ЛокКоэффициент = 1 Тогда
			Нов.Количество = 1;
		Иначе
			Если ЛокКоэффициент>ст.Свободно Тогда
				Нов.Количество = ст.Свободно;
			Иначе
				Нов.Количество = ЛокКоэффициент;
			КонецЕсли;
		КонецЕсли;
		Нов.Коэффициент = Нов.ЕдиницаИзмерения.Коэффициент;
		Нов.БонусныйТовар = Истина;
	КонецЦикла;
	
	
					  
КонецПроцедуры

Функция ПолучитьСвободныйОстаток (Источник)
	
	Списко = Новый СписокЗначений;
	
		Для Каждого стр из Источник.Товары Цикл
			Списко.Добавить(стр.Номенклатура);
		КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток - ВЫБОР
	               |		КОГДА ЕСТЬNULL(ТоварыВРезерве.КоличествоОстаток, 0) = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ ТоварыВРезерве.КоличествоОстаток
	               |	КОНЕЦ КАК Свободный,
	               |	ВЫБОР
	               |		КОГДА ТоварыНаСкладахОстатки.КоличествоОстаток - ВЫБОР
	               |				КОГДА ЕСТЬNULL(ТоварыВРезерве.КоличествоОстаток, 0) = 0
	               |					ТОГДА 0
	               |				ИНАЧЕ ТоварыВРезерве.КоличествоОстаток
	               |			КОНЕЦ > ТоварыНаСкладахОстатки.КоличествоОстаток
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Косяк
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(&КонДата, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&КонДата, Склад = &Склад) КАК ТоварыВРезерве
	               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезерве.Номенклатура
	               |ГДЕ
	               |	ТоварыНаСкладахОстатки.Номенклатура В(&Список)";
	
	Запрос.УстановитьПараметр("КонДата",ТекущаяДата());
	Запрос.УстановитьПараметр("Склад",Источник.СкладОтправитель);
	Запрос.УстановитьПараметр("Список",Списко);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции


Функция ОбработатьНедостачу (Источник,ТекКладовщик) Экспорт
	Если Источник.Товары.Итог("Количество")=Источник.Товары.Итог("КоличествоСобрано") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Источник.Товары.Итог("КоличествоСобрано")=0  Тогда
		//только на клиенте. 13.03.2017, Юра
		#Если Клиент Тогда
		Предупреждение ("Не собрано ни одного товара! Если это не ошибка, обратитесь к руководству!",,"5LB");
		#КонецЕсли
		Возврат Истина;
	КонецЕсли;
	
	ТМПТабСвободныйОстаток = ПолучитьСвободныйОстаток(Источник);
	
	НовПеремещ = Документы.ПеремещениеТоваров.СоздатьДокумент();
	НовПеремещ.Дата = ТекущаяДата();
	НовПеремещ.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	НовПеремещ.Комментарий = "Создан по факту недостачи (склад) в перемещении "+Источник.Номер;
	НовПеремещ.ОтражатьВУправленческомУчете=Истина;
	НовПеремещ.Организация = Справочники.Организации.НайтиПоКоду("000000001");
	НовПеремещ.СкладОтправитель = Справочники.Склады.НайтиПоКоду("000000005");
	НовПеремещ.СкладПолучатель = Справочники.Склады.НайтиПоКоду("000000014");//"5"//Был "Резервный", теперь надо "Претензионный" (Иванов Иван) 11.04.2017, Юра
	НовПеремещ.Ответственный = ТекКладовщик;
	
	Для Каждого ст Из Источник.Товары Цикл
		//Если (ст.БонусныйТовар) И (ст.КоличествоСобрано<>ст.Количество) Тогда
		Если ст.КоличествоСобрано<>ст.Количество Тогда
			ТекСтр = ТМПТабСвободныйОстаток.Найти(ст.Номенклатура,"Номенклатура");
			Если (ТекСтр<>Неопределено) И (ТекСтр.Свободный<0) Тогда
				продолжить;
			ИначеЕсли ТекСтр.Косяк Тогда
				продолжить;
			ИначеЕсли ТекСтр<>Неопределено Тогда
				Если ТекСтр.Свободный<ст.Количество-ст.КоличествоСобрано Тогда
					продолжить;
				КонецЕсли;
			КонецЕсли;
			НовСтр = НовПеремещ.Товары.Добавить();
			НовСтр.Номенклатура = ст.Номенклатура;
			НовСтр.ЕдиницаИзмерения = НовСтр.Номенклатура.ЕдиницаХраненияОстатков;
			НовСтр.Качество=Справочники.Качество.Новый;
			НовСтр.Количество = ст.Количество-ст.КоличествоСобрано;
			НовСтр.Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;
			Если ст.КоличествоСобрано>0 Тогда
				ст.Количество = ст.КоличествоСобрано;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НовПеремещ.Товары.Количество()>0 Тогда
		Попытка
			НовПеремещ.ЗаполнитьПоСериям();
			НовПеремещ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			Сообщить ("Ошибка записи документа! "+ОписаниеОшибки());
			Возврат Истина;
		КонецПопытки;
	КонецЕсли;
	
	
	к=0;
	Пока к<Источник.Товары.Количество() Цикл
		//Если (Источник.Товары[к].БонусныйТовар) И (Источник.Товары[к].КоличествоСобрано=0) Тогда
		Если (Источник.Товары[к].КоличествоСобрано=0) Тогда
			Источник.Товары.Удалить(к);
			продолжить;
		КонецЕсли;
		к=к+1;
	КонецЦикла;

    Возврат Ложь;
	
КонецФункции

Процедура ОбработатьРасхожденияМагазин(Источник) Экспорт
	//Закомментировал весь код процедуры. Подробное описание изменений см. в справке РС._5LB_ПеремещенияНаОснованииПеремещений 20.04.2017, Юра
	
	//Было до 20.04.2017, Юра
//	Если (Источник.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Транзит) Тогда
//	Если РольДоступна(Метаданные.Роли.Пользователь) Тогда
//		
//			Если Источник.Товары.Количество() = 0 Тогда
//				возврат;
//			КонецЕсли;
//			Расхождения=0;
//			Для Каждого ст из Источник.Товары Цикл
//				Если ст.КоличествоСобрано<>ст.КоличествоПринято Тогда
//										
//					Расхождения=1;
//															
//					НовПеремещ = Документы.ПеремещениеТоваров.СоздатьДокумент();
//					НовПеремещ.Дата = ТекущаяДата();
//					НовПеремещ.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Транзит;
//					НовПеремещ.Комментарий = "Создан по факту недостачи в перемещении "+Источник.Номер;
//					НовПеремещ.ОтражатьВУправленческомУчете=Истина;
//					НовПеремещ.Организация = Справочники.Организации.НайтиПоКоду("000000001");
//					НовПеремещ.СкладОтправитель = Источник.СкладПолучатель;
//					НовПеремещ.СкладПолучатель = Справочники.Склады.НайтиПоКоду("000000014");//"5"//Был "Резервный", теперь надо "Претензионный" (Иванов Иван) 11.04.2017, Юра
//					НовПеремещ.Ответственный = ПараметрыСеанса.ТекущийПользователь.Ссылка;
//					НовПеремещ.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;
//					
//					НовПеремещ2 = Документы.ПеремещениеТоваров.СоздатьДокумент();
//					НовПеремещ2.Дата = ТекущаяДата();
//					НовПеремещ2.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
//					НовПеремещ2.Комментарий = "Создан по факту излишек в перемещении "+Источник.Номер;
//					НовПеремещ2.ОтражатьВУправленческомУчете=Истина;
//					НовПеремещ2.Организация = Справочники.Организации.НайтиПоКоду("000000001");
//					НовПеремещ2.СкладОтправитель = Источник.СкладОтправитель;
//					НовПеремещ2.СкладПолучатель = Источник.СкладПолучатель;
//					НовПеремещ2.Ответственный = ПараметрыСеанса.ТекущийПользователь.Ссылка;
//					НовПеремещ2.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;
//					прервать;
//				КонецЕсли;
//			КонецЦикла;
//			
//			Если Расхождения=1 Тогда
//				Для Каждого стр из Источник.Товары Цикл
//					Если стр.КоличествоСобрано = стр.КоличествоПринято Тогда
//						продолжить;
//					КонецЕсли;
//					
//					Если стр.КоличествоСобрано>стр.КоличествоПринято Тогда
//						НовСтр = НовПеремещ.Товары.Добавить();
//						НовСтр.Номенклатура = стр.Номенклатура;
//						Если стр.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
//							ВыбЕд = Справочники.ЕдиницыИзмерения.Выбрать(,стр.Номенклатура);
//							Пока ВыбЕд.Следующий() Цикл
//								Если ВыбЕд.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
//									НовСтр.ЕдиницаИзмерения = ВыбЕд.Ссылка;
//									НовСтр.Коэффициент = ВыбЕд.Коэффициент;
//									прервать;
//								КонецЕсли;
//							КонецЦикла;
//						Иначе
//							НовСтр.ЕдиницаИзмерения = НовСтр.Номенклатура.ЕдиницаХраненияОстатков;
//							НовСтр.Коэффициент = 1;
//						КонецЕсли;
//						НовСтр.Качество = Справочники.Качество.Новый;
//						НовСтр.Количество = стр.КоличествоСобрано-стр.КоличествоПринято;
//					ИначеЕсли стр.КоличествоСобрано<стр.КоличествоПринято Тогда
//						НовСтр2 = НовПеремещ2.Товары.Добавить();
//						НовСтр2.Номенклатура = стр.Номенклатура;
//						Если стр.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
//							ВыбЕд = Справочники.ЕдиницыИзмерения.Выбрать(,стр.Номенклатура);
//							Пока ВыбЕд.Следующий() Цикл
//								Если ВыбЕд.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
//									НовСтр2.ЕдиницаИзмерения = ВыбЕд.Ссылка;
//									НовСтр2.Коэффициент = ВыбЕд.Коэффициент;
//									прервать;
//								КонецЕсли;
//							КонецЦикла;
//						Иначе
//							НовСтр2.ЕдиницаИзмерения = НовСтр2.Номенклатура.ЕдиницаХраненияОстатков;
//							НовСтр2.Коэффициент = 1;
//						КонецЕсли;
//						НовСтр2.Качество = Справочники.Качество.Новый;
//						НовСтр2.Количество = стр.КоличествоПринято-стр.КоличествоСобрано;
//					КонецЕсли;
//					
//				КонецЦикла;
//				
//				к=0;
//				Пока к<Источник.Товары.Количество() Цикл
//					Если Источник.Товары[к].КоличествоСобрано = 0 Тогда
//						Источник.Товары.Удалить(к);
//						продолжить;
//					КонецЕсли;
//					к=к+1;
//				КонецЦикла;

//				Источник.Записать (РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
//				
//				Если НовПеремещ.Товары.Количество()>0 Тогда
//					Попытка
//						//НовПеремещ.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
//						НовПеремещ.Записать(РежимЗаписиДокумента.Запись);
//					Исключение
//						Сообщить (ОписаниеОшибки());
//					КонецПопытки;
//				КонецЕсли;
//				
//				Если НовПеремещ2.Товары.Количество()>0 Тогда
//					Попытка
//						НовПеремещ2.ЗаполнитьПоСериям();
//						НовПеремещ2.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
//						Источник.Комментарий = Источник.Комментарий+"iddqd";
//					Исключение
//						Сообщить (ОписаниеОшибки());
//					КонецПопытки;
//				КонецЕсли;
//			КонецЕсли;
//		
//	КонецЕсли;
//КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоОтправителю (Источник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Остатки.Номенклатура,
	               |	Остатки.Качество,
	               |	Остатки.КоличествоОстаток КАК Количество,
	               |	Остатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаДока, Склад = &Склад) КАК Остатки
	               |ГДЕ
	               |	Остатки.КоличествоОстаток > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Остатки.Номенклатура.Артикул";
				   
				   Запрос.УстановитьПараметр("Склад",Источник.СкладОтправитель);
				   Запрос.УстановитьПараметр("ДатаДока",КонецДня(ТекущаяДата()));
	
	Источник.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
			
	//Заполняем серии... 
	ТоварыТабличнойЧасти = Источник.Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаРезервовПоСериям = Новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(Источник.СкладОтправитель, Источник.Организация, МассивНоменклатуры, , Источник.СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ,ТаблицаРезервовПоСериям,КонецДня(ТекущаяДата()));
	ТаблицаСерий.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,Качество");

	ТоварыТабличнойЧасти=Источник.Товары.Выгрузить();

	Источник.Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтруктураПоиска   = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);

		Если Источник.СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтруктураПоиска.Вставить("Цена",                   ИсходнаяСтрока.Цена);
		КонецЕсли;
		
		ЗаполнятьИзРезервов = Ложь;
		Если ТипЗнч(ИсходнаяСтрока.ДокументРезерва) = Тип("ДокументСсылка.ЗаказПокупателя") 
		   И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании
		   И Источник.СкладОтправитель.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда

			Если ИсходнаяСтрока.ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтруктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ДокументРезерва);
				ЗаполнятьИзРезервов = Истина;
			КонецЕсли;

		КонецЕсли;

		Если ЗаполнятьИзРезервов Тогда
			НайденныеСтроки = ТаблицаРезервовПоСериям.НайтиСтроки(СтруктураПоиска);
		Иначе
			НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;

		СтрокаСПустойСерией = Неопределено;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			Если СписанноеКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = Источник.Товары.Добавить();
			НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест         = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры            = Строка.СерияНоменклатуры;
			НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;
			НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
			НоваяСтрока.ВнутреннийЗаказ              = ИсходнаяСтрока.ВнутреннийЗаказ;
			НоваяСтрока.Количество                   = СписанноеКоличество; 
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, Источник);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество* ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;            

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Источник.Товары.Добавить();
				НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.ЕдиницаИзмеренияМест         = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
				НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры            = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;
				НоваяСтрока.ВнутреннийЗаказ              = ИсходнаяСтрока.ВнутреннийЗаказ;
				НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
				НоваяСтрока.Количество                   = КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, Источник);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	
КонецПроцедуры 

//20.04.2017, Юра
//Подробное описание изменений см. в справке РС._5LB_ПеремещенияНаОснованииПеремещений
Процедура ПриПроведенииПеремещениеТоваров(Источник, Отказ, РежимПроведения) Экспорт
//	При проведении документа "Перемещение товаров" при выполнении условий:
//     1) Склад отправитель = Основной, склад получатель = Магазин
//     2) Статус сборки = "Собрано"
//     3) Документ не проведен
//     4) Для данного документа нет записей в РС._5LB_ПеремещенияНаОснованииПеремещений (см. измерение "ДокументПеремещенияОсновной")
// 
//Нужно:
//    1) Не менять дату документа
//    2) Убрать проверки в коде на роли пользователей
//    3) В одной транзакции должно быть и проведение документа и создание доп. документов "Перемещение товаров"
//         на расхождения в колонках "Количество" и "Принято" (для строк документа, где Количество > Принято создаем документ перемещения,
//         где склад отправитель = Магазин, склад получатель = Претензионный. Этот документ только записывается (без проведения).
//         Для строк документа, где Количество < Принято создаем документ перемещения, где склад отправитель = Основной,
//        склад получатель = Магазин. Этот документ проводится.
//    4) Не изменять значения в колонках "Количество"и "Принято"
//    5) Не давать проводить/перепроводить документ при наличии для данного документа записей в РС._5LB_ПеремещенияНаОснованииПеремещений (см. измерение "ДокументПеремещенияОсновной")
// 
//Дополниельное требование:

//Кнопка "ОК" в документе "Перемещение товаров" должна только вызывать процедуру проведения (как в типовой), а все доп. проверки/действия убрать.

//Источник = Документы.ПеремещениеТоваров.СоздатьДокумент();

	СкладОсновной = Справочники.Склады.НайтиПоКоду("000000005");
	ПапкаМагазинов = Справочники.Склады.НайтиПоКоду("000000008");
	Если Источник.Товары.Количество() = 0 ИЛИ //Если Источник.Проведен ИЛИ 
		Источник.СтатусСборки <> Перечисления.СтатусыСборкиЗаказа.Собран ИЛИ
		Источник.СкладОтправитель <> СкладОсновной ИЛИ  Источник.СкладПолучатель.Родитель <> ПапкаМагазинов Тогда
		Возврат;
	КонецЕсли;
	//и проверим, что для данного перемещения уже не созданы перемещения на расхождения:
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	_5LB_ПеремещенияНаОснованииПеремещений.ДокументПеремещенияПоФактуРасхождения
	               |ИЗ
	               |	РегистрСведений._5LB_ПеремещенияНаОснованииПеремещений КАК _5LB_ПеремещенияНаОснованииПеремещений
	               |ГДЕ
	               |	_5LB_ПеремещенияНаОснованииПеремещений.ДокументПеремещенияОсновной = &ДокументПеремещенияОсновной";
	Запрос.УстановитьПараметр("ДокументПеремещенияОсновной", Источник.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	НовПеремещ = Документы.ПеремещениеТоваров.СоздатьДокумент();
	НовПеремещ.Дата = ТекущаяДата();
	НовПеремещ.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;//Транзит; Делаем НЕ транзит, чтобы не создавался при записи документ "Внутренний заказ" //26.04.2017, Юра
	НовПеремещ.Комментарий = "Создан по факту недостачи в перемещении "+Источник.Номер;
	НовПеремещ.ОтражатьВУправленческомУчете=Истина;
	НовПеремещ.Организация = Справочники.Организации.НайтиПоКоду("000000001");
	НовПеремещ.СкладОтправитель = Источник.СкладПолучатель;
	НовПеремещ.СкладПолучатель = Справочники.Склады.НайтиПоКоду("000000014");//"5"//Был "Резервный", теперь надо "Претензионный" (Иванов Иван) 11.04.2017, Юра
	НовПеремещ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НовПеремещ.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;

	НовПеремещ2 = Документы.ПеремещениеТоваров.СоздатьДокумент();
	НовПеремещ2.Дата = ТекущаяДата();
	НовПеремещ2.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	НовПеремещ2.Комментарий = "Создан по факту излишек в перемещении "+Источник.Номер;
	НовПеремещ2.ОтражатьВУправленческомУчете=Истина;
	НовПеремещ2.Организация = Справочники.Организации.НайтиПоКоду("000000001");
	НовПеремещ2.СкладОтправитель = Источник.СкладОтправитель;
	НовПеремещ2.СкладПолучатель = Источник.СкладПолучатель;
	НовПеремещ2.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НовПеремещ2.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;

	//21.04.2017, Юра
	НеНужнаяДляОбработкиНоменклатура = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ(&ПапкаНеТМЦ) ИЛИ Номенклатура.Ссылка В ИЕРАРХИИ(&ПапкаУслуги)";
	Запрос.УстановитьПараметр("ПапкаНеТМЦ", Справочники.Номенклатура.НайтиПоНаименованию("Не ТМЦ",Истина));
	Запрос.УстановитьПараметр("ПапкаУслуги", Справочники.Номенклатура.НайтиПоНаименованию("Услуги",Истина));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НеНужнаяДляОбработкиНоменклатура.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Для Каждого стр из Источник.Товары Цикл
		Если стр.КоличествоСобрано = стр.КоличествоПринято Тогда
			продолжить;
		КонецЕсли;
		
		//Не обрабатываем строки с номенклатурой "Тряпка", "Услуга ..." и т.п. 21.04.2017, Юра
		Если НЕ НеНужнаяДляОбработкиНоменклатура.НайтиПоЗначению(стр.Номенклатура) = Неопределено Тогда
			продолжить;
		КонецЕсли;
		
		Если стр.КоличествоСобрано > стр.КоличествоПринято Тогда
			НовСтр = НовПеремещ.Товары.Добавить();
			НовСтр.Номенклатура = стр.Номенклатура;
			
			//Если стр.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
			//	ВыбЕд = Справочники.ЕдиницыИзмерения.Выбрать(,стр.Номенклатура);
			//	Пока ВыбЕд.Следующий() Цикл
			//		Если ВыбЕд.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
			//			НовСтр.ЕдиницаИзмерения = ВыбЕд.Ссылка;
			//			НовСтр.Коэффициент = ВыбЕд.Коэффициент;
			//			прервать;
			//		КонецЕсли;
			//	КонецЦикла;
			//Иначе
			//	НовСтр.ЕдиницаИзмерения = НовСтр.Номенклатура.ЕдиницаХраненияОстатков;
			//	НовСтр.Коэффициент = 1;
			//КонецЕсли;
			//ДанныеПоЕдИзмерения = ПолучитьДанныеПоЕдИзмерения(стр.ЕдиницаИзмерения,стр.Номенклатура);
			//НовСтр.ЕдиницаИзмерения = ДанныеПоЕдИзмерения.ЕдИзм;
			//НовСтр.Коэффициент = ДанныеПоЕдИзмерения.Коэффициент;
			
			НовСтр.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
			НовСтр.Коэффициент = стр.Коэффициент;
			
			НовСтр.Качество = Справочники.Качество.Новый;
			НовСтр.Количество = стр.КоличествоСобрано-стр.КоличествоПринято;
		ИначеЕсли стр.КоличествоСобрано<стр.КоличествоПринято Тогда
			НовСтр2 = НовПеремещ2.Товары.Добавить();
			НовСтр2.Номенклатура = стр.Номенклатура;
			//Если стр.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
			//	ВыбЕд = Справочники.ЕдиницыИзмерения.Выбрать(,стр.Номенклатура);
			//	Пока ВыбЕд.Следующий() Цикл
			//		Если ВыбЕд.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
			//			НовСтр2.ЕдиницаИзмерения = ВыбЕд.Ссылка;
			//			НовСтр2.Коэффициент = ВыбЕд.Коэффициент;
			//			прервать;
			//		КонецЕсли;
			//	КонецЦикла;
			//Иначе
			//	НовСтр2.ЕдиницаИзмерения = НовСтр2.Номенклатура.ЕдиницаХраненияОстатков;
			//	НовСтр2.Коэффициент = 1;
			//КонецЕсли;
			//ДанныеПоЕдИзмерения = ПолучитьДанныеПоЕдИзмерения(стр.ЕдиницаИзмерения,стр.Номенклатура);
			//НовСтр2.ЕдиницаИзмерения = ДанныеПоЕдИзмерения.ЕдИзм;//26.04.2017, Юра
			//НовСтр2.Коэффициент = ДанныеПоЕдИзмерения.Коэффициент;//26.04.2017, Юра
			
			НовСтр2.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
			НовСтр2.Коэффициент = стр.Коэффициент;
			
			НовСтр2.Качество = Справочники.Качество.Новый;
			НовСтр2.Количество = стр.КоличествоПринято-стр.КоличествоСобрано;
		КонецЕсли;
	КонецЦикла;

	//к=0;
	//Пока к<Источник.Товары.Количество() Цикл
	//	Если Источник.Товары[к].КоличествоСобрано = 0 Тогда
	//		Источник.Товары.Удалить(к);
	//		продолжить;
	//	КонецЕсли;
	//	к=к+1;
	//КонецЦикла;

	//Источник.Записать (РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);

	Если НовПеремещ.Товары.Количество()>0 Тогда
		Попытка
			//НовПеремещ.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			НовПеремещ.Записать(РежимЗаписиДокумента.Запись);
			
			менЗап = РегистрыСведений._5LB_ПеремещенияНаОснованииПеремещений.СоздатьМенеджерЗаписи();
			менЗап.ДокументПеремещенияОсновной = Источник.Ссылка;
			менЗап.ЭтоРасхождениеГдеКоличествоБольшеПринято = Истина;
			менЗап.ДокументПеремещенияПоФактуРасхождения = НовПеремещ.Ссылка;
			менЗап.Записать();
			
		Исключение
			Сообщить (ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;

	Если НовПеремещ2.Товары.Количество()>0 Тогда
		Попытка
			//НовПеремещ2.ЗаполнитьПоСериям();//тут, конечно х.з. что такое
			НовПеремещ2.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			//Источник.Комментарий = Источник.Комментарий+"iddqd";
			
			менЗап = РегистрыСведений._5LB_ПеремещенияНаОснованииПеремещений.СоздатьМенеджерЗаписи();
			менЗап.ДокументПеремещенияОсновной = Источник.Ссылка;
			менЗап.ЭтоРасхождениеГдеКоличествоБольшеПринято = Ложь;
			менЗап.ДокументПеремещенияПоФактуРасхождения = НовПеремещ2.Ссылка;
			менЗап.Записать();
			
		Исключение
			Сообщить (ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

//20.04.2017, Юра
Функция ПолучитьДанныеПоЕдИзмерения(ЕдиницаИзмерения,Номенклатура)
	СтруктраДляВозврата = Новый Структура;
	Если ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ЕдиницыИзмерения.Ссылка,
		               |	ЕдиницыИзмерения.Коэффициент
		               |ИЗ
		               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		               |ГДЕ
		               |	ЕдиницыИзмерения.Владелец = &Владелец
		               |	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору";
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору", Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778"));
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтруктраДляВозврата.Вставить("ЕдИзм",ВыборкаДетальныеЗаписи.Ссылка);
			СтруктраДляВозврата.Вставить("Коэффициент",ВыборкаДетальныеЗаписи.Коэффициент);
		Иначе
			СтруктраДляВозврата.Вставить("ЕдИзм",Номенклатура.ЕдиницаХраненияОстатков);
			СтруктраДляВозврата.Вставить("Коэффициент",1);
		КонецЕсли;
	Иначе
		СтруктраДляВозврата.Вставить("ЕдИзм",Номенклатура.ЕдиницаХраненияОстатков);
		СтруктраДляВозврата.Вставить("Коэффициент",1);
	КонецЕсли;
	
	Возврат СтруктраДляВозврата;
КонецФункции

Процедура ПриЗаписиПеремещенияПриЗаписи(Источник, Отказ) Экспорт
	//25052018 Пометка удаления = отмена в ЕМЕ, если это не Савеловская-Станколит
	Если (Источник.ПометкаУдаления) И (Источник.СкладПолучатель <> Справочники.Склады.НайтиПоКоду("610")) Тогда
		EmeWmsЭкспортПеремещенийТоваров.ПометитьКЭкспортуПовторно(Источник);
	КонецЕсли;
КонецПроцедуры

// Женя 10.08.2018
// ID заявки : 567 в http://servicedesk
// Добавить фиксацию статуса доставки перемещения в РС "История статусов документов"
// ((
Процедура ЗафиксироватьСтатусДоставки(Документ,Статус) Экспорт
	
	ОтветственныйПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей = РегистрыСведений.ИсторияСтатусовДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Отбор.Статус.Установить(Статус);
	НаборЗаписей.Отбор.Ответственный.Установить(ОтветственныйПользователь);
	
	НаборЗаписей.Прочитать();
	если НаборЗаписей.Количество()>0 тогда
		НаборЗаписей[0].ДатаСтатуса = ТекущаяДата();	
	иначе
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДатаСтатуса = ТекущаяДата();
		НоваяЗапись.Документ = Документ;
		НоваяЗапись.Статус = Статус;
		НоваяЗапись.Ответственный = ОтветственныйПользователь;
	конецесли;
	
	попытка
		НаборЗаписей.Записать();
	исключение
	конецпопытки;	
	
КонецПроцедуры	
// )) 10.08.2018 Женя