// Copyright (C) 2012-2016 Engineer Mareev Enterprises

//	Процедура ИмпортироватьВозвратыТоваровОтПокупателей импортирует возвраты товаров от покупателей.
Процедура ИмпортироватьВозвратыТоваровОтПокупателей(ERPData) Экспорт
	
	ЗаголовкиСообщений = Новый ТаблицаЗначений();
	EmeWmsERPEngine.GetHeaders(ERPData, "wms", "erp", "receipt", "NEW,WRN", ЗаголовкиСообщений);
	
	Счетчик = 0;
	Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
		
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней	
		EmeWmsERPEngine.BeginImport(ERPData, "wms", "erp", "receipt", ЗаголовокСообщения.id);
		Попытка
			НовоеСообщение = (ЗаголовокСообщения.state = "NEW");
			Трассировка = "";
			ТемаСообщения = "";
			НачатьТранзакцию();
			Попытка
				Пока EmeWmsERPEngine.NextHeaderLine(ERPData) Цикл
					Если EmeWmsУтилиты.ЭтоВозврат(ERPData.header.asn_reg_no) Тогда
						ИмпортироватьВозвратТовараОтПокупателя(ERPData, Трассировка, ТемаСообщения);
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
			EmeWmsERPEngine.CommitImport(ERPData);
			Если НовоеСообщение И ТемаСообщения <> "" Тогда
				ТекстСообщения 	= "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " 
					+ ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Трассировка;
				//EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
			КонецЕсли
		Исключение
			EmeWmsERPEngine.RollbackImport(ERPData);
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Импорт сообщений RECEIPT-возврат: " + Ошибка);
			ТемаСообщения = "Критическая ошибка импорта сообщения RECEIPT-возврат";
			ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " + ЗаголовокСообщения.id 
				+ Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Ошибка;
			//EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

	Если Счетчик <> 0 Тогда
		Сообщить("Проимпортировали сообщения RECEIPT-возврат (" + Счетчик + "шт)");
	КонецЕсли
	
КонецПроцедуры

//	Процедура ИмпортироватьВозвратТовараОтПокупателя импортирует один возврат от покупателя.
Процедура ИмпортироватьВозвратТовараОтПокупателя(ERPData, Трассировка, ТемаСообщения)
	
	//*** Делаем проверки ***
	НомерПриходаEME = ERPData.header.id; //НМА 21.11.17 возврат от покупателя        //	Номер приходного документа EME

	//	Проверим наличие возврата
	Если Не ЗначениеЗаполнено(ERPData.header.asn_id) Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "RETNUL");
		Возврат;
	КонецЕсли;
	
	//	Соберем товары и количества в карту соответствий (ключ - ссылка на товар, значение - количество)
	КоличестваТоваров = Новый Соответствие();
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваров, "receipt_qty", Ложь);
	
	//	Если были ошибки в номенклатуре - выйдем
	Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
		Возврат;
	КонецЕсли;
	
	//НМА 21.11.17 возврат от покупателя >>
	ЗапросПоНомеруЕМЕ = Новый Запрос();
	ЗапросПоНомеруЕМЕ.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.EmeWmsНомер = &НомерПриходаEME И
	|	НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления";
	ЗапросПоНомеруЕМЕ.УстановитьПараметр("НомерПриходаEME", НомерПриходаEME);
	ВыборкаПоНомеруЕМЕ = ЗапросПоНомеруЕМЕ.Выполнить().Выбрать();
	Если ВыборкаПоНомеруЕМЕ.Следующий() Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "IDEXST");
		Возврат;
	КонецЕсли;
	//НМА 21.11.17 возврат от покупателя <<

	//НМА 21.11.17 возврат от покупателя >>
	////	Трассировка начальных количеств
	//Трассировка = Трассировка + Символы.ПС + "Приход по EME:" + Символы.ПС;
	//EmeWmsУтилиты.ТрассировкаКоличествТоваров(Трассировка, КоличестваТоваров);

	////	Проверим возвраты
	//EmeWmsERPEngine.SelectChild(ERPData, "asns");
	//Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
	//	
	//	//	Проверим тип прихода
	//	Если Не EmeWmsУтилиты.ЭтоВозврат(ERPData.asns.asn_reg_no) Тогда
	//		EmeWmsERPEngine.ErrorChild(ERPData, "RETTYP");
	//		Продолжить
	//	КонецЕсли;
	//	
	//	ВозвратТоваровСсылка = EmeWmsУтилиты.ПолучитьВозвратТоваровОтПокупателя(ERPData.asns.id);
	//	Если ВозвратТоваровСсылка.Пустая() Тогда
	//		EmeWmsERPEngine.ErrorChild(ERPData, "RETBAD");
	//		Продолжить
	//	КонецЕсли;	
	//	
	//	Трассировка = Трассировка + Символы.ПС + ВозвратТоваровСсылка + Символы.ПС;
	//	EmeWmsУтилиты.ТрассировкаТабличнойЧастиТоваров(Трассировка, ВозвратТоваровСсылка.Товары);
	//	EmeWmsУтилиты.ВычестьКоличестваТоваровПоДокументу(КоличестваТоваров, ВозвратТоваровСсылка.Товары);
	//	
	//КонецЦикла;
	//
	//Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если КоличестваТоваров.Количество() <> 0 Тогда
	//	Трассировка = Трассировка + Символы.ПС + "Остался нераспределенный товар:" + Символы.ПС;
	//	EmeWmsУтилиты.ТрассировкаКоличествТоваров(Трассировка, КоличестваТоваров);
	//	ТемаСообщения = "Избыток/недостача товара в " + ERPData.header.id;
	//	EmeWmsERPEngine.WarningHeader(ERPData, "QTYBAD");
	//	Возврат
	//КонецЕсли;
    //НМА 21.11.17 возврат от покупателя <<

	// //*** Проверки сделали, пишем в базу данных 1C ***
	 //EmeWmsERPEngine.SelectChild(ERPData, "asns");
	 //Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
	
	//НМА 27.01.18 Для учета брака >>
	ТЗИзWMS = Новый ТаблицаЗначений;
	КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);  
	ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	ТЗИзWMS.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗИзWMS.Колонки.Добавить("КоличествоПринято",ОписаниеЧисла);
	//НМА 07.07.17
	ТЗИзWMS.Колонки.Добавить("КоличествоБрака",ОписаниеЧисла); 
	ТЗИзWMS.Колонки.Добавить("СрокГодности",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("ДатаПроизводства",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("Штрихкод",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	ТЗИзWMS.Колонки.Добавить("ТипШтрихкода",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ТипыШтрихкодов"));
	//ТЗИзWMS.Колонки.Добавить("НомерГТДПоставщика",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	//ТЗИзWMS.Колонки.Добавить("КодНоменклатурыПоставщика",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(20,0)));
	//НМА 07.07.17
	//ТЗИзWMS.Колонки.Добавить("КачествоТовара",Новый ОписаниеТипов("Строка"),,150); //НМА 07.07.17  //НМА 15.08.17
	ТЗИзWMS.Колонки.Добавить("ЭтоБрак",Новый ОписаниеТипов("Булево"));
	ТЗИзWMS.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТолькоEMEСклад = Ложь;
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	EmeWmsУтилиты.ПолучитьТЗИзWMS(ERPData, ТЗИзWMS, ТолькоEMEСклад);
	//НМА 12.12.16 <<
	//НМА 31.07.17 >>
	//ТЗИзWMS.Свернуть("Номенклатура,СрокГодности,ДатаПроизводства,Штрихкод,ТипШтрихкода,ЕдиницаИзмерения,ЭтоБрак","КоличествоПринято,КоличествоБрака");
	//ТЗИзWMS.Сортировать("КоличествоПринято Убыв, Номенклатура Возр, СрокГодности Возр"); //НМА  29.08.17
	ТЗИзWMS.Свернуть("Номенклатура,ЕдиницаИзмерения,ЭтоБрак","КоличествоПринято,КоличествоБрака"); //НМА  27.01.17
	ТЗИзWMS.Сортировать("КоличествоПринято Убыв, Номенклатура Возр"); //НМА  27.01.17
	
	 EmeWmsERPEngine.SelectChild(ERPData, "asns");
	 Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		 
		 ВозвратТоваровСсылка = EmeWmsУтилиты.ПолучитьВозвратТоваровОтПокупателя(ERPData.asns.id);		 
		 ВозвратТоваров = ВозвратТоваровСсылка.ПолучитьОбъект();
		 ВозвратТоваров.ОтражатьВУправленческомУчете = Истина;
		 ВозвратТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран; //НМА 21.11.17 возврат от покупателя
		 
		 //// проставим во все строки "КоличествоСобрано" равные "Количеству", мы обрабатываем только такой случай
		 //  Для каждого СтрокаТЧ Из ВозвратТоваров.Товары Цикл //НМА 21.11.17 возврат от покупателя
		 ////СтрокаТЧ.КоличествоСобрано = КоличестваТоваров.Получить(СтрокаТЧ.Номенклатура); //НМА 21.11.17 возврат от покупателя
		 //СтрокаТЧ.КоличествоСобрано = СтрокаТЧ.Количество; //НМА 23.01.18 возврат от покупателя
		 //СтрокаТЧ.Количество = КоличестваТоваров.Получить(СтрокаТЧ.Номенклатура); //НМА 23.01.18 возврат от покупателя
					 
		 //НМА 27.01.18 Для учета брака >>
		 ВозвратТоваров_ИзлишкиНедостача = ВозвратТоваров.Скопировать(); //НМА 14.08.17
		 ВозвратТоваров_ИзлишкиНедостача.Дата   = ТекущаяДата();
		 ВозвратТоваров_ИзлишкиНедостача.ОтражатьВУправленческомУчете = Истина;
		 //ВозвратТоваров_ИзлишкиНедостача.УчитыватьНДС = Истина;
		 ВозвратТоваров_ИзлишкиНедостача.Товары.Очистить();   
         ВозвратТоваров_ИзлишкиНедостача.Комментарий = ВозвратТоваров_ИзлишкиНедостача.Комментарий+" !Создан на основании возврата от покупателя №"+ВозвратТоваровСсылка.Номер+" от "+ВозвратТоваровСсылка.Дата+" при приемке из WMS!";  //НМА 14.08.17
	
		 //// проставим во все строки "КоличествоСобрано" равные "Количеству", мы обрабатываем только такой случай
		 //Для каждого СтрокаТЧ Из ВозвратТоваров.Товары Цикл //НМА 21.11.17 возврат от покупателя
		 //    //НМА 27.01.18 Для учета брака >>
		 //    //Качество - брак
		 //    СтрокаТЗИзWMS = ТЗИзWMS.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		 //    Если СтрокаТЗИзWMS <> Неопределено Тогда
		 //   	 Если СтрокаТЗИзWMS.КоличествоБрака>0 или СтрокаТЗИзWMS.ЭтоБрак Тогда
		 //   		 НоменклатураПоБраку = СтрокаТЗИзWMS.Номенклатура;
		 //   		 ЕдиницаИзмеренияНоменклатурыПоБраку = СтрокаТЗИзWMS.ЕдиницаИзмерения;
		 //   		 Если Справочники.Склады.НайтиПоНаименованию("Брак",Истина)<>Справочники.Склады.ПустаяСсылка() Тогда
		 //   			 ВозвратТоваров_ИзлишкиНедостача.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		 //   			 ВозвратТоваров_ИзлишкиНедостача.СкладОрдер = Справочники.Склады.НайтиПоНаименованию("Брак",Истина);
		 //   		 КонецЕсли;
		 //   		 СтрокаВозвратТоваров_ИзлишкиНедостача = ВозвратТоваров_ИзлишкиНедостача.Товары.Добавить();
		 //   		 СтрокаВозвратТоваров_ИзлишкиНедостача.Качество = Справочники.Качество.НайтиПоНаименованию("Брак",Истина); //НМА 17.07.17
		 //   		 
		 //   		 СтрокаВозвратТоваров_ИзлишкиНедостача.Номенклатура      = НоменклатураПоБраку;
		 //   		 СтрокаВозвратТоваров_ИзлишкиНедостача.ЕдиницаИзмерения  = ЕдиницаИзмеренияНоменклатурыПоБраку;
		 //   		 СтрокаВозвратТоваров_ИзлишкиНедостача.Коэффициент       = ЕдиницаИзмеренияНоменклатурыПоБраку.Коэффициент;
		 //   		 СтрокаВозвратТоваров_ИзлишкиНедостача.Цена              = СтрокаТЧ.Цена; 
		 //   		 СтрокаВозвратТоваров_ИзлишкиНедостача.СтавкаНДС         = СтрокаТЧ.СтавкаНДС;
		 //   		 СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЧ.Количество-СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя
		 //   		 Если СтрокаТЗИзWMS.ЭтоБрак Тогда
		 //   			 СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЧ.Количество; //НМА 27.01.18 возврат от покупателя
		 //   			 СтрокаВозвратТоваров_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоПринято;	 
		 //   		 Иначе
		 //   			 СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЧ.Количество-СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя
		 //   			 СтрокаВозвратТоваров_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоБрака;
		 //   		 КонецЕсли;
		 //   		 
		 //   		 ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаВозвратТоваров_ИзлишкиНедостача, ВозвратТоваров_ИзлишкиНедостача);
		 //   		 ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаВозвратТоваров_ИзлишкиНедостача, ВозвратТоваров_ИзлишкиНедостача);
		 //   		 
		 //   	 КонецЕсли;
		 //   	 
		 //   	 СтрокаТЧ.КоличествоСобрано = СтрокаТЧ.Количество-СтрокаТЗИзWMS.КоличествоБрака; //НМА 27.01.18 возврат от покупателя
		 //   	 СтрокаТЧ.Количество = СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя 
		 //   	 Если СтрокаТЗИзWMS.КоличествоПринято=0 или СтрокаТЗИзWMS.ЭтоБрак Тогда
		 //   		 ВозвратТоваров.Товары.Удалить(СтрокаТЧ);
		 //   	 КонецЕсли;
		 //   	 
		 //    Иначе
		 //   	 EmeWmsERPEngine.ErrorChild(ERPData, "GDSBAD");
		 //    КонецЕсли;
		 //    
		 //КонецЦикла;
		 //
		 //Если ВозвратТоваров.Товары.Количество()=0 Тогда //весь товар бракованный
		 //    ВозвратТоваров.СкладОрдер = ВозвратТоваров_ИзлишкиНедостача.СкладОрдер;
		 //    ВозвратТоваров.Товары.Загрузить(ВозвратТоваров_ИзлишкиНедостача.Товары.Выгрузить());
		 //ИначеЕсли ВозвратТоваров_ИзлишкиНедостача.Товары.Количество()>0 Тогда
		 //    Попытка
		 //   	 ВозвратТоваров_ИзлишкиНедостача.Записать(РежимЗаписиДокумента.Проведение);
		 //   	 ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ВозвратТоваровОтПокупателя, ВозвратТоваров_ИзлишкиНедостача.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
		 //    Исключение
		 //   	 Текст_ОшибкаЗаписи = ОписаниеОшибки();
		 //   	 ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ВозвратТоваровОтПокупателя, ВозвратТоваров_ИзлишкиНедостача.Ссылка, Текст_ОшибкаЗаписи);
		 //   	 ВызватьИсключение Текст_ОшибкаЗаписи;
		 //    КонецПопытки;
		 //КонецЕсли;
		 ////НМА 27.01.18 Для учета брака <<
		 //
	 //    //КонецЦикла; //НМА 21.11.17 возврат от покупателя
	 //    
	 //    ВозвратТоваров.Дата = ТекущаяДата();
	 //    ВозвратТоваров.EmeWmsНомер = НомерПриходаEME;
	 //    ВозвратТоваров.EmeWmsДатаИмпорта = ТекущаяДата();
	 //    Попытка
	 //   	 ВозвратТоваров.Записать(РежимЗаписиДокумента.Проведение);
	 //    Исключение
	 //   	 Текст_ОшибкаЗаписи = ОписаниеОшибки();
	 //   	 ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ВозвратТоваровОтПокупателя, ВозвратТоваров.Ссылка, Текст_ОшибкаЗаписи);
	 //   	 ВызватьИсключение Текст_ОшибкаЗаписи;
	 //    КонецПопытки;		 
	 //КонецЦикла;
	 
	 
	 ////////////*********************************
	 
	 Для каждого СтрокаТЗИзWMS из ТЗИзWMS Цикл 
		 //НМА 27.01.18 Для учета брака >>
		 //Качество - брак
		 СтрокаТЧ = ВозвратТоваров.Товары.Найти(СтрокаТЗИзWMS.Номенклатура);
		 Если СтрокаТЧ <> Неопределено Тогда
			 Если СтрокаТЗИзWMS.КоличествоБрака>0 или СтрокаТЗИзWMS.ЭтоБрак Тогда
				 Если Справочники.Склады.НайтиПоНаименованию("Брак",Истина)<>Справочники.Склады.ПустаяСсылка() Тогда
					 ВозвратТоваров_ИзлишкиНедостача.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
					 ВозвратТоваров_ИзлишкиНедостача.СкладОрдер = Справочники.Склады.НайтиПоНаименованию("Брак",Истина);
				 КонецЕсли;
				 
				 НоменклатураПоБраку = СтрокаТЗИзWMS.Номенклатура;
				 ЕдиницаИзмеренияНоменклатурыПоБраку = СтрокаТЗИзWMS.ЕдиницаИзмерения;
				 СтрокаВозвратТоваров_ИзлишкиНедостача = ВозвратТоваров_ИзлишкиНедостача.Товары.Добавить();
				 СтрокаВозвратТоваров_ИзлишкиНедостача.Качество = Справочники.Качество.НайтиПоНаименованию("Брак",Истина); //НМА 17.07.17
				 
				 СтрокаВозвратТоваров_ИзлишкиНедостача.Номенклатура      = НоменклатураПоБраку;
				 СтрокаВозвратТоваров_ИзлишкиНедостача.ЕдиницаИзмерения  = ЕдиницаИзмеренияНоменклатурыПоБраку;
				 СтрокаВозвратТоваров_ИзлишкиНедостача.Коэффициент       = ЕдиницаИзмеренияНоменклатурыПоБраку.Коэффициент;
				 СтрокаВозвратТоваров_ИзлишкиНедостача.Цена              = СтрокаТЧ.Цена; 
				 СтрокаВозвратТоваров_ИзлишкиНедостача.СтавкаНДС         = СтрокаТЧ.СтавкаНДС;
				 //СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЧ.Количество-СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя
				 СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЗИзWMS.КоличествоПринято;//СтрокаТЧ.Количество*СтрокаТЧ.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;  //НМА 13.02.18
				 Если СтрокаТЗИзWMS.ЭтоБрак Тогда
					 //СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЧ.Количество*СтрокаТЧ.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент-СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя
					 //СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
					 СтрокаВозвратТоваров_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоПринято;
				 Иначе
					 //СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЧ.Количество*СтрокаТЧ.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент-СтрокаТЗИзWMS.КоличествоБрака; //НМА 27.01.18 возврат от покупателя
					 //СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоБрака;
					 СтрокаВозвратТоваров_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоБрака;
				 КонецЕсли;
				 ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаВозвратТоваров_ИзлишкиНедостача, ВозвратТоваров_ИзлишкиНедостача);
				 ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаВозвратТоваров_ИзлишкиНедостача, ВозвратТоваров_ИзлишкиНедостача);
				 
				 Продолжить;
			 КонецЕсли;
			 
			 //СтрокаТЧ.КоличествоСобрано = СтрокаТЧ.Количество;  //НМА 23.11.17 перемещение из магазина
			 СтрокаТЧ.КоличествоСобрано = СтрокаТЗИзWMS.КоличествоПринято;//СтрокаТЧ.Количество*СтрокаТЧ.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;  //НМА 23.11.17 перемещение из магазина
			 СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЗИзWMS.ЕдиницаИзмерения;
			 СтрокаТЧ.Коэффициент = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
			 //СтрокаТЧ.Количество = СтрокаТЗИзWMS.КоличествоПринято-СтрокаТЗИзWMS.КоличествоБрака; //НМА 23.11.17 перемещение из магазина
			 //Если СтрокаТЗИзWMS.ЭтоБрак Тогда
			 //    СтрокаТЧ.Количество = СтрокаТЧ.Количество-СтрокаТЗИзWMS.КоличествоПринято;
			 //    //////Если СтрокаТЧ.КоличествоПринято<0 Тогда
			 //    //////	СтрокаТЧ.Качество = Справочники.Качество.НайтиПоНаименованию("Брак",Истина); //НМА 12.02.18	
			 //    //////КонецЕсли;
			 //КонецЕсли;
			 //СтрокаТЧ.Количество = СтрокаТЧ.КоличествоПринято;  //НМА 23.01.18 перемещение из магазина
			 //Если СтрокаТЧ.КоличествоПринято<=0 Тогда
			 //	ВозвратТоваров.Товары.Удалить(СтрокаТЧ);
			 //КонецЕсли;
		 Иначе
			 НоменклатураПоБраку = СтрокаТЗИзWMS.Номенклатура;
			 ЕдиницаИзмеренияНоменклатурыПоБраку = СтрокаТЗИзWMS.ЕдиницаИзмерения;
			 СтрокаВозвратТоваров_ИзлишкиНедостача = ВозвратТоваров_ИзлишкиНедостача.Товары.Добавить();
			 СтрокаВозвратТоваров_ИзлишкиНедостача.Качество = Справочники.Качество.НайтиПоНаименованию("Брак",Истина); //НМА 17.07.17
			 
			 СтрокаВозвратТоваров_ИзлишкиНедостача.Номенклатура      = НоменклатураПоБраку;
			 СтрокаВозвратТоваров_ИзлишкиНедостача.ЕдиницаИзмерения  = ЕдиницаИзмеренияНоменклатурыПоБраку;
			 СтрокаВозвратТоваров_ИзлишкиНедостача.Коэффициент       = ЕдиницаИзмеренияНоменклатурыПоБраку.Коэффициент;
			 СтрокаВозвратТоваров_ИзлишкиНедостача.Цена              = 0.1; 
			 СтрокаВозвратТоваров_ИзлишкиНедостача.СтавкаНДС         = НоменклатураПоБраку.СтавкаНДС;
			 СтрокаВозвратТоваров_ИзлишкиНедостача.Сумма             = 0.1; 
			 //СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЧ.Количество-СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя
			 Если СтрокаТЗИзWMS.ЭтоБрак Тогда
				 СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЗИзWMS.КоличествоПринято;//0-СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя
				 СтрокаВозвратТоваров_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоПринято;	 
			 Иначе
				 СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЗИзWMS.КоличествоПринято;//0-СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя
				 //СтрокаВозвратТоваров_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоБрака;
				 СтрокаВозвратТоваров_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоБрака;
			 КонецЕсли;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 Сч = 0;
	 Пока Сч < ВозвратТоваров.Товары.Количество() Цикл
		 СтрокаТЧ = ВозвратТоваров.Товары.Получить(Сч);
		 //СтрокаТЧ.Количество = СтрокаТЧ.КоличествоПринято;  //НМА 23.01.18 перемещение из магазина
		 Если СтрокаТЧ.Количество<=0 или СтрокаТЧ.КоличествоСобрано=0 Тогда
			 ВозвратТоваров.Товары.Удалить(СтрокаТЧ);
		 Иначе
			 Сч = Сч + 1;
		 КонецЕсли;
	 КонецЦикла;
	 
	 ВозвратТоваров.Дата = ТекущаяДата();
	 ВозвратТоваров.EmeWmsНомер = НомерПриходаEME;
	 ВозвратТоваров.EmeWmsДатаИмпорта = ТекущаяДата();
	 Если ВозвратТоваров.Товары.Количество()=0 Тогда //весь товар бракованный
		 ВозвратТоваров.СкладОрдер = ВозвратТоваров_ИзлишкиНедостача.СкладОрдер;
		 ВозвратТоваров.Товары.Загрузить(ВозвратТоваров_ИзлишкиНедостача.Товары.Выгрузить());
		 Попытка
			 ВозвратТоваров.Записать(РежимЗаписиДокумента.Проведение);
		 Исключение
			 Текст_ОшибкаЗаписи = ОписаниеОшибки();
			 ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ВозвратТоваровОтПокупателя, ВозвратТоваров, Текст_ОшибкаЗаписи);
			 ВызватьИсключение Текст_ОшибкаЗаписи;
		 КонецПопытки;
	 ИначеЕсли ВозвратТоваров_ИзлишкиНедостача.Товары.Количество()>0 Тогда
		 Попытка
			 ВозвратТоваров.Записать(РежимЗаписиДокумента.Проведение);
		 Исключение
			 Текст_ОшибкаЗаписи = ОписаниеОшибки();
			 ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ВозвратТоваровОтПокупателя, ВозвратТоваров, Текст_ОшибкаЗаписи);
			 ВызватьИсключение Текст_ОшибкаЗаписи;
		 КонецПопытки;
		 Попытка
			 ВозвратТоваров_ИзлишкиНедостача.Записать(РежимЗаписиДокумента.Проведение);
			 ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ВозвратТоваровОтПокупателя, ВозвратТоваров_ИзлишкиНедостача.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
		 Исключение
			 Текст_ОшибкаЗаписи = ОписаниеОшибки();
			 ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ВозвратТоваровОтПокупателя, ВозвратТоваров_ИзлишкиНедостача.Ссылка, Текст_ОшибкаЗаписи);
			 ВызватьИсключение Текст_ОшибкаЗаписи;
		 КонецПопытки;
    ИначеЕсли ВозвратТоваров.Товары.Количество()>0 Тогда
		 Попытка
			 ВозвратТоваров.Записать(РежимЗаписиДокумента.Проведение);
		 Исключение
			 Текст_ОшибкаЗаписи = ОписаниеОшибки();
			 ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ВозвратТоваровОтПокупателя, ВозвратТоваров, Текст_ОшибкаЗаписи);
			 ВызватьИсключение Текст_ОшибкаЗаписи;
		 КонецПопытки;
	 КонецЕсли;
	 
 КонецЦикла;
 
 EmeWmsERPEngine.Success(ERPData);
		
КонецПроцедуры


//НМА 02.10.17
//	Процедура ИмпортироватьИСоздатьВозвратыТоваровОтПокупателей импортирует и создает возвраты товаров от покупателей.
Процедура ИмпортироватьИСоздатьВозвратыТоваровОтПокупателей(ERPData) Экспорт
	
	ЗаголовкиСообщений = Новый ТаблицаЗначений();
	EmeWmsERPEngine.GetHeaders(ERPData, "wms", "erp", "receipt", "NEW,WRN", ЗаголовкиСообщений);
	
	Счетчик = 0;
	Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
		
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней	
		EmeWmsERPEngine.BeginImport(ERPData, "wms", "erp", "receipt", ЗаголовокСообщения.id);
		Попытка
			НовоеСообщение = (ЗаголовокСообщения.state = "NEW");
			Трассировка = "";
			ТемаСообщения = "";
			НачатьТранзакцию();
			Попытка
				Пока EmeWmsERPEngine.NextHeaderLine(ERPData) Цикл
					Если EmeWmsУтилиты.ЭтоВозврат(ERPData.header.asn_reg_no) Тогда
						ИмпортироватьИСоздатьВозвратТоваровОтПокупателя(ERPData, Трассировка, ТемаСообщения);
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
			EmeWmsERPEngine.CommitImport(ERPData);
			Если НовоеСообщение И ТемаСообщения <> "" Тогда
				ТекстСообщения 	= "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " 
					+ ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Трассировка;
				EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
			КонецЕсли
		Исключение
			EmeWmsERPEngine.RollbackImport(ERPData);
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Импорт сообщений RECEIPT-возврат: " + Ошибка);
			ТемаСообщения = "Критическая ошибка импорта сообщения RECEIPT-возврат";
			ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " + ЗаголовокСообщения.id 
				+ Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Ошибка;
			EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

	Если Счетчик <> 0 Тогда
		Сообщить("Проимпортировали сообщения RECEIPT-возврат (" + Счетчик + "шт)");
	КонецЕсли
	
КонецПроцедуры

//	Процедура ИмпортироватьИСоздатьВозвратТоваровОтПокупателя импортирует одно поступление товаров и услуг.
Процедура ИмпортироватьИСоздатьВозвратТоваровОтПокупателя(ERPData, Трассировка = "", ТемаСообщения = "", ОшибкиОбработки = "")
	
	//*** Делаем проверки ***
	НомерПриходаEME  			= ERPData.header.id;                 //	Номер приходного документа EME
	ОснованиеПрихода			= ERPData.header.reason_code;		 //	Код основания прихода
	ДатаДокумента     			= ERPData.header.created_at;         //	Время создания документа
	СкладКод     	  			= ERPData.header.whs_to_code;        //	Код склада приёмки
	УИД_Организация   			= ERPData.header.vendor_to_code;     //	Организация, которой пренадлежит товар
	Партнер						= ERPData.header.supplier_name;      //	Полное наименование организации поставщика
	КонтрагентКод    			= ERPData.header.supplier_code;      //	Код организации поставщика
	ЭтоВозврат					= ERPData.header.is_return;          //	Если это возврат
	
	//	Проверим наличие возврата
	Если Не ЗначениеЗаполнено(ERPData.header.asn_id) Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "ASNNUL");
		Возврат;
	КонецЕсли;
	
	ЗапросПоНомеруЕМЕ = Новый Запрос();
	ЗапросПоНомеруЕМЕ.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.EmeWmsНомер = &НомерПриходаEME И
	|	НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления";
	ЗапросПоНомеруЕМЕ.УстановитьПараметр("НомерПриходаEME", НомерПриходаEME);
	ВыборкаПоНомеруЕМЕ = ЗапросПоНомеруЕМЕ.Выполнить().Выбрать();
	Если ВыборкаПоНомеруЕМЕ.Следующий() Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "IDEXST");
		Возврат;
	КонецЕсли;
	
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		СсылкаНаВозвратПоставщику = EmeWmsУтилиты.ПолучитьВозвратТоваровПоставщику(ERPData.asns.id);
		//НМА 16.06.17 Проверка на битую ссылку (<Объект не найден>) >>
		Если СсылкаНаВозвратПоставщику.Пустая() или СсылкаНаВозвратПоставщику.ПолучитьОбъект()=Неопределено Тогда
			//НМА 16.06.17 Проверка на битую ссылку (<Объект не найден>) <<
			EmeWmsERPEngine.ErrorChild(ERPData, "ASNBAD");
		Иначе
			Организация = СсылкаНаВозвратПоставщику.Организация;
		КонецЕсли;	
	КонецЦикла;
	
	//НМА 12.12.16 >>
	ТЗИзWMS = Новый ТаблицаЗначений;
	КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);  
	ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	ТЗИзWMS.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗИзWMS.Колонки.Добавить("КоличествоПринято",ОписаниеЧисла);
	//НМА 07.07.17
	ТЗИзWMS.Колонки.Добавить("КоличествоБрака",ОписаниеЧисла); 
	ТЗИзWMS.Колонки.Добавить("СрокГодности",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("ДатаПроизводства",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("Штрихкод",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	ТЗИзWMS.Колонки.Добавить("ТипШтрихкода",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ТипыШтрихкодов"));
	//ТЗИзWMS.Колонки.Добавить("НомерГТДПоставщика",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	//ТЗИзWMS.Колонки.Добавить("КодНоменклатурыПоставщика",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(20,0)));
	//НМА 07.07.17
	//ТЗИзWMS.Колонки.Добавить("КачествоТовара",Новый ОписаниеТипов("Строка"),,150); //НМА 07.07.17  //НМА 15.08.17
	ТЗИзWMS.Колонки.Добавить("ЭтоБрак",Новый ОписаниеТипов("Булево"));
	ТЗИзWMS.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТолькоEMEСклад = Ложь;
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	EmeWmsУтилиты.ПолучитьТЗИзWMS(ERPData, ТЗИзWMS, ТолькоEMEСклад);
	//НМА 12.12.16 <<
	//НМА 31.07.17 >>
	ТЗИзWMS.Свернуть("Номенклатура,СрокГодности,ДатаПроизводства,Штрихкод,ТипШтрихкода,ЕдиницаИзмерения,ЭтоБрак","КоличествоПринято,КоличествоБрака");
	ТЗИзWMS.Сортировать("КоличествоПринято Убыв, Номенклатура Возр, СрокГодности Возр"); //НМА  29.08.17
	//НМА 31.07.17 <<
	
	Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
		Возврат;
	КонецЕсли;
	
	СрокиГодностиВСериях = Константы.EmeWmsСрокиГодностиВСериях.Получить();
	//*** Проверки сделали, пишем в базу данных 1C ***
	
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		
		СсылкаНаВозвратПоставщику = EmeWmsУтилиты.ПолучитьВозвратТоваровПоставщику(ERPData.asns.id);

		//ВозвратТоваровОтПокупателя
		ВП	= Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		//ВП.Заполнить(СсылкаНаВозвратПоставщику);
		ВП.Дата = ТекущаяДата();
		ВП.ОтражатьВУправленческомУчете = Истина;
		ВП.EmeWmsНомер	= НомерПриходаEME;
		ВП.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		ВП.СкладОрдер = Справочники.Склады.НайтиПоНаименованию("Основной",Истина);
		ВП.ТипЦен = СсылкаНаВозвратПоставщику.ТипЦен;
		ВП.ВалютаДокумента = СсылкаНаВозвратПоставщику.ВалютаДокумента;
		ВП.УчитыватьНДС = СсылкаНаВозвратПоставщику.УчитыватьНДС;
		ВП.СуммаВключаетНДС = СсылкаНаВозвратПоставщику.СуммаВключаетНДС; 
		ВП.КурсВзаиморасчетов = СсылкаНаВозвратПоставщику.КурсВзаиморасчетов; 
		ВП.КратностьВзаиморасчетов = СсылкаНаВозвратПоставщику.КратностьВзаиморасчетов;
		ВП.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;
		ВП.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПростойВозврат;
		ВП.ДатаОтгрузки = ДатаДокумента;
		//ВП.Организация = Справочники.Организации.НайтиПоНаименованию(СсылкаНаВозвратПоставщику.Контрагент.Наименование,Истина);
		ВП.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН",СсылкаНаВозвратПоставщику.Контрагент.ИНН);
		Если ВП.Организация = Справочники.Организации.ПустаяСсылка() Тогда
			//ВП.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН",СсылкаНаВозвратПоставщику.Контрагент.ИНН);
			ВП.Организация = Справочники.Организации.НайтиПоНаименованию(СсылкаНаВозвратПоставщику.Контрагент.Наименование,Истина);
		КонецЕсли;
		ВП.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СсылкаНаВозвратПоставщику.Организация.ИНН);
		Если ВП.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			ВП.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(СсылкаНаВозвратПоставщику.Организация.Наименование,Истина);
		КонецЕсли;
		//ВП.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(ВП.Контрагент.Наименование,Истина,,ВП.Контрагент);
		//ПокупателемВыставляетсяСчетФактураНаВозврат
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Владелец,
		|	ДоговорыКонтрагентов.Организация,
		|	ДоговорыКонтрагентов.ВидДоговора,
		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		|";
		Запрос.УстановитьПараметр("Владелец",ВП.Контрагент);
		Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",ВП.ВалютаДокумента);
		Запрос.УстановитьПараметр("Организация",ВП.Организация);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВП.ДоговорКонтрагента = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
		ВП.Комментарий = ВП.Комментарий+" Создан на основе Возврата товаров поставщику №"+СсылкаНаВозвратПоставщику.Номер+" от "+СсылкаНаВозвратПоставщику.Дата+" с магазина "+СсылкаНаВозвратПоставщику.Склад;
		
		// заполним оприходованные на склад позиции и проверим количества и единицы измерения
		//НМА 13.12.16 >>
		ВП.Товары.Очистить();
		Для Каждого СтрокаТЗИзWMS Из ТЗИзWMS Цикл
			
			НайденнаяСтрока = СсылкаНаВозвратПоставщику.Товары.Найти(СтрокаТЗИзWMS.Номенклатура, "Номенклатура");
			
			Если ЗначениеЗаполнено(СтрокаТЗИзWMS.Номенклатура) Тогда
				СтрокаВП = ВП.Товары.Добавить();
				СтрокаВП.Номенклатура      = СтрокаТЗИзWMS.Номенклатура;
				СтрокаВП.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
				СтрокаВП.Коэффициент       = СтрокаВП.ЕдиницаИзмерения.Коэффициент;
				
				//СтрокаВП.СерияНоменклатуры = НайденнаяСтрока.СерияНоменклатуры;
				Если СрокиГодностиВСериях Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СерияНоменклатуры) Тогда
						СерияГТД = НайденнаяСтрока.СерияНоменклатуры; 
						Если Не ЗначениеЗаполнено(СерияГТД.СрокГодности) Тогда
							СерияГТД = НайденнаяСтрока.СерияНоменклатуры.ПолучитьОбъект();
							СерияГТД.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy")+", "+СерияГТД.Наименование;
							СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
							СерияГТД.Записать();
							СерияНоменклатуры = СерияГТД.Ссылка;
						ИначеЕсли СерияГТД.СрокГодности<>СтрокаТЗИзWMS.СрокГодности Тогда
							//не было в возврате с данным сроком годности
							Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
								СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,СтрокаТЗИзWMS.Номенклатура);
								СерияНоменклатуры = СерияСрокГодности.Ссылка;
								Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
									СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
									СерияСрокГодности.Владелец     = СтрокаТЗИзWMS.Номенклатура;
									СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
									СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
									СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
									СерияСрокГодности.Записать();
									СерияНоменклатуры = СерияСрокГодности.Ссылка;
									ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
								КонецЕсли;
								////Штрихкод
								СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
							КонецЕсли;
							//СтрокаВП.СерияНоменклатуры = СерияНоменклатуры;
							//Продолжить;
						Иначе
							СерияНоменклатуры = СерияГТД.Ссылка;
						КонецЕсли;
					Иначе
						СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
						СерияГТД.Владелец     = НайденнаяСтрока.Номенклатура;
						Если ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура.СтранаПроисхождения) Тогда
							СерияГТД.Наименование = СокрЛП(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"))+", "+НайденнаяСтрока.Номенклатура.СтранаПроисхождения.Наименование;
						Иначе
							СерияГТД.Наименование = СокрЛП(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"));
						КонецЕсли;
						СерияГТД.СтранаПроисхождения = НайденнаяСтрока.Номенклатура.СтранаПроисхождения;
						СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
						СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
						СерияГТД.Записать();
						ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
						СерияНоменклатуры = СерияГТД.Ссылка;
					КонецЕсли;
					
				//// СрокиГодности НЕ в сериях
				ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрока.СерияНоменклатуры) Тогда
					СерияНоменклатуры = НайденнаяСтрока.СерияНоменклатуры;
				КонецЕсли;
				
				СтрокаВП.СерияНоменклатуры = СерияНоменклатуры;
								
				СтрокаВП.Качество = Справочники.Качество.Новый;
				
				СтрокаВП.СтавкаНДС        = НайденнаяСтрока.СтавкаНДС; //НМА 19.06.17
				СтрокаВП.Количество       = СтрокаТЗИзWMS.КоличествоПринято;
				СтрокаВП.КоличествоСобрано = СтрокаТЗИзWMS.КоличествоПринято;
				
				Если НайденнаяСтрока<>Неопределено Тогда
					Если СтрокаТЗИзWMS.ЕдиницаИзмерения<>НайденнаяСтрока.ЕдиницаИзмерения Тогда  
						Если СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент<>0 Тогда
							СтрокаВП.Цена              = Окр(НайденнаяСтрока.Цена*СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент/НайденнаяСтрока.ЕдиницаИзмерения.Коэффициент,2);
						Иначе
							СтрокаВП.Цена              = 0.01;
							СтрокаВП.Количество        = 0;
							СтрокаВП.Сумма             = 0;
						КонецЕсли;
					Иначе
						СтрокаВП.Цена             = НайденнаяСтрока.Цена;
					КонецЕсли;
				Иначе
					СтрокаВП.Цена             = 0.01;
					СтрокаВП.Сумма            = 0;
					СтрокаВП.СтавкаНДС        = СтрокаВП.Номенклатура.СтавкаНДС; //НМА 19.06.17
					ВП.Комментарий = ВП.Комментарий+" !В строке №"+СтрокаВП.НомерСтроки+" '"+СтрокаВП.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в возврате поставщику)!";
				КонецЕсли;
				
				СтрокаВП.Сумма            = СтрокаВП.Цена*СтрокаВП.Количество;
				
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаВП, ВП);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаВП, ВП);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаВП, ВП);
			КонецЕсли;
			          					  
		КонецЦикла;
		
	КонецЦикла;		
	
	ВП.УстановитьНовыйНомер();
	
	Попытка
		//ВП.Записать(РежимЗаписиДокумента.Запись);
		ВП.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Текст_ОшибкаЗаписи = " (Не удалось записать Возврат от Покупателя, созданный на основе " + СсылкаНаВозвратПоставщику + ")";
		ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ВозвратТоваровОтПокупателя, , Текст_ОшибкаЗаписи);
		ВызватьИсключение Текст_ОшибкаЗаписи;
	КонецПопытки;
	
	Если ВП.Проведен Тогда //НМА 11.10.17
		ВозвратПоставщикуОбъект = СсылкаНаВозвратПоставщику.ПолучитьОбъект();
		ВозвратПоставщикуОбъект.Статус = Перечисления.СтатусыВозвратовПоставщикам.Закрыт;
		ВозвратПоставщикуОбъект.Записать();
	КонецЕсли;             //НМА 11.10.17
	
	EmeWmsERPEngine.Success(ERPData);
		
КонецПроцедуры
//НМА 02.10.17

//НМА 170717 Сгенерировать штрихкод из WMS
Функция СгенерироватьШтрихкод(Штрихкод,СрокГодности)
	ПрефиксШтрихкода1 = "02";
	Штрихкод14 = "";
	Если СтрДлина(Штрихкод)=0 Тогда
		Сообщить("Ошибка генерации штрихкода. Штрихкод равен 0 символов!");
		Возврат "";
	ИначеЕсли СтрДлина(Штрихкод)=14 Тогда
		Штрихкод14 = Штрихкод;
	ИначеЕсли СтрДлина(Штрихкод)<14 Тогда
		ДлинаШтрихкода=СтрДлина(Штрихкод);
		КоличествоТребуемыхНулей = 14-ДлинаШтрихкода;
		НулиКШтрихкоду = "";
		Для Ш=1 по КоличествоТребуемыхНулей Цикл
			НулиКШтрихкоду = НулиКШтрихкоду+"0";
		КонецЦикла;
		Штрихкод14 = НулиКШтрихкоду+Штрихкод;
	ИначеЕсли СтрДлина(Штрихкод)>14 Тогда
		Сообщить("Ошибка генерации штрихкода. Штрихкод больше 14 символов!");
		Возврат "";
	КонецЕсли;
	ПрефиксШтрихкода2 = "15";
	СрокГодностиГГММДД = Формат(СрокГодности,"ДФ=yyMMdd"); 
	СгенерированныйШтрихкод = ПрефиксШтрихкода1+Штрихкод14+ПрефиксШтрихкода2+СрокГодностиГГММДД;
	Возврат СгенерированныйШтрихкод;
КонецФункции
//НМА 170717 Сгенерировать штрихкод из WMS

//НМА 11.08.17 Создать новый Штрихкод EAN128 >>
Процедура СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры)
	////Штрихкод
	Если ЗначениеЗаполнено(СтрокаТЗИзWMS.Штрихкод) и ЗначениеЗаполнено(СтрокаТЗИзWMS.Номенклатура) Тогда
		//Если Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796") = ЕдиницаИзмеренияНоменклатурыПоСрокуГодности Тогда //НМА 170717
		СгенерированныйШтрихкод = СгенерироватьШтрихкод(СтрокаТЗИзWMS.Штрихкод,СтрокаТЗИзWMS.СрокГодности);
		Если ЗначениеЗаполнено(СгенерированныйШтрихкод) Тогда
			ТипШтрихкодаПоСрокуГодности = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128;
			//Иначе
			//	СгенерированныйШтрихкод = СтрокаТЗИзWMS.Штрихкод;
			//	ТипШтрихкодаПоСрокуГодности = СтрокаТЗИзWMS.ТипШтрихкода;
			//КонецЕсли;
			НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Владелец.Установить(СтрокаТЗИзWMS.Номенклатура);
			НаборЗаписей.Отбор.Штрихкод.Установить(СгенерированныйШтрихкод); //НМА 170717
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 1 Тогда
				//Сообщить("Штрихкод: " + СтрокаТЗИзWMS.Штрихкод + " уже имеет владельца """ + СокрЛП(СтрокаТЗИзWMS.Номенклатура) + """.");
				Если НаборЗаписей[0].Владелец <> СтрокаТЗИзWMS.Номенклатура Тогда //НМА 18.08.17
					Сообщить("Штрихкод: " + СгенерированныйШтрихкод + " уже есть в базе. Укажите для владельца """ + СокрЛП(СтрокаТЗИзWMS.Номенклатура) + """ другой штрихкод.");
					ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.Штрихкоды, , "Штрихкод: " + СгенерированныйШтрихкод + " уже есть в базе. Укажите для владельца """ + СокрЛП(СтрокаТЗИзWMS.Номенклатура) + """ другой штрихкод.");
				КонецЕсли;
			Иначе
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Владелец                   = СтрокаТЗИзWMS.Номенклатура;
				НоваяСтрока.Штрихкод                   = СгенерированныйШтрихкод;     //НМА 170717  
				НоваяСтрока.ТипШтрихкода               = ТипШтрихкодаПоСрокуГодности; //НМА 170717
				НоваяСтрока.ЕдиницаИзмерения           = СтрокаТЗИзWMS.ЕдиницаИзмерения;
				НоваяСтрока.СерияНоменклатуры          = СерияНоменклатуры;
				//НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				НоваяСтрока.Качество                   = Справочники.Качество.Новый;
				НаборЗаписей.Записать();
				ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.РегистрыСведений.Штрихкоды, , "Штрихкод "+СгенерированныйШтрихкод+ " создан автоматически при обмене с WMS "+ТекущаяДата());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//НМА 11.08.17 Создать новый Штрихкод EAN128 <<

