
///////////////////////////////// EME.WMS //////////////////////////////////////////////

///////////////////////////////////////////////////////
// ВЫГРУЗКА НОМЕНКЛАТУРЫ 

Процедура ВыгрузитьНоменклатуруEME_WMS() Экспорт
	
	ERPData = Новый Структура;
	EmeWmsERPEngine.Create(ERPData);
	
	//	Если файл ERPEngine.xml находится не в C:\inetpub\ERPWebInterface\Settings\	укажите путь до него
	ERPData.Config = EmeWmsУтилиты.ПутьДоERPEngine();
	Если ERPData.Config = Неопределено Или ERPData.Config = "" Тогда
		Возврат
	КонецЕсли;
	
	Ошибка = EmeWmsERPEngine.Connect(ERPData);
	Если Ошибка <> "" Тогда
		Сообщить(Ошибка);
		ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Подключение к SQL базе данных: " + Ошибка);
		Возврат;
	КонецЕсли;
	
	EmeWmsЭкспортНоменклатуры.ЭкспортироватьНоменклатуру(ERPData);
	//EmeWmsЭкспортЗаказовПоставщикам.ЭкспортироватьЗаказыПоставщикам(ERPData);
	//EmeWmsЭкспортЗаказовПокупателей.ЭкспортироватьЗаказыПокупателей(ERPData);
	//EmeWmsЭкспортПеремещенийТоваров.ЭкспортироватьПеремещенияТоваровКакПриходы(ERPData);
	//EmeWmsЭкспортПеремещенийТоваров.ЭкспортироватьПеремещенияТоваровКакОтгрузки(ERPData);
	//EmeWmsЭкспортВозвратовТоваровОтПокупателей.ЭкспортироватьВозвратыТоваровОтПокупателей(ERPData);
	
	EmeWmsERPEngine.Disconnect(ERPData);
		
КонецПроцедуры

























///////////////////////////////// CWMS3000 //////////////////////////////////////////////


///////////////////////////////////////////////////////
// ВЫГРУЗКА НОМЕНКЛАТУРЫ 

Процедура СформироватьДанныеПоНоменклатуреДляCWMS3000(МассивНоменклатуры = Неопределено) Экспорт
	
	// Получим данные по номенклатуре
	таблицаНоменклатуры = ПолучитьТаблицуНоменклатуры(МассивНоменклатуры);	
	
	ТаблицаЕдИзмеренийНоменклатуры = ПолучитьТаблицуЕдИзмеренийНоменклатуры(МассивНоменклатуры);
	
	Если таблицаНоменклатуры.Количество() > 0 Тогда
		
		опрWSCСсылка = WSСсылки.CWMS3000.СоздатьWSПрокси("http://cwms3000.ru/soap", "IICwmsLoadDocservice", "IICwmsLoadDocPort");
		
		// Формируем XML по схеме XDTO-пакет "Nomenklatura_CWMS3000" 
		
		// Формируем корневое свойство "NOMENKLATURA"
		типОбъектаКорневойNOMENKLATURA = ФабрикаXDTO.Пакеты.Получить("cwms3000.ru/nom").КорневыеСвойства.Получить("NOMENKLATURA").Тип;
		объектКорневойNOMENKLATURA = ФабрикаXDTO.Создать(типОбъектаКорневойNOMENKLATURA);
		
		сч = 1;
		Для Каждого стрТаблицаНоменклатуры Из таблицаНоменклатуры Цикл
			// Создаем элемент типа "NomType" коллекции "NOM" свойства "NOMENKLATURA"
			объектNomType = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("cwms3000.ru/nom", "NomType"));
			
			объектNomType.CODE = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("urn:cwms3000.ru:BaseTypes:1.0.0", "Text100Type"),стрТаблицаНоменклатуры.Код);
			объектNomType.I_NOM_ID = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("urn:cwms3000.ru:BaseTypes:1.0.0", "Text100Type"), СокрЛП(стрТаблицаНоменклатуры.Ссылка.УникальныйИдентификатор()));
			объектNomType.NAME =  ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("urn:cwms3000.ru:BaseTypes:1.0.0", "Text100Type"), стрТаблицаНоменклатуры.Наименование);
			объектNomType.GROUP_NAME = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("urn:cwms3000.ru:BaseTypes:1.0.0", "Text100Type"), стрТаблицаНоменклатуры.РодительПредставление); // Наименование группы товара
			объектNomType.UNIT_OP_NAME = стрТаблицаНоменклатуры.ЕдиницаХраненияОстатковПредставление; // Минимальная неделимая складская (В штуках)
			//объектNomType.UNIT_CL_NAME = ;
			объектNomType.NOM_TYP = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("urn:cwms3000.ru:BaseTypes:1.0.0", "Text100Type"), стрТаблицаНоменклатуры.ВидНоменклатурыПредставление); // Тип номенклатуры (Вид номенклатуры)
			//объектNomType.EXPIRE = ; // Срок годности товара в днях, по умолчанию 0
			//объектNomType.SALE_DAYS = ; // Срок реализации товара в днях, по умолчанию 0
			//объектNomType.STORAGE_TEMP = ; // Условия на температуру хранения в градусах
			//объектNomType.DSC = ; // Описание
			//объектNomType.ABC_GROUP = ; // Группа АБЦ
			//объектNomType.GOST = ; // Информация о ГОСТ
			//объектNomType.ID_IMPORTER = ; // Идентификатор импортера
			//объектNomType.ID_PRODUCER = ; // Идентификатор производителя
			//объектNomType.ID_SUPPLIER = ; // Идентификатор поставщика
			//объектNomType.STORE_AREAS = ; // Список зон хранения
			//объектNomType.PALLS_INFO = ; // Паллетизация
			
			#Область Единицы_измерений_номенклатуры
			// Передаем единицы измерения номенклатуры			
			// Формируем xml объект UNITS_INFO
			объектUnitsInfoType = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("cwms3000.ru/nom", "UnitsInfoType"));
			
			массивСтрокЕдИзмеренийПоДаннойНоменклатуре = ТаблицаЕдИзмеренийНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура", стрТаблицаНоменклатуры.Ссылка));
			Для Каждого стрЕдИзмерения Из массивСтрокЕдИзмеренийПоДаннойНоменклатуре Цикл			
				// Формируем xml объект UNIT_INFO
				объектUnitInfoType = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("cwms3000.ru/nom", "UnitInfoType"));
				объектUnitInfoType.TYPE = СокрЛП(стрЕдИзмерения.Наименование);
				объектUnitInfoType.CNT = стрЕдИзмерения.Коэффициент;
				//объектUnitInfoType.BARCODE = ;
				//объектUnitInfoType.BARCODETYPE = ;
				//объектUnitInfoType.REPLACE_BARCODE = ;
				объектUnitInfoType.WEIGHT_NETTO = стрЕдИзмерения.Вес;
				объектUnitInfoType.WEIGHT_BRUTTO = стрЕдИзмерения.Вес;
				//объектUnitInfoType.PRICE
				объектUnitInfoType.LENGTH = ?(стрЕдИзмерения.Глубина <> 0, стрЕдИзмерения.Глубина*1000, 0); 
				объектUnitInfoType.WIDTH = ?(стрЕдИзмерения.Ширина <> 0, стрЕдИзмерения.Ширина*1000, 0);
				объектUnitInfoType.HEIGHT = ?(стрЕдИзмерения.Высота <> 0, стрЕдИзмерения.Высота*1000, 0);
				//объектUnitInfoType.NDS
				объектUnitInfoType.VOLUME = ?(стрЕдИзмерения.Объем <> 0, стрЕдИзмерения.Объем*1000, 0);
				объектUnitsInfoType.UNIT.Добавить(объектUnitInfoType);
			КонецЦикла;
			объектNomType.UNIT_NAME = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("urn:cwms3000.ru:BaseTypes:1.0.0", "Text100Type"), стрТаблицаНоменклатуры.ЕдиницаХраненияОстатковПредставление); // Наименование ед. изм.
			объектNomType.UNITS_INFO = объектUnitsInfoType; // Информация о единицах конвертации
			#КонецОбласти 
			
						
			//объектNomType.OTHER_CODES = ; // Информация о Доп. кодах
			//объектNomType.NOM_CONTENT = ; // Информация о дочерних номенклатурах для комплектов
			//объектNomType.BARCODES = ; // Штрихкоды
			//объектNomType.NOM_CHANGE_NOM = ; // Идентичная номенклатура
			//объектNomType.EXT_PARAMS = ; // Набор доп. параметров
			
			// Добавляем новый элемент в коллекцую "NOM" 
			объектКорневойNOMENKLATURA.NOM.Добавить(объектNomType);	
			
			// Отправляем пакетами
			Если сч/500 = Цел(сч/500) Тогда
				
				// Запись XML через файл
				записьXML_NOM = Новый ЗаписьXML;
				имяФайлаЗаписиXML = КаталогВременныхФайлов() + "Nomenklatura_CWMS3000.xml";
				записьXML_NOM.ОткрытьФайл(имяФайлаЗаписиXML);
				ФабрикаXDTO.ЗаписатьXML(записьXML_NOM, объектКорневойNOMENKLATURA, "NOMENKLATURA"); 
				записьXML_NOM.Закрыть();	
				
				результатКомандыLoadDoc3 = опрWSCСсылка.LoadDoc3("LB_SOAP", "1234", "LB.NOM.SOAP", Новый ДвоичныеДанные(имяФайлаЗаписиXML));
				
				// Формируем корневое свойство "NOMENKLATURA"
				типОбъектаКорневойNOMENKLATURA = ФабрикаXDTO.Пакеты.Получить("cwms3000.ru/nom").КорневыеСвойства.Получить("NOMENKLATURA").Тип;
				объектКорневойNOMENKLATURA = ФабрикаXDTO.Создать(типОбъектаКорневойNOMENKLATURA);
				
			КонецЕсли;
			
			сч = сч + 1;
		КонецЦикла;			
		
		
		// Запись XML через файл
		записьXML_NOM = Новый ЗаписьXML;
		имяФайлаЗаписиXML = КаталогВременныхФайлов() + "Nomenklatura_CWMS3000.xml";
		записьXML_NOM.ОткрытьФайл(имяФайлаЗаписиXML);
		ФабрикаXDTO.ЗаписатьXML(записьXML_NOM, объектКорневойNOMENKLATURA, "NOMENKLATURA"); 
		записьXML_NOM.Закрыть();	                   
		
		результатКомандыLoadDoc3 = опрWSCСсылка.LoadDoc3("LB_SOAP", "1234", "LB.NOM.SOAP", Новый ДвоичныеДанные(имяФайлаЗаписиXML));

	КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьТаблицуНоменклатуры(МассивНоменклатуры = Неопределено)
	
	запросДанныхЕдИзмеренияНоменклатуры = Новый Запрос();
	
	Если МассивНоменклатуры = Неопределено Тогда
		
		запросДанныхЕдИзмеренияНоменклатуры.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.ПометкаУдаления,
		|	Номенклатура.Предопределенный,
		|	Номенклатура.Родитель,
		|	Номенклатура.ЭтоГруппа,
		|	Номенклатура.Код,
		|	Номенклатура.Наименование,
		|	Номенклатура.СтатьяЗатрат,
		|	Номенклатура.Артикул,
		|	Номенклатура.БазоваяЕдиницаИзмерения,
		|	Номенклатура.БазоваяЕдиницаИзмерения.Представление,
		|	Номенклатура.Весовой,
		|	Номенклатура.ВесовойКоэффициентВхождения,
		|	Номенклатура.ВестиПартионныйУчетПоСериям,
		|	Номенклатура.ВестиУчетПоСериям,
		|	Номенклатура.ВестиУчетПоХарактеристикам,
		|	Номенклатура.ЕдиницаДляОтчетов,
		|	Номенклатура.ЕдиницаХраненияОстатков.Представление,
		|	Номенклатура.Комментарий,
		|	Номенклатура.Набор,
		|	Номенклатура.НаименованиеПолное,
		|	Номенклатура.НоменклатурнаяГруппа,
		|	Номенклатура.НомерГТД,
		|	Номенклатура.ОсновноеИзображение,
		|	Номенклатура.ОсновнойПоставщик,
		|	Номенклатура.ОтветственныйМенеджерЗаПокупки,
		|	Номенклатура.СтавкаНДС,
		|	Номенклатура.СтранаПроисхождения,
		|	Номенклатура.Услуга,
		|	Номенклатура.НоменклатурнаяГруппаЗатрат,
		|	Номенклатура.ВидНоменклатуры,
		|	Номенклатура.ВидНоменклатуры.Представление,
		|	Номенклатура.ВестиСерийныеНомера,
		|	Номенклатура.Комплект,
		|	Номенклатура.ЦеноваяГруппа,
		|	Номенклатура.ЕдиницаИзмеренияМест,
		|	Номенклатура.ДополнительноеОписаниеНоменклатуры,
		|	Номенклатура.Вес,
		|	Номенклатура.Отметить,
		|	Номенклатура.Фасовка,
		|	Номенклатура.Объем,
		|	Номенклатура.РусификацияНеТребуется,
		|	Номенклатура.Представление,
		|	Номенклатура.Родитель.Представление
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование <> """"
		|	И НЕ Номенклатура.ЭтоГруппа";	
		
	Иначе
		
		запросДанныхЕдИзмеренияНоменклатуры.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.ПометкаУдаления,
		|	Номенклатура.Предопределенный,
		|	Номенклатура.Родитель,
		|	Номенклатура.ЭтоГруппа,
		|	Номенклатура.Код,
		|	Номенклатура.Наименование,
		|	Номенклатура.СтатьяЗатрат,
		|	Номенклатура.Артикул,
		|	Номенклатура.БазоваяЕдиницаИзмерения,
		|	Номенклатура.БазоваяЕдиницаИзмерения.Представление,
		|	Номенклатура.Весовой,
		|	Номенклатура.ВесовойКоэффициентВхождения,
		|	Номенклатура.ВестиПартионныйУчетПоСериям,
		|	Номенклатура.ВестиУчетПоСериям,
		|	Номенклатура.ВестиУчетПоХарактеристикам,
		|	Номенклатура.ЕдиницаДляОтчетов,
		|	Номенклатура.ЕдиницаХраненияОстатков.Представление,
		|	Номенклатура.Комментарий,
		|	Номенклатура.Набор,
		|	Номенклатура.НаименованиеПолное,
		|	Номенклатура.НоменклатурнаяГруппа,
		|	Номенклатура.НомерГТД,
		|	Номенклатура.ОсновноеИзображение,
		|	Номенклатура.ОсновнойПоставщик,
		|	Номенклатура.ОтветственныйМенеджерЗаПокупки,
		|	Номенклатура.СтавкаНДС,
		|	Номенклатура.СтранаПроисхождения,
		|	Номенклатура.Услуга,
		|	Номенклатура.НоменклатурнаяГруппаЗатрат,
		|	Номенклатура.ВидНоменклатуры,
		|	Номенклатура.ВидНоменклатуры.Представление,
		|	Номенклатура.ВестиСерийныеНомера,
		|	Номенклатура.Комплект,
		|	Номенклатура.ЦеноваяГруппа,
		|	Номенклатура.ЕдиницаИзмеренияМест,
		|	Номенклатура.ДополнительноеОписаниеНоменклатуры,
		|	Номенклатура.Вес,
		|	Номенклатура.Отметить,
		|	Номенклатура.Фасовка,
		|	Номенклатура.Объем,
		|	Номенклатура.РусификацияНеТребуется,
		|	Номенклатура.Представление,
		|	Номенклатура.Родитель.Представление
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование <> """"
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И Номенклатура.Ссылка В(&МассивНоменклатуры)";
		
		запросДанныхЕдИзмеренияНоменклатуры.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	КонецЕсли;
	
	результатЗапросаДанныхЕдИзмеренийНоменклатуры = запросДанныхЕдИзмеренияНоменклатуры.Выполнить();
	
	выгрузкаДанныхЕдИзмеренийНоменклатуры = результатЗапросаДанныхЕдИзмеренийНоменклатуры.Выгрузить();	
	
	Возврат выгрузкаДанныхЕдИзмеренийНоменклатуры		
	
КонецФункции


///////////////////////////////////////////////////////
// ВЫГРУЗКА ЕД. ИЗМЕРЕНИЯ НОМЕНКЛАТУРЫ 

Функция ПолучитьТаблицуЕдИзмеренийНоменклатуры(МассивНоменклатуры = Неопределено) 
	
	запросДанныхНоменклатуры = Новый Запрос();
	
	Если МассивНоменклатуры = Неопределено Тогда
		
		запросДанныхНоменклатуры.Текст = "ВЫБРАТЬ
		|	ЕдиницыИзмерения.Владелец КАК Номенклатура,
		|	ЕдиницыИзмерения.Код,
		|	ЕдиницыИзмерения.Наименование,
		|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору,
		|	ЕдиницыИзмерения.Вес,
		|	ЕдиницыИзмерения.Объем,
		|	ЕдиницыИзмерения.Коэффициент,
		|	ЕдиницыИзмерения.Ширина,
		|	ЕдиницыИзмерения.Высота,
		|	ЕдиницыИзмерения.Глубина
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	НЕ ЕдиницыИзмерения.ПометкаУдаления
		|	И ЕдиницыИзмерения.Наименование <> """"";	
		
	Иначе
		
		запросДанныхНоменклатуры.Текст = "ВЫБРАТЬ
		|	ЕдиницыИзмерения.Владелец КАК Номенклатура,
		|	ЕдиницыИзмерения.Код,
		|	ЕдиницыИзмерения.Наименование,
		|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору,
		|	ЕдиницыИзмерения.Вес,
		|	ЕдиницыИзмерения.Объем,
		|	ЕдиницыИзмерения.Коэффициент,
		|	ЕдиницыИзмерения.Ширина,
		|	ЕдиницыИзмерения.Высота,
		|	ЕдиницыИзмерения.Глубина
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	НЕ ЕдиницыИзмерения.ПометкаУдаления
		|	И ЕдиницыИзмерения.Владелец В(&МассивНоменклатуры)
		|	И ЕдиницыИзмерения.Наименование <> """"";
		
		запросДанныхНоменклатуры.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		
	КонецЕсли;
	
	результатЗапросаДанныхНоменклатуры = запросДанныхНоменклатуры.Выполнить();
	
	выгрузкаДанныхНоменклатуры = результатЗапросаДанныхНоменклатуры.Выгрузить();	
	выгрузкаДанныхНоменклатуры.Индексы.Добавить("Номенклатура");
	
	Возврат выгрузкаДанныхНоменклатуры
	
КонецФункции


///////////////////////////////////////////////////////
// ВЫГРУЗКА ПОСТУПЛЕНИЙ 

Процедура ОтправитьПТУвWMS(МассивДокументов = Неопределено) Экспорт
	
	Если МассивДокументов = Неопределено Тогда
		// выгружаем все со статусом "Ожидается выгрузка в WMS"
		дзДанныхПоПТУ = ПолучитьДЗДанныхПоПТУ(МассивДокументов);
	Иначе
		// выгружаем все со статусом "Ожидается выгрузка в WMS"
		дзДанныхПоПТУ = ПолучитьДЗДанныхПоПТУ(МассивДокументов);
	КонецЕсли;	
		
	Если дзДанныхПоПТУ.Строки.Количество() > 0 Тогда
		
		// Формируем XML по схеме XDTO-пакет "Doc_in_CWMS3000" 
		
		// Формируем корневое свойство "DOC"
		типОбъектаКорневойDOC = ФабрикаXDTO.Пакеты.Получить("cwms3000.ru/in").КорневыеСвойства.Получить("DOC").Тип;
		объектКорневойDOC = ФабрикаXDTO.Создать(типОбъектаКорневойDOC);
		
		Для Каждого стрДЗВУ Из дзДанныхПоПТУ.Строки Цикл
			// Обрабатываем верхний уровень
			
			// Выгрузим номенклатуру из документа
			массивНоменклатуры = стрДЗВУ.Строки.ВыгрузитьКолонку("Номенклатура");
			СформироватьДанныеПоНоменклатуреДляCWMS3000(массивНоменклатуры);
			
			// Создаем элемент коллекции "DOC_IN" свойства "DOC"
			объектDOC_IN = ФабрикаXDTO.Создать(объектКорневойDOC.DOC_IN.ВладеющееСвойство.Тип);
			
			ссылкаНаДокументПТУ = стрДЗВУ.Ссылка;
			
			объектDOC_IN.NUMBER = ссылкаНаДокументПТУ.Номер; 						
			объектDOC_IN.DATE = ссылкаНаДокументПТУ.Дата; // Дата приходного документа ДатаВремя. Дата и время (формат ISO 8601: YYYY-MM-DDThh :mm :ss)  
			объектDOC_IN.IN_DATE = ссылкаНаДокументПТУ.Дата; // Планируемая дата прихода ДатаВремя. Дата и время (формат ISO 8601: YYYY-MM-DDThh :mm :ss)  
			объектDOC_IN.INVOICE = ссылкаНаДокументПТУ.НомерВходящегоДокумента;// Номер инвойса Текстовое описание. До 255 символов.  
			//объектDOC_IN.DOC_OUT_ID = ;// Внешний номер заказа при возвратах Текстовое описание. До 255 символов.  
			объектDOC_IN.INV_DATE = ссылкаНаДокументПТУ.ДатаВходящегоДокументаЭлектронногоОбмена; // Дата инвойса ДатаВремя. Дата (формат ISO 8601: ГГГГ-ММ-ДД)  
			объектDOC_IN.RESPONS_PERS = ссылкаНаДокументПТУ.Ответственный.Наименование; // Ответственное лицо Текстовое описание. До 100 символов.  
			//объектDOC_IN.CAR_NUMBER = // Номер машины Текстовое описание. До 100 символов.  
			//объектDOC_IN.PALL = // Груз на паллетах? (1 - да, 0 - нет) Целое число [0,1]  
			объектDOC_IN.TYPE = 1; // Тип прихода:1-приход; 2-возврат; 3-неофактур. приход Число. Целое число  
			объектDOC_IN.DSC = ссылкаНаДокументПТУ.Комментарий; // Комментарий к приходу Текстовое описание. До 255 символов.  
			объектDOC_IN.CUSTOMER_ID = ссылкаНаДокументПТУ.Контрагент.Код; // ID поставщика Текстовое описание. До 255 символов.  
			объектDOC_IN.CUSTOMER = ссылкаНаДокументПТУ.Контрагент.Наименование; // Поставщик Текстовое описание. До 255 символов.  
			//объектDOC_IN.CUST_ADDRESS = // Адрес поставщика Текстовое описание. До 255 символов.  
			//объектDOC_IN.URGENT = // Срочность Число. Целое число  
			объектDOC_IN.ID_DOC = СокрЛП(ссылкаНаДокументПТУ.Ссылка.УникальныйИдентификатор()); // UUID документа
			
			типОбъектаCONTENT = ФабрикаXDTO.Пакеты.Получить("cwms3000.ru/in").КорневыеСвойства[0].Тип.Свойства[0].Тип.Свойства[16].Тип;
			объектCONTENT = ФабрикаXDTO.Создать(типОбъектаCONTENT);
			
			Для Каждого стрДЗНУ Из стрДЗВУ.Строки Цикл
				// обрабатываем основной уровень (строки табличной части товары)
				типОбъектаCODE = ФабрикаXDTO.Пакеты.Получить("cwms3000.ru/in").КорневыеСвойства[0].Тип.Свойства[0].Тип.Свойства[16].Тип.Свойства[0].Тип;
				объектCODE = ФабрикаXDTO.Создать(типОбъектаCODE);
				объектCODE.CODE_ID = стрДЗНУ.НоменклатураКод; // Код товара
				объектCODE.NAME = стрДЗНУ.НоменклатураНаименование; // Наименование Текстовое описание. До 255 символов.
				объектCODE.GROUP_NAME = стрДЗНУ.НоменклатураРодительНаименование; // Группа товара Текстовое описание. До 255 символов.  
				объектCODE.UNIT_NAME = стрДЗНУ.НоменклатураБазоваяЕдиницаИзмеренияНаименование; // Сокращение ед. измерения (шт., кор) Текстовое описание. До 100 символов.  
				объектCODE.CNT = стрДЗНУ.Количество; // Количество Число.  
				//объектCODE.EXPIRE_DATE = // Срок годности ДатаВремя. Дата (формат ISO 8601: ГГГГ-ММ-ДД)  
				//объектCODE.NOM_TYP = ; // Состояние единицы учета. словарь №422 Число. Целое число  
				//объектCODE.SUB_NOM_TYP = // Градация кондиции или брака. словарь №496 Число. Целое число  
				//объектCODE.PRICE = // Цена продажи Число.  				
				объектCONTENT.CODE.Добавить(объектCODE);
			КонецЦикла;
			объектDOC_IN.CONTENT = объектCONTENT;
			
			//Добавляем в коллекцию элемент
			объектКорневойDOC.DOC_IN.Добавить(объектDOC_IN);			
		КонецЦикла;	
		
		// Запись XML через файл
		записьXML_DOC = Новый ЗаписьXML;
		имяФайлаЗаписиXML = КаталогВременныхФайлов() + "Doc_in_CWMS3000.xml";
		записьXML_DOC.ОткрытьФайл(имяФайлаЗаписиXML);
		ФабрикаXDTO.ЗаписатьXML(записьXML_DOC, объектКорневойDOC, "DOC"); 
		записьXML_DOC.Закрыть();	
		
		опрWSCСсылка = WSСсылки.CWMS3000.СоздатьWSПрокси("http://cwms3000.ru/soap", "IICwmsLoadDocservice", "IICwmsLoadDocPort");
		
		результатКомандыLoadDoc3 = опрWSCСсылка.LoadDoc3("LB_SOAP", "1234", "LB.IN.SOAP", Новый ДвоичныеДанные(имяФайлаЗаписиXML));
		
		// Подтверждение отправки в WMS (Если первый симврол не равен 0 -> Успешно) -> Установка статуса "Выгружен в WMS" 
		Если Лев(СокрЛП(результатКомандыLoadDoc3),1) <> 0 Тогда
			 Для Каждого стрДЗВУ Из дзДанныхПоПТУ.Строки Цикл
				РегистрыСведений.ИсторияСтатусовWMS.ДобавитьОбъектуНовыйСтатусWMS(стрДЗВУ.Ссылка ,ПредопределенноеЗначение("Перечисление.СтатусыWMS.ВыгруженВWMS"));  
			 КонецЦикла;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьДЗДанныхПоПТУ(МассивДокументов)
	
	Если МассивДокументов = Неопределено Тогда		
		
		запрос = Новый Запрос("ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.Код,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.Наименование,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.Родитель.Наименование,
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
		|	ПоступлениеТоваровУслугТовары.КоличествоПринято КАК Количество,
		|	ПоступлениеТоваровУслугТовары.Цена,
		|	ПоступлениеТоваровУслугТовары.Сумма,
		|	ПоступлениеТоваровУслугТовары.Коэффициент
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовWMS.СрезПоследних КАК ИсторияСтатусовWMSСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ПО ИсторияСтатусовWMSСрезПоследних.Объект = ПоступлениеТоваровУслугТовары.Ссылка
		|ГДЕ
		|	НЕ ИсторияСтатусовWMSСрезПоследних.Объект.ПометкаУдаления
		|	И ИсторияСтатусовWMSСрезПоследних.Статус = &ОжидаетсяВыгрузкаВWMS
		|	И ИсторияСтатусовWMSСрезПоследних.Объект ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ
		|ИТОГИ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ");
		
		запрос.УстановитьПараметр("ОжидаетсяВыгрузкаВWMS", ПредопределенноеЗначение("Перечисление.СтатусыWMS.ОжидаетсяВыгрузкаВWMS"));		
	Иначе
		
		запрос = Новый Запрос("ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.Код,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.Наименование,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.Родитель.Наименование,
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
		|	ПоступлениеТоваровУслугТовары.КоличествоПринято КАК Количество ,
		|	ПоступлениеТоваровУслугТовары.Цена,
		|	ПоступлениеТоваровУслугТовары.Сумма,
		|	ПоступлениеТоваровУслугТовары.Коэффициент
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовWMS.СрезПоследних КАК ИсторияСтатусовWMSСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ПО ИсторияСтатусовWMSСрезПоследних.Объект = ПоступлениеТоваровУслугТовары.Ссылка
		|ГДЕ
		|	НЕ ИсторияСтатусовWMSСрезПоследних.Объект.ПометкаУдаления
		|	И ИсторияСтатусовWMSСрезПоследних.Статус = &ОжидаетсяВыгрузкаВWMS
		|	И ИсторияСтатусовWMSСрезПоследних.Объект ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И ИсторияСтатусовWMSСрезПоследних.Объект В(&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ
		|ИТОГИ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ");
		
		запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		запрос.УстановитьПараметр("ОжидаетсяВыгрузкаВWMS", ПредопределенноеЗначение("Перечисление.СтатусыWMS.ОжидаетсяВыгрузкаВWMS"));		
	КонецЕсли;
	
	резЗапроса = запрос.Выполнить();
	дзДанныхПоПТУ = резЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат дзДанныхПоПТУ;
	
КонецФункции


///////////////////////////////////////////////////////
// ОБРАЩЕНИЕ К СЕРВИСАМ ТЕКУЩЕЙ ИБ (ДЛЯ ТЕСТИРОВАНИЯ)  

// Процедура обращение к методам веб-сервиса "ws_5lb_cwms3000" текущей ИБ
//
// Параметры:
//           - "СтруктураПараметров" - структура параметров для обращения к веб-сервису (Обязательный) 
//                    - "ИмяМетода" - имя вызываемого метода
//                    - "СсылкаНаДокумент" - ссылка на документ в системе 1С
//                    - "TypeDoc" - тип документа в 1С ("1" = "ПТУ";)
//
Процедура ВыполнитьОбращение_ws_5lb_cwms3000(СтруктураПараметров) Экспорт
	
	// Динамически подключаемся к сервису ws_5lb_cwms3000
	определенияWS = Новый WSОпределения("http://lab1/UT_10_3_Test_Kuznetsov/ws/ws_5lb_cwms3000.1cws?wsdl","WS_WMS", "789WS");
	проксиWS = Новый WSПрокси(определенияWS, "http://www.ws_5lb_cwms3000.ru", "ws_5lb_cwms3000", "ws_5lb_cwms3000Soap"); 
	проксиWS.Пользователь = "WS_WMS";
	проксиWS.Пароль = "789WS";
	
	Если СтруктураПараметров.ИмяМетода = "DocIn" Тогда
		// Отправляем ответ о поступлении на склад
		
		Если СтруктураПараметров.TypeDoc = "1" Тогда
			// отправка ПТУ
			объектXdtoПТУ = СформироватьДанныеДляПодтвержденияПриходаВWMS(СтруктураПараметров.СсылкаНаДокумент, проксиWS);
			
			// Запись XML через файл
			записьXML_DocIN = Новый ЗаписьXML;
			имяФайлаЗаписиXML = КаталогВременныхФайлов() + "Doc_in_flashback_CWMS3000_5LB.xml";
			записьXML_DocIN.ОткрытьФайл(имяФайлаЗаписиXML);
			проксиWS.ФабрикаXDTO.ЗаписатьXML(записьXML_DocIN, объектXdtoПТУ, "DocIN"); 
			записьXML_DocIN.Закрыть();	
			
			// Формируем двоичные данные из файла xml 
			двДанные_XML_DocIN = Новый ДвоичныеДанные(имяФайлаЗаписиXML);
			
		КонецЕсли;
		
		результатПодтвержденияПриходаВWMS = проксиWS.DocIn(СтруктураПараметров.TypeDoc, двДанные_XML_DocIN);		
		
	КонецЕсли;	
	
КонецПроцедуры
	
///////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДОКУМЕНТА ПОДТВЕРЖДЕНИЯ ПРИХОДА 

Функция СформироватьДанныеДляПодтвержденияПриходаВWMS(СсылкаНаДокумент, ПроксиWS) Экспорт
	
	типXdtoОбъектаDOC_IN = ПроксиWS.ФабрикаXDTO.Тип("http://www.ws_5lb_cwms3000.in.ru","DOC_IN");
	объектXdtoDOC_IN = ПроксиWS.ФабрикаXDTO.Создать(типXdtoОбъектаDOC_IN);	
	объектXdtoDOC_IN.NUMBER = СсылкаНаДокумент.Номер; // Строка
	объектXdtoDOC_IN.WMS_ID = "175"; // Число, положительное
	объектXdtoDOC_IN.INVOICE = СсылкаНаДокумент.НомерВходящегоДокумента; // Строка
	объектXdtoDOC_IN.ID_DOC = СокрЛП(СсылкаНаДокумент.УникальныйИдентификатор()); // Строка
	объектXdtoDOC_IN.DATE = СсылкаНаДокумент.Дата; // ДатаВремя
	объектXdtoDOC_IN.TYPE = "Приход на склад"; // Строка
	объектXdtoDOC_IN.STATUS = "4"; // число, положительное
	объектXdtoDOC_IN.STATUS_DSC = "Приходован на склад"; // Строка
	объектXdtoDOC_IN.PUT_ON_STORE_FD = ТекущаяДата(); // Дата время
	объектXdtoDOC_IN.ID_SUPPLIER = "000048106"; // строка
	объектXdtoDOC_IN.STATUS_DATE = ТекущаяДата(); // Дата и время перехода в статус
	объектXdtoDOC_IN.DOC_OUT_ID = СсылкаНаДокумент.Номер; // Номер заказа в учетной системе клиента, в случае возврата на склад
	
	Для Каждого стр Из СсылкаНаДокумент.Товары Цикл
				
		типXdtoОбъектаCode = ПроксиWS.ФабрикаXDTO.Тип("http://www.ws_5lb_cwms3000.in.ru","CODE");
		объектXdtoCode = ПроксиWS.ФабрикаXDTO.Создать(типXdtoОбъектаCode);	
		объектXdtoCode.Code = стр.Номенклатура.Код;
		объектXdtoCode.I_NOM_ID = СокрЛП(стр.Номенклатура.УникальныйИдентификатор()); // Идентификатор номенклатуры
		объектXdtoCode.Type = "0"; // Тип записи. 0 - по документу, 1 - по факту
		объектXdtoCode.CNT = стр.КоличествоПринято;
		объектXdtoCode.CNT_COND = стр.Количество; // количество кондиции
		объектXdtoCode.CNT_BRAK = 0; // количество брака
		объектXdtoCode.UNIT_TYPE = СокрЛП(стр.ЕдиницаИзмерения.Код); // тип учетной единицы
		объектXdtoCode.EXPIRE_DATE = ТекущаяДата() + 86400; // срок годности
		объектXdtoCode.NOM_TYPE = 0; //кондиция-брак
	    объектXdtoCode.NOM_COND_TYPE = 0; // градация кондиции	
		объектXdtoCode.NOM_BRAK_TYPE = 0; //градация брака
		объектXdtoDOC_IN.CONTENT.Добавить(объектXdtoCode);		
		
	КонецЦикла;
	
	//новЗаписьXml = Новый ЗаписьXML;
	//новЗаписьXml.ОткрытьФайл(КаталогВременныхФайлов() + "Doc_in_flashback_CWMS3000.xml");
	//ЗаписатьXML(новЗаписьXml, объектXdtoDOC);
	//новЗаписьXml.Закрыть();
	
	// Возвращаем данные объектXdtoDOC
	Возврат объектXdtoDOC_IN;
	
КонецФункции	


///////////////////////////////////////////////////////
// ОБРАБОТКА ПТУ 

// Процедура обработки документа ПТУ при записи
//
// Параметры:
//           - "СсылкаНаПТУ" - Ссылка на документ ПТУ (Обязательный) 
//            
Процедура ОбработкаПТУПередЗаписью(СсылкаНаПТУ, РежимЗаписи, Отказ)
	
	// Определим участвует ли склад документа в обмене с WMS
	//........
	
	// Определим текущий статус
	текСтатус = РегистрыСведений.ИсторияСтатусовWMS.ПолучитьТекущийСтатусWMS(СсылкаНаПТУ);	
	
	// Если документ новый и его пытаются провести - отказ (Проведение только при ответе от WMS)
	Если СсылкаНаПТУ.Пустая() И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Отказ = Истина;
		Сообщить("Документ может быть только записан без проведения!(Ошибка:WMS)");
		Возврат;
	КонецЕсли;	
	
	Если текСтатус = ПредопределенноеЗначение("Перечисление.СтатусыWMS.ОжидаетсяВыгрузкаВWMS")
		ИЛИ текСтатус = ПредопределенноеЗначение("Перечисление.СтатусыWMS.ВыгруженВWMS") 
		ИЛИ текСтатус = ПредопределенноеЗначение("Перечисление.СтатусыWMS.ПринятВWMS") Тогда
		Отказ = Истина;
		Сообщить("Документ имеет статус: " + текСтатус + ". Невозможно изменение данного документа.(Ошибка:WMS)");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры	


// Процедура обработки документа ПТУ при записи
//
// Параметры:
//           - "СсылкаНаПТУ" - Ссылка на документ ПТУ (Обязательный) 
//            
Процедура ОбработкаПТУПриЗаписи(СсылкаНаПТУ)
		
	// Определим текущий статус
	текСтатус = РегистрыСведений.ИсторияСтатусовWMS.ПолучитьТекущийСтатусWMS(СсылкаНаПТУ);	
	
	// Меняем статус на "Ожидается выгрузки в WMS"
	Если НЕ СсылкаНаПТУ.Проведен 
		И текСтатус = ПредопределенноеЗначение("Перечисление.СтатусыWMS.ПустаяСсылка") Тогда
		РегистрыСведений.ИсторияСтатусовWMS.ДобавитьОбъектуНовыйСтатусWMS(СсылкаНаПТУ, ПредопределенноеЗначение("Перечисление.СтатусыWMS.ОжидаетсяВыгрузкаВWMS"));
	КонецЕсли;	
	
КонецПроцедуры	
	
	