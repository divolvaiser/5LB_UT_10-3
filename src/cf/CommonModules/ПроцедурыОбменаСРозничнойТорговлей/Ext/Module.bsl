
Функция ПолучитьМассивВсехУзлов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ различные
	               |	ОбменУправлениеТорговлейРозничнаяТорговля.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменУправлениеТорговлейРозничнаяТорговля КАК ОбменУправлениеТорговлейРозничнаяТорговля
				   |
				   |ГДЕ
				   |
				   |	ОбменУправлениеТорговлейРозничнаяТорговля.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.ЭтотУзел());			   
				   
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ВернутьМассивВсехУзловИзПараметровСеанса()
	
	Возврат ПараметрыСеанса.ВсеУзлыОбменаСРозничнойТорговлей;
	
КонецФункции

Функция ПолучитьСоответствиеРеквизитовИУзлов() Экспорт
	
	Хранилище = ПараметрыСеанса.СоответствиеРеквизитовИУзловОбменаСРозничнойТорговлей;
		
	СоответствиеРеквизитовИУзлов = Хранилище.Получить();
	
	Возврат СоответствиеРеквизитовИУзлов;
	
КонецФункции

Функция ПолучитьТаблицуУзловИДат() Экспорт
	
	Хранилище = ПараметрыСеанса.СоответствиеУзловИДатДляОбменаУправлениеТорговлейРозничнаяТорговля;
		
	ТаблицаУзловИДат = Хранилище.Получить();
	
	Возврат ТаблицаУзловИДат;
	
КонецФункции

Функция ВернутьМассивУзловПоОдномуРеквизиту(Реквизит, СоответствиеРеквизитовИУзлов = Неопределено)
	
	Если СоответствиеРеквизитовИУзлов = Неопределено Тогда
		
		СоответствиеРеквизитовИУзлов = ПолучитьСоответствиеРеквизитовИУзлов();
	
	КонецЕсли;
	
	Возврат СоответствиеРеквизитовИУзлов[Реквизит];	
	
КонецФункции


Функция ПолучитьЗапросомМассивУзловПоТипуЦен(ТипЦеныНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбменУправлениеТорговлейРозничнаяТорговляТипыЦенНоменклатуры.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.ТипыЦенНоменклатуры КАК ОбменУправлениеТорговлейРозничнаяТорговляТипыЦенНоменклатуры
	|ГДЕ
	|	ОбменУправлениеТорговлейРозничнаяТорговляТипыЦенНоменклатуры.ТипЦеныНоменклатуры = &ТипЦеныНоменклатуры
	|	И ОбменУправлениеТорговлейРозничнаяТорговляТипыЦенНоменклатуры.Ссылка <> &ЭтотУзел
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбменУправлениеТорговлейРозничнаяТорговля.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейРозничнаяТорговля КАК ОбменУправлениеТорговлейРозничнаяТорговля
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.ТипыЦенНоменклатуры КАК ОбменУправлениеТорговлейРозничнаяТорговляТипыЦенНоменклатуры
	|		ПО (ОбменУправлениеТорговлейРозничнаяТорговляТипыЦенНоменклатуры.Ссылка = ОбменУправлениеТорговлейРозничнаяТорговля.Ссылка)
	|ГДЕ
	|	ОбменУправлениеТорговлейРозничнаяТорговля.Ссылка <> &ЭтотУзел
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбменУправлениеТорговлейРозничнаяТорговля.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОбменУправлениеТорговлейРозничнаяТорговляТипыЦенНоменклатуры.ТипЦеныНоменклатуры) = 0";
	
	Запрос.УстановитьПараметр("ТипЦеныНоменклатуры", ТипЦеныНоменклатуры);
	Запрос.УстановитьПараметр("ЭтотУзел"           , ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоСкладу(Склад) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.СоответствияМагазиновИСкладов КАК ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов
	|ГДЕ
	|	(ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.СкладМагазина = &Склад
	|			ИЛИ ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.СкладМагазина ЕСТЬ NULL )
	|	И ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка <> &ЭтотУзел";
	
	Если ТипЗнч(Склад) = Тип("Массив") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &Склад", "В (&Склад)");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Склад"   , Склад);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоКассе(Касса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.СоответствияМагазиновИСкладов КАК ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов
	|ГДЕ
	|	(ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.КассаМагазина = &Касса
	|			ИЛИ ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.КассаМагазина ЕСТЬ NULL )
	|	И ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка <> &ЭтотУзел";
	
	Запрос.УстановитьПараметр("Касса"   , Касса);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоКассеККМ(КассаККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.СоответствияМагазиновИСкладов КАК ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов
	|ГДЕ
	|	(ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.КассаККММагазина = &КассаККМ
	|			ИЛИ ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.КассаККММагазина ЕСТЬ NULL )
	|	И ОбменУправлениеТорговлейРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка <> &ЭтотУзел";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьМассивУзловПоКассе(Касса, СоответствиеРеквизитовИУзлов = Неопределено) Экспорт
	
	Если ТипЗнч(Касса) = Тип("Массив") Тогда
		
		КоличествоЭлементовВМассиве = Касса.Количество();
		
		Если КоличествоЭлементовВМассиве = 0 Тогда
			
			КассаДляПоиска = Справочники.Кассы.ПустаяСсылка();
			
		ИначеЕсли КоличествоЭлементовВМассиве = 1 Тогда
			
			КассаДляПоиска = Касса[0];
			
		Иначе
			
			КассаДляПоиска = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		КассаДляПоиска = Касса;
		
	КонецЕсли;
	
	//Если КассаДляПоиска - неопределилась до сиз пор, то значит
	//передан был массив касс при обращении к функции
	Если КассаДляПоиска <> Неопределено Тогда
		
		//В МассивУзлов запишем все узлы в которую данная касса может мигрировать
		//
		МассивУзлов = ВернутьМассивУзловПоОдномуРеквизиту(КассаДляПоиска, СоответствиеРеквизитовИУзлов);
		
	Иначе	
		//В МассивУзлов запишем все узлы в которую кассы из массива могут мигрировать
		//
		МассивУзлов = ПолучитьЗапросомМассивУзловПоКассе(Касса);
		
	КонецЕсли;	
	
	Возврат МассивУзлов;
	
КонецФункции

Функция ПолучитьМассивУзловПоТипуЦенНоменклатуры(ТипЦенНоменклатуры, СоответствиеРеквизитовИУзлов = Неопределено) Экспорт
	

	Если ТипЗнч(ТипЦенНоменклатуры) = Тип("Массив") Тогда
		
		КоличествоЭлементовВМассиве = ТипЦенНоменклатуры.Количество();
		
		Если КоличествоЭлементовВМассиве = 0 Тогда
			
			ТипЦенНоменклатурыДляПоиска = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
			
		ИначеЕсли КоличествоЭлементовВМассиве = 1 Тогда
			
			ТипЦенНоменклатурыДляПоиска = ТипЦенНоменклатуры[0];
			
		Иначе
			
			ТипЦенНоменклатурыДляПоиска = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ТипЦенНоменклатурыДляПоиска = ТипЦенНоменклатуры;
		
	КонецЕсли;
	
	Если ТипЦенНоменклатурыДляПоиска <> Неопределено Тогда
		
		МассивУзлов = ВернутьМассивУзловПоОдномуРеквизиту(ТипЦенНоменклатурыДляПоиска, СоответствиеРеквизитовИУзлов);
		
	Иначе	
		
		МассивУзлов = Новый Массив;
		
		Для Каждого ОдинТипЦенНоменклатуры Из ТипЦенНоменклатуры Цикл
			
			МассивУзловОдногоТипаЦенНоменклатуры = ВернутьМассивУзловПоОдномуРеквизиту(ОдинТипЦенНоменклатуры, СоответствиеРеквизитовИУзлов);
			
			ДополнитьМассивСсылками(МассивУзлов, МассивУзловОдногоТипаЦенНоменклатуры);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат МассивУзлов;
	
КонецФункции


Функция ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, ИмяБазовогоТипа, ТипЭлемента, НужноОпределятьЭтоГруппа = Ложь, ЭтоГруппа = Ложь)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
	
	Если НЕ ЭтоСсылка Тогда
		
		Если НужноОпределятьЭтоГруппа Тогда
			
			ЭтоГруппа = Элемент.ЭтоГруппа;
			
			Если ЭтоГруппа = Неопределено Тогда
				ЭтоГруппа = Ложь;
			КонецЕсли;
			
		Конецесли;
		
		Возврат Элемент.Ссылка;
		
	КонецЕсли;
	
	Если НужноОпределятьЭтоГруппа Тогда
		
		ЭтоГруппа = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, "ЭтоГруппа");	
		Если ЭтоГруппа = Неопределено Тогда
			ЭтоГруппа = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса)
	
	МетаданныеЭлемента = Элемент.Метаданные();
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ТипСсылки = Тип("СправочникСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Справочник." + МетаданныеЭлемента.Имя;
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ТипСсылки = Тип("ДокументСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Документ." + МетаданныеЭлемента.Имя; 
		
	Иначе
		
		ТипСсылки = Неопределено;
		
	КонецЕсли;
	
	Возврат ТипЭлемента = ТипСсылки;	
	
КонецФункции


Функция ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяПараметра)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
		
	Если НЕ ЭтоСсылка Тогда
		Возврат Элемент[ИмяПараметра]
	КонецЕсли;
			
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектДанных." + ИмяПараметра + "
				   |
	               |ИЗ
	               |	" + ИмяДляЗапроса + " КАК ОбъектДанных
	               |ГДЕ
	               |	ОбъектДанных.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Элемент);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();	
	
	Возврат Выборка[ИмяПараметра];		
		
КонецФункции


Процедура ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеРеквизитовИУзлов = Неопределено, НужноАнализироватьОграниченияПоДатам = Ложь)
	
	Если ТипЭлемента = Неопределено Тогда
		ТипЭлемента = ТипЗнч(Элемент);
	КонецЕсли;
	
	Если ТипЭлемента = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОплатаОтПокупателяПлатежнойКартой")
		Или ТипЭлемента = Тип("ДокументСсылка.УстановкаПороговНакопительныхСкидок")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.УстановкаПороговНакопительныхСкидок") Тогда
		
		// все узлы
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ОтменаСкидокНоменклатуры")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОтменаСкидокНоменклатуры") Тогда
		
		//нужно выгружать только те документы, у ТЧ которых есть документы установки скидок с операцией ПоНоменклатуре
		ТЧСодержитДокументыСНужнойОперацией = Ложь;
		Для Каждого СтрокаТЧ Из Элемент.Документы Цикл
			
			Если СтрокаТЧ.УстановкаСкидокНоменклатуры.ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
				
				ТЧСодержитДокументыСНужнойОперацией = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТЧСодержитДокументыСНужнойОперацией Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.УстановкаСкидокНоменклатуры")
	ИЛИ ТипЭлемента = Тип("ДокументОбъект.УстановкаСкидокНоменклатуры") Тогда
		
		Если Элемент.ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.УстановкаЦенНоменклатуры")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда
		
		МассивТиповЦен = Элемент.ТипыЦен.ВыгрузитьКолонку("ТипЦен");
		
		//нужно выгружать только в те узлы, для которых установлены нужные типы цен
		ДополнитьМассивУзламиПоТипуЦенНоменклатуры(МассивУзловДляПередачи, МассивТиповЦен);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		
		ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, Элемент.Склад, СоответствиеРеквизитовИУзлов);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ВнутреннееПеремещениеНаличныхДенежныхСредств")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВнутреннееПеремещениеНаличныхДенежныхСредств") Тогда
		
		ДополнитьМассивУзламиПоКассе(МассивУзловДляПередачи, Элемент.Касса,           СоответствиеРеквизитовИУзлов);
		ДополнитьМассивУзламиПоКассе(МассивУзловДляПередачи, Элемент.КассаПолучатель, СоответствиеРеквизитовИУзлов);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ИнвентаризацияТоваровНаСкладе")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОприходованиеТоваров")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОприходованиеТоваров")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВозвратТоваровПоставщику")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПриходныйОрдерНаТовары")
		//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 29/03/2018//==============================================================================================
		ИЛИ ТипЭлемента = Тип("ДокументСсылка._5LB_ЗаявкаНаВозвратТоваровПоставщику")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект._5LB_ЗаявкаНаВозвратТоваровПоставщику")
		//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 29/03/2018//==============================================================================================
		Тогда
		
		//может быть будет нужно добавить условия по документу Основание
		ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, Элемент.Склад, СоответствиеРеквизитовИУзлов);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ВнутреннийЗаказ")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВнутреннийЗаказ") Тогда
		
		Если Элемент.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, Элемент.Заказчик, СоответствиеРеквизитовИУзлов);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		//нужно сделать проверку на тип реквизита СкладОрдер
		Если ТипЗнч(Элемент.СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
			ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, Элемент.СкладОрдер, СоответствиеРеквизитовИУзлов);
		Иначе
			
			ТаблицаПриходныхОрдеров = Элемент.Товары.Выгрузить(,"ПриходныйОрдер");
			ТаблицаПриходныхОрдеров.Свернуть("ПриходныйОрдер");
			
			Для Каждого СтрокаТаблицы Из ТаблицаПриходныхОрдеров Цикл
				ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, СтрокаТаблицы.ПриходныйОрдер.Склад, СоответствиеРеквизитовИУзлов);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
		//регистрируем изменения только если стоит галка "Оплачено"
		Если Элемент.Оплачено И Элемент.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
			ДополнитьМассивУзламиПоКассе(МассивУзловДляПередачи, Элемент.Касса, СоответствиеРеквизитовИУзлов);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		
		//регистрируем изменения только если стоит галка "Оплачено"
		Если Элемент.Оплачено И Элемент.ВидОперации <> Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			ДополнитьМассивУзламиПоКассе(МассивУзловДляПередачи, Элемент.Касса, СоответствиеРеквизитовИУзлов);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.РеализацияТоваровУслуг")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.СписаниеТоваров")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.СписаниеТоваров")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.КомплектацияНоменклатуры")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда
		
		ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, Элемент.Склад, СоответствиеРеквизитовИУзлов);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		
		ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, Элемент.Склад, СоответствиеРеквизитовИУзлов);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ПеремещениеТоваров")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, Элемент.СкладОтправитель, СоответствиеРеквизитовИУзлов);
		ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, Элемент.СкладПолучатель,  СоответствиеРеквизитовИУзлов);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ПереоценкаТоваровВРознице")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПереоценкаТоваровВРознице") Тогда
		
		Если Элемент.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице
			И Элемент.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			
			ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, Элемент.Склад, СоответствиеРеквизитовИУзлов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НужноАнализироватьОграниченияПоДатам Тогда
		
		// ограничение по датам смотрим
		ТаблицаДатИУзлов = ПолучитьТаблицуУзловИДат();
		
		Номер = 0;
		Пока Номер <= МассивУзловДляПередачи.Количество() - 1 Цикл
			
			СтрокаТаблицы = ТаблицаДатИУзлов.Найти(МассивУзловДляПередачи[Номер], "ссылка");
			Если СтрокаТаблицы = Неопределено
				ИЛИ Элемент.Дата < СтрокаТаблицы.ДатаНачалаВыгрузкиДокументов
				ИЛИ Элемент.Дата < СтрокаТаблицы.ДатаСвертки Тогда
				
				Если СтрокаТаблицы <> Неопределено И Элемент.Дата < СтрокаТаблицы.ДатаСвертки Тогда
					
					//зарегистрировать изменения для свертки
					НаборЗаписей = РегистрыСведений.СверткаУзлаРозницы.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.УзелРозницы.Установить(МассивУзловДляПередачи[Номер]);
					
					НаборЗаписей.Прочитать();
					
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляПередачи[Номер], НаборЗаписей);
					
				КонецЕсли;
				
				МассивУзловДляПередачи.Удалить(Номер);
				
			КонецЕсли;
			
			Номер = Номер + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьМассивСсылками(ТекущийМассив, МассивДляДобавления)
	
	Если МассивДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивДляДобавления Цикл
		
		Если ТекущийМассив.Найти(Элемент) = Неопределено Тогда
		
			ТекущийМассив.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры


Функция ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита) Экспорт
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТаблицаДанных = НаборЗаписей.Выгрузить(, ИмяРеквизита);
	ТаблицаДанных.Свернуть(ИмяРеквизита);
	
	МассивОрганизаций = ТаблицаДанных.ВыгрузитьКолонку(ИмяРеквизита); 
	
	Возврат МассивОрганизаций;	
	
КонецФункции

Функция ПолучитьПоТабличнойЧастиРазличныеЗначенияРеквизита(ТабличнаяЧасть, ИмяРеквизита) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТаблицаДанных = ТабличнаяЧасть.Выгрузить(, ИмяРеквизита);
	ТаблицаДанных.Свернуть(ИмяРеквизита);
	
	МассивОрганизаций = ТаблицаДанных.ВыгрузитьКолонку(ИмяРеквизита); 
	
	Возврат МассивОрганизаций;	
	
КонецФункции


Процедура ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи)
	
	МассивУзлов = ВернутьМассивВсехУзловИзПараметровСеанса();
	
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, Склад, СоответствиеРеквизитовИУзлов = Неопределено)
	
	МассивУзлов = ВернутьМассивУзловПоОдномуРеквизиту(Склад, СоответствиеРеквизитовИУзлов);
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоКассе(МассивУзловДляПередачи, Касса, СоответствиеРеквизитовИУзлов = Неопределено)
	
	МассивУзлов = ПолучитьМассивУзловПоКассе(Касса, СоответствиеРеквизитовИУзлов);
	
	//Объединим массивы переданный в процедуру и полученный в теле процедуры
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоТипуЦенНоменклатуры(МассивУзловДляПередачи, ТипЦенНоменклатуры, СоответствиеРеквизитовИУзлов = Неопределено)
	
	
	МассивУзлов = ПолучитьМассивУзловПоТипуЦенНоменклатуры(ТипЦенНоменклатуры, СоответствиеРеквизитовИУзлов);
	
	//Объединим массивы переданный в процедуру и полученный в теле процедуры
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено)
	
	Перем ЭтоГруппа, СсылкаНаЭлемент;
	
	Если ТипЭлемента = Неопределено Тогда
	
		ТипЭлемента = ТипЗнч(Элемент);
	
	КонецЕсли;
	
	// предопределенные элементы выгружаем и загружаем послностью
	Если Элемент.Предопределенный 
	   И Не (ТипЭлемента = Тип("СправочникОбъект.КатегорииОбъектов") ИЛИ ТипЭлемента = Тип("СправочникСсылка.КатегорииОбъектов"))
	   И НЕ (ТипЭлемента = Тип("СправочникОбъект.ВидыКонтактнойИнформации") Или ТипЭлемента = Тип("СправочникСсылка.ВидыКонтактнойИнформации"))Тогда
		 
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		Возврат;
		
	КонецЕсли;
	
	ВыгружатьДляВсехУзлов = Ложь;
	
	Если ТипЭлемента = Тип("СправочникОбъект.Кассы")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Кассы") Тогда
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
			
			ДополнитьМассивУзламиПоКассе(МассивУзловДляПередачи, СсылкаНаЭлемент, СоответствиеРеквизитовИУзлов);
			
			//если массив узлов - пустой, это касса компании, которая посылается во все узлы
			Если МассивУзловДляПередачи.Количество() = 0 Тогда
				
				ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Склады")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Склады") Тогда
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
			
			ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, СсылкаНаЭлемент, СоответствиеРеквизитовИУзлов);
			
			//если массив узлов - пустой, это склад компании, который посылается во все узлы
			Если МассивУзловДляПередачи.Количество() = 0 Тогда
				
				ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ТипыЦенНоменклатуры")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Ложь);
		
		ДополнитьМассивУзламиПоТипуЦенНоменклатуры(МассивУзловДляПередачи, СсылкаНаЭлемент);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ИнформационныеКарты")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		
		// все узлы
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда		
		
		Если ТипЗнч(Элемент.Объект) = Тип("СправочникСсылка.Номенклатура")
		   И Не Элемент.Объект.Набор Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.КатегорииОбъектов")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.КатегорииОбъектов")
		ИЛИ ТипЭлемента = Тип("СправочникОбъект.ЗначенияСвойствОбъектов")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		
		Если ТипЭлемента = Тип("СправочникОбъект.КатегорииОбъектов")
			ИЛИ ТипЭлемента = Тип("СправочникСсылка.КатегорииОбъектов") Тогда
			
			ОписаниеТипаНазначения = Элемент.НазначениеКатегории.ТипЗначения;
			
		Иначе

			ОписаниеТипаНазначения = Элемент.Владелец.НазначениеСвойства.ТипЗначения;
			
		КонецЕсли;
		
		Если ОписаниеТипаНазначения <> Неопределено 
			И (ОписаниеТипаНазначения.СодержитТип(Тип("СправочникСсылка.Номенклатура"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("СправочникСсылка.Контрагенты"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("СправочникСсылка.Организации"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("СправочникСсылка.Склады"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ВнутреннееПеремещениеНаличныхДенежныхСредств"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.КомплектацияНоменклатуры"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ОприходованиеТоваров"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ОтменаСкидокНоменклатуры"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ПеремещениеТоваров"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.РасходныйКассовыйОрдер"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.РасходныйОрдерНаТовары"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.РеализацияТоваровУслуг"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.СписаниеТоваров"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.УстановкаПороговНакопительныхСкидок"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.УстановкаСкидокНоменклатуры"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.УстановкаЦенНоменклатуры"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ЧекККМ")))Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ВидыНоменклатуры")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		
		Если Элемент.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Номенклатура")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Если Не Элемент.Набор Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ХарактеристикиНоменклатуры")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		
		Если Не Элемент.Владелец.Набор Тогда
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ЕдиницыИзмерения")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		
		Если ТипЗнч(Элемент.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ВидыКонтактнойИнформации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		
		МенеджерСправочника = Справочники.ВидыКонтактнойИнформации;
		
		Если Элемент = МенеджерСправочника.ФактАдресФизЛица
		 Или Элемент = МенеджерСправочника.ТелефонФизЛицаСлужебный
		 Или Элемент = МенеджерСправочника.ТелефонФизЛицаДомашний
		 Или Элемент = МенеджерСправочника.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента
		 Или Элемент = МенеджерСправочника.ФактАдресКонтрагента
		 Или Элемент = МенеджерСправочника.ЮрАдресКонтрагента
		 Или Элемент = МенеджерСправочника.ТелефонКонтрагента
		 Или Элемент = МенеджерСправочника.ФаксКонтрагента
		 Или Элемент = МенеджерСправочника.ФактАдресОрганизации
		 Или Элемент = МенеджерСправочника.ЮрАдресОрганизации
		 Или Элемент = МенеджерСправочника.ФаксОрганизации
		 Или Элемент = МенеджерСправочника.ТелефонОрганизации Тогда
		
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		
	КонецЕсли;	
	
КонецПроцедуры


Процедура ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи)
	
	ВыгружатьДляВсехУзлов = Истина;
			
	Если ВозвращатьМассивВсехУзлов Тогда
		ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи);
	КонецЕсли;	
	
КонецПроцедуры

Функция ОпределениеУзловДляВыгрузкиСправочника(Элемент, ТипЭлемента = Неопределено, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, ТипЭлемента, ВыгружатьДляВсехУзлов, 
	                                           ВозвращатьМассивВсехУзлов, СоответствиеРеквизитовИУзлов);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиДокумента(Элемент, ТипРеквизита = Неопределено, ВыгружатьДляВсехУзлов = Ложь, 
	ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено,
	НужноАнализироватьОграниченияПоДатам = Ложь) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
		ТипРеквизита, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоответствиеРеквизитовИУзлов, НужноАнализироватьОграниченияПоДатам);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Данные, ИмяБазовогоТипа, ТипЭлемента = Неопределено, МетаданныеОбъекта = Неопределено,
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено,
	НужноАнализироватьОграниченияПоДатам = Истина) Экспорт
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
			
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиСправочника(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
		                                                                         СоответствиеРеквизитовИУзлов);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиДокумента(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
		                                                                       СоответствиеРеквизитовИУзлов, НужноАнализироватьОграниченияПоДатам);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыСведений" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, 
		                                                                                           ВозвращатьМассивВсехУзлов, СоответствиеРеквизитовИУзлов);
			
	ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраНакопления(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, 
		                                                                                           ВозвращатьМассивВсехУзлов, СоответствиеРеквизитовИУзлов);
			
	ИначеЕсли ИмяБазовогоТипа = "ПланыВидовХарактеристик" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиПланаВидовХарактеристик(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, 
		                                                                                     ВозвращатьМассивВсехУзлов, СоответствиеРеквизитовИУзлов);
		
	КонецЕсли;		
			
	Возврат МассивУзловДляРегистрацииСсылки;
	
КонецФункции


Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено) Экспорт
	
	ВыгружатьДляВсехУзлов = Ложь;
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.КатегорииОбъектов")
		Или ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ЗначенияСвойствОбъектов")
		Или ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.НазначенияСвойствОбъектов") Тогда
		
		ЭлементОтборОбъектЗначение = Элемент.Отбор.Объект.Значение;
		
		Если Не Элемент.Отбор.Объект.Использование Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		ИначеЕсли ТипЗнч(Элемент.Отбор.Объект.Значение) = Тип("СправочникСсылка.Номенклатура") 
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("СправочникСсылка.Контрагенты")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("СправочникСсылка.Организации")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("СправочникСсылка.ФизическиеЛица")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("СправочникСсылка.Склады")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ВнутреннееПеремещениеНаличныхДенежныхСредств")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ОприходованиеТоваров")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ОтменаСкидокНоменклатуры")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ПеремещениеТоваров")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.СписаниеТоваров")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.УстановкаПороговНакопительныхСкидок")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.УстановкаСкидокНоменклатуры")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ЧекККМ") Тогда
			
				ЕстьНепереносимыеЗначения = Ложь;
				
				Если ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ЗначенияСвойствОбъектов") Тогда 
					//придется еще проверить на значения
					
					Для Каждого Запись Из Элемент Цикл
						
						ЗаписьЗначение = Запись.Значение;
						
						Если ТипЗнч(ЗаписьЗначение) <> Тип("Булево") 
							И ТипЗнч(ЗаписьЗначение) <> Тип("Строка")
							И ТипЗнч(ЗаписьЗначение) <> Тип("Дата")
							И ТипЗнч(ЗаписьЗначение) <> Тип("Число")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.Контрагенты")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.ЗначенияСвойствОбъектов")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.Номенклатура")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.Склады")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.Пользователи")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.Организации")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.КлассификаторСтранМира")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
							
							ЕстьНепереносимыеЗначения = Истина;
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если Не ЕстьНепереносимыеЗначения Тогда
					
					ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
					
				КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.КомплектующиеНоменклатуры") Тогда
		
		Если Не Элемент.Отбор.Номенклатура.Значение.Набор Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);

		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.Штрихкоды") Тогда
		
		Если Не Элемент.Отбор.Владелец.Значение.Набор Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);

		КонецЕсли;
		
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
				
	КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраНакопления(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено) Экспорт
	
	ВыгружатьДляВсехУзлов = Ложь;
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если ТипЭлемента = Тип("РегистрНакопленияНаборЗаписей.ПродажиСебестоимость") Тогда
		
		Регистратор = Элемент.Отбор.Регистратор.Значение;
		ТипРегистратора = ТипЗнч(Регистратор);
		
		Если ТипРегистратора = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		     Или ТипРегистратора = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			
			Склад = Регистратор.Склад;
			
		ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			
			Если Регистратор.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				
				Склад = Регистратор.СкладОрдер;
				
			Иначе
				
				Склад = Регистратор.СкладОрдер.Склад;
				
			КонецЕсли;
			
		КонецЕсли;
		
		МассивУзлов = ПолучитьЗапросомМассивУзловПоСкладу(Склад);
		ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
		
		// не по всем узлам нужно выгружать себестоимость
		ТаблицаДатИУзлов = ПолучитьТаблицуУзловИДат();
		
		Номер = 0;
		Пока Номер <= МассивУзловДляПередачи.Количество() - 1 Цикл
			
			СтрокаТаблицы = ТаблицаДатИУзлов.Найти(МассивУзловДляПередачи[Номер], "ссылка");
			Если СтрокаТаблицы = Неопределено
				ИЛИ Не МассивУзловДляПередачи[Номер].ВыгружатьСебестоимость Тогда
				
				МассивУзловДляПередачи.Удалить(Номер);
				
			КонецЕсли;
			
			Номер = Номер + 1;
			
		КонецЦикла;
		
		
	КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции


Функция ОпределениеУзловДляВыгрузкиПланаВидовХарактеристик(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено) Экспорт
	
	ВыгружатьДляВсехУзлов = Ложь;
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если ТипЭлемента = Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов")
		Или ТипЭлемента = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		
		Если Элемент.НазначениеСвойства.ТипЗначения = Неопределено 
			ИЛИ 
			//(
			Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) 
			//	  И Элемент.НазначениеСвойства <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры)
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ВнутреннееПеремещениеНаличныхДенежныхСредств"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.КомплектацияНоменклатуры"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОприходованиеТоваров"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОтменаСкидокНоменклатуры"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПеремещениеТоваров"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РасходныйКассовыйОрдер"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РасходныйОрдерНаТовары"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РеализацияТоваровУслуг"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.СписаниеТоваров"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаПороговНакопительныхСкидок"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаСкидокНоменклатуры"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаЦенНоменклатуры"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ЧекККМ")) Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ПланВидовХарактеристикСсылка.НазначенияСвойствКатегорийОбъектов")
		Или ТипЭлемента = Тип("ПланВидовХарактеристикОбъект.НазначенияСвойствКатегорийОбъектов") Тогда
		
		Если Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) 
			ИЛИ 
			//(
			Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) 
			//     И Элемент <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры)
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ВнутреннееПеремещениеНаличныхДенежныхСредств"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.КомплектацияНоменклатуры"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОприходованиеТоваров"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОтменаСкидокНоменклатуры"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПеремещениеТоваров"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РасходныйКассовыйОрдер"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РасходныйОрдерНаТовары"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РеализацияТоваровУслуг"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.СписаниеТоваров"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаПороговНакопительныхСкидок"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаСкидокНоменклатуры"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаЦенНоменклатуры"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ЧекККМ")) Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ПланВидовХарактеристикСсылка.ТипыШтрихкодов")
		Или ТипЭлемента = Тип("ПланВидовХарактеристикОбъект.ТипыШтрихкодов") Тогда
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		
	КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции


Процедура ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииПередЗаписью, МассивУзловДляРегистрацииПриЗаписи)
	
	ПроцедурыОбменаДанными.ДополнитьМассивПолучателейУзламиАвторегистрации(Источник);
	
	// для регистрации ссылки
	Для Каждого Элемент Из МассивУзловДляРегистрацииПередЗаписью Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;
	
	// для регистрации объекта
	Для Каждого Элемент Из МассивУзловДляРегистрацииПриЗаписи Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;	
	
КонецПроцедуры


Процедура ЗарегистрироватьИзмененияДляСебестоимости(УзелОбменаОбъект) Экспорт
	
	//найдем периоды, за которые нужно регистрировать
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
	|			ТОГДА НАЧАЛОПЕРИОДА(ПродажиСебестоимость.ДокументДвижения.Дата, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПродажиСебестоимость.Период, ДЕНЬ)
	|	КОНЕЦ КАК Период
	|ИЗ
	|	РегистрНакопления.ПродажиСебестоимость КАК ПродажиСебестоимость
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПродажиСебестоимость.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|					ИЛИ ПродажиСебестоимость.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ПродажиСебестоимость.Регистратор.Склад
	|			КОГДА ПродажиСебестоимость.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ТОГДА ВЫБОР
	|						КОГДА ПродажиСебестоимость.Регистратор.ВидПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.НаСклад)
	|							ТОГДА ПродажиСебестоимость.Регистратор.СкладОрдер
	|						ИНАЧЕ ПродажиСебестоимость.Регистратор.СкладОрдер.Склад
	|					КОНЕЦ
	|			КОГДА ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
	|				ТОГДА ВЫБОР
	|						КОГДА ПродажиСебестоимость.ДокументДвижения ССЫЛКА Документ.РеализацияТоваровУслуг
	|								ИЛИ ПродажиСебестоимость.ДокументДвижения ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|							ТОГДА ПродажиСебестоимость.Регистратор.Склад
	|						КОГДА ПродажиСебестоимость.ДокументДвижения ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|							ТОГДА ВЫБОР
	|									КОГДА ПродажиСебестоимость.ДокументДвижения.ВидПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.НаСклад)
	|										ТОГДА ПродажиСебестоимость.ДокументДвижения.СкладОрдер
	|									ИНАЧЕ ПродажиСебестоимость.ДокументДвижения.СкладОрдер.Склад
	|								КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		КОНЕЦ В (&МассивСкладов)
	|	И ПродажиСебестоимость.Регистратор.Дата > НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДЕНЬ", УзелОбменаОбъект.ПериодичностьПередачиСебестоимости);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаНачала"   , УзелОбменаОбъект.ДатаНачалаВыгрузкиСебестоимости);
	Запрос.УстановитьПараметр("МассивСкладов", УзелОбменаОбъект.СоответствияМагазиновИСкладов.ВыгрузитьКолонку("СкладМагазина"));
	
	ТаблицаПериодов = Запрос.Выполнить().Выгрузить();
	
	ЗарегистрироватьИзмененияПериодаВыгрузкиСебестоимости(ТаблицаПериодов, УзелОбменаОбъект.Ссылка);
	
КонецПроцедуры


Процедура ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, ИмяБазовогоТипа, 
	МассивУзловДляРегистрацииСсылки = Неопределено, МассивУзловДляРегистрацииОбъекта = Неопределено)
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ОпределитьВозможностьРедактированияОбъекта(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		
		// элемент еще никуда не передавался
		МассивУзловДляРегистрацииСсылки = Новый Массив;
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник.Ссылка, ИмяБазовогоТипа);
		
	КонецЕсли;
	
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа);
	
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);	
	
КонецПроцедуры

Процедура ПередЗаписьюНабораЗаписейДляОбменаСРозничнойТорговлей(Источник, Отказ, Замещение, ИмяБазовогоТипа) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЗначенияИсточника = ТипЗнч(Источник);
	
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗначенияИсточника);
	
	Если Замещение Тогда
		
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			СтарыйНаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда
			СтарыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;
	
		Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
			СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
			СтрокаОтбора.Использование = Истина;
			
		КонецЦикла;
		
		СтарыйНаборЗаписей.Прочитать();
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(СтарыйНаборЗаписей, ИмяБазовогоТипа,  , МетаданныеРегистра);		
				
	Иначе
		
		МассивУзловДляРегистрацииСсылки = Новый Массив;
			
	КонецЕсли;
			
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа,  , МетаданныеРегистра);
	
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);
	
КонецПроцедуры

Процедура ПередЗаписьСправочникаДляОбменаСРозничнойТорговлейПередЗаписью(Источник, Отказ) Экспорт
	
	ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, "Справочники");	
		
КонецПроцедуры

Процедура ПередЗаписьюДокументаДляОбменаСРозничнойТорговлейПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//Добавлено/////////////////////
	//Автор: Тасмаджиев 31/01/2018//==============================================================================================
	//+НАЧАЛО+//////////////////////
	
	//ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, "Документы");	
	
	Отказаться = ПроверкаУсловийУстановкиНаРегистрацию(Источник);
	Если  НЕ Отказаться Тогда
		
		ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, "Документы");	
		
	Иначе
		//Возврат;
	КонецЕсли;
	//Добавлено/////////////////////
	//Автор: Тасмаджиев 31/01/2018//==============================================================================================
	//-КОНЕЦ-//////////////////////
КонецПроцедуры

Процедура ПередЗаписьюРегистраСведенийДляОбменаСРозничнойТорговлейПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюНабораЗаписейДляОбменаСРозничнойТорговлей(Источник, Отказ, Замещение, "РегистрыСведений");
	
КонецПроцедуры

Процедура ПередУдалениемСправочникаДляОбменаСРозничнойТорговлейПередУдалением(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, "Справочники");	
	
КонецПроцедуры

Процедура ПередУдалениемДокументаДляОбменаСРозничнойТорговлейПередУдалением(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, "Документы");	
	
КонецПроцедуры

Процедура ПередЗаписьюПланаВидовХарактеристикДляОбменаСРозничнойТорговлейПередЗаписью(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, "ПланыВидовХарактеристик");
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраНакопленияДляОбменаСРозничнойТорговлейПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЗначенияИсточника = ТипЗнч(Источник);
	
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗначенияИсточника);
	
	ЭтоКорректировкаСтоимостиСписанияТоваров = ТипЗнч(Источник.Отбор.Регистратор) = Тип("ДокументСсылка.КорректировкаСтоимостиСписанияТоваров");
	РеквизитОпределяющийПериод = ?(ЭтоКорректировкаСтоимостиСписанияТоваров, "ДокументДвижения", "Период");
	
	Если Замещение Тогда
		
		СтарыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	
		Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
			СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
			СтрокаОтбора.Использование = Истина;
			
		КонецЦикла;
		
		СтарыйНаборЗаписей.Прочитать();
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(СтарыйНаборЗаписей, "РегистрыНакопления",  , МетаданныеРегистра);		
		
		ТаблицаСтарогоНабораЗаписей = СтарыйНаборЗаписей.Выгрузить(, РеквизитОпределяющийПериод);
		ТаблицаСтарогоНабораЗаписей.Свернуть(РеквизитОпределяющийПериод);
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = Новый Массив;
			
	КонецЕсли;
			
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, "РегистрыНакопления",  , МетаданныеРегистра);
	
	ТаблицаНовогоНабораЗаписей = Источник.Выгрузить(, РеквизитОпределяющийПериод);
	ТаблицаНовогоНабораЗаписей.Свернуть(РеквизитОпределяющийПериод);
	
	//если нет узлов, для которых нужно регистрировать изменения - возврат
	Если МассивУзловДляРегистрацииОбъекта.Количество() = 0 И МассивУзловДляРегистрацииСсылки.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//получим общий массив узлов для регистрации
	Для Каждого Узел Из МассивУзловДляРегистрацииСсылки Цикл
		
		Если МассивУзловДляРегистрацииОбъекта.Найти(Узел) = Неопределено Тогда
			
			МассивУзловДляРегистрацииОбъекта.Добавить(Узел);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//зарегистрируем изменения для РС ПериодыВыгрузкиСебестоимостиВРозницу
	Для Каждого Узел Из МассивУзловДляРегистрацииОбъекта Цикл
		
		//получим запросом массив дат
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ТаблицаСтарогоНабораЗаписей.Период, ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ ТаблицаСтарогоНабораЗаписей
		|ИЗ
		|	&ТаблицаСтарогоНабораЗаписей КАК ТаблицаСтарогоНабораЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ТаблицаНовогоНабораЗаписей.Период, ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ ТаблицаНовогоНабораЗаписей
		|ИЗ
		|	&ТаблицаНовогоНабораЗаписей КАК ТаблицаНовогоНабораЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНовогоНабораЗаписей.Период
		|ИЗ
		|	ТаблицаНовогоНабораЗаписей КАК ТаблицаНовогоНабораЗаписей
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаСтарогоНабораЗаписей.Период
		|ИЗ
		|	ТаблицаСтарогоНабораЗаписей КАК ТаблицаСтарогоНабораЗаписей";
		
		Запрос.УстановитьПараметр("ТаблицаСтарогоНабораЗаписей", ТаблицаСтарогоНабораЗаписей);
		Запрос.УстановитьПараметр("ТаблицаНовогоНабораЗаписей" , ТаблицаНовогоНабораЗаписей);
		
		Если ЭтоКорректировкаСтоимостиСписанияТоваров Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НАЧАЛОПЕРИОДА(ТаблицаСтарогоНабораЗаписей.Период, ДЕНЬ)", "НАЧАЛОПЕРИОДА(ТаблицаСтарогоНабораЗаписей.ДокументДвижения.Дата, ДЕНЬ)");
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДЕНЬ", Узел.ПериодичностьПередачиСебестоимости);
		
		ТаблицаПериодов = Запрос.Выполнить().Выгрузить();
		
		ЗарегистрироватьИзмененияПериодаВыгрузкиСебестоимости(ТаблицаПериодов, Узел);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПериодаВыгрузкиСебестоимости(ТаблицаПериодов, Узел)
	
	НаборЗаписей = РегистрыСведений.ПериодыВыгрузкиСебестоимостиВРозницу.СоздатьНаборЗаписей();
	
	Для Каждого СтрокаПериод Из ТаблицаПериодов Цикл
		
		НаборЗаписей.Отбор.Дата.Установить(СтрокаПериод.Период);
		
		НаборЗаписей.Прочитать();
		
		НовыйНабор = НаборЗаписей.Количество() = 0;
		
		Если НовыйНабор Тогда
			
			НоваяЗапись      = НаборЗаписей.Добавить();
			НоваяЗапись.Дата = СтрокаПериод.Период;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

//Добавлено/////////////////////
//Автор: Тасмаджиев 31/01/2018//==============================================================================================
//+НАЧАЛО+//////////////////////

// Функция-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
// Проверяет возможность регистрации объекта в зависимости от заданных в этой функции условий.
// Параметры:
//  Источник       - ДокументОбъект - источник события.
//  Отказ          - Булево - флаг отказа от установки на регистрацию.
//
Функция ПроверкаУсловийУстановкиНаРегистрацию(Источник)
	Отказ = Ложь;
	//================================================{Доокумент РеализацияТоваровУслуг}==========================================================
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если НЕ Источник._5LB_Врозницу и НЕ ЗначениеЗаполнено(Источник._5LB_Магазин) Тогда
			Возврат Истина;
		КонецЕсли;
		
		//================================================{УстановкаЦенНоменклатуры}==============================================================
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
		ВыборкаПланов = ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.Выбрать();
		Пока ВыборкаПланов.Следующий() Цикл
			Если ВыборкаПланов.ТипыЦенНоменклатуры.Количество()> 0 Тогда
				МассивЦен = ВыборкаПланов.ТипыЦенНоменклатуры.Выгрузить().ВыгрузитьКолонку("ТипЦеныНоменклатуры");				
			КонецЕсли;
		КонецЦикла;
		
		ТЗ = Источник.ТипыЦен.Выгрузить();
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ТипЦен
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.ТипЦен
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВТ.ТипЦен В (&МассивЦен)";
		Запрос.УстановитьПараметр("ТЗ",ТЗ);
		Запрос.УстановитьПараметр("МассивЦен",МассивЦен);
		Результат = Запрос.Выполнить();
		
		Если  Результат.Пустой() Тогда
			Отказ = Истина;
			Возврат Отказ;
		КонецЕсли;
		//================================================{КомплектацияНоменклатуры}==============================================================
		//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 15/05/2018//==============================================================================================
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КомплектацияНоменклатуры") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		Отказ = Истина;	
		//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 15/05/2018//==============================================================================================
		
	КонецЕсли;
	//=========================================================================================================================================
	
	//Если объект не поподает под оперделенный тип то мы разрешаем его выгрузку.
	Возврат Отказ; 
КонецФункции

//Добавлено/////////////////////
//Автор: Тасмаджиев 31/01/2018//==============================================================================================
//-КОНЕЦ-//////////////////////
