
Процедура ОбновлениеСкидокНоменклатуры() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УстановкаСкидокНоменклатуры.Ссылка
	|ИЗ
	|	Документ.УстановкаСкидокНоменклатуры КАК УстановкаСкидокНоменклатуры
	|ГДЕ
	|	УстановкаСкидокНоменклатуры.Комментарий ПОДОБНО ""%для установки скидки на сумму документа%""";
	
	//Запрос.УстановитьПараметр("", );
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.Ссылка В
		|				(ВЫБРАТЬ
		|					КатегорииОбъектов.Объект
		|				ИЗ
		|					РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|				ГДЕ
		|					КатегорииОбъектов.Категория.Код = ""9714     "")
		|	И НЕ Номенклатура.Ссылка В
		|				(ВЫБРАТЬ
		|					УстановкаСкидокНоменклатурыТовары.Номенклатура
		|				ИЗ
		|					Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
		|				ГДЕ
		|					УстановкаСкидокНоменклатурыТовары.Ссылка = &Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка", ВыборкаДокументов.Ссылка);		
		ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаНоменклатуры.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура = ВыборкаНоменклатуры.Ссылка;
			НоваяСтрока.ПроцентСкидкиНаценки = ДокументОбъект.ПроцентСкидкиНаценки;
			НоваяСтрока.Качество = ПредопределенноеЗначение("Справочник.Качество.Новый");			
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры



///////////////////////////////////////////////////////
// ОБМЕН С САЙТОМ 

#Область Обмен_с_сайтом

Процедура ЗапуститьОбмен() Экспорт
	
	ЗаказыПокупателей();
	////НовоеПоступление();
	СтатусЗаказа();
	
	// НЕ ИСПОЛЬЗУЕТСЯ ПОЗЖЕ УДАЛИТЬ
	//СтатусыОплаты();
	
	//++ Кузнецов С.А. - Включаем обмен с данными из файла "out\gift_card_for_1c.xml" т.к. нужны данные по подарочным картам - 24.03.2016
	ПодарочныеКарты();
	//-- Кузнецов С.А. - 24.03.2016
	
КонецПроцедуры

// Процедура загрузки категорий и номенклатурной группы номенклатуры - Регламентное задание ("ЗавершениеЗависшихСеансов")
Процедура ЗагрузкаКатегорийИНоменклатурныхГрупп() Экспорт
	
	//++ Кузнецов С.А. - Включаем обмен с данными из файла "out/tree_export.xml" т.к. нужны номенклатурные группы и категории - 24.03.2016
	Категории();
	ЦеновыеГруппы();
	//-- Кузнецов С.А. - 24.03.2016
	
КонецПроцедуры	

///////////////////////////////////////////////////////
// ЗАГРУЗКА ЗАКАЗОВ ПОКУПАТЕЛЕЙ 

#Область Загрузка_заказов_покупетелей

Процедура ЗаказыПокупателей() Экспорт
	
	Перем НомерТекущДок, Сайт, ИтогоСоСкидкой;
	Успешно = 1;
	
	//***{+Добавления}*** Тасмаджиев 20/07/2018// ->>
	//***=!{Добавлен обмен через каталог}!=*** ->>
	Если УстановитьВарианТранспортаДанных() Тогда
		
		Попытка
			//***{+Редактирования}*** Тасмаджиев 31/07/2018// ->>
			МассивФайлов = НайтиФайлы(Константы._5LB_ОбменСайтАдресДиректории.Получить()+"/orders/","*.xml",Ложь); 
			//***{-Редактирования}*** Тасмаджиев 31/07/2018// <<-
			Для Каждого ТекФайл ИЗ МассивФайлов Цикл
				
				ВрФайл = ПолучитьИмяВременногоФайла();
				Если ЕстьТакойЗаказ(ТекФайл.ИмяБезРасширения) Тогда
					
					Попытка  //***=!{Добавлен обмен через каталог}!=*** ->>
						
						Файл = Новый Файл(ТекФайл.ПолноеИмя); 
						КопироватьФайл(Файл.ПолноеИмя,ВрФайл);
						
					Исключение
						
						ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
						
						Продолжить;
						
					КонецПопытки;  //***=!{Добавлен обмен через каталог}!=*** ->>
					
					Продолжить;
				КонецЕсли;
				
				Попытка  //***=!{Добавлен обмен через каталог}!=*** ->>
					
					Файл = Новый Файл(ТекФайл.ПолноеИмя); 
					КопироватьФайл(Файл.ПолноеИмя,ВрФайл);
					
				Исключение
					
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
					
					Продолжить;
					
				КонецПопытки;  //***=!{Добавлен обмен через каталог}!=*** ->>
				
				
				Попытка
					_ПрочитатьСообщениеXML(ВрФайл, НомерТекущДок, Сайт, ИтогоСоСкидкой);
					Успех = 1;
				Исключение
					Успех = 0;
				КонецПопытки;
				Если (Успех = 1) И (Успешно=1) Тогда
					Попытка
						Затраты(НомерТекущДок, Сайт, ИтогоСоСкидкой);
					Исключение
						ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
					КонецПопытки;
				КонецЕсли;
				Если Успех = 1 И Успешно = 1 Тогда 
					//ПереместитьФайлFTP(Соединение, ТекФайл, ВрФайл);
				КонецЕсли;
			КонецЦикла;
			
			
		Исключение
			
			//ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
			
			
		КонецПопытки;
		
	Иначе //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-
		
		// Забираем с 1 FTP
		Попытка
			Соединение = ПолучитьСоединениеFTP1();
			УспешноеСоединение1 = Истина;
		Исключение
			УспешноеСоединение1 = Ложь;
		КонецПопытки;	
		Если УспешноеСоединение1 Тогда
			МассивФайлов = Соединение.НайтиФайлы("orders/", "*.xml", Ложь);
			
			Для Каждого ТекФайл ИЗ МассивФайлов Цикл
				
				ВрФайл = ПолучитьИмяВременногоФайла();
				Если ЕстьТакойЗаказ(ТекФайл.ИмяБезРасширения) Тогда
					Попытка
						Соединение.Получить(ТекФайл.ПолноеИмя, ВрФайл);
						ПереместитьФайлFTP(Соединение, ТекФайл, ВрФайл);
					Исключение
						ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
						Продолжить;
					КонецПопытки;
					Продолжить;
				КонецЕсли;
				
				Попытка
					Соединение.Получить(ТекФайл.ПолноеИмя, ВрФайл);
				Исключение
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
					Продолжить;
				КонецПопытки;
				
				Попытка
					_ПрочитатьСообщениеXML(ВрФайл, НомерТекущДок, Сайт, ИтогоСоСкидкой);
					Успех = 1;
				Исключение
					Успех = 0;
				КонецПопытки;
				Если (Успех = 1) И (Успешно=1) Тогда
					Попытка
						Затраты(НомерТекущДок, Сайт, ИтогоСоСкидкой);
					Исключение
						ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
					КонецПопытки;
				КонецЕсли;
				Если Успех = 1 И Успешно = 1 Тогда 
					//ПереместитьФайлFTP(Соединение, ТекФайл, ВрФайл);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли; //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-
	
	//***{+Добавления}*** Тасмаджиев 20/07/2018// ->>
	//***=!{Добавлен обмен через каталог}!=*** ->>
	Если УстановитьВарианТранспортаДанных() Тогда
		Попытка
			//***{+Редактирования}*** Тасмаджиев 31/07/2018// ->>
			МассивФайлов = НайтиФайлы(Константы._5LB_ОбменСайтАдресДиректории.Получить()+"/orders/","*.xml",Ложь); 
			//***{-Редактирования}*** Тасмаджиев 31/07/2018// <<-
			Для Каждого ТекФайл ИЗ МассивФайлов Цикл
				
				ВрФайл = ПолучитьИмяВременногоФайла();
				
				Если ЕстьТакойЗаказ(ТекФайл.ИмяБезРасширения) Тогда
					
					Попытка  //***=!{Добавлен обмен через каталог}!=*** ->>
						
						Файл = Новый Файл(ТекФайл.ПолноеИмя); 
						КопироватьФайл(Файл.ПолноеИмя,ВрФайл);
						
					Исключение
						
						//ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
						
						Продолжить;
						
					КонецПопытки;  //***=!{Добавлен обмен через каталог}!=*** ->>
					
					Продолжить;
				КонецЕсли;
				
				Попытка  //***=!{Добавлен обмен через каталог}!=*** ->>
					
					Файл = Новый Файл(ТекФайл.ПолноеИмя); 
					КопироватьФайл(Файл.ПолноеИмя,ВрФайл);
					
				Исключение
					
					//ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
					
					Продолжить;
					
				КонецПопытки;  //***=!{Добавлен обмен через каталог}!=*** ->>
				
				
				Попытка
					_ПрочитатьСообщениеXML(ВрФайл, НомерТекущДок, Сайт, ИтогоСоСкидкой);
					Успех = 1;
				Исключение
					Успех = 0;
				КонецПопытки;
				Если (Успех = 1) И (Успешно=1) Тогда
					Попытка
						Затраты(НомерТекущДок, Сайт, ИтогоСоСкидкой);
					Исключение
						ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
					КонецПопытки;
				КонецЕсли;
				Если Успех = 1 И Успешно = 1 Тогда 
					//ПереместитьФайлFTP(Соединение, ТекФайл, ВрФайл);
				КонецЕсли;
			КонецЦикла;
			
		Исключение
			
		КонецПопытки;
		
	Иначе //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-
		
		// Забираем с 2 FTP
		Соединение = ПолучитьСоединениеFTP2();
		МассивФайлов = Соединение.НайтиФайлы("orders/", "*.xml", Ложь);
		
		Для Каждого ТекФайл ИЗ МассивФайлов Цикл
			
			ВрФайл = ПолучитьИмяВременногоФайла();
			Если ЕстьТакойЗаказ(ТекФайл.ИмяБезРасширения) Тогда
				Попытка
					Соединение.Получить(ТекФайл.ПолноеИмя, ВрФайл);
					ПереместитьФайлFTP(Соединение, ТекФайл, ВрФайл);
				Исключение
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
					Продолжить;
				КонецПопытки;
				Продолжить;
			КонецЕсли;
			
			Попытка
				Соединение.Получить(ТекФайл.ПолноеИмя, ВрФайл);
			Исключение
				ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
				Продолжить;
			КонецПопытки;
			
			Попытка
				_ПрочитатьСообщениеXML(ВрФайл, НомерТекущДок, Сайт, ИтогоСоСкидкой);
				Успех = 1;
			Исключение
				Успех = 0;
			КонецПопытки;
			Если (Успех = 1) И (Успешно=1) Тогда
				Попытка
					Затраты(НомерТекущДок, Сайт, ИтогоСоСкидкой);
				Исключение
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
				КонецПопытки;
			КонецЕсли;
			Если Успех = 1 И Успешно = 1 Тогда 
				//ПереместитьФайлFTP(Соединение, ТекФайл, ВрФайл);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

Функция ЕстьТакойЗаказ(Номер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура  _ПрочитатьСообщениеXML(_ИмяФайла, НомерТекущДок, Сайт, ИтогоСоСкидкой)Экспорт 
	
	Текст = Новый ТекстовыйДокумент;
	Текст2 = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Формат(ТекущаяДата(),"ДФ=дд.ММ.гггг"));
	ТекстXML = Новый ЧтениеXML;
	ТекстXML.ОткрытьФайл(_ИмяФайла);
	
	//++ Кузнецов С.А. - Соответствие атрибута "site" и значения свойства заказа "Откуда пришел"  - 21.07.2016
	соответствие_Site_ОткудаПришел = ПолучитьСоответствие_Site_ОткудаПришел();
	соответствие_Site_Сайт = ПолучитьСоответствие_Site_Сайт();
	//-- Кузнецов С.А. - 21.07.2016
	
	__Склады = Справочники.Склады;
	Успешно =0;
	Пишем = 0;
	Пока ТекстXML.Прочитать() Цикл
		Если (ТекстXML.Имя = "order") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			НомерДока = ТекстXML.ПолучитьАтрибут("id");
			НомерТекущДок = ТекстXML.ПолучитьАтрибут("id");
			НомерСайт = ТекстXML.ПолучитьАтрибут("id_byshop");
			ЗадачаКурьеру = ТекстXML.ПолучитьАтрибут("deliv_serv"); 
			Если (НомерДока = "") ИЛИ (НомерДока = Неопределено) ИЛИ (НомерДока="0") Тогда
				Успешно = 0;
				Прервать;
			КонецЕсли;
			Попытка
				ДокСчёт = _ПолучитьДокументИнвентаризации(НомерДока,ЗадачаКурьеру);
			Исключение
				ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
				Успешно = 0;
				Прервать;
			КонецПопытки;
			Если ДокСчёт = "ТакиБыл" Тогда
				возврат;
			КонецЕсли;
		КонецЕсли;
		Если (ТекстXML.Имя = "site") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			
			Сайт = ТекстXML.ПолучитьАтрибут("id");
			
			//++ Кузнецов С.А. - Изментл на соответствие, позже закомментированный фрагмент кода можно удалить - 21.07.2016
			
			ОткудаПришёл = соответствие_Site_ОткудаПришел.Получить(Сайт);
			Сайт = соответствие_Site_Сайт.Получить(Сайт);			
			//Если Сайт = "2" Тогда 
			//	Сайт = "000000059";
			//	ОткудаПришёл = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000007");
			//КонецЕсли; //5lb
			//Если Сайт = "1" Тогда 
			//	Сайт = "000000047";
			//	ОткудаПришёл = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000006");
			//КонецЕсли; //Protein
			//Если Сайт = "3" Тогда 
			//	Сайт = "000000075";
			//	ОткудаПришёл = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000008");
			//КонецЕсли; //Megatropin
			//Если Сайт = "4" Тогда 
			//	Сайт = "000000059";
			//	ОткудаПришёл = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000009");
			//КонецЕсли; //5lb mob
			//Если Сайт = "5" Тогда 
			//	Сайт = "Трек";
			//	ОткудаПришёл = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000010");
			//КонецЕсли; //Трек
			//Если Сайт = "6" Тогда 
			//	Сайт = "000000059";
			//	ОткудаПришёл = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000011");
			//КонецЕсли; //5lb mob исчо			
			
			//-- Кузнецов С.А. - 21.07.2016
			
			
		КонецЕсли;
		Если (ТекстXML.Имя = "user") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда  //User ID - для синхронизации клиентов
			Авторизован = ТекстXML.ПолучитьАтрибут("authorized");
			ЮзерАйДи = ТекстXML.ПолучитьАтрибут("id");
			Группс = ТекстXML.ПолучитьАтрибут("groups");
			ЛогинОптТренер = ТекстXML.ПолучитьАтрибут("email");
			ТипЦенОпт = ТекстXML.ПолучитьАтрибут("opt_upcharge");
		КонецЕсли;
		Если (ТекстXML.Имя = "clerk") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			ИДКлерк = ТекстXML.ПолучитьАтрибут("id");
			ЛогинКлерк = ТекстXML.ПолучитьАтрибут("login");
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				ФИОКлерк= ТекстXML.Значение;
				Если ФИОКлерк<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		Если (ТекстXML.Имя = "fio") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				ФИО= ТекстXML.Значение;
				Если ФИО<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "phone") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Тел = ТекстXML.Значение;
				Если Тел<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "inn") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				ИННТрек = ТекстXML.Значение;
				Если ИННТрек<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "email") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Мыло = ТекстXML.Значение;
				Если Мыло<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "self_deliv") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Самовывоз = ТекстXML.Значение;
				Если Самовывоз<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "payment") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			ВидПлатежа = ТекстXML.ПолучитьАтрибут("id");
		КонецЕсли;
		Если (ТекстXML.Имя = "time") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Время = ТекстXML.Значение;
				Если Время<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "region") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Регион = ТекстXML.Значение;
				Если Регион<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Регион = "reg_moscow" Тогда 
			Если (ТекстXML.Имя = "metro") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
				Зона = ТекстXML.ПолучитьАтрибут("zone");
				Округ = ТекстXML.ПолучитьАтрибут("district");
				Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
					ТекстXML.Прочитать();
					Метро= ТекстXML.Значение;
					Если Метро<>"" Тогда
						прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если (ТекстXML.Имя = "district") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
				Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
					ТекстXML.Прочитать();
					Округ = ТекстXML.Значение;
					Если Округ<>"" Тогда
						прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если (ТекстXML.Имя = "reg_postal") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
				Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
					ТекстXML.Прочитать();
					Край= ТекстXML.Значение;
					Если Край<>"" Тогда
						прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		
		/// DELIVERY TYPE
		
		Если (ТекстXML.Имя = "delivery_type") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				ТипДоставки = ТекстXML.Значение;
				Если ТипДоставки<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		
		
		
		Если ТипДоставки = "delivery_pickup" или ТипДоставки = "delivery_courier" 
			или ТипДоставки = "delivery_postal" или ТипДоставки = "delivery_self" Тогда 
			// Общие поля доставки
			Если (ТекстXML.Имя = "address") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
				Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
					ТекстXML.Прочитать();
					Адрес = ТекстXML.Значение;
					Если Адрес<>"" Тогда
						прервать;
					КонецЕсли;  
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		//
		//
		Если ТипДоставки = "delivery_pickup" Тогда 
			
			Если (ТекстXML.Имя = "pickup_retail_shop") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
				idRetailShop = ТекстXML.ПолучитьАтрибут("id");
				//Округ = ТекстXML.ПолучитьАтрибут("district");
				
				Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
					ТекстXML.Прочитать();
					НазваниеМагазинаДоставки= ТекстXML.Значение;
					Если НазваниеМагазинаДоставки<>"" Тогда
						прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		
		
		
		
		
		
		
		Если (ТекстXML.Имя = "delivery_date") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				ДатаДоставки = ТекстXML.Значение;
				Если ДатаДоставки<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "delivery_time_from") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				ВремяДоставкиСтарт = ТекстXML.Значение;
				Если ВремяДоставкиСтарт<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "delivery_time_to") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				ВремяДоставкиСтоп = ТекстXML.Значение;
				Если ВремяДоставкиСтоп<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//23082017 Добавляем дату создания на сайте. Рустам.
		Если (ТекстXML.Имя = "created") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				ДатаСозданияСайт = ТекстXML.Значение;
				Если ДатаСозданияСайт<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		Если (ТекстXML.Имя = "note") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Примеч = ТекстXML.Значение;
				Если Примеч<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "a_np") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				НасПункт = ТекстXML.Значение;
				Если НасПункт<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "a_ul") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Улица = ТекстXML.Значение;
				Если Улица<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "a_dom") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Дом = ТекстXML.Значение;
				Если Дом<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "a_korpus") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Корпус = ТекстXML.Значение;
				Если Корпус<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "a_stroenie") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Строение = ТекстXML.Значение;
				Если Строение<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "a_podezd") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Подъезд = ТекстXML.Значение;
				Если Подъезд<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "a_kv") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Квартира = ТекстXML.Значение;
				Если Квартира<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если (ТекстXML.Имя = "a_ind") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Пока Строка(ТекстXML.ТипУзла) <> "Конец элемента" Цикл
				ТекстXML.Прочитать();
				Индекс = ТекстXML.Значение;
				Если Индекс<>"" Тогда
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Бажибин 
		// Задача по загрузки страны. ориентируемся по коду из ОКСМ
		Если (ТекстXML.Имя = "a_country") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			ТекстXML.Прочитать();
			КодСтраны = ТекстXML.ПолучитьАтрибут("id"); 
			Если ЗначениеЗаполнено(КодСтраны) Тогда
				Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(КодСтраны);
			КонецЕсли;
		КонецЕсли;
		
		Если (ТекстXML.Имя = "deliv_comp") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда  
			ТКАйДи = ТекстXML.ПолучитьАтрибут("id");
		КонецЕсли;
		
		
		Если СокрЛП(ИДКлерк) <> "" Тогда
			Манагер = Справочники.Пользователи.НайтиПоКоду(СокрЛП(ИДКлерк));
			Если Манагер = Справочники.Пользователи.ПустаяСсылка() Тогда
				НовКлерк = Справочники.Пользователи.СоздатьЭлемент();
				НовКлерк.Родитель = Справочники.Пользователи.НайтиПоКоду("Менеджеры");
				НовКлерк.Код = ИДКлерк;
				НовКлерк.Наименование = ЛогинКлерк+"_"+ФИОКлерк;
				Попытка
					НовКлерк.Записать();
					Манагер = НовКлерк.Ссылка;
				Исключение
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
					//Текст.ДобавитьСтроку("Не удалось создать менеджера. ID="+СокрЛП(ИДКлерк));
					Пишем = 1;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		
		
		Если (ТекстXML.Имя = "cart") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
			Итого = ТекстXML.ПолучитьАтрибут("total"); 
			//Скидка = ТекстXML.ПолучитьАтрибут("discount"); 
			ИтогоСоСкидкой = ТекстXML.ПолучитьАтрибут("total_discounted"); 
			Попытка
				СуммаПодарочнаяКарта = Число(ТекстXML.ПолучитьАтрибут("written_off_balance")); 
			Исключение
				ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
				Если ТекстXML.ПолучитьАтрибут("written_off_balance")<>"" Тогда
					Текст.ДобавитьСтроку("Проблема с суммой подарочной карты в заказе "+Сред(_ИмяФайла,27,5));
					Пишем = 1;
				КонецЕсли;
				СуммаПодарочнаяКарта = 0;			
			КонецПопытки;
			Если СуммаПодарочнаяКарта>0 Тогда
				НовКарта = ДокСчёт.ПодарочныеКарты.Добавить();
				НовКарта.Номер = "Сайт";
				НовКарта.Сумма = СуммаПодарочнаяКарта;
			КонецЕсли;
			ИтогоВес = 0;
			Пока ТекстXML.Прочитать() Цикл
				Если (ТекстXML.Имя = "cart") и (Строка(ТекстXML.ТипУзла) = "Конец элемента") Тогда
					Прервать;
				КонецЕсли;
				Если (ТекстXML.Имя = "item") и (Строка(ТекстXML.ТипУзла) = "Начало элемента") Тогда
					ИдТовара = ТекстXML.ПолучитьАтрибут("id");
					КолТовара = ТекстXML.ПолучитьАтрибут("quantity");
					ЦенаТовара = ТекстXML.ПолучитьАтрибут("price");
					ССылкаНоменклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(ИдТовара));
					Скидка = ТекстXML.ПолучитьАтрибут("discount"); 
					Попытка
						//++ Кузнецов С.А. - Умножаем вес на количество (с сайта приходит вес за шт.) - 11.08.2016
						//Вес = Число(ТекстXML.ПолучитьАтрибут("weight"));
						Вес = Число(КолТовара) * Число(ТекстXML.ПолучитьАтрибут("weight"));
						//-- Кузнецов С.А. - 11.08.2016
						
						ОбНом = ССылкаНоменклатура.ПолучитьОбъект();
						
						//++ Кузнецов С.А. - Устанавливаем вес в 1С по данным сайта - 11.08.2016
						ОбНом.Вес = Число(ТекстXML.ПолучитьАтрибут("weight"));
						//-- Кузнецов С.А. - 11.08.2016
						
						ИтогоВес = ИтогоВес+Вес;
						ОбНом.Записать();
					Исключение
						ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
						Если ТекстXML.ПолучитьАтрибут("weight")<>"" Тогда
							Текст.ДобавитьСтроку("Проблема с весом у номенклатуры с кодом: "+ИдТовара+" В заказе "+Сред(_ИмяФайла,27,5));
							Пишем = 1;
						КонецЕсли;
					КонецПопытки;
					
					Если ССылкаНоменклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
						СтрСообщения = "Не найдена номенклатура с кодом: "+ИдТовара;
						Пишем = 1;
						Продолжить;
					КонецЕсли; 
					если ССылкаНоменклатура.ЭтоГруппа тогда
						Продолжить;
					конецесли;
					Если СсылкаНоменклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда//СокрЛП(СсылкаНоменклатура.Код) = "999968" Тогда
						НовСтрУсл = ДокСчёт.Услуги.Добавить();
						НовСтрУсл.Номенклатура = ССылкаНоменклатура;
						НовСтрУсл.Содержание = СсылкаНоменклатура.Наименование;
						НовСтрУсл.Количество = КолТовара;
						НовСтрУсл.Цена = ЦенаТовара;
						НовСтрУсл.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтрУсл,ДокСчёт);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтрУсл, ДокСчёт);
					Иначе
						НовСтр = ДокСчёт.Товары.Добавить();
						НовСтр.Номенклатура = ССылкаНоменклатура;
						НовСтр.КлючСтроки = НовСтр.НомерСтроки; //23052018 Добавляем КлючСтроки для обмена с ЕМЕ
						Если СсылкаНоменклатура.БазоваяЕдиницаИзмерения=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
							Выб = Справочники.ЕдиницыИзмерения.Выбрать(,СсылкаНоменклатура);
							Пока Выб.Следующий() Цикл
								Если Выб.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
									НовСтр.ЕдиницаИзмерения = Выб.Ссылка;
									НовСтр.Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;	
								КонецЕсли;
							КонецЦикла;
						Иначе
							НовСтр.ЕдиницаИзмерения = ССылкаНоменклатура.ЕдиницаХраненияОстатков;
							НовСтр.Коэффициент = 1;
						КонецЕсли;
						
						//++ Кузнецов С.А. - Если рекламное оборудование устанавливаем "Склад развития" и товар по копейки - 21.07.2016						
						Если ОткудаПришёл = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000018") Тогда // с сайта www.5lb.ru (Рекламное оборудование)	
							НовСтр.Размещение = Справочники.Склады.НайтиПоКоду("547"); // Склад развития
							НовСтр.Цена = 0.01;
						Иначе
							НовСтр.Размещение = Справочники.Склады.НайтиПоКоду("000000005"); // Основной
							НовСтр.Цена = ЦенаТовара;
						КонецЕсли;
						//-- Кузнецов С.А. - 21.07.2016
						
						НовСтр.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
						НовСтр.Количество = КолТовара;
						//12012017 Распоряжение руководтсва: меняем расположение скидок в заказе
						//НовСтр.ПроцентСкидкиНаценки = Скидка;
						НовСтр.ПроцентАвтоматическихСкидок = Скидка;
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтр,ДокСчёт);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтр, ДокСчёт);						
						НовСтр.Менеджер = Манагер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Успешно = 1;	
	КонецЦикла;
	
	Если Успешно =1 Тогда
		Если ЗадачаКурьеру = "1" Тогда //(ДокСчёт.Товары.Количество()=0) И (ДокСчёт.Услуги.Количество()=0) Тогда   //задача, а не заказ
			ИтогоСоСкидкой="0";
			РегЗапись = РегистрыСведений.Заказы4Logistic.СоздатьМенеджерЗаписи();
			РегЗапись.Заказ = "Задача Курьеру "+НомерДока;
			РегЗапись.АдресДоставки =НасПункт+",ул."+Улица+",д."+Дом+?(Корпус="","",",кор."+Корпус)+?(Строение="","",",стр."+Строение)+",кв."+Квартира;
			РегЗапись.Время = ?(Время<>"",Время," с "+ВремяДоставкиСтарт+" по "+ВремяДоставкиСтоп);
			//РегЗапись.Метро = Метро;
			Если ЗначениеЗаполнено(НазваниеМагазинаДоставки) Тогда 
				РегЗапись.Метро= НазваниеМагазинаДоставки;
			Иначе
				РегЗапись.Метро = Метро;
			КонецЕсли;
			РегЗапись.Телефон = Тел;
			Если СокрЛП(Округ) = "СК" Тогда
				РегЗапись.Округ = Перечисления.Округ.СК;
			ИначеЕсли СокрЛП(Округ) = "ТТК" Тогда
				РегЗапись.Округ = Перечисления.Округ.ТТК;
			ИначеЕсли СокрЛП(Округ) = "САО" Тогда
				РегЗапись.Округ = Перечисления.Округ.САО;
			ИначеЕсли СокрЛП(Округ) = "СВАО" Тогда
				РегЗапись.Округ = Перечисления.Округ.СВАО;	
			ИначеЕсли СокрЛП(Округ) = "ВАО" Тогда
				РегЗапись.Округ = Перечисления.Округ.ВАО;		
			ИначеЕсли СокрЛП(Округ) = "ЮВАО" Тогда
				РегЗапись.Округ = Перечисления.Округ.ЮВАО;		
			ИначеЕсли СокрЛП(Округ) = "ЮАО" Тогда
				РегЗапись.Округ = Перечисления.Округ.ЮАО;			
			ИначеЕсли СокрЛП(Округ) = "ЮЗАО" Тогда
				РегЗапись.Округ = Перечисления.Округ.ЮЗАО;				
			ИначеЕсли СокрЛП(Округ) = "ЗАО" Тогда
				РегЗапись.Округ = Перечисления.Округ.ЗАО;					
			ИначеЕсли СокрЛП(Округ) = "СЗАО" Тогда
				РегЗапись.Округ = Перечисления.Округ.СЗАО;						
			ИначеЕсли СокрЛП(Округ) = "ТК" Тогда
				РегЗапись.Округ = Перечисления.Округ.ТК;
			ИначеЕсли СокрЛП(Округ) = "ЦАО" Тогда
				РегЗапись.Округ = Перечисления.Округ.ЦАО;
			КонецЕсли;
			РегЗапись.ФИО = ФИО;
			РегЗапись.Зона = Зона;
			РегЗапись.Дом = Дом;
			РегЗапись.Индекс = Индекс;
			РегЗапись.Квартира = Квартира;
			РегЗапись.Корпус = Корпус;
			Если ЗначениеЗаполнено(НазваниеМагазинаДоставки) Тогда
				РегЗапись.НаселённыйПункт = "Москва г.";
			Иначе				
				РегЗапись.НаселённыйПункт = НасПункт;
			КонецЕсли;
			РегЗапись.Подъезд = Подъезд;
			РегЗапись.Строение = Строение;
			РегЗапись.Улица = Улица;
			РегЗапись.email = Мыло;
			РегЗапись.ТекстЗадачи = Примеч;
			РегЗапись.Страна = Страна;
			Попытка
				РегЗапись.Дата = Дата(Прав(ДатаДоставки,4),Сред(ДатаДоставки,4,2),Лев(ДатаДоставки,2));     
			Исключение
				Успешно = 0;
				ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
			КонецПопытки;
			Попытка
				РегЗапись.Записать();
			Исключение
				Успешно = 0;
				ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
			КонецПопытки;
			
		ИначеЕсли (ДокСчёт.Товары.Количество()>0) ИЛИ (ДокСчёт.Услуги.Количество()>0) Тогда
			ДокСчёт.Номер = НомерДока;
			ДокСчёт.НомерДокаСайт = НомерСайт;
			ДокСчёт.Дата = ТекущаяДата();
			Попытка
				ДокСчёт.ДатаОтгрузки = Дата(Прав(ДатаДоставки,4),Сред(ДатаДоставки,4,2),Лев(ДатаДоставки,2));     
				//23082017 Добавляем дату создания на сайте. Рустам
				ДокСчёт.ДатаВходящегоДокументаЭлектронногоОбмена = Дата(ДатаСозданияСайт);
			Исключение
				ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
			КонецПопытки;
			//14.08.2018 с 15.08.2018 Бифитстор    /////////////////////////////////////// Женя 17.08.2018 закомментировала строки 967-972 ///////////////////////////////////
			
			//03102018 С 04.10.2018 Новая организация АКТИВ-ТРЕЙД ООО	
			Если ТекущаяДата()>'20181004000001' Тогда
				Если Найти(Группс,"1") >0  Тогда
					ДокСчёт.Организация = ?(Сайт="Трек",Справочники.Организации.НайтиПоКоду("655      "),Справочники.Организации.НайтиПоКоду("661")); //ФитМилс
				Иначе
					ДокСчёт.Организация = ?(Сайт="Трек",Справочники.Организации.НайтиПоКоду("655      "),Справочники.Организации.НайтиПоКоду("677")); //АктивТрейд
				КонецЕсли;
			//28.12.2017 с 03.01.2018 снова ГТРР
			ИначеЕсли ТекущаяДата()>'20180103000001' Тогда
				Если Найти(Группс,"1") >0  Тогда
					ДокСчёт.Организация = ?(Сайт="Трек",Справочники.Организации.НайтиПоКоду("655      "),Справочники.Организации.НайтиПоКоду("661")); //ФитМилс
				Иначе
					ДокСчёт.Организация = ?(Сайт="Трек",Справочники.Организации.НайтиПоКоду("655      "),Справочники.Организации.НайтиПоКоду("662")); //ГлобалТР
				КонецЕсли;
				//24.05.2017 Переход на новый документооборот
			ИначеЕсли ТекущаяДата()>'20170525000001' Тогда
				Если Найти(Группс,"1") >0  Тогда
					//ДокСчёт.Организация = ?(Сайт="Трек",Справочники.Организации.НайтиПоКоду("655      "),Справочники.Организации.НайтиПоКоду("000000001"));
					ДокСчёт.Организация = ?(Сайт="Трек",Справочники.Организации.НайтиПоКоду("655      "),Справочники.Организации.НайтиПоКоду("661")); //ФитМилс
				Иначе
					Если ТекущаяДата()>'20170526000001' Тогда
						ДокСчёт.Организация = ?(Сайт="Трек",Справочники.Организации.НайтиПоКоду("655      "),Справочники.Организации.НайтиПоКоду("670")); //Глобал
					Иначе
						ДокСчёт.Организация = ?(Сайт="Трек",Справочники.Организации.НайтиПоКоду("655      "),Справочники.Организации.НайтиПоКоду("000000001"));
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДокСчёт.Организация = ?(Сайт="Трек",Справочники.Организации.НайтиПоКоду("655      "),Справочники.Организации.НайтиПоКоду("000000001"));
			КонецЕсли;
			ДокСчёт.СтруктурнаяЕдиница = Справочники.Организации.НайтиПоКоду("655      ").ОсновнойБанковскийСчет;
			ДокСчёт.КратностьВзаиморасчетов = 1;
			ДокСчёт.КурсВзаиморасчетов = 1;
			Если СокрЛП(Самовывоз) = "1" Тогда
				ДокСчёт.Статус = Справочники.Пользователи.НайтиПоНаименованию("*САМОВЫВОЗ",Истина).Ссылка;
			КонецЕсли;
			
			Если СокрЛП(ВидПлатежа) = "1" Тогда
				ДокСчёт.ВидОплаты = Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("Банковский перевод",Истина);
			ИначеЕсли СокрЛП(ВидПлатежа) = "1" Тогда
				ДокСчёт.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные;
			КонецЕсли;
			
			Если (Справочники.Контрагенты.НайтиПоКоду(Сайт) = Справочники.Контрагенты.ПустаяСсылка()) И (Сайт<>"Трек") Тогда
				Пишем = 1;
				возврат;
				//++ Кузнецов С.А. - Если рекламное оборудование устанавливаем "Склад развития" - 21.07.2016
			ИначеЕсли ОткудаПришёл = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000018") Тогда // с сайта www.5lb.ru (Рекламное оборудование)
				ДокСчёт.Контрагент = Справочники.Контрагенты.НайтиПоКоду(Сайт);
				ДокСчёт.ДоговорКонтрагента = ОбщегоНазначения.ПолучитьОсновнойДоговорКонтрагента(ДокСчёт.Контрагент);
				Попытка
					ДокСчёт.СкладГруппа = Справочники.Склады.НайтиПоКоду("547"); // Склад развития
				Исключение
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
					Пишем = 1;
					возврат;
				КонецПопытки;
				//-- Кузнецов С.А. - 21.07.2016	
			ИначеЕсли Сайт="Трек" Тогда
				Если НЕ ЗначениеЗаполнено(ИННТрек) Тогда
					Пишем = 1;
					возврат;
				КонецЕсли;
				
				Если ИННТрек = 0000000000 Тогда
					Пишем = 1;
					возврат;
				КонецЕсли;
				
				ТекКонтр = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННТрек,Справочники.Контрагенты.НайтиПоКоду("000000041"));
				Если ТекКонтр.Пустая() Тогда
					НачатьТранзакцию();
					НовКонтр = Справочники.Контрагенты.СоздатьЭлемент();
					НовКонтр.Наименование = ФИО;
					НовКонтр.ЮрФизЛицо = ?(СтрДлина(ИННТрек)=10,Перечисления.ЮрФизЛицо.ЮрЛицо,Перечисления.ЮрФизЛицо.ФизЛицо);
					НовКонтр.Покупатель=Истина;
					НовКонтр.ИНН = ИННТрек;
					Попытка
						НовКонтр.Записать();
					Исключение
						ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
						Пишем = 1;
						ОтменитьТранзакцию();
						Возврат;
					КонецПопытки;
					
					НовДог = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					НовДог.Владелец = НовКонтр.Ссылка;
					НовДог.Организация = Справочники.Организации.НайтиПоКоду("655      ");
					НовДог.Наименование = "Основной Договор";
					НовДог.ВалютаВзаиморасчетов =  Справочники.Валюты.НайтиПоКоду("643");
					НовДог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
					НовДог.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
					Попытка
						НовДог.Записать();
						ЗафиксироватьТранзакцию();
					Исключение
						ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
						Пишем = 1;
						ОтменитьТранзакцию();
						Возврат;
					КонецПопытки;
					
					НовКонтр.ОсновнойДоговорКонтрагента = НовДог.Ссылка;
					НовКонтр.Записать();
					ТекКонтр = НовКонтр;
				КонецЕсли;
				
				ДокСчёт.Контрагент = ТекКонтр;
				ДокСчёт.ДоговорКонтрагента = ОбщегоНазначения.ПолучитьОсновнойДоговорКонтрагента(ДокСчёт.Контрагент);
				Попытка
					ДокСчёт.СкладГруппа = Справочники.Склады.НайтиПоКоду("000000005");
				Исключение
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
					Пишем = 1;
					возврат;
				КонецПопытки;
			Иначе
				ДокСчёт.Контрагент = Справочники.Контрагенты.НайтиПоКоду(Сайт);
				//14.08.2018 с 15.08.2018 Бифитстор
				//03102018 С 04.10.2018 Новая организация АКТИВ-ТРЕЙД ООО	
				Если ТекущаяДата()>'20181004000001' Тогда                /////////////////////////////////////// Женя 17.08.2018 закомментировала строки 1085-1090 ///////////////////////////////////
					Если Найти(Группс,"1") >0  Тогда
						ДокСчёт.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("СФитМилс",Истина,,ДокСчёт.Контрагент);
					Иначе
						ДокСчёт.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("САктивТрейд",Истина,,ДокСчёт.Контрагент);
					КонецЕсли;
				//28.12.2017 с 03.01.2018 снова ГТРР
				ИначеЕсли ТекущаяДата()>'20180103000001' Тогда
					Если Найти(Группс,"1") >0  Тогда
						ДокСчёт.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("СФитМилс",Истина,,ДокСчёт.Контрагент);
					Иначе
						ДокСчёт.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("СГлобалТрейдРус_",Истина,,ДокСчёт.Контрагент);
					КонецЕсли;
					//24.05.2017 Переход на новый документооборот
				ИначеЕсли ТекущаяДата()>'20170525000001' Тогда
					Если Найти(Группс,"1") >0  Тогда
						ДокСчёт.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("СФитМилс",Истина,,ДокСчёт.Контрагент);
					Иначе
						Если ТекущаяДата()>'20170526000001' Тогда
							ДокСчёт.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("СГлобалТрейдРус",Истина,,ДокСчёт.Контрагент);
						Иначе
							ДокСчёт.ДоговорКонтрагента = ОбщегоНазначения.ПолучитьОсновнойДоговорКонтрагента(ДокСчёт.Контрагент);
						КонецЕсли;
					КонецЕсли;
				Иначе
					ДокСчёт.ДоговорКонтрагента = ОбщегоНазначения.ПолучитьОсновнойДоговорКонтрагента(ДокСчёт.Контрагент);
				КонецЕсли;
				
				Попытка
					ДокСчёт.СкладГруппа = Справочники.Склады.НайтиПоКоду("000000005");
				Исключение
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
					Пишем = 1;
					возврат;
				КонецПопытки;
			КонецЕсли;	
			
			ДокСчёт.Манагер = Манагер;
			
			ДокСчёт.ФИО = ФИО;
			ДокСчёт.Телефон = Тел;
			Если Сайт<>"Трек" Тогда
				Если Авторизован = "1" Тогда
					ДокСчёт.УдалитьКонтактноеЛицо = ПоискКлиента (Тел,Мыло,ФИО,ЮзерАйДи); //Пишем сюды клиента
				Иначе
					ДокСчёт.УдалитьКонтактноеЛицо = ПоискКлиента (Тел,Мыло,ФИО,Неопределено); //Пишем сюды клиента
				КонецЕсли;
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(ДокСчёт.УдалитьКонтактноеЛицо)) И (Найти(Мыло,"@5lb.ru")=0) Тогда
				ПроверитьНаличиеПочты(ДокСчёт.УдалитьКонтактноеЛицо,Мыло);
			КонецЕсли;
			
			
			Если Найти(Группс,"2") >0  Тогда
				ДокСчёт.Тренер = ЛогинОптТренер;
			КонецЕсли;
			
			Если Регион = "reg_moscow" Тогда
				ДокСчёт.Регион = "Москва";
				ДокСчёт.СтатусыСборкиЗаказа=Перечисления.СтатусыСборкиЗаказа.ГотовКСборке;
				Регион_="Москва";
			ИначеЕсли Регион = "reg_postal" Тогда
				ДокСчёт.Регион = "ЗаМКАДье";
				Регион_=Край;
				Если ЗначениеЗаполнено (ТКАйДи) Тогда
					ДокСчёт.ТранспортнаяКомп = ВернутьТК(ТКАйДи);
					//17.02.2017 Задача по транспортным компаниям
					УстановитьРеквизитыТК(ДокСчёт);
					//17.02.2017
				Иначе
					ДокСчёт.ТранспортнаяКомп = Справочники.ТранспортныеКомпании.НайтиПоКоду("000000001");
				КонецЕсли;
			ИначеЕсли Сайт = "Трек" Тогда
				ДокСчёт.Регион = "Москва";
				Регион_="Москва";
			Иначе	
				Регион_= "НЕ ЗАПОЛНЕН!";
			КонецЕсли;
			Если Регион = "reg_moscow" Тогда
				ДокСчёт.Комментарий =Примеч;
			Иначе
				ДокСчёт.Комментарий = Примеч;
			КонецЕсли;
			ДокСчёт.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
			ДокСчёт.СтатусОплаты = Перечисления.СтатусОплаты.НеОпалчен;
			Если Найти(Группс,"1") >0  Тогда
				Если ЗначениеЗаполнено(ТипЦенОпт) Тогда
					ИмяТипаЦен = "Основной "+ТипЦенОпт;
					ТМПТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(ИмяТипаЦен,Истина);
					Если ТМПТипЦен<>Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() Тогда
						ДокСчёт.ТипЦен = ТМПТипЦен;
					Иначе
						ДокСчёт.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("2314");
					КонецЕсли;
				Иначе
					ДокСчёт.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("2314");
				КонецЕсли;
				ДокСчёт.Опт = Истина;
			Иначе
				ДокСчёт.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
			КонецЕсли;
			
			ДокСчёт.Комментарий = ДокСчёт.Комментарий + " + ";
			//ДОБАВЛЕНО ПРИ РАЗРАБОТКЕ ПВЗ
			// ДОПОЛНЯЕМ ЗАКАЗ ДАННЫМИ
			Если ЗначениеЗаполнено(idRetailShop) Тогда
				ДокСчёт.ПунктСамовывоза = Справочники.Склады.НайтиПоРеквизиту("idМагазинаНаСайте",idRetailShop);
			КонецЕсли;
			//ОТПРАВИМ СМС только для ПВЗ
			//{+НАЧАЛО+Редактирования} Автор: Тасмаджиев 26/02/2018//==============================================================================================
		     Если ЗначениеЗаполнено(ДокСчёт.ПунктСамовывоза) Тогда
				ДокСчёт.Регион = "Москва";
			КонецЕсли;
			//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 28/02/2018//==============================================================================================
			
			Попытка
				ДокСчёт.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
				ДокСчёт.Записать(РежимЗаписиДокумента.Запись);
				Пишем = 1;
			КонецПопытки;
			//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 28/02/2018//==============================================================================================
			ДобавитьСМСКОтправкеВРегистр(ДокСчёт.Ссылка,"ПринятВОбработку");
			//{-КОНЕЦ-Редактирования} Автор: Тасмаджиев 26/02/2018//==============================================================================================
			// Установим статус заказа
			//ДОБАВЛЕНО ПРИ РАЗРАБОТКЕ ПВЗ
			
			
			
			//{+НАЧАЛО+Изменения} Автор: Тасмаджиев 28/02/2018//=============================================================================================
			//Попытка
			//	ДокСчёт.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
			//	ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
			//	ДокСчёт.Записать(РежимЗаписиДокумента.Запись);
			//	Пишем = 1;
			//КонецПопытки;
			//{-КОНЕЦ-Изменения} Автор: Тасмаджиев 28/02/2018//==============================================================================================
			
			Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = ДокСчёт.Ссылка;
			Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ОткудаПришёл");
			Запись.Значение = ОткудаПришёл;
			Попытка
				Запись.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
			КонецПопытки;
			
			// Заполнение РС "Заказы4Logistic"
			Если (Успешно=1) И ((Регион = "reg_moscow")или (Регион = "")) Тогда
				РегЗапись = РегистрыСведений.Заказы4Logistic.СоздатьМенеджерЗаписи();
				РегЗапись.Заказ = ДокСчёт.Ссылка;
				РегЗапись.АдресДоставки =НасПункт+",ул."+Улица+",д."+Дом+?(Корпус="","",",кор."+Корпус)+?(Строение="","",",стр."+Строение)+",кв."+Квартира;
				РегЗапись.Время = ?(Время<>"",Время," с "+ВремяДоставкиСтарт+" по "+ВремяДоставкиСтоп);
				Если ЗначениеЗаполнено(НазваниеМагазинаДоставки) Тогда 
					РегЗапись.Метро= НазваниеМагазинаДоставки;
				Иначе
					РегЗапись.Метро = Метро;
				КонецЕсли; 
				РегЗапись.Телефон = Тел;
				РегЗапись.Вес = ИтогоВес;
				Если СокрЛП(Округ) = "СК" Тогда
					РегЗапись.Округ = Перечисления.Округ.СК;
				ИначеЕсли СокрЛП(Округ) = "ТТК" Тогда
					РегЗапись.Округ = Перечисления.Округ.ТТК;
				ИначеЕсли СокрЛП(Округ) = "САО" Тогда
					РегЗапись.Округ = Перечисления.Округ.САО;
				ИначеЕсли СокрЛП(Округ) = "СВАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.СВАО;	
				ИначеЕсли СокрЛП(Округ) = "ВАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ВАО;		
				ИначеЕсли СокрЛП(Округ) = "ЮВАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ЮВАО;		
				ИначеЕсли СокрЛП(Округ) = "ЮАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ЮАО;			
				ИначеЕсли СокрЛП(Округ) = "ЮЗАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ЮЗАО;				
				ИначеЕсли СокрЛП(Округ) = "ЗАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ЗАО;					
				ИначеЕсли СокрЛП(Округ) = "СЗАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.СЗАО;						
				ИначеЕсли СокрЛП(Округ) = "ТК" Тогда
					РегЗапись.Округ = Перечисления.Округ.ТК;
				ИначеЕсли СокрЛП(Округ) = "ЦАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ЦАО;
				КонецЕсли;
				РегЗапись.ФИО = ФИО;
				РегЗапись.Зона = Зона;
				РегЗапись.Дом = Дом;
				РегЗапись.Индекс = Индекс;
				РегЗапись.Квартира = Квартира;
				РегЗапись.Корпус = Корпус;
				Если ЗначениеЗаполнено(НазваниеМагазинаДоставки) Тогда
					РегЗапись.НаселённыйПункт = "Москва г.";
				Иначе				
					РегЗапись.НаселённыйПункт = НасПункт;
				КонецЕсли;

				РегЗапись.Подъезд = Подъезд;
				РегЗапись.Строение = Строение;
				РегЗапись.Улица = Улица;
				РегЗапись.email = Мыло;
				РегЗапись.Страна = Страна;
				Попытка
					РегЗапись.Записать();
				Исключение
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
					Успешно = 0;
				КонецПопытки;
			ИначеЕсли (Успешно=1) И (Регион = "reg_postal") Тогда
				РегЗапись = РегистрыСведений.ЗаявкаВТК.СоздатьМенеджерЗаписи();
				РегЗапись.Заказ = ДокСчёт.Ссылка;
				Если ЗначениеЗаполнено(НазваниеМагазинаДоставки) Тогда 
					РегЗапись.Метро= НазваниеМагазинаДоставки;
				Иначе
					РегЗапись.Метро = Метро;
				КонецЕсли;
				РегЗапись.Телефон = Тел;
				РегЗапись.ФИО = ФИО;
				РегЗапись.Дом = Дом;
				РегЗапись.Индекс = Индекс;
				РегЗапись.Квартира = Квартира;
				РегЗапись.Корпус = Корпус;
				Если ЗначениеЗаполнено(НазваниеМагазинаДоставки) Тогда
					РегЗапись.НаселённыйПункт = "Москва г.";
				Иначе				
					РегЗапись.НаселённыйПункт = НасПункт;
				КонецЕсли;

				РегЗапись.Подъезд = Подъезд;
				РегЗапись.Район = Регион_;
				РегЗапись.Строение = Строение;
				РегЗапись.Улица = Улица;
				РегЗапись.email = Мыло;
				Попытка
					РегЗапись.Записать();
				Исключение
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
					Успешно = 0;
				КонецПопытки;
			ИначеЕсли (Успешно=1) И (Сайт = "Трек") Тогда
				РегЗапись = РегистрыСведений.Заказы4Logistic.СоздатьМенеджерЗаписи();
				РегЗапись.Заказ = ДокСчёт.Ссылка;
				РегЗапись.АдресДоставки =НасПункт+",ул."+Улица+",д."+Дом+?(Корпус="","",",кор."+Корпус)+?(Строение="","",",стр."+Строение)+",кв."+Квартира;
				РегЗапись.Время = ?(Время<>"",Время," с "+ВремяДоставкиСтарт+" по "+ВремяДоставкиСтоп);
				Если ЗначениеЗаполнено(НазваниеМагазинаДоставки) Тогда 
				РегЗапись.Метро= НазваниеМагазинаДоставки;
				Иначе
					РегЗапись.Метро = Метро;
				КонецЕсли;
				РегЗапись.Телефон = Тел;
				РегЗапись.Вес = ИтогоВес;
				Если СокрЛП(Округ) = "СК" Тогда
					РегЗапись.Округ = Перечисления.Округ.СК;
				ИначеЕсли СокрЛП(Округ) = "ТТК" Тогда
					РегЗапись.Округ = Перечисления.Округ.ТТК;
				ИначеЕсли СокрЛП(Округ) = "САО" Тогда
					РегЗапись.Округ = Перечисления.Округ.САО;
				ИначеЕсли СокрЛП(Округ) = "СВАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.СВАО;	
				ИначеЕсли СокрЛП(Округ) = "ВАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ВАО;		
				ИначеЕсли СокрЛП(Округ) = "ЮВАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ЮВАО;		
				ИначеЕсли СокрЛП(Округ) = "ЮАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ЮАО;			
				ИначеЕсли СокрЛП(Округ) = "ЮЗАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ЮЗАО;				
				ИначеЕсли СокрЛП(Округ) = "ЗАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ЗАО;					
				ИначеЕсли СокрЛП(Округ) = "СЗАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.СЗАО;						
				ИначеЕсли СокрЛП(Округ) = "ТК" Тогда
					РегЗапись.Округ = Перечисления.Округ.ТК;
				ИначеЕсли СокрЛП(Округ) = "ЦАО" Тогда
					РегЗапись.Округ = Перечисления.Округ.ЦАО;
				КонецЕсли;
				РегЗапись.ФИО = ФИО;
				РегЗапись.Зона = Зона;
				РегЗапись.Дом = Дом;
				РегЗапись.Индекс = Индекс;
				РегЗапись.Квартира = Квартира;
				РегЗапись.Корпус = Корпус;
				Если ЗначениеЗаполнено(НазваниеМагазинаДоставки) Тогда
					РегЗапись.НаселённыйПункт = "Москва г.";
				Иначе				
					РегЗапись.НаселённыйПункт = НасПункт;
				КонецЕсли;

				РегЗапись.Подъезд = Подъезд;
				РегЗапись.Строение = Строение;
				РегЗапись.Улица = Улица;
				РегЗапись.email = Мыло;
				РегЗапись.Страна = Страна;
				Попытка
					РегЗапись.Записать();
				Исключение
					Успешно = 0;
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		
		УстановитьСтатусЗаказа(ДокСчёт.Ссылка, Перечисления.СтатусыЗаказов.ЗагруженССайта);
		
		
		
		
		
	КонецЕсли;
	
	ТекстXML.Закрыть();
	
Конецпроцедуры

Функция ПолучитьСоответствие_Site_ОткудаПришел()
	
	соответствие_Site_ОткудаПришел = Новый Соответствие;
	
	соответствие_Site_ОткудаПришел.Вставить("1", Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000006")); // с сайта www.protein-shop.ru
	соответствие_Site_ОткудаПришел.Вставить("2", Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000007")); // с сайта www.5lb.ru
	соответствие_Site_ОткудаПришел.Вставить("3", Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000008")); // с сайта www.megatropin.ru
	соответствие_Site_ОткудаПришел.Вставить("4", Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000009")); // с сайта m.5lb.ru
	соответствие_Site_ОткудаПришел.Вставить("5", Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000010")); // с сайта trek.msk.ru
	соответствие_Site_ОткудаПришел.Вставить("6", Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000011")); // из мобильного приложения
	соответствие_Site_ОткудаПришел.Вставить("8", Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000018")); // с сайта www.5lb.ru (Рекламное оборудование)
	
	Возврат соответствие_Site_ОткудаПришел;
	
КонецФункции	

Функция ПолучитьСоответствие_Site_Сайт()
	
	соответствие_Site_Сайт = Новый Соответствие;
	
	соответствие_Site_Сайт.Вставить("1", "000000047"); // Код контрагента Protein-Shop
	соответствие_Site_Сайт.Вставить("2", "000000059"); // Код контрагента 5LB
	соответствие_Site_Сайт.Вставить("3", "000000075"); // Код контрагента Megatropin
	соответствие_Site_Сайт.Вставить("4", "000000059"); // Код контрагента 5LB
	соответствие_Site_Сайт.Вставить("5", "Трек"); // Строка
	соответствие_Site_Сайт.Вставить("6", "000000059"); // Код контрагента 5LB
	соответствие_Site_Сайт.Вставить("8", "000000059"); // Код контрагента 5LB
	
	Возврат соответствие_Site_Сайт;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////


Процедура ПереместитьФайлFTP(Соединение, ТекФайл, ИмяВрФайла)	
	
	Попытка
		НашФТП = Новый FTPСоединение("192.168.12.73", 21, "tsd1", "123123", , , ,); //Иванов Иван зачем-то поменял пароль 20.07.2017, Юра
		
		НашФТП.Записать(ИмяВрФайла, "History/" + ТекФайл.Имя);
		Соединение.Удалить(ТекФайл.ПолноеИмя,);
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
КонецПроцедуры

Функция ПоискКлиента (Телефон, Мыло,ФИО, ЮзерАйДи)
	Если ЗначениеЗаполнено(ЮзерАйДи) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	К.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК К
		|ГДЕ
		|	К.ИНН = &АйДи";
		Запрос.УстановитьПараметр("АйДи",СокрЛП(ЮзерАйДи));
		
		Рез = Запрос.Выполнить();
		Если НЕ Рез.Пустой() Тогда
			Выб = Рез.Выбрать();
			Выб.Следующий();
			Клиент = Выб.Ссылка;
			Возврат Клиент;
		КонецЕсли;
	КонецЕсли;
	
	Телефон = СтрЗаменить(Строка(Телефон)," ","");
	Клиент=Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Р.Объект
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК Р
	|ГДЕ
	|	Р.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И (ВЫРАЗИТЬ(Р.Представление КАК СТРОКА(20))) = &Телефон";
	Запрос.УстановитьПараметр("Телефон",Телефон);
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выб = Рез.Выбрать();
		Выб.Следующий();
		Клиент = Выб.Объект;
		Возврат Клиент;
	КонецЕсли;
	
	//исчо раз..
	Телефон = СтрЗаменить(Строка(Телефон),"+","");
	Телефон = СтрЗаменить(Строка(Телефон),"(","");
	Телефон = СтрЗаменить(Строка(Телефон),")","");
	Телефон = СтрЗаменить(Строка(Телефон),"-","");
	Клиент=Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Р.Объект
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК Р
	|ГДЕ
	|	Р.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И (ВЫРАЗИТЬ(Р.Представление КАК СТРОКА(20))) = &Телефон";
	Запрос.УстановитьПараметр("Телефон",Телефон);
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выб = Рез.Выбрать();
		Выб.Следующий();
		Клиент = Выб.Объект;
		Возврат Клиент;
	КонецЕсли;
	
	//И исчо раз..
	Если Лев(Телефон,1)="7" Тогда
		Телефон_ = "8"+Сред(Телефон,2);
	ИначеЕсли Лев(Телефон,1)="8" Тогда
		Телефон_ = "7"+Сред(Телефон,2);
	КонецЕсли;
	
	Клиент=Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Р.Объект
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК Р
	|ГДЕ
	|	Р.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И (ВЫРАЗИТЬ(Р.Представление КАК СТРОКА(20))) = &Телефон";
	Запрос.УстановитьПараметр("Телефон",Телефон_);
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выб = Рез.Выбрать();
		Выб.Следующий();
		Клиент = Выб.Объект;
		Возврат Клиент;
	КонецЕсли;
	
	
	
	Если Найти(Мыло,"@5lb.ru")=0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Р.Объект
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК Р
		|ГДЕ
		|	Р.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И (ВЫРАЗИТЬ(Р.Представление КАК СТРОКА(100))) = &Мыло";
		Запрос.УстановитьПараметр("Мыло",Мыло);
		
		Рез = Запрос.Выполнить();
		Если НЕ Рез.Пустой() Тогда
			Выб = Рез.Выбрать();
			Выб.Следующий();
			Клиент = Выб.Объект;
			Возврат Клиент;
		КонецЕсли;
	КонецЕсли;
	
	НовКлиент = Справочники.Контрагенты.СоздатьЭлемент();
	НовКлиент.Родитель = Справочники.Контрагенты.НайтиПоНаименованию("Покупатели - ИнтернетМагазин",Истина);
	НовКлиент.Наименование = СокрЛП(ФИО);
	НовКлиент.НаименованиеПолное = СокрЛП(ФИО);
	НовКлиент.Покупатель=Истина;
	НовКлиент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	Если ЗначениеЗаполнено(ЮзерАйди) Тогда
		НовКлиент.ИНН = СокрЛП(ЮзерАйДи);
	КонецЕсли;
	Попытка
		НовКлиент.Записать();
		Клиент = НовКлиент.Ссылка;
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
		Возврат Клиент;
	КонецПопытки;
	
	НовДог = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НовДог.Владелец = НовКлиент.Ссылка;
	НовДог.Организация = Справочники.Организации.НайтиПоКоду("000000001");
	НовДог.Наименование = "Основной Договор";
	НовДог.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643");
	НовДог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	НовДог.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	Попытка
		НовДог.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Рег = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	Рег.Вид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	Рег.Объект = НовКлиент.Ссылка;
	Рег.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Рег.Представление  = Телефон;
	Попытка
		Рег.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Если Найти(Мыло,"@5lb.ru")=0 Тогда
		Рег = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		Рег.Вид=Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами;
		Рег.Объект = НовКлиент.Ссылка;
		Рег.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		Рег.Представление  = Мыло;
		Попытка
			Рег.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Клиент;
	
КонецФункции

Процедура ПроверитьНаличиеПочты (Клиент, Мыло)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Р.Объект,
	|	Р.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК Р
	|ГДЕ
	|	Р.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И Р.Объект = &Клиент";
	Запрос.УстановитьПараметр("Клиент",Клиент);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Рег = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		Рег.Вид=Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами;
		Рег.Объект = Клиент.Ссылка;
		Рег.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		Рег.Представление  = Мыло;
		Попытка
			Рег.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры

Функция _ПолучитьДокументИнвентаризации(_НомерСчета,ЗадачаКурьеру) Экспорт
	Косячок = 0;
	Если ЗадачаКурьеру = Неопределено Тогда
		Текст = "ВЫБРАТЬ Первые 1
		|	ЗаказПокупателя.Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Номер = &Номер";
		
		Запрос = Новый Запрос(Текст);
		Запрос.УстановитьПараметр("Номер", _НомерСчета);
		Рез = Запрос.Выполнить().Выгрузить();
		
		Если Рез.Количество()>0 Тогда
			//ДокИнв = Рез[0].Ссылка.ПолучитьОбъект();
			ДокИнв = "ТакиБыл";
		Иначе
			ДокИнв = Документы.ЗаказПокупателя.СоздатьДокумент();
			ДокИнв.УчитыватьНДС=Истина;
			ДокИнв.СуммаВключаетНДС=Истина;
			ПреобрНомер = Число(_НомерСчета)-1;
			ИщемНомер = Формат(ПреобрНомер,"ЧГ=0");
			Текст2 = "ВЫБРАТЬ Первые 1
			|	ЗаказПокупателя.Ссылка
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
			|ГДЕ
			|	ЗаказПокупателя.Номер = &Номер";
			
			Запрос2 = Новый Запрос(Текст2);
			Запрос2.УстановитьПараметр("Номер", ИщемНомер);
			Рез2 = Запрос2.Выполнить().Выгрузить();
			Если Рез2.Количество()=0 Тогда
				Косячок = 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗадачаКурьеру = "1"  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Р.Заказ
		|ИЗ
		|	РегистрСведений.Заказы4Logistic КАК Р
		|ГДЕ
		|	Р.Заказ = &Номер";
		Запрос.УстановитьПараметр("Номер","Задача Курьеру "+_НомерСчета);
		
		Рез = Запрос.Выполнить();
		Если НЕ Рез.Пустой() Тогда
			ДокИнв = "ТакиБыл";
		КонецЕсли;
	КонецЕсли;
	
	возврат ДокИнв;
КонецФункции

Функция ИщемПоступлениеПоВхНомеру (Номер) Экспорт
	Текст = "ВЫБРАТЬ Первые 1
	|	П.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК П
	|ГДЕ
	|	П.НомерВходящегоДокумента = &Номер";
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("Номер",СокрЛП(Номер));
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Резалт = 0;
	Иначе
		Резалт = 1;
	КонецЕсли;
	
	Возврат Резалт;
	
КонецФункции

Функция ВернутьТК (ид)
	Если ид = "1" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000001");
	ИначеЕсли ид = "2" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000003");
	ИначеЕсли ид = "3" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000007");
	ИначеЕсли ид = "4" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000009");
	ИначеЕсли ид = "5" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000008");
	ИначеЕсли ид = "6" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000011");
	ИначеЕсли ид = "7" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000010");
	ИначеЕсли ид = "8" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000032");
	ИначеЕсли ид = "9" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000006");
	ИначеЕсли ид = "10" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000024");	
	ИначеЕсли ид = "11" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000065");		
	ИначеЕсли ид = "12" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000019");		
	ИначеЕсли ид = "13" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000061");		
	ИначеЕсли ид = "14" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000046");		
	ИначеЕсли ид = "15" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000083");		
	ИначеЕсли ид = "16" Тогда
		Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000107");
		//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 28/02/2018//==============================================================================================
	ИначеЕсли ид = "17" Тогда
         Возврат Справочники.ТранспортныеКомпании.НайтиПоКоду("000000063");
		 //{-КОНЕЦ-Добавления} Автор: Тасмаджиев 28/02/2018//==============================================================================================
	КонецЕсли;
	
КонецФункции

//17.02.2017 Задача по транспортным компаниям
Процедура УстановитьРеквизитыТК(ДокСчёт)
	
	Если НЕ ЗначениеЗаполнено(ДокСчёт.ТранспортнаяКомп) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокСчёт.ТранспортнаяКомп.Код = "000000003" Тогда
		ДокСчёт.ВидДоставки = Перечисления.ВидДоставки.EMC;
		ДокСчёт.Статус = Справочники.Пользователи.НайтиПоНаименованию("*ЕМС",Истина);
		ДокСчёт.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("*ЕМС",Истина);
	ИначеЕсли (ДокСчёт.ТранспортнаяКомп.Код = "000000001") ИЛИ (ДокСчёт.ТранспортнаяКомп.Код = "000000002")  Тогда 
		ДокСчёт.ВидДоставки = Перечисления.ВидДоставки.ПочтаРоссии;
		ДокСчёт.Статус = Справочники.Пользователи.НайтиПоНаименованию("*ПОЧТА",Истина);
		ДокСчёт.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Почта России",Истина);
	Иначе
		ДокСчёт.ВидДоставки = Перечисления.ВидДоставки.ТК;
		ДокСчёт.Статус = Справочники.Пользователи.НайтиПоНаименованию("*ТК",Истина);
	КонецЕсли;
	
КонецПроцедуры	
//17.02.2017


Процедура Затраты(НомерТекущДок, Сайт, ИтогоСоСкидкой) экспорт
	
	Текст = "ВЫБРАТЬ Первые 1
	|	ПрочиеЗатраты.Ссылка
	|ИЗ
	|	Документ.ПрочиеЗатраты КАК ПрочиеЗатраты
	|ГДЕ
	|	ПрочиеЗатраты.Номер = &Номер";
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("Номер", НомерТекущДок);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество()>0 Тогда
		ДокЗатр = Рез[0].Ссылка.ПолучитьОбъект();
		ДокЗатр.Затраты.Очистить();
	Иначе
		ДокЗатр = Документы.ПрочиеЗатраты.СоздатьДокумент();
		ДокЗатр.Дата = ТекущаяДата();
	КонецЕсли;
	
	СпрЗатр = Справочники.МагазиныЗатратыНаДоставку;
	Если  Сайт = "000000059" Тогда   //5Lb
		ТекЗатраты = СпрЗатр.Выбрать(,Справочники.Склады.НайтиПоКоду("2"));
		Пока ТекЗатраты.Следующий() Цикл
			Если ТекЗатраты.МинСумма<>"" Тогда
				Если (Число(ИтогоСоСкидкой)>=Число(ТекЗатраты.МинСумма)) И (Число(ИтогоСоСкидкой)<=Число(ТекЗатраты.МаксСумма)) Тогда
					ДокЗатр.Организация = Справочники.Организации.НайтиПоКоду("000000001");
					ДокЗатр.Подразделение = Справочники.Подразделения.НайтиПоКоду("000000001");
					ДокЗатр.Номер = НомерТекущДок;
					НовСтр = ДокЗатр.Затраты.Добавить();
					НовСтр.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("000000013");
					НовСтр.Сумма = ТекЗатраты.Значение;
					НовСтр.Заказ = Документы.ЗаказПокупателя.НайтиПоНомеру(НомерТекущДок).Ссылка;
					ДокЗатр.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			Иначе 
				Если Число(ИтогоСоСкидкой) > Число(ТекЗатраты.МаксСумма) Тогда 
					ДокЗатр.Организация = Справочники.Организации.НайтиПоКоду("000000001");
					ДокЗатр.Подразделение = Справочники.Подразделения.НайтиПоКоду("000000001");
					ДокЗатр.Номер = НомерТекущДок;
					НовСтр = ДокЗатр.Затраты.Добавить();
					НовСтр.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("000000013");
					НовСтр.Сумма = ТекЗатраты.Значение;
					НовСтр.Заказ = Документы.ЗаказПокупателя.НайтиПоНомеру(НомерТекущДок).Ссылка;
					ДокЗатр.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Сайт = "000000075" Тогда   //Megatropin
		ТекЗатраты = СпрЗатр.Выбрать(,Справочники.Склады.НайтиПоКоду("3"));
		Пока ТекЗатраты.Следующий() Цикл
			Если ТекЗатраты.МинСумма<>"" Тогда
				Если (Число(ИтогоСоСкидкой) >=Число(ТекЗатраты.МинСумма)) И (Число(ИтогоСоСкидкой)<=Число(ТекЗатраты.МаксСумма)) Тогда
					ДокЗатр.Организация = Справочники.Организации.НайтиПоКоду("000000001");
					ДокЗатр.Подразделение = Справочники.Подразделения.НайтиПоКоду("000000001");
					ДокЗатр.Номер = НомерТекущДок;
					НовСтр = ДокЗатр.Затраты.Добавить();
					НовСтр.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("000000015");
					НовСтр.Сумма = ТекЗатраты.Значение;
					НовСтр.Заказ = Документы.ЗаказПокупателя.НайтиПоНомеру(НомерТекущДок).Ссылка;
					ДокЗатр.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			Иначе
				Если Число(ИтогоСоСкидкой) >Число(ТекЗатраты.МаксСумма)  Тогда 
					ДокЗатр.Организация = Справочники.Организации.НайтиПоКоду("000000001");
					ДокЗатр.Подразделение = Справочники.Подразделения.НайтиПоКоду("000000001");
					ДокЗатр.Номер = НомерТекущДок;
					НовСтр = ДокЗатр.Затраты.Добавить();
					НовСтр.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("000000015");
					НовСтр.Сумма = ТекЗатраты.Значение;
					НовСтр.Заказ = Документы.ЗаказПокупателя.НайтиПоНомеру(НомерТекущДок).Ссылка;
					ДокЗатр.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Сайт = "000000047" Тогда   //Protein
		ТекЗатраты = СпрЗатр.Выбрать(,Справочники.Склады.НайтиПоКоду("1"));
		Пока ТекЗатраты.Следующий() Цикл
			Если ТекЗатраты.МинСумма<>"" Тогда
				Если Число(ИтогоСоСкидкой)<Число(ТекЗатраты.МаксСумма) Тогда
					ДокЗатр.Организация = Справочники.Организации.НайтиПоКоду("000000001");
					ДокЗатр.Подразделение = Справочники.Подразделения.НайтиПоКоду("000000001");
					ДокЗатр.Номер = НомерТекущДок;
					НовСтр = ДокЗатр.Затраты.Добавить();
					НовСтр.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("000000014");
					НовСтр.Сумма = ТекЗатраты.Значение;
					НовСтр.Заказ = Документы.ЗаказПокупателя.НайтиПоНомеру(НомерТекущДок).Ссылка;
					ДокЗатр.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			Иначе
				Если Число(ИтогоСоСкидкой) >= Число(ТекЗатраты.МаксСумма) Тогда 
					ДокЗатр.Организация = Справочники.Организации.НайтиПоКоду("000000001");
					ДокЗатр.Подразделение = Справочники.Подразделения.НайтиПоКоду("000000001");
					ДокЗатр.Номер = НомерТекущДок;
					НовСтр = ДокЗатр.Затраты.Добавить();
					НовСтр.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("000000014");
					НовСтр.Сумма = ТекЗатраты.Значение;
					НовСтр.Заказ = Документы.ЗаказПокупателя.НайтиПоНомеру(НомерТекущДок).Ссылка;
					ДокЗатр.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры


///////////////////////////////////////////////////////
// ВЫГРУЗКА ОСТАТКОВ 

#Область Выгрузка_остатков

// Процедура выгрузки файлов с остатками на FTP
Процедура Остатки() Экспорт
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Склад", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	ТаблицаФайлов.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	
	Табл = Новый ТаблицаЗначений;
	Табл.Колонки.Добавить("Ном");
	Табл.Колонки.Добавить("Ост");
	Табл.Колонки.Добавить("Склад");
	Табл.Колонки.Добавить("Кор");	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура.Код КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) * ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК СвободныйОстатокБазовыхЕдиниц
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			НЕ Номенклатура В ИЕРАРХИИ (&НомТМЦ)
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&НомРеклама)) КАК ТоварыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	|				,
	|				НЕ Номенклатура В ИЕРАРХИИ (&НомТМЦ)
	|					ИЛИ Номенклатура В ИЕРАРХИИ (&НомРеклама)) КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|			И ТоварыНаСкладахОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
	|ГДЕ
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) * ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент > 0");
	
	ТекДата = ТекущаяДата(); 
	Запрос.УстановитьПараметр("ДатаКон",ТекДата);
	Запрос.УстановитьПараметр("НомТМЦ", Справочники.Номенклатура.НайтиПоКоду("06052014"));
	Запрос.УстановитьПараметр("НомРеклама", Справочники.Номенклатура.НайтиПоКоду("244"));
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	Пока выборка.Следующий() = 1 цикл
		СтрТабл = Табл.Добавить();
		СтрТабл.Ном = Выборка.Номенклатура;
		СтрТабл.Ост = Выборка.СвободныйОстатокБазовыхЕдиниц;
		СтрТабл.Склад = Выборка.Склад;
		Кор = Справочники.ЕдиницыИзмерения.Выбрать(,Справочники.Номенклатура.НайтиПоКоду(Выборка.Номенклатура));
		Пока Кор.Следующий() Цикл
			Если Кор.ПометкаУдаления Тогда
				продолжить;
			КонецЕсли;
			Если Кор.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("120") Тогда
				СтрТабл.Кор = Кор.Коэффициент;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Табл.Свернуть("Ном,Склад,Кор","Ост");
	Табл.Сортировать("Склад Возр");
	
	Запросc = Новый Запрос;
	Запросc.Текст="ВЫБРАТЬ
	|	П.Номенклатура.Код КАК КодНом,
	|	П.Ссылка.ДатаС КАК СДаты,
	|	0 КАК Флаг,
	|	П.Ссылка.ДатаПо КАК ПОДату
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК П
	|ГДЕ
	|	П.Ссылка.Проведен = ЛОЖЬ
	|	И П.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	П.Ссылка.Дата УБЫВ";
	
	Рез = Запросc.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Таб = Рез.Выгрузить();
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Скл = "";
	Для каждого стр из Табл Цикл
		Если Не ЗначениеЗаполнено(стр.Склад) Тогда 
			Продолжить; 
		КонецЕсли;
		
		Если стр.Ост<0 Тогда Продолжить КонецЕсли;
		Если Скл = "" Тогда
			Если СокрЛП(стр.Склад) = "Основной" Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла();
				ЗаписьXML.ОткрытьФайл(ИмяФайла);
				НоваяСтрока = ТаблицаФайлов.Добавить();
				НоваяСтрока.Склад = стр.Склад;
				НоваяСтрока.ИмяФайла = ИмяФайла;
			Иначе
				ИмяФайла = ПолучитьИмяВременногоФайла();
				ЗаписьXML.ОткрытьФайл(ИмяФайла);
				НоваяСтрока = ТаблицаФайлов.Добавить();
				НоваяСтрока.Склад = стр.Склад;
				НоваяСтрока.ИмяФайла = ИмяФайла;
			КонецЕсли;
			ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
			ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/stock.xsd"">"+Символы.ПС);
			ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<DatеTime>"+ТекДата);
			ЗаписьXML.ЗаписатьБезОбработки("</DatеTime>"+Символы.ПС);
			Если СокрЛП(стр.Склад) = "Основной" Тогда
				стрОжидПарт = Таб.Найти(стр.Ном,"КодНом");
				Если (стрОжидПарт<>Неопределено) И (стр.Ост<=0) Тогда
					ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стр.Ном)+""" stock="""+сокрлп(стр.Ост)+""" in_box="""+сокрлп(стр.Кор)+""" wait_from="""+Формат(стрОжидПарт.СДаты,"ДЛФ=Д")+""" wait_to="""+Формат(стрОжидПарт.ПОДату,"ДЛФ=Д")+""">");
				Иначе
					ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стр.Ном)+""" stock="""+сокрлп(стр.Ост)+""" in_box="""+сокрлп(стр.Кор)+""">");
				КонецЕсли;
				Если (стрОжидПарт<>Неопределено) Тогда
					Отбор = Новый Структура();
					Отбор.Вставить("КодНом",стр.Ном);
					НеОдин = Таб.НайтиСтроки(Отбор);
					Если НеОдин.Количество()>1 Тогда
						Для Каждого фл из НеОдин Цикл
							фл.Флаг = 1;
						КонецЦикла;
					Иначе
						стрОжидПарт.Флаг = 1;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стр.Ном)+""" stock="""+сокрлп(стр.Ост)+""" in_box="""+сокрлп(стр.Кор)+""">");
			КонецЕсли;
			ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
			Скл = стр.Склад;
			продолжить;
		КонецЕсли;
		Если Стр.Склад = Скл Тогда
			Если СокрЛП(стр.Склад) = "Основной" Тогда
				стрОжидПарт = Таб.Найти(стр.Ном,"КодНом");
				Если (стрОжидПарт<>Неопределено) И (Стр.Ост<=0) Тогда
					ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стр.Ном)+""" stock="""+сокрлп(стр.Ост)+""" in_box="""+сокрлп(стр.Кор)+""" wait_from="""+Формат(стрОжидПарт.СДаты,"ДЛФ=Д")+""" wait_to="""+Формат(стрОжидПарт.ПОДату,"ДЛФ=Д")+""">");
				Иначе
					ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стр.Ном)+""" stock="""+сокрлп(стр.Ост)+""" in_box="""+сокрлп(стр.Кор)+""">");
				КонецЕсли;
				Если (стрОжидПарт<>Неопределено) Тогда
					Отбор = Новый Структура();
					Отбор.Вставить("КодНом",стр.Ном);
					НеОдин = Таб.НайтиСтроки(Отбор);
					Если НеОдин.Количество()>1 Тогда
						Для Каждого фл из НеОдин Цикл
							фл.Флаг = 1;
						КонецЦикла;
					Иначе
						стрОжидПарт.Флаг = 1;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стр.Ном)+""" stock="""+сокрлп(стр.Ост)+""" in_box="""+сокрлп(стр.Кор)+""">");
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
		Иначе
			Если (СокрЛП(Скл) = "Основной") И (СокрЛП(стр.Склад)<>"Основной") Тогда
				Если Таб.Найти(0,"Флаг")<>Неопределено Тогда
					Для Каждого ст из Таб Цикл
						Если ст.Флаг = 0 Тогда
							ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(ст.КодНом)+""" stock=""0"" wait_from="""+Формат(ст.СДаты,"ДЛФ=Д")+""" wait_to="""+Формат(ст.ПОДату,"ДЛФ=Д")+""">");
							ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
						КонецЕсли;
					КонецЦикла;
					ЗаписьXML.ЗаписатьБезОбработки("</items>");
					ЗаписьXML.Закрыть();
				Иначе
					ЗаписьXML.ЗаписатьБезОбработки("</items>");
					ЗаписьXML.Закрыть();
				КонецЕсли;
			Иначе	
				ЗаписьXML.ЗаписатьБезОбработки("</items>");
				ЗаписьXML.Закрыть();
			КонецЕсли;
			Если СокрЛП(стр.Склад) = "Основной" Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла();
				ЗаписьXML.ОткрытьФайл(ИмяФайла);
				НоваяСтрока = ТаблицаФайлов.Добавить();
				НоваяСтрока.Склад = стр.Склад;
				НоваяСтрока.ИмяФайла = ИмяФайла;
			Иначе
				ИмяФайла = ПолучитьИмяВременногоФайла();
				ЗаписьXML.ОткрытьФайл(ИмяФайла);
				НоваяСтрока = ТаблицаФайлов.Добавить();
				НоваяСтрока.Склад = стр.Склад;
				НоваяСтрока.ИмяФайла = ИмяФайла;
			КонецЕсли;
			ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
			ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/stock.xsd"">"+Символы.ПС);
			ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<DatеTime>"+ТекДата);
			ЗаписьXML.ЗаписатьБезОбработки("</DatеTime>"+Символы.ПС);
			Если СокрЛП(стр.Склад) = "Основной" Тогда
				стрОжидПарт = Таб.Найти(стр.Ном,"КодНом");
				Если (стрОжидПарт<>Неопределено) И (стр.Ост<=0) Тогда
					ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стр.Ном)+""" stock="""+сокрлп(стр.Ост)+""" wait_from="""+Формат(стрОжидПарт.СДаты,"ДЛФ=Д")+""" wait_to="""+Формат(стрОжидПарт.ПОДату,"ДЛФ=Д")+""">");
				Иначе
					ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стр.Ном)+""" stock="""+сокрлп(стр.Ост)+""">");
				КонецЕсли;
				Если (стрОжидПарт<>Неопределено) Тогда
					Отбор = Новый Структура();
					Отбор.Вставить("КодНом",стр.Ном);
					НеОдин = Таб.НайтиСтроки(Отбор);
					Если НеОдин.Количество()>1 Тогда
						Для Каждого фл из НеОдин Цикл
							фл.Флаг = 1;
						КонецЦикла;
					Иначе
						стрОжидПарт.Флаг = 1;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стр.Ном)+""" stock="""+сокрлп(стр.Ост)+""" in_box="""+сокрлп(стр.Кор)+""">");
			КонецЕсли;
			ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
			
		КонецЕсли;
		Скл = стр.Склад;		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьБезОбработки("</items>");
	ЗаписьXML.Закрыть();
	
	// Запись документов на ftp	
	//++ Кузнецов С.А. - Рефакторинг кода: Сначала подключение, потом в одном цикле запись на 2-а FTP - 12.04.2016
	Попытка
		Соединение1 = ПолучитьСоединениеFTP1();
	Исключение
		ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		Соединение2 = ПолучитьСоединениеFTP2();
	Исключение
		ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Для Каждого ТекФайл Из ТаблицаФайлов Цикл
		
		//++ Кузнецов С.А. - Необходимо две "я", т.к. при переносе на ftp удаляется буква "Я" после согласной - 12.04.2016		
		Попытка
			Если ТекФайл.Склад = "Отрада на Пятнице" Тогда  // Склад = Отрада на Пятнице
				Соединение1.Записать(ТекФайл.ИмяФайла, СтрЗаменить("Отрада на Пяятнице", " ", "") + ".xml");
			Иначе	
				Соединение1.Записать(ТекФайл.ИмяФайла, СтрЗаменить(ТекФайл.Склад, " ", "") + ".xml");
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
		КонецПопытки;		
		//-- Кузнецов С.А. - 12.04.2016
		
		//++ Бажибин М.В. - 
		// 
		//// Для инет магазина дублируем остатки в файл stock
		Если ТекФайл.Склад = "Основной" Тогда
			Попытка
				Соединение1.Записать(ТекФайл.ИмяФайла, "stock" + ".xml");
			Исключение
				ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
			КонецПопытки;		
		КонецЕсли;
		
		//++ Кузнецов С.А. - Необходимо две "я", т.к. при переносе на ftp удаляется буква "Я" после согласной - 12.04.2016		
		Попытка
			Если ТекФайл.Склад = "Отрада на Пятнице" Тогда  // Склад = Отрада на Пятнице
				Соединение2.Записать(ТекФайл.ИмяФайла, СтрЗаменить("Отрада на Пяятнице", " ", "") + ".xml");
			Иначе	
				Соединение2.Записать(ТекФайл.ИмяФайла, СтрЗаменить(ТекФайл.Склад, " ", "") + ".xml");
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
		КонецПопытки;		
		//-- Кузнецов С.А. - 12.04.2016
		
		//++ Кузнецов С.А. - Поменял на "Соединение2" - 12.04.2016
		//++ Бажибин М.В. - 
		// 
		//// Для инет магазина дублируем остатки в файл stock
		Если ТекФайл.Склад = "Основной" Тогда
			Попытка
				//Соединение1.Записать(ТекФайл.ИмяФайла, "stock" + ".xml");
				Соединение2.Записать(ТекФайл.ИмяФайла, "stock" + ".xml");
			Исключение
				ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
			КонецПопытки;		
		КонецЕсли;		
		//-- Кузнецов С.А. - 12.04.2016			
		
	КонецЦикла;		
	//-- Кузнецов С.А. - 12.04.2016
	
КонецПроцедуры

// Процедура выгрузки файлов с остатками на FTP - NEXT LEVEL
Процедура Остатки_SK() Экспорт
	
	// Таблица с именами файлов для каждого склада
	таблицаФайлов = Новый ТаблицаЗначений;
	таблицаФайлов.Колонки.Добавить("Склад", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	таблицаФайлов.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	ТекДата = ТекущаяДата(); 
	
	// Запрос получения данных по остаткам  
	
	//++ Кузнецов С.А. - Выгрузка для магазинов остатков в единицах хранения(штуки) - 05.07.2016											
	запросДанныхПоОстаткам = Новый Запрос("ВЫБРАТЬ
	|	МАКСИМУМ(ЕдиницыИзмерения.Коэффициент) КАК Коэффициент,
	|	ЕдиницыИзмерения.Владелец КАК Владелец_Номенклатура,
	|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	|ПОМЕСТИТЬ ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	НЕ ЕдиницыИзмерения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕдиницыИзмерения.Владелец,
	|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕдиницыИзмерения.Коэффициент) КАК Коэффициент,
	|	ЕдиницыИзмерения.Владелец КАК Владелец_Номенклатура
	|ПОМЕСТИТЬ ВР_ЕдиницыИзмерения_Коробка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	НЕ ЕдиницыИзмерения.ПометкаУдаления
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору_Коробка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕдиницыИзмерения.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	//25012017 Выгружаем срок годности
	|	ТоварыНаСкладахОстатки.Номенклатура.емеСрокГодностиДляДополнительных КАК СрокГодности,
	|	ТоварыНаСкладахОстатки.Склад,
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0)) КАК СвободныйОстаток,
	|	ТоварыНаСкладахОстатки.Номенклатура.Код,
	|	ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Коэффициент КАК Коэффициент_БЕИ,
	|	ВР_ЕдиницыИзмерения_Коробка.Коэффициент КАК Коэффициент_Коробка,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстатокТоварыНаСкладах,
	|	СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстатокТоварыВРезервеНаСкладах
	|ПОМЕСТИТЬ ВР_Остатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			НЕ Номенклатура В ИЕРАРХИИ (&НомТМЦ)
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&НомРеклама)) КАК ТоварыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	|				,
	|				НЕ Номенклатура В ИЕРАРХИИ (&НомТМЦ)
	|					ИЛИ Номенклатура В ИЕРАРХИИ (&НомРеклама)) КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|			И ТоварыНаСкладахОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения КАК ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Владелец_Номенклатура
	|			И ТоварыНаСкладахОстатки.Номенклатура.БазоваяЕдиницаИзмерения = ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.ЕдиницаПоКлассификатору
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВР_ЕдиницыИзмерения_Коробка КАК ВР_ЕдиницыИзмерения_Коробка
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ВР_ЕдиницыИзмерения_Коробка.Владелец_Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура.Код,
	|	ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Коэффициент,
	|	ВР_ЕдиницыИзмерения_Коробка.Коэффициент
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0)) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Ссылка.Дата) КАК Дата,
	|	ПоступлениеТоваровУслугТовары.Номенклатура
	|ПОМЕСТИТЬ ВР_ПоследняяДатаПланируемогоПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	НЕ ПоступлениеТоваровУслугТовары.Ссылка.Проведен
	|	И НЕ ПоступлениеТоваровУслугТовары.Ссылка.ПометкаУдаления
	|	И (ПоступлениеТоваровУслугТовары.Ссылка.ДатаС <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ПоступлениеТоваровУслугТовары.Ссылка.ДатаПо <> ДАТАВРЕМЯ(1, 1, 1))
	|	И ПоступлениеТоваровУслугТовары.Ссылка.СкладОрдер = &Склад_Основной
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК Дата,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	//25012017 Выгружаем срок годности
	|	ПоступлениеТоваровУслугТовары.Номенклатура.емеСрокГодностиДляДополнительных КАК СрокГодности,
	|	МИНИМУМ(ПоступлениеТоваровУслугТовары.Ссылка.ДатаС) КАК ДатаС,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Ссылка.ДатаПо) КАК ДатаПо,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Код,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СкладОрдер,
	|	ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Коэффициент КАК Коэффициент_БЕИ,
	|	ВР_ЕдиницыИзмерения_Коробка.Коэффициент КАК Коэффициент_Коробка
	|ПОМЕСТИТЬ ВР_ДанныеОжидаемогоПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВР_ПоследняяДатаПланируемогоПоступления КАК ВР_ПоследняяДатаПланируемогоПоступления
	|		ПО ПоступлениеТоваровУслугТовары.Ссылка.Дата = ВР_ПоследняяДатаПланируемогоПоступления.Дата
	|			И ПоступлениеТоваровУслугТовары.Номенклатура = ВР_ПоследняяДатаПланируемогоПоступления.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения КАК ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Владелец_Номенклатура
	|			И ПоступлениеТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения = ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.ЕдиницаПоКлассификатору
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВР_ЕдиницыИзмерения_Коробка КАК ВР_ЕдиницыИзмерения_Коробка
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = ВР_ЕдиницыИзмерения_Коробка.Владелец_Номенклатура
	|ГДЕ
	|	НЕ ПоступлениеТоваровУслугТовары.Ссылка.Проведен
	|	И НЕ ПоступлениеТоваровУслугТовары.Ссылка.ПометкаУдаления
	|	И (ПоступлениеТоваровУслугТовары.Ссылка.ДатаС <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ПоступлениеТоваровУслугТовары.Ссылка.ДатаПо <> ДАТАВРЕМЯ(1, 1, 1))
	|	И ПоступлениеТоваровУслугТовары.Ссылка.СкладОрдер = &Склад_Основной
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Код,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СкладОрдер,
	|	ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Коэффициент,
	|	ВР_ЕдиницыИзмерения_Коробка.Коэффициент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВР_ДанныеОжидаемогоПоступления.ДатаС,
	|	ВР_ДанныеОжидаемогоПоступления.ДатаПо,
	|	ВР_ДанныеОжидаемогоПоступления.Дата,
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.Номенклатура, ВР_Остатки.Номенклатура) КАК Ном,
	//25012017 Выгружаем срок годности
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.СрокГодности, ВР_Остатки.СрокГодности) КАК СрокГодности,
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.НоменклатураКод, ВР_Остатки.НоменклатураКод) КАК НомКод,
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.СкладОрдер, ВР_Остатки.Склад) КАК Склад, 
	//31082017 Наименование для сайта. Рустам.
	| Свойства.Значение КАК НаименованиеСайт,
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.Коэффициент_БЕИ, ВР_Остатки.Коэффициент_БЕИ) КАК Коэффициент_БЕИ,
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.Коэффициент_Коробка, ВР_Остатки.Коэффициент_Коробка) КАК Коэффициент_Коробка_ДляОПТа,
	|	ЕСТЬNULL(ВР_Остатки.КоличествоОстатокТоварыНаСкладах, 0) КАК КоличествоОстатокТоварыНаСкладах,
	|	ЕСТЬNULL(ВР_Остатки.КоличествоОстатокТоварыВРезервеНаСкладах, 0) КАК КоличествоОстатокТоварыВРезервеНаСкладах,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.СкладОрдер, ВР_Остатки.Склад) В ИЕРАРХИИ (&ГруппаСкладовМагазины)
	|			ТОГДА ЕСТЬNULL(ВР_Остатки.СвободныйОстаток, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВР_Остатки.СвободныйОстаток, 0) * ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.Номенклатура, ВР_Остатки.Номенклатура) КАК Справочник.Номенклатура).ЕдиницаХраненияОстатков.Коэффициент, 1) / ЕСТЬNULL(ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.Коэффициент_БЕИ, ВР_Остатки.Коэффициент_БЕИ), 1)
	|	КОНЕЦ КАК СвободныйОстаток
	|ИЗ
	|	ВР_Остатки КАК ВР_Остатки
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВР_ДанныеОжидаемогоПоступления КАК ВР_ДанныеОжидаемогоПоступления
	|		ПО ВР_Остатки.Номенклатура = ВР_ДанныеОжидаемогоПоступления.Номенклатура
	|			И ВР_Остатки.Склад = ВР_ДанныеОжидаемогоПоступления.СкладОрдер
	//31082017 Наименование для сайта. Рустам.
	|     ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Свойства
	|     ПО ВР_Остатки.Склад = Свойства.Объект
	|     И Свойства.Свойство = &НаименованиеДляСайта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	Ном
	|ИТОГИ ПО
	|	Склад
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	запросДанныхПоОстаткам.УстановитьПараметр("ГруппаСкладовМагазины", Справочники.Склады.НайтиПоКоду("000000008")); // Группа складов "Магазины" 
	запросДанныхПоОстаткам.УстановитьПараметр("ЕдиницаПоКлассификатору_Коробка", Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("120")); // Кор
	запросДанныхПоОстаткам.УстановитьПараметр("Склад_Основной", Справочники.Склады.НайтиПоКоду("000000005")); // Основной
	запросДанныхПоОстаткам.УстановитьПараметр("НомТМЦ", Справочники.Номенклатура.НайтиПоКоду("06052014"));
	запросДанныхПоОстаткам.УстановитьПараметр("НомРеклама", Справочники.Номенклатура.НайтиПоКоду("244"));
	//31082017 Наименование для сайта. Рустам.
	запросДанныхПоОстаткам.УстановитьПараметр("НаименованиеДляСайта",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("НаименованиеДляСайта",Истина));
	
	
	рез = запросДанныхПоОстаткам.Выполнить();
	тзДанныеПоОстаткам = Рез.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
	//-- Кузнецов С.А. - 05.07.2016										
	
	Для каждого стрДанОст_Склад из тзДанныеПоОстаткам.Строки Цикл
		
		// Генерируем ЗаписьXML для каждого склада склада
		ЗаписьXML = Новый ЗаписьXML;
		имяФайла = ПолучитьИмяВременногоФайла();
		ЗаписьXML.ОткрытьФайл(имяФайла);
		ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>" + Символы.ПС);
		ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/stock.xsd"">" + Символы.ПС);
		ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб + "<DatеTime>" + ТекДата);
		ЗаписьXML.ЗаписатьБезОбработки("</DatеTime>"+Символы.ПС);
		
		//31082017 Наименование для сайта. Рустам.
		Попытка
			НаименСайт = стрДанОст_Склад.Строки[0].НаименованиеСайт;
		Исключение
			НаименСайт = Неопределено;
		КонецПопытки;
		
		// Записываем в таблицу файлов
		новаяСтрокаТаблицыФайлов = таблицаФайлов.Добавить();
		новаяСтрокаТаблицыФайлов.Склад = ?(НЕ ЗначениеЗаполнено(НаименСайт),стрДанОст_Склад.Склад,НаименСайт); //31082017 Наименование для сайта. Рустам.
		новаяСтрокаТаблицыФайлов.ИмяФайла = имяФайла;
		
		строкиОстатковПоСкладу = стрДанОст_Склад.Строки;
		
		Для Каждого стрОстатковНоменклатурыНаСкладе Из строкиОстатковПоСкладу Цикл			
			Если Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток) < 1 И Не ЗначениеЗаполнено(стрОстатковНоменклатурыНаСкладе.Дата) Тогда
				// Переходим к следующему элементу если остаток меньше 1 и нет ожидаемой поставки
				Продолжить;	
				//25012017 Выгружаем срок годности	
			ИначеЕсли Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток) >= 1 Тогда
				//Задача (убрать атрибут "exp_date") от Миронова Виктора, согласовано с Ивановым Иваном. Запрос не менял, только тут. 05.04.2017, Юра
				//ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стрОстатковНоменклатурыНаСкладе.НомКод)+""" stock="""+сокрлп(Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток))+""" in_box="""+сокрлп(стрОстатковНоменклатурыНаСкладе.Коэффициент_Коробка_ДляОПТа)+""" exp_date="""+Формат(стрОстатковНоменклатурыНаСкладе.СрокГодности,"ДЛФ=Д")+""">");
				ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стрОстатковНоменклатурыНаСкладе.НомКод)+""" stock="""+сокрлп(Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток))+""" in_box="""+сокрлп(стрОстатковНоменклатурыНаСкладе.Коэффициент_Коробка_ДляОПТа)+""">");
				ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
			ИначеЕсли Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток) < 1 И ЗначениеЗаполнено(стрОстатковНоменклатурыНаСкладе.Дата) Тогда
				//Задача (убрать атрибут "exp_date") от Миронова Виктора, согласовано с Ивановым Иваном. Запрос не менял, только тут. 05.04.2017, Юра
				//ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стрОстатковНоменклатурыНаСкладе.НомКод)+""" stock="""+сокрлп(Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток))+""" in_box="""+сокрлп(стрОстатковНоменклатурыНаСкладе.Коэффициент_Коробка_ДляОПТа)+""" wait_from="""+Формат(стрОстатковНоменклатурыНаСкладе.ДатаС,"ДЛФ=Д")+""" wait_to="""+Формат(стрОстатковНоменклатурыНаСкладе.ДатаПо,"ДЛФ=Д")+""" exp_date="""+Формат(стрОстатковНоменклатурыНаСкладе.СрокГодности,"ДЛФ=Д")+""">");
				ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стрОстатковНоменклатурыНаСкладе.НомКод)+""" stock="""+сокрлп(Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток))+""" in_box="""+сокрлп(стрОстатковНоменклатурыНаСкладе.Коэффициент_Коробка_ДляОПТа)+""" wait_from="""+Формат(стрОстатковНоменклатурыНаСкладе.ДатаС,"ДЛФ=Д")+""" wait_to="""+Формат(стрОстатковНоменклатурыНаСкладе.ДатаПо,"ДЛФ=Д")+""">");
				ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
			КонецЕсли;			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьБезОбработки("</items>");		
		ЗаписьXML.Закрыть();
		
	КонецЦикла;
	
	//Запись документов на ftp	
	//++ Кузнецов С.А. - Рефакторинг кода: Сначала подключение, потом в одном цикле запись на 2-а FTP - 12.04.2016
	Попытка
		Соединение1 = ПолучитьСоединениеFTP1();
	Исключение
		ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		Соединение2 = ПолучитьСоединениеFTP2();
	Исключение
		ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Для Каждого ТекФайл Из ТаблицаФайлов Цикл
		
		//++ Кузнецов С.А. - Необходимо две "я", т.к. при переносе на ftp удаляется буква "Я" после согласной - 12.04.2016		
		Попытка
			Если ТекФайл.Склад = "Отрада на Пятнице" Тогда  // Склад = Отрада на Пятнице
				Соединение1.Записать(ТекФайл.ИмяФайла, СтрЗаменить("Отрада на Пяятнице", " ", "") + ".xml");
			Иначе	
				Соединение1.Записать(ТекФайл.ИмяФайла, СтрЗаменить(ТекФайл.Склад, " ", "") + ".xml");
			КонецЕсли;
			
			
		Исключение
			ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
		КонецПопытки;		
		//-- Кузнецов С.А. - 12.04.2016
		
		//++ Бажибин М.В. - 
		// 
		//// Для инет магазина дублируем остатки в файл stock
		Если ТекФайл.Склад = "Основной" Тогда
			Попытка
				Соединение1.Записать(ТекФайл.ИмяФайла, "stock" + ".xml");
				
				//// 19.10.16 Вялов - отладка и логирование
				//РезЛогФайл = ОбщегоНазначения5LB.ОтладкаЛогированиеСохранитьФайл(ТекФайл.ИмяФайла, "stock");
				//РезЛог = ОбщегоНазначения5LB.ОтладкаЛогированиеПроверитьИЗаписатьДанныеФайлаFTP(Соединение1, "stock.xml", "stock.log");
				
			Исключение
				ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
			КонецПопытки;		
		КонецЕсли;
		
		//04.07.2017 Для сайта нужно переименовывать файлы
		Если ТекФайл.Склад = "ТЦ Таганка" Тогда
			Попытка
				Соединение1.Записать(ТекФайл.ИмяФайла, "Таганская-ТЦТаганка" + ".xml");
				
			Исключение
				ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
			КонецПопытки;		
		КонецЕсли;
		
		Если ТекФайл.Склад = "ТЦ Вегас Каширка" Тогда
			Попытка
				Соединение1.Записать(ТекФайл.ИмяФайла, "Домодедовская-ТЦВегас" + ".xml");
				
			Исключение
				ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
			КонецПопытки;		
		КонецЕсли;
		
		
		//++ Кузнецов С.А. - Необходимо две "я", т.к. при переносе на ftp удаляется буква "Я" после согласной - 12.04.2016		
		Попытка
			Если ТекФайл.Склад = "Отрада на Пятнице" Тогда  // Склад = Отрада на Пятнице
				Соединение2.Записать(ТекФайл.ИмяФайла, СтрЗаменить("Отрада на Пяятнице", " ", "") + ".xml");
			Иначе	
				Соединение2.Записать(ТекФайл.ИмяФайла, СтрЗаменить(ТекФайл.Склад, " ", "") + ".xml");
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
		КонецПопытки;		
		//-- Кузнецов С.А. - 12.04.2016
		
		//++ Кузнецов С.А. - Поменял на "Соединение2" - 12.04.2016
		//++ Бажибин М.В. - 
		// 
		//// Для инет магазина дублируем остатки в файл stock
		Если ТекФайл.Склад = "Основной" Тогда
			Попытка
				//Соединение1.Записать(ТекФайл.ИмяФайла, "stock" + ".xml");
				Соединение2.Записать(ТекФайл.ИмяФайла, "stock" + ".xml");
			Исключение
				ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
			КонецПопытки;		
		КонецЕсли;		
		//-- Кузнецов С.А. - 12.04.2016		
		
		//04.07.2017 Для сайта нужно переименовывать файлы
		Если ТекФайл.Склад = "ТЦ Таганка" Тогда
			Попытка
				Соединение2.Записать(ТекФайл.ИмяФайла, "Таганская-ТЦТаганка" + ".xml");
				
			Исключение
				ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
			КонецПопытки;		
		КонецЕсли;
		
		Если ТекФайл.Склад = "ТЦ Вегас Каширка" Тогда
			Попытка
				Соединение2.Записать(ТекФайл.ИмяФайла, "Домодедовская-ТЦВегас" + ".xml");
				
			Исключение
				ЗаписьЖурналаРегистрации("Обмен XML с сайтом (Остатки)", , , ,ОписаниеОшибки(),);
			КонецПопытки;		
		КонецЕсли;
		
		
	КонецЦикла;		
	//-- Кузнецов С.А. - 12.04.2016
	
	//11122017 Отдельный файл для оптовиков 
	ОстаткиДляОптовиков (Соединение1,Соединение2);
	
КонецПроцедуры

//11122017 Отдельный файл для оптовиков 
Процедура ОстаткиДляОптовиков (Соединение1,Соединение2) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ЕдиницыИзмерения.Коэффициент) КАК Коэффициент,
	|	ЕдиницыИзмерения.Владелец КАК Владелец_Номенклатура,
	|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	|ПОМЕСТИТЬ ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	НЕ ЕдиницыИзмерения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕдиницыИзмерения.Владелец,
	|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕдиницыИзмерения.Коэффициент) КАК Коэффициент,
	|	ЕдиницыИзмерения.Владелец КАК Владелец_Номенклатура
	|ПОМЕСТИТЬ ВР_ЕдиницыИзмерения_Коробка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	НЕ ЕдиницыИзмерения.ПометкаУдаления
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору_Коробка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕдиницыИзмерения.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Номенклатура.емеСрокГодностиДляДополнительных КАК СрокГодности,
	|	ТоварыНаСкладахОстатки.Склад,
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(МинОстатки.Количество, 0)) КАК СвободныйОстаток,
	|	ТоварыНаСкладахОстатки.Номенклатура.Код,
	|	ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Коэффициент КАК Коэффициент_БЕИ,
	|	ВР_ЕдиницыИзмерения_Коробка.Коэффициент КАК Коэффициент_Коробка,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстатокТоварыНаСкладах,
	|	СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстатокТоварыВРезервеНаСкладах
	|ПОМЕСТИТЬ ВР_Остатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Склад = &Склад_Основной
	|					И НЕ Номенклатура В ИЕРАРХИИ (&НомТМЦ)
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&НомРеклама)) КАК ТоварыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	|				,
	|				Склад = &Склад_Основной
	|						И НЕ Номенклатура В ИЕРАРХИИ (&НомТМЦ)
	|					ИЛИ Номенклатура В ИЕРАРХИИ (&НомРеклама)) КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеОстаткиТоваров.СрезПоследних(
	|				,
	|				Склад = &Склад_Основной
	|					И Сценарий = &ИМ) КАК МинОстатки
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = МинОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения КАК ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Владелец_Номенклатура
	|			И ТоварыНаСкладахОстатки.Номенклатура.БазоваяЕдиницаИзмерения = ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.ЕдиницаПоКлассификатору
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВР_ЕдиницыИзмерения_Коробка КАК ВР_ЕдиницыИзмерения_Коробка
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ВР_ЕдиницыИзмерения_Коробка.Владелец_Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура.Код,
	|	ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Коэффициент,
	|	ВР_ЕдиницыИзмерения_Коробка.Коэффициент,
	|	ТоварыНаСкладахОстатки.Номенклатура.емеСрокГодностиДляДополнительных
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0)) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Ссылка.Дата) КАК Дата,
	|	ПоступлениеТоваровУслугТовары.Номенклатура
	|ПОМЕСТИТЬ ВР_ПоследняяДатаПланируемогоПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	НЕ ПоступлениеТоваровУслугТовары.Ссылка.Проведен
	|	И НЕ ПоступлениеТоваровУслугТовары.Ссылка.ПометкаУдаления
	|	И (ПоступлениеТоваровУслугТовары.Ссылка.ДатаС <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ПоступлениеТоваровУслугТовары.Ссылка.ДатаПо <> ДАТАВРЕМЯ(1, 1, 1))
	|	И ПоступлениеТоваровУслугТовары.Ссылка.СкладОрдер = &Склад_Основной
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК Дата,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.емеСрокГодностиДляДополнительных КАК СрокГодности,
	|	МИНИМУМ(ПоступлениеТоваровУслугТовары.Ссылка.ДатаС) КАК ДатаС,
	|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Ссылка.ДатаПо) КАК ДатаПо,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Код,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СкладОрдер,
	|	ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Коэффициент КАК Коэффициент_БЕИ,
	|	ВР_ЕдиницыИзмерения_Коробка.Коэффициент КАК Коэффициент_Коробка
	|ПОМЕСТИТЬ ВР_ДанныеОжидаемогоПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВР_ПоследняяДатаПланируемогоПоступления КАК ВР_ПоследняяДатаПланируемогоПоступления
	|		ПО ПоступлениеТоваровУслугТовары.Ссылка.Дата = ВР_ПоследняяДатаПланируемогоПоступления.Дата
	|			И ПоступлениеТоваровУслугТовары.Номенклатура = ВР_ПоследняяДатаПланируемогоПоступления.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения КАК ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Владелец_Номенклатура
	|			И ПоступлениеТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения = ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.ЕдиницаПоКлассификатору
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВР_ЕдиницыИзмерения_Коробка КАК ВР_ЕдиницыИзмерения_Коробка
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = ВР_ЕдиницыИзмерения_Коробка.Владелец_Номенклатура
	|ГДЕ
	|	НЕ ПоступлениеТоваровУслугТовары.Ссылка.Проведен
	|	И НЕ ПоступлениеТоваровУслугТовары.Ссылка.ПометкаУдаления
	|	И (ПоступлениеТоваровУслугТовары.Ссылка.ДатаС <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ПоступлениеТоваровУслугТовары.Ссылка.ДатаПо <> ДАТАВРЕМЯ(1, 1, 1))
	|	И ПоступлениеТоваровУслугТовары.Ссылка.СкладОрдер = &Склад_Основной
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Код,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СкладОрдер,
	|	ВР_ЕдиницыИзмерения_ДляБазовойЕдИзмерения.Коэффициент,
	|	ВР_ЕдиницыИзмерения_Коробка.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.емеСрокГодностиДляДополнительных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВР_ДанныеОжидаемогоПоступления.ДатаС,
	|	ВР_ДанныеОжидаемогоПоступления.ДатаПо,
	|	ВР_ДанныеОжидаемогоПоступления.Дата,
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.Номенклатура, ВР_Остатки.Номенклатура) КАК Ном,
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.СрокГодности, ВР_Остатки.СрокГодности) КАК СрокГодности,
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.НоменклатураКод, ВР_Остатки.НоменклатураКод) КАК НомКод,
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.СкладОрдер, ВР_Остатки.Склад) КАК Склад,
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.Коэффициент_БЕИ, ВР_Остатки.Коэффициент_БЕИ) КАК Коэффициент_БЕИ,
	|	ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.Коэффициент_Коробка, ВР_Остатки.Коэффициент_Коробка) КАК Коэффициент_Коробка_ДляОПТа,
	|	ЕСТЬNULL(ВР_Остатки.КоличествоОстатокТоварыНаСкладах, 0) КАК КоличествоОстатокТоварыНаСкладах,
	|	ЕСТЬNULL(ВР_Остатки.КоличествоОстатокТоварыВРезервеНаСкладах, 0) КАК КоличествоОстатокТоварыВРезервеНаСкладах,
	|	ЕСТЬNULL(ВР_Остатки.СвободныйОстаток, 0) * ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.Номенклатура, ВР_Остатки.Номенклатура) КАК Справочник.Номенклатура).ЕдиницаХраненияОстатков.Коэффициент, 1) / ЕСТЬNULL(ЕСТЬNULL(ВР_ДанныеОжидаемогоПоступления.Коэффициент_БЕИ, ВР_Остатки.Коэффициент_БЕИ), 1) КАК СвободныйОстаток
	|ИЗ
	|	ВР_Остатки КАК ВР_Остатки
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВР_ДанныеОжидаемогоПоступления КАК ВР_ДанныеОжидаемогоПоступления
	|		ПО ВР_Остатки.Номенклатура = ВР_ДанныеОжидаемогоПоступления.Номенклатура
	|			И ВР_Остатки.Склад = ВР_ДанныеОжидаемогоПоступления.СкладОрдер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ном";
	
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору_Коробка", Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("120")); // Кор
	Запрос.УстановитьПараметр("Склад_Основной", Справочники.Склады.НайтиПоКоду("000000005")); // Основной
	Запрос.УстановитьПараметр("НомТМЦ", Справочники.Номенклатура.НайтиПоКоду("06052014"));
	Запрос.УстановитьПараметр("НомРеклама", Справочники.Номенклатура.НайтиПоКоду("244"));
	Запрос.УстановитьПараметр("ИМ",Справочники.СценарииПланирования.НайтиПоНаименованию("ИМ"));
	
	ЗаписьXML = Новый ЗаписьXML;
	имяФайла = ПолучитьИмяВременногоФайла();
	ЗаписьXML.ОткрытьФайл(имяФайла);
	ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>" + Символы.ПС);
	ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/stock.xsd"">" + Символы.ПС);
	ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб + "<DatеTime>" + ТекущаяДата());
	ЗаписьXML.ЗаписатьБезОбработки("</DatеTime>"+Символы.ПС);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для Каждого стрОстатковНоменклатурыНаСкладе Из Рез Цикл			
		Если Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток) < 1 И Не ЗначениеЗаполнено(стрОстатковНоменклатурыНаСкладе.Дата) Тогда
			Продолжить;	
		ИначеЕсли Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток) >= 1 Тогда
			ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стрОстатковНоменклатурыНаСкладе.НомКод)+""" stock="""+сокрлп(Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток))+""" in_box="""+сокрлп(стрОстатковНоменклатурыНаСкладе.Коэффициент_Коробка_ДляОПТа)+""">");
			ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
		ИначеЕсли Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток) < 1 И ЗначениеЗаполнено(стрОстатковНоменклатурыНаСкладе.Дата) Тогда
			ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стрОстатковНоменклатурыНаСкладе.НомКод)+""" stock="""+сокрлп(Цел(стрОстатковНоменклатурыНаСкладе.СвободныйОстаток))+""" in_box="""+сокрлп(стрОстатковНоменклатурыНаСкладе.Коэффициент_Коробка_ДляОПТа)+""" wait_from="""+Формат(стрОстатковНоменклатурыНаСкладе.ДатаС,"ДЛФ=Д")+""" wait_to="""+Формат(стрОстатковНоменклатурыНаСкладе.ДатаПо,"ДЛФ=Д")+""">");
			ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
		КонецЕсли;			
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьБезОбработки("</items>");		
	ЗаписьXML.Закрыть();
	
	
	Попытка
		Соединение1.Записать(имяФайла, "stock_opt.xml");
	Исключение
		ЗаписьЖурналаРегистрации("Обмен XML с сайтом (ОстаткиДляОптовиков)", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		Соединение2.Записать(имяФайла, "stock_opt.xml");
	Исключение
		ЗаписьЖурналаРегистрации("Обмен XML с сайтом (ОстаткиДляОптовиков)", , , ,ОписаниеОшибки(),);
	КонецПопытки;	
	
	
КонецПроцедуры

// Процедура выгрузки файла (stock_eq.xml) с остатками РЕКЛАМНОГО ОБОРУДОВАНИЯ на FTP
Процедура Остатки_РекламноеОборудование() экспорт
	
	СинхронизацияССайтом.ВыгрузитьОстаткиРО();	
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////


// Процедура выгрузки файлов с ценами на FTP 
Процедура Цены() Экспорт
	
	СпрБазТип = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000005");
	ЗаписьXML = Новый ЗаписьXML;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипЦен", СпрБазТип);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ЦеныНоменклатурыСрезПоследних.Цена  КАК Цена,
	|   ЦеныНоменклатурыСрезПоследних.Номенклатура.Код    КАК Код
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата) КАК ЦеныНоменклатурыСрезПоследних
	|   ГДЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен";
	
	СпрТипЦен = Справочники.ТипыЦенНоменклатуры.Выбрать();
	Пока СпрТипЦен.Следующий() Цикл
		Если  (СпрТипЦен.Ссылка=Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000012")) ИЛИ 
			(СпрТипЦен.Ссылка=Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000002")) Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла();
			
			ЗаписьXML.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\price\"+СпрТипЦен.Наименование+".xml");
			ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
			ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/price.xsd"">"+Символы.ПС);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Цена = Выборка.Цена * (1 + СпрТипЦен.ПроцентСкидкиНаценки / 100);
				ЦенаСтр = строка (Цена);
				ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(Выборка.Код)+""" price="""+сокрлп(СтрЗаменить(ЦенаСтр,",","."))+""">");
				ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьБезОбработки("</items>");
			ЗаписьXML.Закрыть();
			// Отправка
			//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
			Попытка
				Соединение = ПолучитьСоединениеFTP1();
			Исключение
				ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
			КонецПопытки;
			//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
			//***{+Редактирования}*** Тасмаджиев 17/10/2018// ->>
			Попытка
				Соединение.Записать(ИмяФайла, "price\" + СпрТипЦен.Наименование + ".xml");
			Исключение
			КонецПопытки;
			
			Попытка
				Соединение = ПолучитьСоединениеFTP2();
				Соединение.Записать(ИмяФайла, "price\" + СпрТипЦен.Наименование + ".xml");
			Исключение
			КонецПопытки;
			//***{-Редактирования}*** Тасмаджиев 17/10/2018// <<-
			
		КонецЕсли;	
	КонецЦикла;
	
	//Мега - изменения. 
	СпрБазТип = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипЦен", СпрБазТип);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ЦеныНоменклатурыСрезПоследних.Цена  КАК Цена,
	|   ЦеныНоменклатурыСрезПоследних.Номенклатура.Код    КАК Код
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата) КАК ЦеныНоменклатурыСрезПоследних
	|   ГДЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен";
	
	
	СпрТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000003");
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ЗаписьXML.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\price\"+СпрТипЦен.Наименование+".xml");
	ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
	ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/price.xsd"">"+Символы.ПС);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Цена = Выборка.Цена * (1 + СпрТипЦен.ПроцентСкидкиНаценки / 100);
		ЦенаСтр = строка (Цена);
		ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(Выборка.Код)+""" price="""+сокрлп(СтрЗаменить(ЦенаСтр,",","."))+""">");
		ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьБезОбработки("</items>");
	ЗаписьXML.Закрыть();
	
	// Отправка
	//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	Попытка
		Соединение = ПолучитьСоединениеFTP1();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	//***{+Редактирования}*** Тасмаджиев 17/10/2018// ->>
	Попытка
		Соединение.Записать(ИмяФайла, "price\" + СпрТипЦен.Наименование + ".xml");
	Исключение
	КонецПопытки;
	
	Попытка
		Соединение = ПолучитьСоединениеFTP2();
		Соединение.Записать(ИмяФайла, "price\" + СпрТипЦен.Наименование + ".xml");
	Исключение
	КонецПопытки;
	//***{-Редактирования}*** Тасмаджиев 17/10/2018// <<-
	
	//Цены для 5LB выгружаются отдельно, так как устанавливаются вручную и имеют тип "базовые"
	СпрТипЦен5LB = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
	
	Запрос2 = Новый Запрос;
	Запрос2.УстановитьПараметр("ТипЦен", СпрТипЦен5LB);
	Запрос2.УстановитьПараметр("Дата", ТекущаяДата());
	
	Запрос2.Текст = "
	|ВЫБРАТЬ 
	|	ЦеныНоменклатурыСрезПоследних.Цена  КАК Цена,
	|   ЦеныНоменклатурыСрезПоследних.Номенклатура.Код    КАК Код
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата) КАК ЦеныНоменклатурыСрезПоследних
	|   ГДЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен";
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ЗаписьXML.ОткрытьФайл(ИмяФайла); // "C:\1C-Web_Exchange\price\"+СпрТипЦен5LB.Наименование+".xml");
	ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
	ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/price.xsd"">"+Символы.ПС);
	Выборка2 = Запрос2.Выполнить().Выбрать();
	Пока Выборка2.Следующий() Цикл
		ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(Выборка2.Код)+""" price="""+сокрлп(СтрЗаменить(Выборка2.Цена,",","."))+""">");
		ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьБезОбработки("</items>");
	ЗаписьXML.Закрыть();
	
	// Отправка
	//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	Попытка
		Соединение = ПолучитьСоединениеFTP1();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	//***{+Редактирования}*** Тасмаджиев 17/10/2018// ->>
	Попытка
		Соединение.Записать(ИмяФайла, "price\" + СпрТипЦен5LB.Наименование + ".xml");
	Исключение
	КонецПопытки;
	
	Попытка
		Соединение = ПолучитьСоединениеFTP2();
		Соединение.Записать(ИмяФайла, "price\" + СпрТипЦен5LB.Наименование + ".xml");
	Исключение
	КонецПопытки;
	//***{-Редактирования}*** Тасмаджиев 17/10/2018// <<-
	Запрос2 = Неопределено;
	
	//Странный файл для 5LB: кроме цен ещё и наименование + папка
	//Выгружается все. Раньше файл назывался 5lb_full.xml, теперь megatropin_full.xml
	//В 5lb_full.xml будет выгружаться все кроме свойства Выгружать в Мегатропин
	Если Час(ТекущаяДата()) = 2 Тогда
		СпрТипЦен5LB = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
		
		Запрос2 = Новый Запрос;
		Запрос2.УстановитьПараметр("ТипЦен", СпрТипЦен5LB);
		Запрос2.УстановитьПараметр("Дата", ТекущаяДата());
		
		Запрос2.Текст = "
		|ВЫБРАТЬ 
		|	ЦеныНоменклатурыСрезПоследних.Цена  КАК Цена,
		|   ЦеныНоменклатурыСрезПоследних.Номенклатура.Код    КАК Код,
		|   ЦеныНоменклатурыСрезПоследних.Номенклатура.Наименование    КАК Наименование,
		|   ЦеныНоменклатурыСрезПоследних.Номенклатура.Родитель.Наименование    КАК Родитель
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата) КАК ЦеныНоменклатурыСрезПоследних
		|   ГДЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен";
		
		ИмяФайла = ПолучитьИмяВременногоФайла();
		
		ЗаписьXML.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\price\5lb_full.xml");
		ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
		ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/price.xsd"">"+Символы.ПС);
		Выборка2 = Запрос2.Выполнить().Выбрать();
		Пока Выборка2.Следующий() Цикл
			Имя = СтрЗаменить (Выборка2.Наименование,"&","&amp;");
			Имя = СтрЗаменить (Имя,"<","");
			Имя = СтрЗаменить (Имя,">","");
			Имя = СтрЗаменить (Имя,"""","");
			
			Папко = СтрЗаменить (Выборка2.Родитель,"&","&amp;");
			Папко = СтрЗаменить (Папко,"<","");
			Папко = СтрЗаменить (Папко,">","");
			Папко = СтрЗаменить (Папко,"""","");
			
			ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(Выборка2.Код)+""" price="""+сокрлп(СтрЗаменить(Выборка2.Цена,",","."))+""" nam="""+сокрлп(Имя)+""" producer="""+сокрлп(Папко)+""">");
			ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьБезОбработки("</items>");
		ЗаписьXML.Закрыть();
		
		// Отправка
		//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
		Попытка
			Соединение = ПолучитьСоединениеFTP1();
		Исключение
			ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
		КонецПопытки;
		//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
		Соединение.Записать(ИмяФайла, "megatropin_full.xml");
		Соединение = ПолучитьСоединениеFTP2();
		Соединение.Записать(ИмяФайла, "megatropin_full.xml");
		
		Запрос2 = Неопределено;
	КонецЕсли;
	
	//Файл 5lb_full, не выгружаем говно со свойством "Выгружать в Мегатропин" (000000077)
	СпрТипЦен5LB = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
	
	Запрос2 = Новый Запрос;
	Запрос2.УстановитьПараметр("ТипЦен", СпрТипЦен5LB);
	Запрос2.УстановитьПараметр("Дата", ТекущаяДата());
	
	Запрос2.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Код КАК Код,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Наименование КАК Наименование,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Родитель.Наименование КАК Родитель
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			НЕ Номенклатура В
	|					(ВЫБРАТЬ
	|						ЗначенияСвойствОбъектов.Объект
	|					ИЗ
	|						РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|					ГДЕ
	|						ЗначенияСвойствОбъектов.Значение = ИСТИНА
	|						И ЗначенияСвойствОбъектов.Свойство.Код = ""000000077"")) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен";
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьXML.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\price\5lb_full.xml");
	ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
	ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/price.xsd"">"+Символы.ПС);
	Выборка2 = Запрос2.Выполнить().Выбрать();
	Пока Выборка2.Следующий() Цикл
		Имя = СтрЗаменить (Выборка2.Наименование,"&","&amp;");
		Имя = СтрЗаменить (Имя,"<","");
		Имя = СтрЗаменить (Имя,">","");
		Имя = СтрЗаменить (Имя,"""","");
		
		Папко = СтрЗаменить (Выборка2.Родитель,"&","&amp;");
		Папко = СтрЗаменить (Папко,"<","");
		Папко = СтрЗаменить (Папко,">","");
		Папко = СтрЗаменить (Папко,"""","");
		
		ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(Выборка2.Код)+""" price="""+сокрлп(СтрЗаменить(Выборка2.Цена,",","."))+""" nam="""+сокрлп(Имя)+""" producer="""+сокрлп(Папко)+""">");
		ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьБезОбработки("</items>");
	ЗаписьXML.Закрыть();
	
	// Отправка
	//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	Попытка
		Соединение = ПолучитьСоединениеFTP1();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	
	//++ Кузнецов С.А. - Добавил что выгружается в папку "price" - 01.03.2016
	
	//***{+Редактирования}*** Тасмаджиев 17/10/2018// ->>
	Попытка
		Соединение.Записать(ИмяФайла, "price\5lb_full.xml");
		//-- Кузнецов С.А. - 01.03.2016	
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		Соединение = ПолучитьСоединениеFTP2();	
		
		//++ Кузнецов С.А. - Добавил что выгружается в папку "price" - 01.03.2016	
		Соединение.Записать(ИмяФайла, "price\5lb_full.xml");
		//-- Кузнецов С.А. - 01.03.2016	
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//***{-Редактирования}*** Тасмаджиев 17/10/2018// <<-
	
	Запрос2 = Неопределено;
	
	//Основной тип цен (теперь в $)
	СпрТипЦенОсн = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000013");
	
	Запрос3 = Новый Запрос;
	Запрос3.УстановитьПараметр("ТипЦен", СпрТипЦенОсн);
	Запрос3.УстановитьПараметр("Дата", ТекущаяДата());
	
	Запрос3.Текст = "
	|ВЫБРАТЬ 
	|	ЦеныНоменклатурыСрезПоследних.Цена  КАК Цена,
	|   ЦеныНоменклатурыСрезПоследних.Номенклатура.Код    КАК Код
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата) КАК ЦеныНоменклатурыСрезПоследних
	|   ГДЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен";
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьXML.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\price\"+СпрТипЦенОсн.Наименование+".xml");
	ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
	ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/price.xsd"">"+Символы.ПС);
	Выборка3 = Запрос3.Выполнить().Выбрать();
	Пока Выборка3.Следующий() Цикл
		ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(Выборка3.Код)+""" price="""+сокрлп(СтрЗаменить(Выборка3.Цена,",","."))+""">");
		ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьБезОбработки("</items>");
	ЗаписьXML.Закрыть();
	
	// Отправка
	//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	Попытка
		Соединение = ПолучитьСоединениеFTP1();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	
	//***{+Редактирования}*** Тасмаджиев 17/10/2018// ->>
	Попытка
		Соединение.Записать(ИмяФайла, "price\"+СпрТипЦенОсн.Наименование+".xml");
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		Соединение = ПолучитьСоединениеFTP2();
		Соединение.Записать(ИмяФайла, "price\"+СпрТипЦенОсн.Наименование+".xml");
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//***{-Редактирования}*** Тасмаджиев 17/10/2018// <<-
	
	//Основной тип цен (теперь и в Евро)
	СпрТипЦенОсн = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000014");
	
	Запрос3 = Новый Запрос;
	Запрос3.УстановитьПараметр("ТипЦен", СпрТипЦенОсн);
	Запрос3.УстановитьПараметр("Дата", ТекущаяДата());
	
	Запрос3.Текст = "
	|ВЫБРАТЬ 
	|	ЦеныНоменклатурыСрезПоследних.Цена  КАК Цена,
	|   ЦеныНоменклатурыСрезПоследних.Номенклатура.Код    КАК Код
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата) КАК ЦеныНоменклатурыСрезПоследних
	|   ГДЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен";
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьXML.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\price\"+СпрТипЦенОсн.Наименование+".xml");
	ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
	ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/price.xsd"">"+Символы.ПС);
	Выборка3 = Запрос3.Выполнить().Выбрать();
	Пока Выборка3.Следующий() Цикл
		ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(Выборка3.Код)+""" price="""+сокрлп(СтрЗаменить(Выборка3.Цена,",","."))+""">");
		ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьБезОбработки("</items>");
	ЗаписьXML.Закрыть();
	
	// Отправка
	//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	Попытка
		Соединение = ПолучитьСоединениеFTP1();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	
	//***{+Редактирования}*** Тасмаджиев 17/10/2018// ->>
	Попытка
		Соединение.Записать(ИмяФайла, "price\"+СпрТипЦенОсн.Наименование+".xml");
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		Соединение = ПолучитьСоединениеFTP2();
		Соединение.Записать(ИмяФайла, "price\"+СпрТипЦенОсн.Наименование+".xml");
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//***{-Редактирования}*** Тасмаджиев 17/10/2018// <<-
	
	//Цены для Trec. Все
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = "ВЫБРАТЬ
	|	Трек50.Цена КАК Цена50,
	|	Трек100.Цена КАК Цена100,
	|	Трек200.Цена КАК Цена200,
	|	Трек300.Цена КАК Цена300,
	|	Ном.Код КАК Код
	|ИЗ
	|	Справочник.Номенклатура КАК Ном
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦен50) КАК Трек50
	|		ПО Ном.Ссылка = Трек50.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦен100) КАК Трек100
	|		ПО Ном.Ссылка = Трек100.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦен200) КАК Трек200
	|		ПО Ном.Ссылка = Трек200.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦен300) КАК Трек300
	|		ПО Ном.Ссылка = Трек300.Номенклатура
	|ГДЕ
	|	Трек50.Номенклатура ЕСТЬ НЕ NULL ";
	Запрос2.УстановитьПараметр("ТипЦен50",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("44"));
	Запрос2.УстановитьПараметр("ТипЦен100",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("28"));
	Запрос2.УстановитьПараметр("ТипЦен200",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("43"));
	Запрос2.УстановитьПараметр("ТипЦен300",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("211"));
	Запрос2.УстановитьПараметр("Дата",КонецДня(ТекущаяДата()));
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьXML.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\price\trec_msk.xml");
	ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
	ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/price.xsd"">"+Символы.ПС);
	Выборка2 = Запрос2.Выполнить().Выбрать();
	Пока Выборка2.Следующий() Цикл
		ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(Выборка2.Код)+""" price1="""+сокрлп(СтрЗаменить(Выборка2.Цена50,",","."))+""" price2="""+сокрлп(СтрЗаменить(Выборка2.Цена100,",","."))+""" price3="""+сокрлп(СтрЗаменить(Выборка2.Цена200,",","."))+""" price4="""+сокрлп(СтрЗаменить(Выборка2.Цена300,",","."))+""">");
		ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьБезОбработки("</items>");
	ЗаписьXML.Закрыть();
	
	// Отправка
	//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	Попытка
		Соединение = ПолучитьСоединениеFTP1();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	
	//***{+Редактирования}*** Тасмаджиев 17/10/2018// ->>
	Попытка
		Соединение.Записать(ИмяФайла, "price\trec_msk.xml");
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		Соединение = ПолучитьСоединениеFTP2();
		Соединение.Записать(ИмяФайла, "price\trec_msk.xml");
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//***{+Редактирования}*** Тасмаджиев 17/10/2018// ->>
	
	//Выгрузка средней цены
	СпрТипЦенОсн = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000021"); //теперь отправляем СЦЗ_Машина
	
	Запрос3 = Новый Запрос;
	Запрос3.УстановитьПараметр("ТипЦен", СпрТипЦенОсн);
	Запрос3.УстановитьПараметр("Дата", ТекущаяДата());
	
	Запрос3.Текст = "
	|ВЫБРАТЬ 
	|	ЦеныНоменклатурыСрезПоследних.Цена  КАК Цена,
	|   ЦеныНоменклатурыСрезПоследних.Номенклатура.Код    КАК Код
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата) КАК ЦеныНоменклатурыСрезПоследних
	|   ГДЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен";
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьXML.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\price\СредняяЦенаЗакупки.xml");
	ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
	ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/price.xsd"">"+Символы.ПС);
	Выборка3 = Запрос3.Выполнить().Выбрать();
	Пока Выборка3.Следующий() Цикл
		ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(Выборка3.Код)+""" price="""+сокрлп(СтрЗаменить(Выборка3.Цена,",","."))+""">");
		ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьБезОбработки("</items>");
	ЗаписьXML.Закрыть();
	
	//++ Кузнецов С.А. - Поменял на "СредняяяЦенаЗакупки" - 11.03.2016
	// Отправка
	//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	Попытка
		Соединение = ПолучитьСоединениеFTP1();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 17/04/2018//==============================================================================================
	//***{+Редактирования}*** Тасмаджиев 17/10/2018// ->>
	Попытка
		Соединение.Записать(ИмяФайла, "price\СредняяяЦенаЗакупки.xml");
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		Соединение = ПолучитьСоединениеFTP2();
		Соединение.Записать(ИмяФайла, "price\СредняяяЦенаЗакупки.xml");	
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	//***{-Редактирования}*** Тасмаджиев 17/10/2018// <<-
	//-- Кузнецов С.А. - 11.03.2016
	
КонецПроцедуры

// Процедура выгрузки данных о товарах (в корневой файл 5lb_full.xml для админки сайта)
Процедура ВыгрузитьДанныеОТоварахНаСайт() Экспорт
	//было до 05.04.2017, Юра
	////++ Кузнецов С.А. - Отменяем выгрузку из папки "Рекламные материалы" (Задача №1003130 (Лавров Борис)) - 23.03.2016
	//запросДанныхОТоварах = Новый Запрос("ВЫБРАТЬ
	//|	ТоварыНаСкладахОстатки.Номенклатура.Код КАК КодНоменклатуры,
	//|	ТоварыНаСкладахОстатки.Склад,
	//|	ТоварыНаСкладахОстатки.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдБазоваяПоКлассификатору,
	//|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдХранения,
	//|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдХранения,
	//|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0)) КАК СвободныйОстатокЕдХранения,
	//|	МАКСИМУМ(ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1)) КАК КоэффициентЕдИзмеренииПоБазовойЕдинице,
	//|	ТоварыНаСкладахОстатки.Номенклатура.Представление,
	//|	ТоварыНаСкладахОстатки.Номенклатура.Родитель.Представление,
	//|   ТоварыНаСкладахОстатки.Номенклатура,
	////28.02.2017 Задача по срокам годности
	//|   ТоварыНаСкладахОстатки.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру КАК СсылкаОснНоменклатура
	//|ПОМЕСТИТЬ ВР_ПредварительныеДанныеПоОстаткам
	//|ИЗ
	//|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	//|			,
	//|			(НЕ Номенклатура В ИЕРАРХИИ (&ГруппыИсключений)
	//// |				ИЛИ Номенклатура В ИЕРАРХИИ (&НомРеклама)
	//|                )
	//|				И Склад = &СкладИМ) КАК ТоварыНаСкладахОстатки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	//|				,
	//|				(НЕ Номенклатура В ИЕРАРХИИ (&ГруппыИсключений)
	//// |					ИЛИ Номенклатура В ИЕРАРХИИ (&НомРеклама)
	//|                )
	//|					И Склад = &СкладИМ) КАК ТоварыВРезервеНаСкладахОстатки
	//|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	//|			И ТоварыНаСкладахОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	//|		ПО ТоварыНаСкладахОстатки.Номенклатура = ЕдиницыИзмерения.Владелец
	//|			И ТоварыНаСкладахОстатки.Номенклатура.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ТоварыНаСкладахОстатки.Склад,
	//|	ТоварыНаСкладахОстатки.Номенклатура.Код,
	//|	ТоварыНаСкладахОстатки.Номенклатура.БазоваяЕдиницаИзмерения,
	//|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков,
	//|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	//|	ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1),
	//|	ТоварыНаСкладахОстатки.Номенклатура.Представление,
	//|	ТоварыНаСкладахОстатки.Номенклатура.Родитель.Представление,
	//|   ТоварыНаСкладахОстатки.Номенклатура,
	////28.02.2017 Задача по срокам годности
	//|   ТоварыНаСкладахОстатки.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру
	//|ИМЕЮЩИЕ
	//|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0)) > 0
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВР_ПредварительныеДанныеПоОстаткам.КодНоменклатуры,
	//|	ВР_ПредварительныеДанныеПоОстаткам.Склад,
	//|	ВЫРАЗИТЬ(ВР_ПредварительныеДанныеПоОстаткам.СвободныйОстатокЕдХранения * ВР_ПредварительныеДанныеПоОстаткам.КоэффициентЕдХранения / ВР_ПредварительныеДанныеПоОстаткам.КоэффициентЕдИзмеренииПоБазовойЕдинице КАК ЧИСЛО(15, 0)) КАК ОстаткиВБазовыхЕдиницахХранения,
	//|	ВР_ПредварительныеДанныеПоОстаткам.НоменклатураПредставление,
	//|	ВР_ПредварительныеДанныеПоОстаткам.НоменклатураРодительПредставление,
	//|   ВР_ПредварительныеДанныеПоОстаткам.Номенклатура.ДатаСозданияНоменклатуры,
	////28.02.2017 Задача по срокам годности
	//|	ВР_ПредварительныеДанныеПоОстаткам.СсылкаОснНоменклатура
	//|ИЗ
	//|	ВР_ПредварительныеДанныеПоОстаткам КАК ВР_ПредварительныеДанныеПоОстаткам");
	
	//Стало после 05.04.2017, Юра
	//Это задача от Миронова Виктора, согласовано с Ивановым Иваном
	//Общий смысл, что нужна вся номенклатура, кроме папки "Утиль", вне зависимости от остатка.
	//И добавлен атрибут "exp_date" 
	запросДанныхОТоварах = Новый Запрос("ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура,
	//Добавлено ЕСТЬNULL, иначе некорректно выдает результат. Что-то сразу я упустил этот момент. 28.04.2017, Юра
	//СУММА((ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток) / ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК Количество
	|	СУММА((ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0)) / ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)) КАК Количество
	
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Склад = &СкладИМ) КАК ТоварыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&Дата, Склад = &СкладИМ) КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсяНоменклатура.Код КАК КодНоменклатуры,
	|	ВсяНоменклатура.Представление КАК НоменклатураПредставление,
	|	ВсяНоменклатура.Родитель.Представление КАК НоменклатураРодительПредставление,
	|	ВсяНоменклатура.ДатаСозданияНоменклатуры КАК НоменклатураДатаСозданияНоменклатуры,
	|	Остатки.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру КАК СсылкаОснНоменклатура,
	|	Остатки.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру.Код КАК КодСсылкаОснНоменклатура,
	|	Остатки.Количество КАК ОстаткиВБазовыхЕдиницахХранения,
	|	ВсяНоменклатура.емеСрокГодностиДляДополнительных КАК СрокГодности,
	//06.06.2017 добавить признак "с дефектом упаковки"
	|	ВсяНоменклатура.емеЭтоБрак КАК ЭтоБрак
	|ИЗ
	|	Справочник.Номенклатура КАК ВсяНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ВсяНоменклатура.Ссылка = Остатки.Номенклатура
	|ГДЕ
	|	НЕ ВсяНоменклатура.Ссылка В ИЕРАРХИИ (&ГруппыИсключений)");
	
	грИсключенийНоменклатуры = Новый Массив;
	//грИсключенийНоменклатуры.Добавить(Справочники.Номенклатура.НайтиПоКоду("1122")); // Литература_Литература//05.04.2017, Юра
	//грИсключенийНоменклатуры.Добавить(Справочники.Номенклатура.НайтиПоКоду("06052014")); // Не ТМЦ//05.04.2017, Юра
	//грИсключенийНоменклатуры.Добавить(Справочники.Номенклатура.НайтиПоКоду("132")); // Одежда_Одежда//05.04.2017, Юра
	грИсключенийНоменклатуры.Добавить(Справочники.Номенклатура.НайтиПоКоду("445")); // Утиль
	//грИсключенийНоменклатуры.Добавить(Справочники.Номенклатура.НайтиПоКоду("999967")); // Услуги	//05.04.2017, Юра
	
	//26.04.2017, Юра
	//Новая вводная: "Запретить выгрузку категорий: "Не ТМЦ", "Рекламное оборудование"". Это письмо от Руководителя интернет-магазина (Лавров Борис),
	//которое перенаправил мне Директор департамента информационных технологий (Иванов Иван).
	грИсключенийНоменклатуры.Добавить(Справочники.Номенклатура.НайтиПоКоду("06052014")); //Не ТМЦ
	грИсключенийНоменклатуры.Добавить(Справочники.Номенклатура.НайтиПоКоду("80000000000")); //"Рекламное оборудование"
	грИсключенийНоменклатуры.Добавить(Справочники.Номенклатура.НайтиПоКоду("75")); //еще одна папка "Утиль"
	
	запросДанныхОТоварах.УстановитьПараметр("ГруппыИсключений", грИсключенийНоменклатуры);	
	
	//запросДанныхОТоварах.УстановитьПараметр("НомРеклама", Справочники.Номенклатура.НайтиПоКоду("244")); // Рекламные материалы - от туда переносим	
	запросДанныхОТоварах.УстановитьПараметр("СкладИМ", Справочники.Склады.НайтиПоКоду("000000005")); // склад "Основной" - остатки для ИМ		
	//-- Кузнецов С.А. - 23.03.2016
	
	запросДанныхОТоварах.УстановитьПараметр("Дата",ТекущаяДата());//06.04.2017, Юра
	
	данныеПоОстаткам = запросДанныхОТоварах.Выполнить().Выгрузить();					  
	
	//++ Кузнецов С.А. - Задача в МегаПлане "3213" (изменил запись xml файла) - 26.04.2016		
	записьXML = Новый ЗаписьXML;
	записьXML.ОткрытьФайл(КаталогВременныхФайлов() + "5lb_full.xml");
	записьXML.ЗаписатьОбъявлениеXML();
	//ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/stock.xsd"">"+Символы.ПС);		
	ЗаписьXML.ЗаписатьНачалоЭлемента("items");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("noNamespaceSchemaLocation","http://www.bitdesign.ru/app/bdexf-1.0/stock.xsd");	
	ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<DatеTime>" + ТекущаяДата());
	ЗаписьXML.ЗаписатьБезОбработки("</DatеTime>"+Символы.ПС);
	
	Для Каждого стрДанныхПоОстаткам Из данныеПоОстаткам Цикл		
		Имя = СтрЗаменить (стрДанныхПоОстаткам.НоменклатураПредставление,"&","&amp;");
		Имя = СтрЗаменить (Имя,"<","");
		Имя = СтрЗаменить (Имя,">","");
		Имя = СтрЗаменить (Имя,"""","");
		
		Папко = СтрЗаменить (стрДанныхПоОстаткам.НоменклатураРодительПредставление,"&","&amp;");
		Папко = СтрЗаменить (Папко,"<","");
		Папко = СтрЗаменить (Папко,">","");
		Папко = СтрЗаменить (Папко,"""","");
		
		//записьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(стрДанныхПоОстаткам.КодНоменклатуры)+""" stock="""+сокрлп(стрДанныхПоОстаткам.ОстаткиВБазовыхЕдиницахХранения)+""" nam="""+сокрлп(Имя)+""" producer="""+сокрлп(Папко)+""">");
		записьXML.ЗаписатьНачалоЭлемента("item");
		записьXML.ЗаписатьАтрибут("id", сокрлп(стрДанныхПоОстаткам.КодНоменклатуры));
		записьXML.ЗаписатьАтрибут("stock", сокрлп(стрДанныхПоОстаткам.ОстаткиВБазовыхЕдиницахХранения)); 
		записьXML.ЗаписатьАтрибут("nam", сокрлп(Имя));
		записьXML.ЗаписатьАтрибут("producer", сокрлп(Папко));
		записьXML.ЗаписатьАтрибут("add_date", сокрЛП(Формат(стрДанныхПоОстаткам.НоменклатураДатаСозданияНоменклатуры, "ДФ=yyyy-ММ-dd")));
		записьXML.ЗаписатьАтрибут("exp_date", сокрЛП(Формат(стрДанныхПоОстаткам.СрокГодности, "ДФ=yyyy-ММ-dd")));//06.04.2017, Юра
		//28.02.2017 Задача по срокам годности
		Если ЗначениеЗаполнено (стрДанныхПоОстаткам.СсылкаОснНоменклатура) Тогда
			записьXML.ЗаписатьАтрибут("base_1c_id", сокрлп(стрДанныхПоОстаткам.КодСсылкаОснНоменклатура));//сокрлп(стрДанныхПоОстаткам.СсылкаОснНоменклатура.Код)); //05.04.2017, Юра
		КонецЕсли;
		//06.06.2017 добавить признак "с дефектом упаковки"
		Если (ЗначениеЗаполнено(стрДанныхПоОстаткам.ЭтоБрак)) И (стрДанныхПоОстаткам.ЭтоБрак) Тогда
			записьXML.ЗаписатьАтрибут("packaging_defect", "1");
		КонецЕсли;
		
		записьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	//записьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	записьXML.Закрыть();	
	//-- Кузнецов С.А. - 26.04.2016		
	
	// Переносим на FTP
	Попытка //Смысл в том, что если на FTP1 не удалось выложить файл, на FTP2 нужно всё-равно попытаться 28.04.2017, Юра
		Соединение = ПолучитьСоединениеFTP1();
		Соединение.Записать(КаталогВременныхФайлов() + "5lb_full.xml", "5lb_full.xml");	
	Исключение
	КонецПопытки;
	
	Попытка //Смысл в том, что если на FTP1 не удалось выложить файл, на FTP2 нужно всё-равно попытаться 28.04.2017, Юра
		Соединение = ПолучитьСоединениеFTP2();
		Соединение.Записать(КаталогВременныхФайлов() + "5lb_full.xml", "5lb_full.xml");
	Исключение
	КонецПопытки;
	
КонецПроцедуры	

Процедура НовоеПоступление() Экспорт
	Выгружали = 0;
	Текст = "ВЫБРАТЬ 
	|   ПоступлениеТоваровУслугТов.Номенклатура.Код КАК Код,
	|   ПоступлениеТоваровУслугТов.Номенклатура.Наименование КАК Наименование
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТов
	|ГДЕ
	|	ПоступлениеТоваровУслугТов.Ссылка.ВыгрузкаСайт = ИСТИНА
	|И (ПоступлениеТоваровУслугТов.Ссылка.Проведен)
	|И ПоступлениеТоваровУслугТов.Ссылка.Дата МЕЖДУ &Нач И &Кон
	|Order By ПоступлениеТоваровУслугТов.Номенклатура.Код"; 
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("Нач", КонецДня(ТекущаяДата()-432000));
	Запрос.УстановитьПараметр("Кон", КонецДня(ТекущаяДата()));
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Количество()>0 Тогда
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл("C:\1C-Web_Exchange\stocks\news.xml");
		ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
		ЗаписьXML.ЗаписатьБезОбработки("<items producer="""" producer_id="""" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/news.xsd"">"+Символы.ПС);
		
		Пока Рез.Следующий() Цикл
			ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<item id="""+сокрлп(Рез.Код)+""">"+сокрлп(СтрЗаменить(Рез.Наименование, "&", "&amp;"))+"");
			ЗаписьXML.ЗаписатьБезОбработки("</item>"+Символы.ПС);
		КонецЦикла;
		ЗаписьXML.ЗаписатьБезОбработки("</items>");
		Попытка
			ЗаписьXML.Закрыть();
			Выгружали = 1;
		Исключение
			ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
			Выгружали = 0;
		КонецПопытки;
	КонецЕсли;
	
	
	
	Если Выгружали = 1 Тогда
		
		Текст = "ВЫБРАТЬ 
		|   ПоступлениеТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ВыгрузкаСайт = ИСТИНА
		|И (ПоступлениеТоваровУслуг.Проведен)
		|И ПоступлениеТоваровУслуг.Дата МЕЖДУ &Нач И &Кон"; 
		
		Запрос = Новый Запрос(Текст);
		Запрос.УстановитьПараметр("Нач", КонецДня(ТекущаяДата()-432000));
		Запрос.УстановитьПараметр("Кон", КонецДня(ТекущаяДата()));
		
		Рез = Запрос.Выполнить().Выбрать();
		Если Рез.Количество()>0 Тогда
			Пока Рез.Следующий() Цикл
				Объект = Рез.ссылка.ПолучитьОбъект();
				Объект.ВыгрузкаСайт = 0;
				Объект.Записать(РежимЗаписиДокумента.Запись);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура отправки данных по статусам и статусам оплаты заказов (за 60 дней) из 1С 
Процедура СтатусЗаказа() Экспорт
	
	Статус = "";
	Телефон = "";
	
	Текст = "ВЫБРАТЬ
	|	ЗаказПокупателя.Статус.Код КАК Статус,
	|	ЗаказПокупателя.Ответственный КАК Ответственный,
	|	ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказПокупателя.ДатаОплаты КАК ДатаОплаты,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.НакладнаяДоставки КАК НакладнаяДоставки,
	|	ЗаказПокупателя.ТранспортнаяКомп КАК ТранспортнаяКомп,
	|	ЗаказПокупателя.СтатусОплаты КАК СтатусОплаты,
	|	Рел.Сделка КАК Сделка,
	|	ЕСТЬNULL(История.Сменился, ЛОЖЬ) КАК Сменился
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Рел
	|		ПО (Рел.Сделка = ЗаказПокупателя.Ссылка)
	|			И (Рел.Проведен = ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияОтветственногоПоЗаказу КАК История
	|		ПО ЗаказПокупателя.Ссылка = История.Документ
	|			И (История.Сменился)
	|ГДЕ
	|	ЗаказПокупателя.Ссылка.Дата МЕЖДУ &Нач И &Кон
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателя.Номер,
	|	История.Период УБЫВ"; 
	
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("Нач", КонецДня(ТекущаяДата()-5184000));
	Запрос.УстановитьПараметр("Кон", КонецДня(ТекущаяДата()));
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Количество()>0 Тогда
		
		Имяфайла = ПолучитьИмяВременногоФайла();
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(Имяфайла); //"C:\1C-Web_Exchange\status\orders_status.xml");
		ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""utf-8"" ?>"+Символы.ПС);
		ЗаписьXML.ЗаписатьБезОбработки("<items xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.bitdesign.ru/app/bdexf-1.0/orders_status.xsd"">"+Символы.ПС);
		
		Пока Рез.Следующий() Цикл
			Статус = "";
			Телефон = "";
			СтатусОплаты = "";
			Если Рез.Ответственный = Справочники.Пользователи.ПустаяСсылка() Тогда
				Статус = Рез.Статус;	
			ИначеЕсли Рез.Ответственный <> Справочники.Пользователи.ПустаяСсылка() Тогда
				Статус = "Заказ доставляется";
				Текст2 = "ВЫБРАТЬ 
				|   Контакт.Объект КАК Объект,
				|   Контакт.Тип КАК Тип,
				|   Контакт.Представление КАК Значение
				|ИЗ
				|	РегистрСведений.КонтактнаяИнформация КАК Контакт
				|ГДЕ
				|  Контакт.Объект = &Кур
				|И Контакт.Тип = &Тип"; 
				
				Запрос2 = Новый Запрос(Текст2);
				Запрос2.УстановитьПараметр("Кур", Справочники.Пользователи.НайтиПоНаименованию(СокрЛП(Рез.Ответственный)));
				Запрос2.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
				Рез2 = Запрос2.Выполнить().Выбрать();
				Если Рез2.Количество()=1 Тогда
					Пока Рез2.Следующий() Цикл
						Телефон = Рез2.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			//Если Рез.ДатаОплаты <> Дата (1,1,1) Тогда
			//	Статус = "Заказ выполнен";
			//КонецЕсли;
			
			Если ТипЗнч(Рез.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Статус = "Заказ выполнен";
			КонецЕсли;
			
			Если Рез.СтатусОплаты = Перечисления.СтатусОплаты.НеОпалчен Тогда
				СтатусОплаты = "0";
			ИначеЕсли Рез.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен Тогда
				СтатусОплаты = "1";
			КонецЕсли;
			Если СтатусОплаты = "" Тогда
				ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<order id="""+сокрлп(Рез.Номер)+""" status="""+сокрлп(Статус)+""" ship_date="""+сокрлп(Формат(Рез.ДатаОтгрузки,"ДЛФ=Д"))+""" carrier_type="""+СокрЛП(Рез.ТранспортнаяКомп)+""" invoice="""+СокрЛП(Рез.НакладнаяДоставки)+""" courier_reappointed="""+?(Рез.Сменился,"1","0")+""" courier="""+СокрЛП(Рез.Ответственный)+""" courier_phone="""+СокрЛП(Телефон)+""">");    	
			Иначе
				ЗаписьXML.ЗаписатьБезОбработки(Символы.Таб+"<order id="""+сокрлп(Рез.Номер)+""" pay_status="""+сокрлп(СтатусОплаты)+""" status="""+сокрлп(Статус)+""" ship_date="""+сокрлп(Формат(Рез.ДатаОтгрузки,"ДЛФ=Д"))+""" carrier_type="""+СокрЛП(Рез.ТранспортнаяКомп)+""" invoice="""+СокрЛП(Рез.НакладнаяДоставки)+""" courier_reappointed="""+?(Рез.Сменился,"1","0")+""" courier="""+СокрЛП(Рез.Ответственный)+""" courier_phone="""+СокрЛП(Телефон)+""">");    
			КонецЕсли;
			ЗаписьXML.ЗаписатьБезОбработки("</order>"+Символы.ПС);
		КонецЦикла;
		ЗаписьXML.ЗаписатьБезОбработки("</items>");
		Попытка
			ЗаписьXML.Закрыть();
		Исключение
			ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
		КонецПопытки;
	КонецЕсли;
	
	// Отправка
	Попытка
		Соединение = ПолучитьСоединениеFTP1();
		Соединение.Записать(ИмяФайла, "orders_status.xml");
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		Соединение = ПолучитьСоединениеFTP2();
		Соединение.Записать(ИмяФайла, "orders_status.xml");
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
КонецПроцедуры

Процедура ДокиОтКонтриков (_ИмяФайла) Экспорт
	//Текст = Новый ТекстовыйДокумент;
	//Текст.ДобавитьСтроку(Формат(ТекущаяДата(),"ДФ=дд.ММ.гггг"));
	
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(_ИмяФайла); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Номер = ДокументDOM.ПолучитьЭлементыПоИмени("Номер");
	
	Для Позиц=0 По Номер.Количество()-1 Цикл
		ВхНомер = "";
		ДочерниеУзлы = Номер[Позиц].ДочерниеУзлы;
		
		Для каждого Узел Из ДочерниеУзлы Цикл
			
			ВхНомер = Узел.ТекстовоеСодержимое;
		КонецЦикла;
	КонецЦикла;
	
	
	Контрики = ДокументDOM.ПолучитьЭлементыПоИмени("Контрагент");
	
	
	Для Позиц=0 По Контрики.Количество()-1 Цикл
		ВхИнн = "";
		Роль = "";
		
		ДочерниеУзлы = Контрики[Позиц].ДочерниеУзлы;
		
		Для каждого Узел Из ДочерниеУзлы Цикл
			
			Если Узел.ИмяУзла = "ИНН" Тогда
				
				ВхИнн = Узел.ТекстовоеСодержимое;
				
			ИначеЕсли Узел.ИмяУзла = "Роль" Тогда
				
				Роль = Узел.ТекстовоеСодержимое;
			КонецЕсли;
			
		КонецЦикла; 
		
		Если СокрЛП(Роль) = "Продавец" Тогда
			прервать;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВхНомер) Тогда
		//Текст.ДобавитьСтроку("Не удалось прочитать входящий номер поступления товаров! Ошибка в файле "+_ИмяФайла);
		//Текст.Записать("C:\1C-Web_Exchange\LogZ\"+_ИмяФайла+".txt");
		возврат;
	КонецЕсли;
	
	Если ИщемПоступлениеПоВхНомеру (ВхНомер) = 1 Тогда
		//Текст.ДобавитьСтроку("Повторная загрузка "+_ИмяФайла);
		//Текст.Записать("C:\1C-Web_Exchange\LogZ\"+_ИмяФайла+".txt");
		возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВхИнн) Тогда
		//Текст.ДобавитьСтроку("Не удалось прочитать входящий ИНН поступления товаров! Ошибка в файле "+_ИмяФайла);
		//Текст.Записать("C:\1C-Web_Exchange\LogZ\"+_ИмяФайла+".txt");
		возврат;
	КонецЕсли;
	
	
	Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	Док.Организация = Справочники.Организации.НайтиПоКоду("000000001");
	Док.Дата = ТекущаяДата();
	Док.ОтражатьВУправленческомУчете=Истина;
	Док.ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад;
	Док.СкладОрдер = Справочники.Склады.НайтиПоКоду("000000005");
	Док.НомерВходящегоДокумента = ВхНомер;
	
	Продавец = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ВхИнн);
	Если Продавец = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Док.Комментарий = Док.Комментарий+" "+"Не найден контрагент! Его ИНН="+ВхИнн;
	Иначе
		Док.Контрагент = Продавец;
		Док.ДоговорКонтрагента = Продавец.ОсновнойДоговорКонтрагента;
	КонецЕсли;
	
	
	Док.УчитыватьНДС=Истина;
	Док.СуммаВключаетНДС=Истина;
	
	
	Товары = ДокументDOM.ПолучитьЭлементыПоИмени("Товар");
	
	
	Для Позиц=0 По Товары.Количество()-1 Цикл
		ВхАрт = "";
		Количество = "";
		Сумма = "";
		
		ДочерниеУзлы = Товары[Позиц].ДочерниеУзлы;
		
		Для каждого Узел Из ДочерниеУзлы Цикл
			ВхАрт = "";
			Количество = "";
			Сумма = "";
			
			
			Если Узел.ИмяУзла = "Артикул" Тогда
				ВхАрт = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Количество" Тогда
				Количество = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Сумма" Тогда
				Сумма = Узел.ТекстовоеСодержимое;
			КонецЕсли;
			
		КонецЦикла; 
		
		Если Не ЗначениеЗаполнено(ВхАрт) Тогда
			Док.Комментарий = Док.Комментарий+"||"+"Проблема с ВхАрт="+ВхАрт;
			Продолжить;
		КонецЕсли;
		
		Текст = "ВЫБРАТЬ
		| Ном.Номенклатура КАК Номенклатура
		|ИЗ
		| РегистрСведений.НоменклатураКонтрагентов КАК Ном
		|ГДЕ Ном.КодНоменклатурыКонтрагента = &Код";
		
		Запрос = Новый Запрос(Текст);                 
		Запрос.УстановитьПараметр("Код", СокрЛП(ВхАрт));
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Док.Комментарий = Док.Комментарий+"||"+"Артикул не связан с нашей номенклатурой "+СокрЛП(ВхАрт);
			Продолжить;
		Иначе
			Выб = Рез.Выбрать();
			Если Выб.Количество()>1 Тогда
				Док.Комментарий = Док.Комментарий+"||"+"Нет однозначного соответствия артикула"+СокрЛП(ВхАрт);
				продолжить;
			КонецЕсли;
			Выб.Следующий();
			Номенклатура = Выб.Номенклатура;
		КонецЕсли;
		
		НовСтр = Док.Товары.Добавить();
		НовСтр.Номенклатура = Номенклатура;
		НовСтр.Количество = Количество;
		НовСтр.ЕдиницаИзмерения=НовСтр.Номенклатура.ЕдиницаХраненияОстатков;
		НовСтр.Коэффициент=1;
		НовСтр.СтавкаНДС=НовСтр.Номенклатура.СтавкаНДС;
		НовСтр.Сумма = Сумма;
		Попытка
			НовСтр.Цена = Сумма/Количество;
		Исключение
			ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
		КонецПопытки;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтр, Док);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтр, Док);
		
		
		
	КонецЦикла;
	
	Док.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Процедура ПроверитьНаличиеВремениВылетаПоДефолту() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|Р.Время
	|ИЗ РегистрСведений.ТаблоВыдачи КАК Р
	|ГДЕ Р.Дата = &Дат
	|И Р.Курьер = Значение (Справочник.Пользователи.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Дат",НачалоДня(ТекущаяДата()));
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Набор = РегистрыСведений.ТаблоВыдачи.СоздатьНаборЗаписей();
		
		Набор.Отбор.Курьер.Установить(Справочники.Пользователи.ПустаяСсылка());
		Набор.Отбор.Дата.Установить(НачалоДня(ТекущаяДата()));
		
		СтрокаДанных = Набор.Добавить();
		
		СтрокаДанных.Время = НачалоДня(ТекущаяДата())+46740;
		СтрокаДанных.Дата = НачалоДня(ТекущаяДата());
		
		Попытка
			Набор.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Функция СкопироватьС_ФТП(Соединение, МассивФайлов, Каталог)
	
	МассивЛокФайлов = Новый Массив;
	
	Для Каждого ТекФайл Из МассивФайлов Цикл
		Соединение.Получить(ТекФайл.ПолноеИмя, Каталог + ТекФайл.Имя);
		МассивФайлов.Добавить(Новый Файл(Каталог + ТекФайл.Имя));
	КонецЦикла;
	
	Возврат МассивЛокФайлов;
	
КонецФункции

Функция ПолучитьСоединениеFTP1() Экспорт
	    //#***+Редактирования*** Тасмаджиев 12/10/2018// ->>
		//Возврат Новый FTPСоединение("186.2.168.202", 21, "data", "o4prG50J2sR4", , ,30,);//Добавил таймаут 30сек соединения чтоб не подвисало.
		Возврат Новый FTPСоединение("91.203.70.230", 21, "data", "FELSpx5KPoqDxntv", , ,30,);
		//#***-Редактирования*** Тасмаджиев 12/10/2018// <<-
КонецФункции

Функция ПолучитьСоединениеFTP2() Экспорт
	    //#***+Редактирования*** Тасмаджиев 12/10/2018// ->>
		//Перенесено из рабочей
		Возврат Новый FTPСоединение("178.57.218.206", 21, "data", "GMnSr1kvHNIhmZdz", , ,30,);//Добавил таймаут 30сек соединения чтоб не подвисало.
	    //#***-Редактирования*** Тасмаджиев 12/10/2018// <<-
КонецФункции

// Загрузка с сайта номенклатурных групп (Ценновые группы) для номенклатурных позиций
Процедура ЦеновыеГруппы() Экспорт
	
	Попытка
		ИмяФайла = ПолучитьИмяВременногоФайла();
		
		//***{+Добавления}*** Тасмаджиев 20/07/2018// ->>
		//***=!{Добавлен обмен через каталог}!=*** ->>
		Если УстановитьВарианТранспортаДанных() Тогда
			
			Попытка
				
				Файл = Новый Файл(Константы._5LB_ОбменСайтАдресДиректории.Получить()+"\out\tree_export.xml"); 
				КопироватьФайл(Файл.ПолноеИмя,ИмяФайла);
				
			Исключение
				
				//ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
				
			КонецПопытки;
			
		Иначе //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-
			
			Соединение = ПолучитьСоединениеFTP1();
			Соединение.Получить("out\tree_export.xml", ИмяФайла);
			
		КонецЕсли; //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-
	
		Чтение = Новый ЧтениеXML; 
		Чтение.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\category\tree_export.xml"); 
		
		Таб = Новый ТаблицаЗначений;
		Таб.Колонки.Добавить("ИдТовараСайт");
		Таб.Колонки.Добавить("СсылкаНом");
		
		
		Пока Чтение.Прочитать() Цикл
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
				ТекНом = Неопределено;
				
				ИмяУзла = Чтение.Имя; 
				Если (ИмяУзла<>"item") Тогда
					продолжить;
				КонецЕсли;
				
				Пока Чтение.ПрочитатьАтрибут() Цикл 
					
					Имя = Чтение.Имя; 
					Значение = Чтение.Значение; 
					
					Если (Имя = "link_1c") И (ИмяУзла = "item")  Тогда
						ТекНом = Справочники.Номенклатура.НайтиПоКоду(Значение);
						Если (ТекНом.ЭтоГруппа) ИЛИ (ТекНом.Пустая()) Тогда
							прервать;
						КонецЕсли;
					КонецЕсли;	
					
					Если (Имя = "id") И (ИмяУзла = "item")  Тогда
						идТовараСайт = Значение;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ТекНом) Тогда
					НовСт = Таб.Добавить();
					НовСт.ИдТовараСайт = идТовараСайт;
					НовСт.СсылкаНом = ТекНом;
				КонецЕсли;
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда 
				
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
				
			КонецЕсли; 
		КонецЦикла;
		
		Чтение.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		//ИмяФайла = ПолучитьИмяВременногоФайла();
		//
		//Соединение = ПолучитьСоединениеFTP2();
		//Соединение.Получить("out\tree_export.xml", ИмяФайла);
		
		Чтение = Новый ЧтениеXML; 
		Чтение.ОткрытьФайл(ИмяФайла); 
		
		
		Пока Чтение.Прочитать() Цикл 
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
				ТекНом = Неопределено;
				
				идСсылка = "";
				
				ИмяУзла = Чтение.Имя; 
				Если (ИмяУзла<>"item") Тогда
					продолжить;
				КонецЕсли;
				
				Пока Чтение.ПрочитатьАтрибут() Цикл 
					
					ТипУзла = Чтение.ТипУзла; 
					Имя = Чтение.Имя; 
					Значение = Чтение.Значение; 
					
					Если (Имя = "link_1c") И (ИмяУзла = "item")  Тогда
						ТекНом = Справочники.Номенклатура.НайтиПоКоду(Значение);
						Если (ТекНом.ЭтоГруппа) ИЛИ (ТекНом.Пустая()) Тогда
							прервать;
						КонецЕсли;
					КонецЕсли;
					
					Если (Имя = "id") И (ИмяУзла = "item")  Тогда
						идТовараСайт = Значение;
					КонецЕсли;
					
					Если (Имя = "base_id") И (ИмяУзла = "item")  Тогда
						идСсылка = Значение;
					КонецЕсли;
					
					
				КонецЦикла;
				
				Если (ЗначениеЗаполнено(ТекНом)) И (ЗначениеЗаполнено(идСсылка)) Тогда
					ТабРодНом = Таб.Найти(идСсылка,"ИдТовараСайт");
					Если ТабРодНом<>Неопределено  Тогда
						ТекРодНом = ТабРодНом.СсылкаНом;
						ЦеноваяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(ТекРодНом.Наименование,Истина,Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000717"));
						Если ЦеноваяГруппа.Пустая() Тогда
							НовЦГр = Справочники.НоменклатурныеГруппы.СоздатьЭлемент();
							НовЦГр.Родитель = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000717");
							НовЦГр.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
							НовЦГР.Наименование = ТекРодНом.Наименование;
							НовЦГр.Записать();
							НовЕд = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
							НовЕд.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
							НовЕд.Наименование = "шт";
							НовЕд.Коэффициент = 1;
							НовЕд.Владелец = НовЦГр.Ссылка;
							НовЕд.Записать();
							НовЦГр.ЕдиницаХраненияОстатков = НовЕд.Ссылка;
							НовЦГр.Записать();
							ЦеноваяГруппа = НовЦГр.Ссылка;
							Об = ТекРодНом.ПолучитьОбъект();
							Об.НоменклатурнаяГруппа = ЦеноваяГруппа;
							Об.Записать();
						КонецЕсли;
						
						//++ Кузнецов С.А. - Проверка на изменение номенклатурной группы у товара - 24.03.2016
						Если ТекНом.НоменклатурнаяГруппа <> ЦеноваяГруппа Тогда
							Об = ТекНом.ПолучитьОбъект();
							Об.НоменклатурнаяГруппа = ЦеноваяГруппа;
							Об.Записать();
						КонецЕсли;					
						//-- Кузнецов С.А. - 24.03.2016					
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда 
				
				
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
				
			КонецЕсли; 
			
		КонецЦикла;
		Чтение.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
КонецПроцедуры

// Загрузка категорий для номенклатурных позиций
Процедура Категории() Экспорт
	
	Попытка
		ИмяФайла = ПолучитьИмяВременногоФайла();
		
		//***{+Добавления}*** Тасмаджиев 20/07/2018// ->>
		//***=!{Добавлен обмен через каталог}!=*** ->>
		Если УстановитьВарианТранспортаДанных() Тогда
			
			Попытка
				
				Файл = Новый Файл(Константы._5LB_ОбменСайтАдресДиректории+"\out\tree_export.xml"); 
				КопироватьФайл(Файл.ПолноеИмя,ИмяФайла);
				
			Исключение
				
				//ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
				
			КонецПопытки;
			
		Иначе //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-
			
			Соединение = ПолучитьСоединениеFTP1();
			Соединение.Получить("out\tree_export.xml", ИмяФайла);
			
		КонецЕсли; //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-
	
		Чтение = Новый ЧтениеXML; 
		Чтение.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\category\tree_export.xml"); 
		
		Таб = Новый ТаблицаЗначений;
		Таб.Колонки.Добавить("ИдТовараСайт");
		Таб.Колонки.Добавить("СсылкаКатегория");
		
		Пока Чтение.Прочитать() Цикл
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
				ТекКат = Неопределено;
				
				ИмяУзла = Чтение.Имя; 
				Если (ИмяУзла <> "category") И (ИмяУзла<>"item") Тогда
					продолжить;
				КонецЕсли;
				
				Пока Чтение.ПрочитатьАтрибут() Цикл 
					
					ТипУзла = Чтение.ТипУзла;
					Имя = Чтение.Имя;
					Значение = Чтение.Значение;
					
					Если Имя = "id" И ИмяУзла = "category" Тогда
						идКат = Значение;
					КонецЕсли;
					
					Если Имя = "link_1c" И ИмяУзла = "item" Тогда
						ТекНом = Справочники.Номенклатура.НайтиПоКоду(Значение);
						Если ТекНом.ЭтоГруппа Или ТекНом.Пустая() Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					Если Имя = "category" И ИмяУзла = "item" Тогда
						ТекКат = Справочники.КатегорииОбъектов.НайтиПоКоду(Значение);
						Если ТекКат.Пустая() Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					Если Имя = "id" И ИмяУзла = "item" Тогда
						идТовараСайт = Значение;
					КонецЕсли;
					
					Если Имя = "base_id" И ИмяУзла = "item" Тогда
						идСсылка = Значение;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ТекНом) И ЗначениеЗаполнено(ТекКат) Тогда
					// < 29.11.16 Вялов - Мегаплан № 3953
					//	//НовСт = Таб.Добавить();
					//	//НовСт.ИдТовараСайт = идТовараСайт;
					//	//НовСт.СсылкаКатегория = ТекКат;
					//	
					//	Набор = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
					//	Набор.Отбор.Объект.Установить(ТекНом);
					//	Набор.Отбор.Категория.Установить(ТекКат);
					//	Набор.Прочитать();
					//	Набор.Очистить();
					//	Запись = Набор.Добавить();
					//	Запись.Объект	= ТекНом;
					//	Запись.Категория= ТекКат;
					//	Набор.Записать();
					// 29.11.16 Вялов - Мегаплан № 3953 >
				КонецЕсли;
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда 
				
				Если ИмяУзла = "category" Тогда
					Если Справочники.КатегорииОбъектов.НайтиПоКоду(идКат) = Справочники.КатегорииОбъектов.ПустаяСсылка() Тогда
						НовКат = Справочники.КатегорииОбъектов.СоздатьЭлемент();
						НовКат.Код = идКат;
						НовКат.Наименование = Чтение.Значение;
						НовКат.НазначениеКатегории = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
						Попытка
							НовКат.Записать();
						Исключение
							ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
				
			КонецЕсли; 
		КонецЦикла;
		
		Чтение.Закрыть();
		
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
КонецПроцедуры

// Загрузка/выгрузка подарочных карт (активация, погашение)
Процедура ПодарочныеКарты() Экспорт
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	попытка
		
		//***{+Добавления}*** Тасмаджиев 20/07/2018// ->>
		//***=!{Добавлен обмен через каталог}!=*** ->>
		Если УстановитьВарианТранспортаДанных() Тогда
			
			Попытка
				
				Файл = Новый Файл(Константы._5LB_ОбменСайтАдресДиректории.Получить()+"\out\gift_card_for_1c.xml"); 
				КопироватьФайл(Файл.ПолноеИмя,ИмяФайла);
				
			Исключение
				
				//ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
				
			КонецПопытки;
			
		Иначе //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-
			
			
			Соединение = ПолучитьСоединениеFTP1();
			Соединение.Получить("out\gift_card_for_1c.xml", ИмяФайла);
			
		КонецЕсли; //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-
	
		//Загружаем
		Чтение = Новый ЧтениеXML; 
		Чтение.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\status\gift_card_for_1c.xml"); 
		
		Пока Чтение.Прочитать() Цикл 
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
				
				ИмяУзла = Чтение.Имя; 
				Если (ИмяУзла <> "gift_card") Тогда
					продолжить;
				КонецЕсли;
				
				Пока Чтение.ПрочитатьАтрибут() Цикл 
					
					Имя = Чтение.Имя; 
					Значение = Чтение.Значение; 
					
					Если (Имя = "redeemed") И (ИмяУзла = "gift_card")  Тогда
						Значение = СтрЗаменить(Значение,"-","");
						Значение = СтрЗаменить(Значение," ","");
						Значение = СтрЗаменить(Значение,":","");
						ДатаПогашения = Значение;
					КонецЕсли;
					
					
				КонецЦикла;
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда 
				НомерКарты = СокрЛП(Чтение.Значение);						
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
				Если ЗначениеЗаполнено(НомерКарты) Тогда
					Набор = РегистрыСведений.ПодарочныеКарты.СоздатьНаборЗаписей();
					
					Набор.Отбор.Номер.Установить(НомерКарты);
					Набор.Прочитать();
					
					Если Набор[0].Погашена = Ложь Тогда
						СтрокаДанных = Набор[0];
						СтрокаДанных.Погашена = Истина;
						СтрокаДанных.ДатаПогашения = ДатаПогашения;
						СтрокаДанных.МестоПогашения = Справочники.Контрагенты.НайтиПоКоду("000000059");
						Попытка
							Набор.Записать();
						Исключение
							ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
						КонецПопытки;
						
					КонецЕсли; 
				КонецЕсли;
				НомерКарты = "";
				ДатаПогашения = "";
				
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		//***{+Добавления}*** Тасмаджиев 20/07/2018// ->>
		//***=!{Добавлен обмен через каталог}!=*** ->>
		Если УстановитьВарианТранспортаДанных() Тогда
			
			Попытка
				
				Файл = Новый Файл(Константы._5LB_ОбменСайтАдресДиректории.Получить()+"\status\gift_card_for_1c.xml"); 
				КопироватьФайл(Файл.ПолноеИмя,ИмяФайла);
				
			Исключение
				
				//ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки() + Символы.ПС + ТекФайл.ПолноеИмя,);
				
			КонецПопытки;
			
		Иначе //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-
			
			Соединение = ПолучитьСоединениеFTP2();
			Соединение.Получить("status\gift_card_for_1c.xml", ИмяФайла);
			
		КонецЕсли; //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-

		//Загружаем с другого хостинга
		Чтение = Новый ЧтениеXML; 
		Чтение.ОткрытьФайл(ИмяФайла); //"C:\1C-Web_Exchange\status_91205127147\gift_card_for_1c.xml"); 
		
		Пока Чтение.Прочитать() Цикл 
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
				
				ИмяУзла = Чтение.Имя; 
				Если (ИмяУзла <> "gift_card") Тогда
					продолжить;
				КонецЕсли;
				
				Пока Чтение.ПрочитатьАтрибут() Цикл 
					
					Имя = Чтение.Имя; 
					Значение = Чтение.Значение; 
					
					Если (Имя = "redeemed") И (ИмяУзла = "gift_card")  Тогда
						Значение = СтрЗаменить(Значение,"-","");
						Значение = СтрЗаменить(Значение," ","");
						Значение = СтрЗаменить(Значение,":","");
						ДатаПогашения = Значение;
					КонецЕсли;
					
					
				КонецЦикла;
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда 
				НомерКарты = СокрЛП(Чтение.Значение);						
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
				Если ЗначениеЗаполнено(НомерКарты) Тогда
					Набор = РегистрыСведений.ПодарочныеКарты.СоздатьНаборЗаписей();
					
					Набор.Отбор.Номер.Установить(НомерКарты);
					Набор.Прочитать();
					
					Если Набор[0].Погашена = Ложь Тогда
						СтрокаДанных = Набор[0];
						СтрокаДанных.Погашена = Истина;
						СтрокаДанных.ДатаПогашения = ДатаПогашения;
						СтрокаДанных.МестоПогашения = Справочники.Контрагенты.НайтиПоКоду("000000059");
						Попытка
							Набор.Записать();
						Исключение
							ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
						КонецПопытки;
						
					КонецЕсли; 
				КонецЕсли;
				НомерКарты = "";
				ДатаПогашения = "";
				
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	//Выгружаем
	//Сначала погашеные
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Р.Номер,
	|	Р.ДатаПогашения КАК Дата
	|ИЗ
	|	РегистрСведений.ПодарочныеКарты КАК Р
	|ГДЕ
	|	Р.Погашена = ИСТИНА
	|	И Р.МестоПогашения <> &Сайт
	|	И Р.ДатаПогашения МЕЖДУ &Дат1 И &Дат2";
	Запрос.УстановитьПараметр("Сайт", Справочники.Контрагенты.НайтиПоКоду("000000059"));
	Запрос.УстановитьПараметр("Дат1",НачалоДня(ТекущаяДата()-7*86400));
	Запрос.УстановитьПараметр("Дат2",КонецДня(ТекущаяДата()));
	
	Рез = Запрос.Выполнить();
	
	Выб = Рез.Выбрать();
	
	ЗаписьXML = Новый  ЗаписьXML;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ИмяФайлаОбмена = ИмяФайла; //"C:\1C-Web_Exchange\status\gift_card.xml";
	
	ЗаписьXML.ОткрытьФайл(ИмяФайлаОбмена);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("gift_card"); 
	ЗаписьXML.ЗаписатьАтрибут("datetime",Строка(ТекущаяДата()));
	
	Пока Выб.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("gift_card");           
		ЗаписьXML.ЗаписатьАтрибут("redeemed",Строка(Выб.Дата));
		ЗаписьXML.ЗаписатьТекст(Выб.Номер);
		ЗаписьXML.ЗаписатьКонецЭлемента();             
	КонецЦикла;
	
	//теперь активированные
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Р.Номер,
	|	Р.ДатаПродажи КАК Дата
	|ИЗ
	|	РегистрСведений.ПодарочныеКарты КАК Р
	|ГДЕ
	|	Р.ДатаПродажи МЕЖДУ &Дат1 И &Дат2";
	Запрос.УстановитьПараметр("Дат1",НачалоДня(ТекущаяДата()-7*86400));
	Запрос.УстановитьПараметр("Дат2",КонецДня(ТекущаяДата()));
	
	Рез = Запрос.Выполнить();
	
	Выб = Рез.Выбрать();
	
	Пока Выб.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("gift_card");           
		ЗаписьXML.ЗаписатьАтрибут("saledate",Строка(Выб.Дата));
		ЗаписьXML.ЗаписатьТекст(Выб.Номер);
		ЗаписьXML.ЗаписатьКонецЭлемента();             
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	ЗаписьXML.Закрыть();
	
	Попытка
		Соединение = ПолучитьСоединениеFTP1();
		Соединение.Записать(ИмяФайла, "gift_card.xml");
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		Соединение = ПолучитьСоединениеFTP2();
		Соединение.Записать(ИмяФайла, "gift_card.xml");
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Катков А. 22.08.2016 >>
#Область Проверка_работы_регл_задания_получения_заказов_с_сайта

Процедура ПолучитьДанныеПоФоновомуЗаданиюОбменаДляПроверки() Экспорт
	
	ФоновыеЗаданияТЗ = Новый ТаблицаЗначений;
	ФоновыеЗаданияТЗ.Колонки.Добавить("Начало");
	ФоновыеЗаданияТЗ.Колонки.Добавить("Конец");
	ФоновыеЗаданияТЗ.Колонки.Добавить("Состояние");
	
	Отбор = Новый Структура("ИмяМетода", "РаботаСРегламентныеЗаданиями.ЗапуститьОбмен");
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Для каждого ЭлементМассива Из МассивФоновыхЗаданий Цикл
		НовСтр 				= ФоновыеЗаданияТЗ.Добавить();
		НовСтр.Начало 		= ЭлементМассива.Начало;
		НовСтр.Конец 		= ЭлементМассива.Конец;
		НовСтр.Состояние 	= ЭлементМассива.Состояние;
	КонецЦикла;
	
	ФоновыеЗаданияТЗ.Сортировать("Начало Убыв");
	
	Если ФоновыеЗаданияТЗ.Количество() > 0 Тогда
		ПоследнееВремяЗапуска = ФоновыеЗаданияТЗ[0].Начало;
	Иначе
		ПоследнееВремяЗапуска = Дата("00010101");
	КонецЕсли;
	
	Если (ПоследнееВремяЗапуска < ТекущаяДата() - 1800) Тогда // более 1/2 часа назад
		Если ПоследнееВремяЗапуска = Дата("00010101") Тогда
			Событие =  "" + Формат(ТекущаяДата(), "ДЛФ=DT") + ". Регламентное задание ""ОбменXML_ССайтом"" не запускалось длительное время.";
		Иначе
			Событие =  "" + Формат(ТекущаяДата(), "ДЛФ=DT") + ". Регламентное задание ""ОбменXML_ССайтом"" не запускалось с <" + Формат(ПоследнееВремяЗапуска, "ДЛФ=DT") + ">.";	
		КонецЕсли;
		ОтправитьПредупрежденияОЗаказах(Событие);
		Возврат;
	КонецЕсли;
	
	// проверим еще и последнее время создания Заказа покупателя.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПокупателя.Ссылка,
	|	ЗаказПокупателя.Дата КАК Дата
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	ДатаПоследнегоДокумента = ВыборкаДетальныеЗаписи.Дата;
	Если Час(ТекущаяДата()) < 9 Тогда
		ДопустимоеВремяОтсутствияЗаказов = 10800; // 3 часа
	Иначе
		ДопустимоеВремяОтсутствияЗаказов = 1800; // 1/2 часа
	КонецЕсли; 
	Если (ДатаПоследнегоДокумента < ТекущаяДата() - ДопустимоеВремяОтсутствияЗаказов) Тогда
		ОграничениеПоВремени_Час = Формат((ДопустимоеВремяОтсутствияЗаказов / 3600), "ЧДЦ=1");
		Событие = "" + Формат(ТекущаяДата(), "ДЛФ=DT") + ". Не было заказов более " + ОграничениеПоВремени_Час + " час.";
		ОтправитьПредупрежденияОЗаказах(Событие);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтправитьПредупрежденияОЗаказах(Событие)
	
	////  >>
	//// что бы не "спамить" отправляем 1 раз в день. данные об отправке храним в рег.сведений "Псевдонимы"
	//
	//НаборЗаписей = РегистрыСведений.Псевдонимы.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.ОбъектСсылка.Установить("ДатаКрайнейОтправки");
	//Раздел = Справочники.ПсевдонимыРазделы.НайтиПоНаименованию("ДатаПоследнегоПредупреждения");
	//Если Раздел.Пустая() Тогда
	//	Возврат;
	//КонецЕсли; 
	//НаборЗаписей.Отбор.Раздел.Установить(Раздел);
	//НаборЗаписей.Прочитать();
	//ТЗ_Псевдонимы = НаборЗаписей.Выгрузить();
	//
	//Если ТЗ_Псевдонимы.Количество() = 0 Тогда // если нет такой записи - добавим
	//	НовСтрока = ТЗ_Псевдонимы.Добавить();
	//	НовСтрока.Значение = ТекущаяДата();
	//	ДатаПоследнейОтправки = ДАТА("00010101");
	//Иначе
	//	ДатаПоследнейОтправки = ТЗ_Псевдонимы[0].Значение;
	//КонецЕсли;
	//
	//Если НачалоДня(ДатаПоследнейОтправки) = НачалоДня(ТекущаяДата()) Тогда // только одно сообщение в день
	//	Возврат;
	//КонецЕсли;
	//
	//ТЗ_Псевдонимы[0].Значение = ТекущаяДата();
	//НаборЗаписей.Загрузить(ТЗ_Псевдонимы);
	//НаборЗаписей.Записать();
	////  <<  что бы не "спамить" отправляем 1 раз в день. данные об отправке храним в рег.сведений "Псевдонимы"
	
	
	Запрос = Новый Запрос;  // адреса для рассылки храним в том же рег.сведений "Псевдонимы"
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Псевдонимы.Значение КАК ЕМэйл
	|ИЗ
	|	РегистрСведений.Псевдонимы КАК Псевдонимы
	|ГДЕ
	|	Псевдонимы.Раздел.Наименование = ""ПредупреждениеОбОстановкеЗагрузкиЗаказов""
	|
	|СГРУППИРОВАТЬ ПО
	|	Псевдонимы.Значение";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
	ЭлПисьмо = Новый ИнтернетПочтовоеСообщение;
	ЭлПисьмо.Тема = "Возможно прекратилась загрузка Заказов в Управление торговлей 10.3";
	ТекстПисьма = Событие;
	ЭлПисьмо.Тексты.Добавить(ТекстПисьма);
	ЭлПисьмо.Отправитель = "1cinfo@ukitgroup.ru"; //НМА 16.01.18 изменить настройки почтового ящика. Старый ящик:"1cinfo@5lb.ru". Задача от Ивана Иванова
	ЭлПисьмо.ИмяОтправителя = "проверка загрузки заказов";
	
	Отказ = ИСТИНА; // на случай если нет адресов для рассылки
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЭлПисьмо.Получатели.Добавить(ВыборкаДетальныеЗаписи.ЕМэйл);
		Отказ = ЛОЖЬ;
	КонецЦикла;
	
	МассивПисем = Новый Массив;
	МассивПисем.Добавить(ЭлПисьмо);
	
	Если НЕ Отказ Тогда
		ОтправитьЭлектронныеПисьма(МассивПисем);
	КонецЕсли; 
	
	//================================================!{Рассылка СМС}!=====================================================
	//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 18/04/2018//==================================================================
		
	Запрос = Новый Запрос;  // адреса для рассылки храним в том же рег.сведений "Псевдонимы"
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Псевдонимы.Значение КАК Номер
	|ИЗ
	|	РегистрСведений.Псевдонимы КАК Псевдонимы
	|ГДЕ
	|	Псевдонимы.Раздел.Наименование = ""ПредупреждениеОбОстановкеЗагрузкиЗаказовСМС""
	|
	|СГРУППИРОВАТЬ ПО
	|	Псевдонимы.Значение";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		МенеджерЗаписи = РегистрыСведений.СМСДляОтправки.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ИмяПолучателя = "";
		
		МенеджерЗаписи.ТелефонПолучателя = ВыборкаДетальныеЗаписи.Номер;
				
		МенеджерЗаписи.Текст ="Возможно прекратилась загрузка Заказов в Управление торговлей 10.3 "+ Строка(ТекущаяДата());
		
		МенеджерЗаписи.Прочитать();
		
		Если  НЕ МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.ИмяПолучателя = "";
			
			МенеджерЗаписи.ТелефонПолучателя = ВыборкаДетальныеЗаписи.Номер;
						
			МенеджерЗаписи.Текст = "Возможно прекратилась загрузка Заказов в Управление торговлей 10.3 "+ Строка(ТекущаяДата());
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЦикла;

	//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 18/04/2018//==============================================================================================
КонецПроцедуры

#КонецОбласти 
// Катков А. 22.08.2016 <<  
///////////////////////////////////////////////////////


///////////////////////////////////////////////////////
// РЕГЛАМЕНТНОЕ ЗАДАНИЕ - "Завершение зависших сеансов"

// Для отключения зависшиго сеанса
// Если сеанс висит больше 300 секунд, то рубим.
Процедура ЗавершениеЗависшихСеансов() Экспорт
	
	ИмяСервера = "tcp://1cserv";
	
	Коннектор = Новый COMОбъект("v83.COMConnector");
	Агент = Коннектор.ConnectAgent(ИмяСервера);
	
	Для Каждого ТекКластер Из Агент.GetClusters() Цикл
		Кластер = ТекКластер;
	КонецЦикла;
	
	Агент.Authenticate(Кластер,,);
	
	Процессы = Агент.GetWorkingProcesses(Кластер);
	
	Для Каждого ТекПроцесс из Процессы Цикл
		Процесс = ТекПроцесс;
	КонецЦикла;
	
	Порт = Процесс.MainPort;
	РабПроц = Коннектор.ConnectWorkingProcess(ИмяСервера + ":" + СтрЗаменить(Порт, Символы.НПП, ""));
	РабПроц.AddAuthentication("Bazhibin", "Qaz12345");
	
	ИнформационнаяБаза = "";
	
	Базы = Агент.GetInfoBases(Кластер);
	Для Каждого База из Базы Цикл
		Если База.Name = "C81_UT" Тогда
			ИнформационнаяБаза = База;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Сеансы = Агент.GetInfoBaseSessions(Кластер, ИнформационнаяБаза);
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.UserName = ИмяПользователя() Тогда
			// это текущий пользователь
			Продолжить;
		КонецЕсли;
		Если нРег(Сеанс.AppID) = "backgroundjob" ИЛИ нРег(Сеанс.AppID) = "designer" Тогда
			// если это сеансы конфигуратора или фонового задания, то не отключаем
			Продолжить;
		КонецЕсли;
		
		Если Сеанс.dbProcTook >= 300000 Тогда
			Пользователь = Сеанс.userName;
			ВремяЗахвата = Сеанс.dbProcTook;
			Попытка
				// ВСЕХ УБИТЬ!!!!
				Агент.TerminateSession(Кластер, Сеанс);
				ЗаписьЖурналаРегистрации("Автоматическое завершение сеанса", УровеньЖурналаРегистрации.Информация, ,, "Успешное завершение процесса - " + Пользователь + ", " + Строка(ВремяЗахвата)); 
			Исключение
				ЗаписьЖурналаРегистрации("Автоматическое завершение сеанса", УровеньЖурналаРегистрации.Информация, ,, "Не удалось завершить сеанс - " + Пользователь + ", " + Строка(ВремяЗахвата));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////


///////////////////////////////////////////////////////
// ЗАГРУЗКА КУРСОВ ВАЛЮТ

#Область Загрузка_курсов_валют

// Процедура загрузки курсов валют
//
Процедура ЗагрузитьКурсыВалютПоПараметрам(ПеремДата) Экспорт
	
	Перем HTTP;
	
	ИмяФайла = "Curses.txt"; 
	
	НачДата = ПеремДата;
	КонДата = ПеремДата;	
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;
	ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
	
	Текст = Новый ТекстовыйДокумент();
	
	СерверИсточник = "cbrates.rbc.ru";
	
	Адрес1 = "tsv/cb/";  // в интервале
	Адрес2 = "tsv/";     // по 1 дате
	Если НачДата = КонДата Тогда  // по 1 дате
		Адрес = Адрес2;
		ТМП   = "/"+Формат(Год(КонДата),"ЧРГ=; ЧГ=0")+"/"+Формат(Месяц(КонДата),"ЧЦ=2;ЧДЦ=0;ЧВН=")+"/"+Формат(День(КонДата),"ЧЦ=2;ЧДЦ=0;ЧВН=");
	Иначе    // в интервале
		Адрес = Адрес1;
		ТМП   = "";
	КонецЕсли;
	
	ВремКаталог = КаталогВременныхФайлов() + "tempKurs";
	СоздатьКаталог(ВремКаталог);
	УдалитьФайлы(ВремКаталог,"*.*");
	
	// Получим список валют
	списокВалют = Новый Массив;
	выборкаВалюты = Справочники.Валюты.Выбрать();
	Пока выборкаВалюты.Следующий() Цикл
		списокВалют.Добавить(выборкаВалюты.Ссылка);
	КонецЦикла;		
	
	Для каждого валюта из СписокВалют Цикл
		
		ТекВалюта = валюта;
		Стр = "";
		ИмяВходящегоФайла = "" + ВремКаталог + "\" + ИмяФайла;
		СтрокаПараметраПолучения = Адрес + Прав(ТекВалюта.Код,3) + ТМП + ".tsv";
		Если ЗапроситьФайлыССервераДоп(СерверИсточник, СтрокаПараметраПолучения, ИмяВходящегоФайла, HTTP) <> Истина Тогда
			Продолжить;
		КонецЕсли; 
		
		ВходящийФайл = Новый Файл(ИмяВходящегоФайла);
		Если НЕ ВходящийФайл.Существует() Тогда
			Продолжить;
		КонецЕсли;	
		
		Текст.Прочитать(ИмяВходящегоФайла,КодировкаТекста.ANSI);
		
		КолСтрок = Текст.КоличествоСтрок();
		Для Инд = 1 По КолСтрок Цикл
			
			Стр = Текст.ПолучитьСтроку(Инд);
			Если (Стр = "") ИЛИ (Найти(Стр,Символы.Таб) = 0) Тогда
				Продолжить;
			КонецЕсли;
			Если НачДата = КонДата Тогда  
				ДатаКурса = КонДата;
			Иначе 
				ДатаКурсаСтр = ВыделитьПодСтроку(Стр);
				ДатаКурса    = Дата(Лев(ДатаКурсаСтр,4),Сред(ДатаКурсаСтр,5,2),Сред(ДатаКурсаСтр,7,2));
			КонецЕсли;
			Кратность = Число(ВыделитьПодСтроку(Стр));
			Курс      = Число(ВыделитьПодСтроку(Стр));
			
			Если ДатаКурса > КонДата Тогда
				Прервать;
			КонецЕсли;
			
			Если ДатаКурса < НачДата Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗаписьКурсовВалют.Валюта = ТекВалюта;
			ЗаписьКурсовВалют.Период = ДатаКурса;
			ЗаписьКурсовВалют.Прочитать();
			ЗаписьКурсовВалют.Валюта    = ТекВалюта;
			ЗаписьКурсовВалют.Период    = ДатаКурса;
			ЗаписьКурсовВалют.Курс      = Курс*1.01; // НА 1% ВЫШЕ
			ЗаписьКурсовВалют.Кратность = Кратность;
			ЗаписьКурсовВалют.Записать();
			
			//26.05.2017 Только загрузка курсов валют
			//Если ТекВалюта = Справочники.Валюты.НайтиПоКоду("840") Тогда
			//	ТекНаценка = ((Курс*1.01)/50 - 1)*100;
			//	Если ТекНаценка<=0 Тогда
			//		продолжить;
			//	КонецЕсли;
			//	
			//	ДинСредняя = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000016");
			//	Об = ДинСредняя.ПолучитьОбъект();
			//	Об.ПроцентСкидкиНаценки = ТекНаценка;
			//	Попытка
			//		Об.Записать();
			//	Исключение
			//	КонецПопытки;
			//КонецЕсли;
			
		КонецЦикла;	   
	КонецЦикла;	
	УдалитьФайлы(ВремКаталог,"*.*");
	
КонецПроцедуры

// Выделяет из переданной строки первое значение
//  до символа "TAB"
//
// Параметры: 
//  ИсходнаяСтрока - Строка - строка для разбора
//
// Возвращаемое значение:
//  подстроку до символа "TAB"
//
Функция ВыделитьПодСтроку(ИсходнаяСтрока)
	
	Перем ПодСтрока;
	
	Поз = Найти(ИсходнаяСтрока,Символы.Таб);
	Если Поз > 0 Тогда
		ПодСтрока = Лев(ИсходнаяСтрока,Поз-1);
		ИсходнаяСтрока = Сред(ИсходнаяСтрока,Поз+1);
	Иначе
		ПодСтрока = ИсходнаяСтрока;
		ИсходнаяСтрока = "";
	КонецЕсли;
	
	Возврат ПодСтрока;
	
КонецФункции // ВыделитьПодСтроку()

// Функция получает файлы с сервера с указанными параметрами и сохраняет на диск
//
// Параметры:
//  HTTP - HTTPСоединение, если приходится использовать данную функцию в цикле, то тут передается
//         переменная с созданным в предыдущей итерации цикла HTTPСоединением
// СерверИсточникПараметр - Строка, сервер, с которого необходимо получить файлы
// СтрокаПараметраПолученияПараметр - Строка, адрес ресурса на сервере.
// ИмяВходящегоФайлаПараметр - Имя файла, в который помещаются данные полученного ресурса.
//
// Возвращаемое значение:
//  Булево - Успешно получены файлы или нет.
//
Функция ЗапроситьФайлыССервераДоп(СерверИсточникПараметр, СтрокаПараметраПолученияПараметр, ИмяВходящегоФайлаПараметр,
	HTTP = Неопределено, НеобходимаАвторизация = Ложь, 
	ЛогинПрокси = "", ПарольПрокси = "", ЛогинСервера = "", ПарольСервера = "",
	ЗаголовокДляАвторизации = "", СообщениеДляАвторизации = "", СообщениеОбОшибке = "") Экспорт
	
	Результат = Истина;
	ПроксиСервер = Неопределено;
	мСерверИсточник = СерверИсточникПараметр;
	
	СерверИсточник           = СерверИсточникПараметр;
	СтрокаПараметраПолучения = СтрокаПараметраПолученияПараметр;
	ИмяВходящегоФайла        = ИмяВходящегоФайлаПараметр;
	
	ПерваяПопыткаПрокси   = Истина;
	ПерваяПопыткаСервера  = Истина;
	ПерваяПопыткаПолучить = Не (HTTP = Неопределено);
	
	Если ТипЗнч(HTTP) <> Тип("HTTPСоединение") Тогда
		HTTP = Новый HTTPСоединение(СерверИсточник);
	КонецЕсли;
	
	Пока Истина Цикл
		Попытка
			HTTP.Получить(СтрокаПараметраПолучения, ИмяВходящегоФайла);
			Результат = Истина;
			Прервать;
		Исключение
			Результат = Ложь;
			Прервать
		КонецПопытки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////


///////////////////////////////////////////////////////
// ПРОВЕРКА И УВЕДОМЛЕНИЕ ПО ЗАГРУЗКЕ КУРСОВ ВАЛЮТ

Процедура ВыполнитьПроверкуЗагрузкиКурсовВалютИУстановкиКурсовойНаценки() Экспорт
	
	//массивПисем = Новый Массив;
	
	// Проверка загруженных сегодня курсов валют
	//22.06.2017 Отключаем отправку на адреса kuznetsov@5lb.ru и vt@5lb.ru
	//выборкаЗаписейРС_КурсовВалют = РегистрыСведений.КурсыВалют.Выбрать(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	//Если НЕ выборкаЗаписейРС_КурсовВалют.Следующий() Тогда
	//	// Отправляем письмо, что не загружены курсы валют
	//	темаПисьма = "Не загружены курсы валют в систему ""УТ 10.3"" на " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"); 
	//	текстПисьма = "Загрузка курсов валют не выполнена. Проверьте курсы валют в системе ""УТ 10.3"".";
	//	письмо = Новый ИнтернетПочтовоеСообщение;
	//	письмо.Тема = темаПисьма; 
	//	письмо.Тексты.Добавить(текстПисьма);
	//	письмо.Отправитель = "zakaz.shop@5lb.ru";
	//	письмо.Получатели.Добавить("kuznetsov@5lb.ru");
	//	письмо.Получатели.Добавить("vt@5lb.ru");
	//	массивПисем.Добавить(письмо);
	//КонецЕсли;		
	
	// Проверка расчета курсовой наценки
	//22.06.2017 Отключаем отправку на адреса kuznetsov@5lb.ru и vt@5lb.ru
	//выборкаЗаписейРС_КН = РегистрыСведений.КурсоваяНаценка.Выбрать(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	//Если НЕ выборкаЗаписейРС_КН.Следующий() Тогда
	//	// Отправляем письмо, что не загружены курсы валют
	//	темаПисьма = "Не рассчитаны курсовые наценки в систему ""УТ 10.3"" на " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"); 
	//	текстПисьма = "Расчет курсовых наценок не выполнен. Проверьте регламентные задания в системе ""УТ 10.3"".";
	//	письмо = Новый ИнтернетПочтовоеСообщение;
	//	письмо.Тема = темаПисьма; 
	//	письмо.Тексты.Добавить(текстПисьма);
	//	письмо.Отправитель = "zakaz.shop@5lb.ru";
	//	письмо.Получатели.Добавить("kuznetsov@5lb.ru"); 
	//	письмо.Получатели.Добавить("vt@5lb.ru");
	//	массивПисем.Добавить(письмо);
	//КонецЕсли;		
	
	// Отправляем письма
	//Если массивПисем.Количество() > 0 Тогда
	//	ОтправитьЭлектронныеПисьма(массивПисем);
	//КонецЕсли;	
	
КонецПроцедуры


///////////////////////////////////////////////////////
// Кадры

Функция КадрыПолучитьМассивАдресовРассылки(КодКадровогоИзменения=3)
	
	массивАдреса = Новый Массив;	
	
	АдресПочтыПриоритет = Константы.КадровыеПеремещенияАдресПочтыПриоритетный.Получить();
	
	Если КодКадровогоИзменения = 0 Тогда                   // 0-новый, 1-согл.розн., 2-согл.СБ, 3-прикреплен, 4-откреплен
		стрВидИзмененияКадоровойИстории = "прием";
		//ИначеЕсли (КодКадровогоИзменения = 1 ИЛИ КодКадровогоИзменения = 2) Тогда 
		//	стрВидИзмененияКадоровойИстории = "Новый сотрудник";
	ИначеЕсли КодКадровогоИзменения = 1 Тогда
		стрВидИзмененияКадоровойИстории = "согласовано розницей";		
	ИначеЕсли КодКадровогоИзменения >= 3 Тогда	
		стрВидИзмененияКадоровойИстории = "перемещение";
		//ИначеЕсли КодКадровогоИзменения = 6 Тогда   	// если нужен отдельный список : 5-уволен, 6-отпуск
		//	стрВидИзмененияКадоровойИстории = "Новый сотрудник";
	Иначе
		стрВидИзмененияКадоровойИстории = "";
	КонецЕсли;
	
	
	Если АдресПочтыПриоритет <> "" Тогда  	
		массивАдреса.Добавить(АдресПочтыПриоритет);
	Иначе
		стрИДРаздел = "Кадры-" + стрВидИзмененияКадоровойИстории;
		Раздел = Справочники.ПсевдонимыРазделы.НайтиПоНаименованию(стрИДРаздел, Истина);	
		Если ЗначениеЗаполнено(Раздел) Тогда
			МаскаИмени = "Почта";
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ 
			//ПЕРВЫЕ 1
			|	Псевдонимы.Раздел КАК Раздел,
			|	Псевдонимы.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.Псевдонимы КАК Псевдонимы
			|ГДЕ
			|	Псевдонимы.ОбъектСсылка ПОДОБНО ""%" + МаскаИмени + "%""
			|	И Псевдонимы.Раздел = &Раздел
			|";
			Запрос.УстановитьПараметр("Раздел", Раздел.Ссылка);				
			РезультатЗапроса = Запрос.Выполнить();            	
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Рез = ВыборкаДетальныеЗаписи.Значение;
				массивАдреса.Добавить(Рез);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат массивАдреса;
	
КонецФункции

Процедура КадрыПеремещениеОтправитьПисьма(ЗаписьКадровогоПеремещения, стрТема="", КодКадровогоИзменения=1) Экспорт
	
	Попытка
		
		массивАдресовПолучателей = КадрыПолучитьМассивАдресовРассылки(КодКадровогоИзменения);	
		
		Если массивАдресовПолучателей.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		массивПисем = Новый Массив;
		
		стрТемаИД = ВРЕГ(СокрЛП(стрТема));
		// 0-новый, 1-согл.розн., 2-согл.СБ, 3-прикреплен, 4-откреплен, 5-уволен, 6-отпуск
		Если КодКадровогоИзменения = 0 Тогда // "НОВЫЙ СОТРУДНИК"
			темаПисьма = "Новый сотрудник";
		ИначеЕсли КодКадровогоИзменения = 1 Тогда
			темаПисьма = "Согласовано руководителем розницы";		
		ИначеЕсли (КодКадровогоИзменения = 3 ИЛИ КодКадровогоИзменения = 4) Тогда 
			//Если стрТема <> "" Тогда
			//	темаПисьма = стрТема; 	
			//Иначе
			темаПисьма = "Кадровое перемещение"; 
			//КонецЕсли;	
			
		ИначеЕсли КодКадровогоИзменения = 5 Тогда
			темаПисьма = "Сотрудник уволен";
			
		ИначеЕсли КодКадровогоИзменения = 6 Тогда
			темаПисьма = "Сотрудник в отпуске";		
		Иначе
			Возврат;
		КонецЕсли;
		Если стрТема <> "" Тогда
			темаПисьма = стрТема; 	
		КонецЕсли;
		
		
		письмо = Новый ИнтернетПочтовоеСообщение;
		письмо.Тема = темаПисьма; 
		
		письмо.Тексты.Добавить(ЗаписьКадровогоПеремещения.Содержание);
		
		письмо.Отправитель = "retail.shop@5lb.ru";
		письмо.ИмяОтправителя = "розница";
		
		Если массивАдресовПолучателей.Количество() > 0 Тогда
			Для Каждого ТекАдрес Из массивАдресовПолучателей Цикл
				письмо.Получатели.Добавить(ТекАдрес);
			КонецЦикла;
		КонецЕсли;		
		
		массивПисем.Добавить(письмо);		
		
		
		// Отправляем письма
		Если массивПисем.Количество() > 0 Тогда
			ОтправитьЭлектронныеПисьма(массивПисем);
		КонецЕсли;	
		
	Исключение
		Сообщить("Не удалось отправить письма оповещения! Обратитесь к админстратору 1С!", СтатусСообщения.Важное);		
	КонецПопытки
	
КонецПроцедуры

Процедура КадрыИсторияПроверка() Экспорт
	
	// Магаплан № 3562
	//5. На одной обособке 1 человек не более 2-х дней.
	//Если мы с магазина перевели человека и в этом магазине остался один продавец более 2-х дней, то мы делаем автоматически информационное письмо и отправляем на почту (гл. бухгалтер, директор по рознице, отдел кадров).
	//Тема письма: (!!!) Беляево - недоукомплектованнось по штату
	//Текст письма: (дата) произошло открепление сотрудника (ФИО), пользователем (ФИО).	
	
	КодКадровогоИзменения = 3; // в расслыке все те адреса, кто включен в кадровые перемещения 
	массивАдресовПолучателей = КадрыПолучитьМассивАдресовРассылки(КодКадровогоИзменения);			
	Если массивАдресовПолучателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	массивПисем = Новый Массив;	
	
	
	СписокМагазинов = РаботаСКадрами.ПродавцовыПрикрепленныеКМагазину();
	СписокМагазинов.Колонки.Добавить("КоличествоПродавцов");
	СписокМагазинов.ЗаполнитьЗначения(1, "КоличествоПродавцов");
	СписокМагазинов.Свернуть("Магазин", "КоличествоПродавцов");
	
	ТекстПисьма	= "";
	ТекИндекс = СписокМагазинов.Количество() - 1; 
	Пока ТекИндекс >= 0 Цикл 			
		ТекСтрока = СписокМагазинов.Получить(ТекИндекс);
		ТекЗн = ТекСтрока["КоличествоПродавцов"];		
		Если НЕ (ТекЗн <= 1) Тогда 
			СписокМагазинов.Удалить(ТекИндекс); 
		КонецЕсли;   
		ТекИндекс = ТекИндекс - 1; 
	КонецЦикла; 
	
	Если СписокМагазинов.Количество() = 0 Тогда
		Сообщить("Нет магазинов по заданном условию!");
	Иначе
		Для Каждого ТекСтр Из СписокМагазинов Цикл
			ТекстПисьма = ТекстПисьма + Строка(ТекСтр.Магазин) + " " + Строка(ТекСтр.КоличествоПродавцов) + Символы.ПС;
		КонецЦикла;
	КонецЕсли; 
	
	
	Если массивАдресовПолучателей.Количество() > 0 Тогда
		
		темаПисьма = "(!!!) Недоукомплектованнось магазинов по штату на " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");	
		
		письмо = Новый ИнтернетПочтовоеСообщение;
		письмо.Тема = темаПисьма; 			
		
		письмо.Тексты.Добавить(ТекстПисьма);
		
		письмо.Отправитель = "retail.shop@5lb.ru";
		письмо.ИмяОтправителя = "розница";	
		
		Для Каждого ТекАдрес Из массивАдресовПолучателей Цикл
			письмо.Получатели.Добавить(ТекАдрес);
		КонецЦикла;
		
		массивПисем.Добавить(письмо);
		
		// Отправляем письма
		ОтправитьЭлектронныеПисьма(массивПисем);
		
	КонецЕсли;	
	
КонецПроцедуры



//////////////////////////////////////////////////////
// ОТПРАВКА ЭЛЕКТРОННЫХ ПИСЕМ

Процедура ОтправитьЭлектронныеПисьма(МассивПисем) Экспорт
	
	// Подключаемся к почте
	Профиль = Новый ИнтернетПочтовыйПрофиль;
    //{+НАЧАЛО+Редактирования} Автор: Тасмаджиев 23/05/2018//=============================================================================================	
	
	// Женя 18.07.2018
	// ((
	Профиль.АдресСервераSMTP = "smtp.gmail.com"; // Изменила: "mail.ukitgroup.ru";
	Профиль.ПортSMTP = 465; //587;	// Женя 08.08.2018 
	Профиль.ПользовательSMTP = "1cinfohelp5lb@gmail.com"; // Изменила: "1cinfo@ukitgroup.ru"; //НМА 16.01.18 изменить настройки почтового ящика. Старый ящик:"1cinfo@5lb.ru". Задача от Ивана Иванова
	Профиль.ПарольSMTP = "KabfecyuicKogd4"; // Изменила: "tsl5nHVL";
	
	// )) 18.07.2018 Женя
	
	//{+НАЧАЛО+Редактирования} Автор: Тасмаджиев 23/05/2018//=============================================================================================
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	
	ИнтернетПочта  = Новый ИнтернетПочта; 
	
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	// Отправляем письма
	Для Каждого письмо Из МассивПисем Цикл
		Попытка
			ИнтернетПочта.Послать(письмо);
		Исключение
			Сообщить(ОписаниеОшибки())
		КонецПопытки; 
	КонецЦикла;
	
	// Отключаемся от почты
	Попытка
		ИнтернетПочта.Отключиться();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция CформироватьЭлектронныеПисьма(массивАдресовПолучателей, ИмяОтправителя="5LB", темаПисьма, Содержание, Вложения=Неопределено) Экспорт
	
	массивПисем = Новый Массив;
	
	письмо = Новый ИнтернетПочтовоеСообщение;	
	письмо.Отправитель = "retail.shop@5lb.ru";
	письмо.ИмяОтправителя = ИмяОтправителя;  	
	письмо.Тема = темаПисьма; 
	письмо.Тексты.Добавить(Содержание);		 
	Если ЗначениеЗаполнено(Вложения) Тогда
		//письмо.Вложения.Добавить();
		письмо.Вложения.Добавить(Вложения);
	КонецЕсли;
	
	Если массивАдресовПолучателей.Количество() > 0 Тогда
		Для Каждого ТекАдрес Из массивАдресовПолучателей Цикл
			письмо.Получатели.Добавить(ТекАдрес);
		КонецЦикла;
	КонецЕсли;		
	
	массивПисем.Добавить(письмо);	
	
	//// Отправляем письма
	//Если массивПисем.Количество() > 0 Тогда
	//	ОтправитьЭлектронныеПисьма(массивПисем);
	//КонецЕсли;
	
	
	Возврат массивПисем;
	
КонецФункции

Функция ПолучитьАдресаПочты(ПоРазделу=Неопределено) Экспорт
	
	РезМассив = Новый Массив;
	РезМассив.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	//ПЕРВЫЕ 1
	|	Псевдонимы.Раздел КАК Раздел,
	|	Псевдонимы.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.Псевдонимы КАК Псевдонимы
	|ГДЕ
	|	Псевдонимы.ОбъектСсылка ПОДОБНО ""Почта%""
	|";			
	Если ПоРазделу <> Неопределено Тогда
		Если ТипЗнч(ПоРазделу) = Тип("Строка") Тогда
			Раздел = Справочники.ПсевдонимыРазделы.НайтиПоНаименованию(ПоРазделу, Истина);	
		Иначе
			Раздел = ПоРазделу;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Раздел) Тогда
			Возврат РезМассив;	
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|	И Псевдонимы.Раздел = &Раздел
			|";
			Запрос.УстановитьПараметр("Раздел", Раздел.Ссылка);				
		КонецЕсли;			
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();            	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез = ВыборкаДетальныеЗаписи.Значение;
		РезМассив.Добавить(Рез);
	КонецЦикла;
	
	Возврат РезМассив;	
	
КонецФункции


Процедура ОтправитьПисьмаСПротоколом(ИмяЛогФайла)
	
	массивПисем = Новый Массив;
	
	//КаталогФайловНаДиске = КаталогВременныхФайлов();  	
	//ИмяЛогФайла = КаталогФайловНаДиске + "\" + ИмяФайлаПротокола;
	
	стрТема = "протокол загрузки отчетов инспекции проверки торговых точек";
	стрИДРаздел = "Кадры-инспекция";	
	массивАдреса = ОбщегоНазначения5LB.ПолучитьПсевдонимыПоМаске("Почта", стрИДРаздел);
	Если массивАдреса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	письмо = Новый ИнтернетПочтовоеСообщение;
	письмо.Тема = стрТема; 
	
	письмо.Тексты.Добавить(стрТема);
	письмо.Отправитель = "retail.shop@5lb.ru";
	письмо.ИмяОтправителя = "розница";
	
	письмо.Вложения.Добавить(ИмяЛогФайла);
	
	Если массивАдреса.Количество() > 0 Тогда
		Для Каждого ТекАдрес Из массивАдреса Цикл
			письмо.Получатели.Добавить(ТекАдрес);
		КонецЦикла;
	КонецЕсли;	
	
	массивПисем.Добавить(письмо);				
	
	Если массивПисем.Количество() > 0 Тогда
		РаботаСРегламентныеЗаданиями.ОтправитьЭлектронныеПисьма(массивПисем);
	КонецЕсли;		
	
	
КонецПроцедуры




///////////////////////////////////////////////////////
// ШТРАФЫ И ПРЕМИИ

Процедура ЗаписатьСтрокуВЛог(СтрокаЗапись, ЗаголовокСобытияВЖурнале="", ЭтоОшибка=Ложь) Экспорт
	
	КаталогФайловНаДиске = КаталогВременныхФайлов();       	
	ИмяЛогФайла = КаталогФайловНаДиске + "\protocol.log";
	
	ТекстДок = Новый ТекстовыйДокумент();	
	ТекстДок.Прочитать(ИмяЛогФайла); 	   
	ТекстДок.ДобавитьСтроку(СтрокаЗапись);	
	ТекстДок.Записать(ИмяЛогФайла);  	
	
	Если ЗаголовокСобытияВЖурнале <> "" Тогда
		ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация) , , , СтрокаЗапись);
	КонецЕсли;
	
КонецПроцедуры


// Штрафы

Процедура ЗагрузитьДанныеСервисаПроверкиТочек() Экспорт    		
	
	//Если ЭтотОбъект.ТекДата = Дата(1, 1, 1) Тогда
	//	ЭтотОбъект.ТекДата = ТекущаяДата();
	//КонецЕсли;
	стрЗаголовок = "Регл.задание (автозагрузка) штрафов по результатам инспеции";	
	стрИДРаздел = "Кадры-инспекция";                   
	КаталогФайловНаДиске = КаталогВременныхФайлов();
	//+ "web";	
	ИмяФайлаДанных = КаталогФайловНаДиске + "\control.xml";	      	
	ИмяЛогФайла = КаталогФайловНаДиске + "\protocol.log";
	
	УдалитьФайлы(КаталогФайловНаДиске, "control.xml"); 	
	УдалитьФайлы(КаталогФайловНаДиске, "protocol.log"); 
	
	ВыбКаталог = Новый Файл(КаталогФайловНаДиске);
	Если НЕ ВыбКаталог.Существует() Тогда
		СоздатьКаталог(КаталогФайловНаДиске);
	КонецЕсли;
	
	
	ВыбЛогФайл = Новый Файл(ИмяЛогФайла);
	Если НЕ ВыбЛогФайл.Существует() Тогда
		ТекстДок = Новый ТекстовыйДокумент();
		ТекстДок.Записать(ИмяЛогФайла);
	КонецЕсли;
	
	ЗаписатьСтрокуВЛог(стрЗаголовок);		// запись только в лог!
	
	СтрДт = Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'");	
	ЗаписатьСтрокуВЛог("Начало : " + СтрДт, , стрЗаголовок);      // запись только в лог и журнал регистрации - заголовок <стрЗаголовок>
	
	// 1-й вариант - если определена WS-ссылка 
	//Сервис = WSСсылки.TEST.СоздатьWSПрокси(ВыбURIПространстваИменСервиса, 
	//	ВыбИмяСервиса,
	//    ВыбИмяТочкиПодключения
	//	);	
	//ПроксиСервер.Пользователь	= ВыбЛогин;
	//ПроксиСервер.Пароль       	= ВыбПароль;
	
	
	// 2-й вариант - созадние программно (на лету)
	
	Попытка
		
		ВыбПутьПубликацииСервиса 		= "http://opros.5lb.ru/soap.cgi?wsdl";     
		ВыбURIПространстваИменСервиса 	= "http://opros.5lb.ru/";
		ВыбИмяСервиса 					= "5lb";
		ВыбИмяТочкиПодключения 			= "5lbPort"; // "5lbSoap";
		ВыбЛогин                        = "stat";
		ВыбПароль                       = "stat";	
		
		Определение = Новый WSОпределения(ВыбПутьПубликацииСервиса, ВыбЛогин, ВыбПароль);
		Сервис = Новый WSПрокси(Определение, ВыбURIПространстваИменСервиса, ВыбИмяСервиса, ВыбИмяТочкиПодключения);	
		// без этого - не проходит авторизация!
		Сервис.Пользователь		= ВыбЛогин;
		Сервис.Пароль       	= ВыбПароль;
		
		ЗаписатьСтрокуВЛог("Выполнено подключение к веб-сервису " + ВыбПутьПубликацииСервиса, стрЗаголовок); 		
	Исключение
		ЗаписатьСтрокуВЛог("Ошибка! Не удалось подключиться к веб-сервису " + ВыбПутьПубликацииСервиса, стрЗаголовок, Истина);
		Возврат;
	КонецПопытки; 
	
	
	
	
	ДатаПоследнейЗагрузки = ПолучитьПоследнююДатуАвтозагрузки() + 1;	
	Если ДатаПоследнейЗагрузки = Дата(1, 1, 1) Тогда
		ДатаПоследнейЗагрузки = НачалоГода(ТекущаяДата());
	КонецЕсли;
	
	ДатаПо = КонецДня(ТекущаяДата());
	
	// c 1 по 7 -го числа (начало месяца) - могут быть расчитаны неверно штрафы в связи с неполной картиной работы по сменам
	// поэтому - перезаписывать данные (и перерасчитывать их)
	Если День(ТекущаяДата()) <= 7 Тогда
		ДатаС = НачалоМесяца(ТекущаяДата());
	Иначе
		ДатаС = НачалоДня(ДатаПо);
	КонецЕсли;		
	
	ДатаС = Мин(ДатаС, ДатаПоследнейЗагрузки);
	
	
	
	
	ЗаписатьСтрокуВЛог("Обрабатываются данные за период с " +
	Формат(ДатаС, "ДФ='dd.MM.yyyy HH:mm:ss'") + " по " + 
	Формат(ДатаПо, "ДФ='dd.MM.yyyy HH:mm:ss'") +
	?(ДатаС = ДатаПоследнейЗагрузки, " (с даты последней загрузки)", "")
	);
	ЗаписатьСтрокуВЛог("(Все инспекции, после " + Формат(ДатаПо, "ДФ='dd.MM.yyyy HH:mm:ss'") + " не обрабатываются)");
	
	//Рез = ПроксиСервер.Test;
	// если стандартный "string" из пространства string (http://www.w3.org/2001/XMLSchema) - то можно не определять...
	// иначе - создать определение типа
	ТипWSПараметраВх 	= Сервис.ФабрикаXDTO.Пакеты.Получить(ВыбURIПространстваИменСервиса).Получить("GetReport");
	WSПараметрВх 		= Сервис.ФабрикаXDTO.Создать(ТипWSПараметраВх); 
	
	
	//WSПараметр.input	= "Входящий параметр - произвольная строка"; 
	Если WSПараметрВх = Неопределено Тогда
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = "Не задан входящий параметр!";
		//Сообщение.Сообщить(); 
		ЗаписатьСтрокуВЛог("Ошибка! Не удалось установить параметры для получения данных с сайта!", стрЗаголовок, Истина);
		Возврат;
	Иначе 	
		
		//WSПараметрВх.input1 = '2016-08-01';
		//WSПараметрВх.input1 = НачДата;
		WSПараметрВх.input1 = Формат(ДатаС, "ДФ=yyyy-MM-dd");
		ЗаписатьСтрокуВЛог("Установлены входящие параметры для получения данных : " + Строка(WSПараметрВх.input1), стрЗаголовок);
		
	КонецЕсли;
	
	
	
	//УдалитьФайлы("d:\web\", "*.xml"); 
	//ИмяФайла = "d:\web\test.xml";
	
	Попытка
		
		РезОтвет = Сервис.GetReport(WSПараметрВх);
		
		
		ДвоичныеДанные = РезОтвет.result.data; //РезОтвет.result.XML;
		ДвоичныеДанные.Записать(ИмяФайлаДанных);
		
		ВыбФайл = Новый Файл(ИмяФайлаДанных);
		Если Не ВыбФайл.Существует() Тогда
			ЗаписатьСтрокуВЛог("Ошибка! Не удалось получить файл данных для загрузки!", стрЗаголовок, Истина);
			ЗаписатьСтрокуВЛог("(Данные получены, но файл " + ИмяФайлаДанных + " - не обнаружен!)");
		Иначе
			ЗаписатьСтрокуВЛог("Получен файл данных для загрузки", стрЗаголовок);
			тзДанные = ПрочитатьДанныеИнспекцииИзФайла(ИмяФайлаДанных, стрЗаголовок);							
		КонецЕсли ;
		
	Исключение
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = "" + ОписаниеОшибки();
		//Сообщение.Сообщить();		
		ЗаписатьСтрокуВЛог("Ошибка! Не удалось получить файл данных для загрузки!", стрЗаголовок, Истина);
		ЗаписатьСтрокуВЛог(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	
	ЗаписатьСтрокуВЛог("Анализ и обработка полученных данных", стрЗаголовок);
	
	бОшибка = Ложь;
	Если тзДанные = Неопределено Тогда
		бОшибка = Истина;
	ИначеЕсли тзДанные.Количество() = 0 Тогда
		бОшибка = Истина;	
	КонецЕсли;
	
	Если бОшибка Тогда
		ЗаписатьСтрокуВЛог("Нет данных для загрузки!", стрЗаголовок);
		Возврат;
	КонецЕсли;	
	
	
	
	ТекИДМагазина = "";
	ТекМагазин = Справочники.Контрагенты.ПустаяСсылка();
	ТекНарушение = Справочники.ВидыПремийШтрафов.ПустаяСсылка();	
	ПослНарушение = Справочники.ВидыПремийШтрафов.ПустаяСсылка();	
	
	
	
	
	// удаление с датой после....
	ТекИндекс = тзДанные.Количество() - 1; 
	Пока ТекИндекс >= 0 Цикл 			
		
		ТекСтрока = тзДанные.Получить(ТекИндекс);
		ДатаИнспекции	= ОбщегоНазначения5LB.СтрокуВДату(ТекСтрока.ДатаИнспекции);		
		
		Если ДатаИнспекции >= ДатаПо Тогда
			тзДанные.Удалить(ТекИндекс); 
		КонецЕсли;
		
		ТекИндекс = ТекИндекс - 1; 
		
	КонецЦикла; 
	
	тзМагазины = тзДанные.Скопировать();
	тзМагазины.Свернуть("КодМагазина");
	ПроверкаНаДату = ДатаПо; 	// КонецМесяца(НачалоМесяца(ТекущаяДата()) - 24 * 60 * 60);
	
	Для Каждого ТекМаг Из тзМагазины Цикл
		ТекМагазин = ОбщегоНазначения5LB.ПолучитьПсевдоним(ТекМаг.КодМагазина, стрИДРаздел);
		Если НЕ ЗначениеЗаполнено(ТекМагазин) Тогда
			ЗаписатьСтрокуВЛог("Ошибка! Не найден магазин (контрагент) по коду """ + ТекМаг.КодМагазина + """!", стрЗаголовок, Истина);				
		Иначе				
			//ДатаИнспекции	= СтрокуВДату(ТекМаг.ДатаИнспекции);		
			//// все инспекции после окончания месяца - игнорируются...
			//Если ДатаИнспекции >= ДатаПо Тогда
			//	Продолжить;
			//КонецЕсли;			
			Продавцы = СписокРаботающихПродавцов(ТекМагазин, ПроверкаНаДату);
			Если Продавцы.Количество() = 0 Тогда
				ЗаписатьСтрокуВЛог("Ошибка! Не зарегистрировано ни одного работающего продавца в магаизне """ + 
				Строка(ТекМагазин) + """ за период " + Формат(ПроверкаНаДату, "ДФ='MMMM yyyy'") + "!");	
				//	Продолжить;			
			КонецЕсли; 			
		КонецЕсли; 		
	КонецЦикла;	
	
	Для Каждого ТекСтр Из тзДанные Цикл
		
		// поиск магазина по идентификатору
		Если ТекИДМагазина <> ТекСтр.КодМагазина Тогда
			Если ТекИДМагазина <> "" Тогда
				// 				
			КонецЕсли;		
			ТекИДМагазина = ТекСтр.КодМагазина;
			ТекМагазин = ОбщегоНазначения5LB.ПолучитьПсевдоним(ТекИДМагазина, стрИДРаздел);
			Если НЕ ЗначениеЗаполнено(ТекМагазин) Тогда
				//	ЗаписатьСтрокуВЛог("Ошибка! Не найден магазин (контрагент) по коду """ + ТекИДМагазина + """!");				
				Продолжить;
			КонецЕсли;				
		КонецЕсли;
		
		//  ДатаИнспекции	= СтрокуВДату(ТекСтр.ДатаИнспекции);		
		//// все инспекции после окончания месяца - игнорируются...
		//Если ДатаИнспекции >= ДатаПо Тогда
		//	Продолжить;
		//КонецЕсли;
		
		// если магазин найден 
		Если ЗначениеЗаполнено(ТекМагазин) Тогда 	
			
			стрШтраф = СокрЛП(ТекСтр.Содержание);			
			ДатаИнспекции	= ОбщегоНазначения5LB.СтрокуВДату(ТекСтр.ДатаИнспекции);			
			
			Продавцы = СписокРаботающихПродавцов(ТекМагазин, ДатаИнспекции);
			Если Продавцы.Количество() = 0 Тогда
				//	ЗаписатьСтрокуВЛог("Ошибка! Не зарегистрировано ни одного работающего продавца в магаизне """ + 
				//		Строка(ТекМагазин) + """ за период " + Формат(ДатаИнспекции, "ДФ='MMMM yyyy'") + "!");	
				Продолжить;			
			КонецЕсли; 
			
			ТекНарушение = ОбщегоНазначения5LB.ПолучитьПсевдоним(стрШтраф, стрИДРаздел);                 			
			// найти нарушение в справочнике по его строковому значению - если нет в псевдонимах, то
			Если НЕ ЗначениеЗаполнено(ТекНарушение) Тогда
				//бНовый = Ложь;
				// найти в спрвочнике
				НайденШтраф = Справочники.ВидыПремийШтрафов.НайтиПоНаименованию(стрШтраф, Истина);
				Если НЕ ЗначениеЗаполнено(НайденШтраф) Тогда
					// если не найден - создать
					Попытка
						УстановитьПривилегированныйРежим(Истина);
						НовыйШтраф = Справочники.ВидыПремийШтрафов.СоздатьЭлемент();
						НовыйШтраф.Наименование = стрШтраф;
						НовыйШтраф.Родитель = Справочники.ВидыПремийШтрафов.Удержания;
						НовыйШтраф.Записать();
						НайденШтраф = НовыйШтраф.Ссылка;									
						УстановитьПривилегированныйРежим(Ложь);					
					Исключение
						ЗаписатьСтрокуВЛог("Ошибка! Не обнаружено соответствие """ + ТекСтр.Содержание + """! - не удалось создать новый штраф!");	
					КонецПопытки;  		
				КонецЕсли;
				// если есть ссылка - то попытка записать псеводним - "связать" строковое значение и ссылку
				Если ЗначениеЗаполнено(НайденШтраф) Тогда	
					ЗнП = ОбщегоНазначения5LB.ЗаписатьПсевдоним(стрШтраф,  стрИДРаздел, НайденШтраф);										
					Если ЗначениеЗаполнено(ЗнП) Тогда
						ТекНарушение = ЗнП;
						ЗаписатьСтрокуВЛог("Не обнаружено соответствие """ + стрШтраф + """! - создан новый штраф.");	
					Иначе						
						ЗаписатьСтрокуВЛог("Не удалось записать новый псевдоним """ + стрШтраф + """!");		
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ТекНарушение) Тогда	// если ссылка на нарушение есть 							
				
				КодМагазина 		= ТекСтр.КодМагазина;
				ИДИнспекции         = ТекСтр.ИДИнспекции;
				СтрокаЗн			= ТекСтр.Содержание;
				ОтветЗн				= ТекСтр.ЕстьНарушение;				
				
				стрИнф = Строка(ТекМагазин) + " (" + КодМагазина + ") | " + Формат(ДатаИнспекции, "ДФ='dd.MM.yyyy HH:mm:ss'") +
				" | " + ИДИнспекции + " | """ + Строка(ТекНарушение) + """";
				
				Если НЕ ОтветЗн Тогда   // нет нарушения
					ЗаписатьСтрокуВЛог(стрИнф + " - нет нарушения.");
				Иначе
					//Сообщить(стрИнф);
					//Сообщить(Строка(ТекМагазин) + " | " + КодМагазина + " | " + ИДИнспекции + " | " + ДатаИнспекции + " | " + СтрокаЗн + " | " + ОтветЗн);					
					//
					СтруктураЗапись = Новый Структура();
					СтруктураЗапись.Вставить("Магазин", 		ТекМагазин);
					СтруктураЗапись.Вставить("Нарушение", 		ТекНарушение);
					СтруктураЗапись.Вставить("ДатаСобытия", 	ДатаИнспекции);
					СтруктураЗапись.Вставить("Идентификатор", 	ИДИнспекции);
					
					ДобавитьПериодСек = 0;
					Если ТекНарушение = ПослНарушение Тогда
						ДобавитьПериодСек = 1;
					КонецЕсли;
					ПослНарушение = ТекНарушение;
					
					//РезЗаписи = ЗаписатьНарушение(СтруктураЗапись, Продавцы, ДобавитьПериодСек);
					РезЗаписи = ЗаписатьНарушение(СтруктураЗапись, ДобавитьПериодСек);
					
					Если РезЗаписи <> Неопределено Тогда
						Если РезЗаписи = 0 Тогда
							ЗаписатьСтрокуВЛог(стрИнф + " - нарушение зафиксировано, но тариф (штрафа) равен 0!");
						ИначеЕсли РезЗаписи = -1 Тогда
							ЗаписатьСтрокуВЛог(стрИнф + " - нарушение зафиксировано, но не найден работающий продавец в магазине """ + 
							Строка(ТекМагазин) + """ на " + Формат(ДатаИнспекции, "ДФ='dd.MM.yy HH:mm'") + "!");								
						Иначе
							ЗаписатьСтрокуВЛог(стрИнф + " - нарушение зафиксировано +");	
						КонецЕсли;	
					Иначе
						ЗаписатьСтрокуВЛог("Ошибка! " + стрИнф + " - Не удалось записать нарушение!");	
					КонецЕсли;
				КонецЕсли;
				
				
			КонецЕсли;  // если ссылка на нарушение есть 
			
		КонецЕсли;  // если магазин найден 
		
	КонецЦикла;
	
	
	массивАдреса = ОбщегоНазначения5LB.ПолучитьПсевдонимыПоМаске("Почта", стрИДРаздел);
	Если массивАдреса.Количество() > 0 Тогда
		
		стрСписокАдреса = "";
		Для Каждого ТекАдрес Из массивАдреса Цикл
			стрСписокАдреса = стрСписокАдреса + ТекАдрес + ";";
		КонецЦикла;
		ЗаписатьСтрокуВЛог("");
		Если стрСписокАдреса = "" Тогда
			ЗаписатьСтрокуВЛог("Нет адресов для отправки протокола на почту!", стрЗаголовок);		
		Иначе
			ЗаписатьСтрокуВЛог("Попытка отправить протокол на почту " + стрСписокАдреса, стрЗаголовок);		
			ОтправитьПисьмаСПротоколом(ИмяЛогФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПрочитатьДанныеИнспекцииИзФайла(ИмяФайла, стрЗаголовок) 
	
	тзДанные = Новый ТаблицаЗначений;
	тзДанные.Колонки.Очистить();
	
	
	Чтение = Новый ЧтениеXML;
	Попытка Чтение.ОткрытьФайл(ИмяФайла);
		ЗаписатьСтрокуВЛог("Открыт XML-файл для чтения " + ИмяФайла, стрЗаголовок);    
	Исключение  
		ЗаписатьСтрокуВЛог("Ошибка! Не удалось прочитать XML-файл " + ИмяФайла + " !", стрЗаголовок, Истина);
		Возврат тзДанные;
	КонецПопытки;
	
	
	
	М = Новый Массив;
	М.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(200);		
	ОписаниеТиповС200 = Новый ОписаниеТипов(М, КС);	
	
	М = Новый Массив;
	М.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(20);		
	ОписаниеТиповС20 = Новый ОписаниеТипов(М, КС);	
	
	тзДанные.Колонки.Добавить("КодМагазина", 		ОписаниеТиповС20);
	тзДанные.Колонки.Добавить("ИДИнспекции", 		ОписаниеТиповС20);	
	тзДанные.Колонки.Добавить("ДатаИнспекции", 		ОписаниеТиповС20);
	тзДанные.Колонки.Добавить("Содержание", 		ОписаниеТиповС200);
	тзДанные.Колонки.Добавить("ЕстьНарушение", 		Новый ОписаниеТипов("Булево"));
	
	
	//	<report datetime="2016-08-08 10:29:50">
	//- <shops>
	//- <shop code="10816" number="000052215">
	//  <latitude>37.65913827299205</latitude> 
	//  <longitude>55.75680884989073</longitude> 
	//  <name uid="134158">Атриум Курская</name> 
	//  <auditor uid="71804">Сергей Габитов</auditor> 
	//  <total>19</total> 
	//  <offense>4</offense> 
	//  <created>2016-08-02 12:09:20</created> 
	//- <items>
	//+ <item>
	//  <name>Отсутствие продавца на рабочем месте на момент прихода проверяющего</name> 
	//  <answer>Да</answer> 
	//  <offense>YES</offense> 
	//- <photos>
	//  <photo width="3264" height="2448">http://opros.5lb.ru/i/file/image-YhLy..jpeg</photo> 
	//  </photos>
	//  </item>
	//- <item>
	//  <name>Табличка на двери 'ПЕРЕРЫВ ДО…'</name> 
	//  <answer>Закрыт-соотв.</answer> 
	//  <offense>NO</offense> 
	//- <photos>
	//  <photo width="3264" height="2448">http://opros.5lb.ru/i/file/image-2EIn..jpeg</photo> 
	//  </photos>
	//  </item>
	//- <item>
	//  <name>Сделать общие фотографии магазина</name> 
	//  <answer>Сделать фотографии</answer> 
	//  <offense>NO</offense> 
	//- <photos>
	//  <photo width="2048" height="2048">http://opros.5lb.ru/i/file/image-pLXk..jpeg</photo> 
	//  </photos>
	//  </item>
	
	// для отслеживания текущего положения - Статус : 
	Статус = 0;					
	// 0 - нет данных, 1-отчет открыт, 10 - магазин читается (шапка), 
	// 11 - магазин ИД, 12 - магазин ИД 2, 13 - магазин всего вопросов, 14 - магазин всего 'YES' ответов, 15 - магазин дата
	// 20 - элементы читаются (т.ч.), 21 - читается вопрос, 22 - ответ, 24 - получен ответ на нарушение
	
	// необходимые переменные
	ДатаИнспекции = "";
	ИДИнспекции = "";
	КодМагазина = "";
	
	ОтветЗн = "";
	СтрокаЗн = "";
	
	// счетчики
	КолЗаписейКонтроль = 0;
	КолНарушенийКонтроль = 0;
	СчТекИнспекция = 0;
	СчТекПункт = 0;
	
	
	Пока Чтение.Прочитать() Цикл
		
		ДатаОтчета = "";
		
		// После чтения проверить тип узла - начало
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Чтение.Имя = "report" Тогда
				ДатаОтчета = Чтение.ПолучитьАтрибут(0);      // "2016-08-05 15:13:25"
				Статус = 1;
				
			ИначеЕсли Чтение.Имя = "shop" Тогда					
				КодМагазина = Чтение.ПолучитьАтрибут(0);     // "10816"   	(code)
				КодМагазина1 = Чтение.ПолучитьАтрибут(1);   // "000052215"  (number)
				СчТекПункт = 0;
				Статус = 10;					
				
			ИначеЕсли Чтение.Имя = "total" Тогда
				Если ((10 <= Статус) И (Статус < 20)) Тогда  
					Статус = 13;
				ИначеЕсли Статус >= 20 Тогда
					Статус = 0;
				КонецЕсли;  
				
			ИначеЕсли Чтение.Имя = "offense" Тогда
				Если ((10 <= Статус) И (Статус < 20)) Тогда  
					Статус = 14;
				ИначеЕсли Статус >= 20 Тогда
					Статус = 24;
				КонецЕсли;   
				
			ИначеЕсли Чтение.Имя = "photos" Тогда
				Статус = 29;				
				
			ИначеЕсли Чтение.Имя = "answer" Тогда
				Если ((10 <= Статус) И (Статус < 20)) Тогда  	// магазин
					
				Иначе
					Статус = 22;							
				КонецЕсли;
				
			ИначеЕсли Чтение.Имя = "created" Тогда
				Если Статус >= 10 Тогда
					Статус = 15;
				КонецЕсли;
				
				
			ИначеЕсли Чтение.Имя = "item" Тогда
				Если Статус >= 10 Тогда
					Статус = 20;
					СчТекПункт = СчТекПункт + 1;
				КонецЕсли;
				
			ИначеЕсли Чтение.Имя = "name" Тогда
				Если ((10 <= Статус) И (Статус < 20)) Тогда  	// магазин
					ИДИнспекции = Чтение.ПолучитьАтрибут(0);			// "134158"
					//Сообщить(КодМагазина + " | " + ИДИнспекции + " | " + ДатаИнспекции);
					Статус = 11;	
				Иначе
					Статус = 21;							
				КонецЕсли;
				
				
			КонецЕсли;
			
			//КонецЕсли;    // После чтения проверить тип узла - начало
			
			// текст
		ИначеЕсли
			//Если 
			Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			//
			//Если бФлагДатаИнспекции Тогда 						
			//	ДатаИнспекции = Чтение.Значение;     
			//	бФлагДатаИнспекции = Ложь;
			//КонецЕсли;
			
			
			Если Статус = 13 Тогда 		   			  // всего пунктов в данной инспекции - для контроля!
				//ДатаИнспекции = Чтение.Значение;  
				Попытка
					КолЗаписейКонтроль = Число(Чтение.Значение);
				Исключение						
					КолЗаписейКонтроль = 0;
				КонецПопытки;
				
			ИначеЕсли Статус = 14 Тогда 		   	  // всего пунктов нарушений в данной инспекции
				//ДатаИнспекции = Чтение.Значение;  
				Попытка
					КолНарушенийКонтроль = Число(Чтение.Значение);
				Исключение						
					КолНарушенийКонтроль = 0;
				КонецПопытки;
				
			ИначеЕсли Статус = 15 Тогда 		   	  // дата тек.инспекции
				ДатаИнспекции = Чтение.Значение;  
				
			ИначеЕсли Статус = 21 Тогда 						
				//Сообщить(Чтение.Значение);          // пукты нарушений
				СтрокаЗн = Чтение.Значение;
				
			ИначеЕсли Статус = 22 Тогда 			// Уточненеи для некоторых вопросов ("1-10" или "")
				
				стрЗнУточн = Чтение.Значение;
				Если (стрЗнУточн = "1-10" ИЛИ стрЗнУточн = "> 10") Тогда
				Иначе
					стрЗнУточн = "";
				КонецЕсли; 					
				Если СтрокаЗн = "Ценники на товаре" Тогда
					СтрокаЗн = СтрокаЗн + " " + стрЗнУточн;
				ИначеЕсли СтрокаЗн = "Русификация на товаре" Тогда
					СтрокаЗн = СтрокаЗн + " " + стрЗнУточн; 
				КонецЕсли;   					
				
			ИначеЕсли Статус = 24 Тогда 						
				//Сообщить(Чтение.Значение);          // факт нарушений - ответ
				
				ОтветЗн = Чтение.Значение;
				
				//СчТекПункт = СчТекПункт + 1;
				//					Сообщить(КодМагазина + " | " + ИДИнспекции + " | " + ДатаИнспекции + " | " + СтрокаЗн + " | " + ОтветЗн);					
				СоздатьЗаписьТаблицыДанных(тзДанные, КодМагазина, ИДИнспекции, ДатаИнспекции, СтрокаЗн, ОтветЗн);
				
				ОтветЗн = "";
				СтрокаЗн = "";
				
				//Иначе
				//	ОтветЗн = "";
				//	СтрокаЗн = "";					
			КонецЕсли;   
			
			// конец
			//КонецЕсли;			
			//Если
			
		ИначеЕсли
			//Если 
			Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
			//Сообщить("/" + Чтение.Имя);
			
			Если Чтение.Имя = "shop" Тогда					
				
				// проверка - все ли прочитаны?
				стрСообщДет = "";
				Если КолЗаписейКонтроль = 0 Тогда	
					стрСообщДет = "Ошибка! Нет записей (offense)!";
				ИначеЕсли КолЗаписейКонтроль <> СчТекПункт Тогда
					стрСообщДет = "Ошибка! Кол-во записей (offense) должно быть " + Формат(КолЗаписейКонтроль, "ЧЦ=12; ЧДЦ=; ЧГ=0") + ", прочитано " + Формат(СчТекПункт, "ЧЦ=12; ЧДЦ=; ЧГ=0") + "!";
				Иначе
					стрСообщДет = "Все записи успешно прочитаны.";
				КонецЕсли; 
				стрИнф =  "код магазина " + КодМагазина + ", код проверки " + ИДИнспекции + ", дата проверки " + ДатаИнспекции;						
				ЗаписатьСтрокуВЛог(стрИнф);
				ЗаписатьСтрокуВЛог(стрСообщДет);
				
				//	Сообщить("КонецШопа ! " +КодМагазина); 
				КодМагазина = "";     
				КодМагазина1 = ""; 
				Статус = 1;
				СчТекПункт = 0;							
				
			Иначе
				//бФлагАттрибут = Ложь;
				//бФлагЭлемент = Ложь;
				//бФлагОтвет = Ложь;
			КонецЕсли;	
			
			//ОтветЗн = "";
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	//	Файл.ЗакончитьЧтение(); 
	Чтение.Закрыть();
	ЗаписатьСтрокуВЛог("Закрыт XML-файл для чтения", стрЗаголовок);    
	ЗаписатьСтрокуВЛог("");
	
	//	Если тзДанные.Количество() > 0 Тогда
	//		
	//		Для Каждого ТекСтр Из тзДанные Цикл
	//			
	//			КодМагазина 		= ТекСтр.КодМагазина;
	//			ИДИнспекции         = ТекСтр.ИДИнспекции;
	//			ДатаИнспекции		= ТекСтр.ДатаИнспекции;
	//			СтрокаЗн			= ТекСтр.Содержание;
	//			ОтветЗн				= ТекСтр.ЕстьНарушение;				
	//		
	//			Сообщить(КодМагазина + " | " + ИДИнспекции + " | " + ДатаИнспекции + " | " + СтрокаЗн + " | " + ОтветЗн);		
	//			
	//		КонецЦикла;
	//
	//	КонецЕсли;	
	
	Возврат тзДанные;
	
КонецФункции

Процедура СоздатьЗаписьТаблицыДанных(тзДанные, КодМагазина, ИДИнспекции, ДатаИнспекции, СтрокаЗн, ОтветЗн);
	
	НоваяСтрока 					= тзДанные.Добавить();
	НоваяСтрока.КодМагазина 		= КодМагазина;
	НоваяСтрока.ИДИнспекции 		= ИДИнспекции;
	НоваяСтрока.ДатаИнспекции 		= ДатаИнспекции;
	НоваяСтрока.Содержание 			= СтрокаЗн;
	НоваяСтрока.ЕстьНарушение 		= ?(ВРег(ОтветЗн) = "YES", Истина, Ложь);
	
КонецПроцедуры	


Функция ЗаписатьНарушение(СтруктураЗапись, ДобавитьКПериоду)
	
	Рез = Неопределено;	
	Если НЕ ЗначениеЗаполнено(СтруктураЗапись.Нарушение) Тогда
		Возврат Рез;
	КонецЕсли;
	
	ДтПериод = СтруктураЗапись.ДатаСобытия + ДобавитьКПериоду;
	
	НаборЗаписей = РегистрыСведений.ПремииШтрафыСотрудников.СоздатьНаборЗаписей();            
	НаборЗаписей.Отбор.Период.Установить(ДтПериод);
	НаборЗаписей.Отбор.ПремияШтраф.Установить(СтруктураЗапись.Нарушение); 
	НаборЗаписей.Отбор.Магазин.Установить(СтруктураЗапись.Магазин); 
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	СуммаНарушения = 0;
	
	Если СтруктураЗапись.Нарушение.АвтоЗагрузкаРаспределятьНаВсехРаботающих Тогда
		// распределяется на всех работавших
		СписокПродавцов = РаботаСКадрами.ПродавцыРаботающиеВМагазинеЗаПериод(НачалоМесяца(ДтПериод), ДтПериод, СтруктураЗапись.Магазин, 1);
		
	Иначе     // индивидуально на работающего в эту смену
		СписокПродавцов = Новый ТаблицаЗначений();
		СписокПродавцов.Колонки.Добавить("Продавец");
		НайденПродавец = РаботаСКадрами.ПродавецРаботающийНаДатуВМагазине(СтруктураЗапись.ДатаСобытия, СтруктураЗапись.Магазин);
		Если ЗначениеЗаполнено(НайденПродавец) Тогда
			НоваяЗапись = СписокПродавцов.Добавить();
			НоваяЗапись.Продавец = НайденПродавец;
		Иначе
			Возврат -1;
		КонецЕсли;
	КонецЕсли;
	
	
	Для Каждого ТекСтр Из СписокПродавцов Цикл
		
		СуммаНарушения = СтруктураЗапись.Нарушение.Тариф / СписокПродавцов.Количество();
		
		НоваяЗапись 				= НаборЗаписей.Добавить();              
		НоваяЗапись.Период 			= ДтПериод;      
		НоваяЗапись.ПремияШтраф 	= СтруктураЗапись.Нарушение;     
		НоваяЗапись.Сотрудник		= ТекСтр.Продавец;   
		НоваяЗапись.Магазин			= СтруктураЗапись.Магазин; 
		НоваяЗапись.Сумма		   	= СуммаНарушения;
		НоваяЗапись.Содержание		= "Проверка. Сформировано автомат." + Формат(ТекущаяДата(), "ДФ='dd.MM.yy HH:mm'") + " по тарифу " +
		Формат(СтруктураЗапись.Нарушение.Тариф, "ЧЦ=14; ЧДЦ=; ЧН=0; ЧГ=0");			
		Если СписокПродавцов.Количество() > 1 Тогда		
			НоваяЗапись.Содержание = НоваяЗапись.Содержание + " (на " + Формат(СписокПродавцов.Количество(), "ЧЦ=3; ЧДЦ=; ЧН=0; ЧГ=0") + " прод.)";          
		Иначе
			НоваяЗапись.Содержание = НоваяЗапись.Содержание + " (на текущего прод.)";          				
		КонецЕсли;
		НоваяЗапись.СформированоАвтоматически		= Истина;  
		НоваяЗапись.Идентификатор	= СтруктураЗапись.Идентификатор;  		 				
		
	КонецЦикла;	
	
	Попытка
		НаборЗаписей.Записать(Истина); 
		Если СтруктураЗапись.Нарушение.Тариф = 0 Тогда
			Возврат 0;
		Иначе
			Рез = СуммаНарушения; 
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции	

Функция СписокРаботающихПродавцов(ТекМагазин, ПериодДт)
	
	Рез = Новый Массив();  	
	
	ЗнПользМаг = ОбщегоНазначения5LB.НайтиПсевдонимПоЗначению(ТекМагазин, "Пользователь-Магазин");
	Если НЕ ЗначениеЗаполнено(ЗнПользМаг) Тогда
		ЗаписатьСтрокуВЛог("Не обнаружено значение для псевдонима """ + Строка(ТекМагазин) + """!");	
		Возврат Рез;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	КОЛИЧЕСТВО(Т.ДеньСмены) КАК КолСмен,
	|	Т.Продавец КАК Продавец
	|ИЗ		
	|(ВЫБРАТЬ
	|		РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ИсторияРаботыПродавцов.Период, ДЕНЬ) КАК ДеньСмены,
	|	ИсторияРаботыПродавцов.Пользователь,
	|	ИсторияРаботыПродавцов.Продавец КАК Продавец
	|ИЗ
	|	РегистрСведений.ИсторияРаботыПродавцов КАК ИсторияРаботыПродавцов
	|ГДЕ
	|	ИсторияРаботыПродавцов.Период МЕЖДУ &НачПериода И &КонПериода
	|	И ИсторияРаботыПродавцов.Пользователь = &ПользовательМаг		
	|) КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Продавец
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДеньСмены) > 1
	|";
	
	Запрос.УстановитьПараметр("НачПериода", НачалоМесяца(ПериодДт));
	Запрос.УстановитьПараметр("КонПериода", КонецМесяца(ПериодДт));
	Запрос.УстановитьПараметр("ПользовательМаг", ЗнПользМаг);	
	
	Рез  = Запрос.Выполнить().Выгрузить();
	
	//РезультатЗапроса = Запрос.Выполнить();
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;
	//
	
	Возврат Рез;
	
КонецФункции

Функция ПолучитьПоследнююДатуАвтозагрузки()
	
	РезДата = Дата(1, 1, 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПремииШтрафыСотрудниковСрезПоследних.Период) КАК Период
	|ИЗ
	|	РегистрСведений.ПремииШтрафыСотрудников КАК ПремииШтрафыСотрудниковСрезПоследних
	|ГДЕ
	|	ПремииШтрафыСотрудниковСрезПоследних.СформированоАвтоматически = ИСТИНА
	|	И ПремииШтрафыСотрудниковСрезПоследних.Идентификатор <> """"
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Период = NULL Тогда
			Прервать;
		Иначе
			РезДата = ВыборкаДетальныеЗаписи.Период;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезДата;
	
КонецФункции	


// Премии

Процедура РасчитатьУстановитьПремииПродавцов()	Экспорт
	
	
	стрЗаголовок = "Регл.задание (автозагрузка) премий продацов";	
	
	стрИДРаздел = "Бонусы";                  
	КаталогФайловНаДиске = КаталогВременныхФайлов();    	
	ИмяЛогФайла = КаталогФайловНаДиске + "\protocol.log";
	
	УдалитьФайлы(КаталогФайловНаДиске, "protocol.log"); 	
	
	ВыбКаталог = Новый Файл(КаталогФайловНаДиске);
	Если НЕ ВыбКаталог.Существует() Тогда
		СоздатьКаталог(КаталогФайловНаДиске);
	КонецЕсли;
	
	ВыбЛогФайл = Новый Файл(ИмяЛогФайла);
	Если НЕ ВыбЛогФайл.Существует() Тогда
		ТекстДок = Новый ТекстовыйДокумент();
		ТекстДок.Записать(ИмяЛогФайла);
	КонецЕсли;
	
	
	
	
	Попытка
		ВыбЛогФайл = Новый Файл(ИмяЛогФайла);
		Если НЕ ВыбЛогФайл.Существует() Тогда
			ТекстДок = Новый ТекстовыйДокумент();
			ТекстДок.Записать(ИмяЛогФайла);
		КонецЕсли;
	Исключение
		//		Сообщить("Перерасчет бонусов за просроченный товар - не удалось выполнить!", СтатусСообщения.Важное);	
	Конецпопытки;
	
	ЗаписатьСтрокуВЛог(стрЗаголовок);		// запись только в лог!
	
	//Дт2 = ТекущаяДата();
	//Дт1 = НачалоМесяца(Дт2) - 1;
	
	// Считаем (и перезаписываем) за последние 14 дней
	Дт2 = КонецДня(ТекущаяДата());
	Дт1 = ТекущаяДата() - 60 * 60 * 24 * 14; 
	
	// если 14 дней назад были в прошлом месяце - пересчитать его
	Если Месяц(Дт1) <> Месяц(Дт2) Тогда
		Попытка
			УстановитьБонусыПросрочка(НачалоМесяца(Дт1), КонецМесяца(Дт1));
			УстановитьПремииГорячиеПродажи(НачалоМесяца(Дт1), КонецМесяца(Дт1));
		Исключение
			//		Сообщить("Перерасчет бонусов за просроченный товар - не удалось выполнить!", СтатусСообщения.Важное);	
		Конецпопытки;		
	КонецЕсли;
	
	// в текщем месяце
	Попытка
		УстановитьБонусыПросрочка(НачалоМесяца(Дт2), КонецМесяца(Дт2));	
		УстановитьПремииГорячиеПродажи(НачалоМесяца(Дт2), КонецМесяца(Дт2));
	Исключение
		//		Сообщить("Перерасчет бонусов за просроченный товар - не удалось выполнить!", СтатусСообщения.Важное);	
	Конецпопытки;
	
	
	
	массивАдреса = ОбщегоНазначения5LB.ПолучитьПсевдонимыПоМаске("Почта", стрИДРаздел);
	Если массивАдреса.Количество() > 0 Тогда
		
		стрСписокАдреса = "";
		Для Каждого ТекАдрес Из массивАдреса Цикл
			стрСписокАдреса = стрСписокАдреса + ТекАдрес + ";";
		КонецЦикла;
		ЗаписатьСтрокуВЛог("");
		ЗаписатьСтрокуВЛог("Попытка отправить протокол на почту " + стрСписокАдреса, стрЗаголовок);		
		ОтправитьПисьмаСПротоколом(ИмяЛогФайла);                                                              		
	Иначе
		ЗаписатьСтрокуВЛог("Попытка отправить протокол на почту - нет ни одного адреса для почты (раздел " +
		Строка(стрИДРаздел) + ")", стрЗаголовок);
	КонецЕсли;
	
	
	
КонецПроцедуры

// за продажу товара с истекшим сроком годности
Процедура УстановитьБонусыПросрочка(НачалоДт, КонецДт)
	
	
	стрЗаголовок = "Регл.задание (автозагрузка) премий продацов";		
	стрИДРаздел = "Бонусы";                  
	//КаталогФайловНаДиске = КаталогВременныхФайлов();    	
	//ИмяЛогФайла = КаталогФайловНаДиске + "\protocol.log";
	
	ЗаписатьСтрокуВЛог("");
	ЗаписатьСтрокуВЛог("Автоматическая установка бонусов по товару с истекшим сроком", стрЗаголовок);	
	СтрДт = Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'");	
	ЗаписатьСтрокуВЛог("Начало : " + СтрДт, стрЗаголовок);                                       	
	
	//Дт = ДатаПериод;  	
	//НачалоДт 	= НачалоМесяца(Дт);
	//КонецДт 	= КонецМесяца(Дт);
	ЗаписатьСтрокуВЛог("Обрабатываются данные за период с " + Формат(НачалоДт, "ДФ='dd.MM.yyyy HH:mm:ss'")
	+ " по " + Формат(КонецДт, "ДФ='dd.MM.yyyy HH:mm:ss'"), стрЗаголовок);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	//|ВЫБРАТЬ
	//|	Качество.Ссылка
	//|ПОМЕСТИТЬ втКачество
	//|ИЗ
	//|	Справочник.Качество КАК Качество
	//|ГДЕ
	////|	Качество.Наименование ПОДОБНО ""просрочка %""
	//|	Качество.Ссылка В (&СписокКачество)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Папка,
	|	ВложенныйЗапрос.БонусПроцент
	|ПОМЕСТИТЬ тзБонусПроцент
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Бренды4Отчёта.Папка.ЭтоГруппа
	|				ТОГДА Бренды4Отчёта.Папка
	|			ИНАЧЕ Бренды4Отчёта.Папка
	|		КОНЕЦ КАК Папка,
	|		МАКСИМУМ(СрокиБонусов.ПроцентПродавцу) КАК БонусПроцент
	|	ИЗ
	|		Справочник.Бренды4Отчёта КАК Бренды4Отчёта
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БонусыСроки.СрезПоследних(&КонецПериода, ) КАК СрокиБонусов
	|			ПО Бренды4Отчёта.Ссылка = СрокиБонусов.Папка
	|	ГДЕ
	|		НЕ Бренды4Отчёта.ПометкаУдаления
	|		И НЕ СрокиБонусов.ПроцентПродавцу = 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА Бренды4Отчёта.Папка.ЭтоГруппа
	|				ТОГДА Бренды4Отчёта.Папка
	|			ИНАЧЕ Бренды4Отчёта.Папка
	|		КОНЕЦ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т1.Магазин КАК Магазин,
	|	Т1.Продавец КАК Продавец,
	|	Т1.БонусУценки КАК БонусУценки
	//		|	Т1.СуммаНачислено КАК СуммаНачислено
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Магазин КАК Магазин,
	|		Т.Продавец КАК Продавец,
	|		СУММА(Т.БонусУценки) КАК БонусУценки
	//|		МАКСИМУМ(ЕСТЬNULL(ПремииШтрафы.Сумма, 0)) КАК СуммаНачислено
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПродажиОбороты.ДокументПродажи КАК ДокументПродажи,
	|			ПродажиОбороты.ДокументПродажи.Ответственный КАК Продавец,
	|			ПродажиОбороты.Контрагент КАК Магазин,		
	|			ПродажиОбороты.Номенклатура КАК Номенклатура,
	|			ПродажиОбороты.СтоимостьОборот КАК Продажи,
	|			ТоварыНаСкладахОбороты.Качество КАК Качество,
	|			ПроцентыЗаУценку.БонусПродавцу КАК БонусПродавцу,
	|			ПроцентыЗаУценку.ВычетСПродавца КАК ВычетСПродавца,
	|			ПродажиОбороты.СтоимостьОборот * ЕСТЬNULL(ПроцентыЗаУценку.БонусПродавцу, 0) / 100 КАК БонусУценки
	|		ИЗ
	|			РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода, АВТО, ) КАК ПродажиОбороты
	|				ЛЕВОЕ СОЕДИНЕНИЕ тзБонусПроцент КАК тзБонусПроцент
	|				ПО (ВЫБОР
	|						КОГДА тзБонусПроцент.Папка.ЭтоГруппа
	|							ТОГДА ВЫБОР
	|									КОГДА ПродажиОбороты.Номенклатура.Родитель = тзБонусПроцент.Папка
	|										ТОГДА ПродажиОбороты.Номенклатура.Родитель = тзБонусПроцент.Папка
	|									ИНАЧЕ ПродажиОбороты.Номенклатура.Родитель.Родитель = тзБонусПроцент.Папка
	|								КОНЕЦ
	|						ИНАЧЕ ПродажиОбороты.Номенклатура = тзБонусПроцент.Папка
	|					КОНЕЦ)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК ТоварыНаСкладахОбороты
	|				ПО ПродажиОбороты.ДокументПродажи = ТоварыНаСкладахОбороты.Регистратор
	|					И ПродажиОбороты.Номенклатура = ТоварыНаСкладахОбороты.Номенклатура
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыЗаУценку.СрезПоследних(
	|						&НачалоПериода,
	|						Причина В
	|							(&СписокКачество)
	//|							(ВЫБРАТЬ
	//|								втКачество.Ссылка
	//|							ИЗ
	//|								втКачество)
	|							) КАК ПроцентыЗаУценку
	|				ПО (ТоварыНаСкладахОбороты.Качество = ПроцентыЗаУценку.Причина)
	|		ГДЕ
	|			НЕ тзБонусПроцент.Папка ЕСТЬ NULL ) КАК Т
	//|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|				ПремииШтрафыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	//|				ПремииШтрафыСотрудниковСрезПоследних.Сумма КАК Сумма
	//|			ИЗ
	//|				РегистрСведений.ПремииШтрафыСотрудников.СрезПоследних(&КонецПериода, 
	//|					ПремияШтраф = ЗНАЧЕНИЕ(Справочник.ВидыПремийШтрафов.БонусЗапродажуПросрочки23мес)
	////// + Разрез по магазину!
	////|					И Магазин =
	////|               ПремияШтраф = &БонусЗапродажуПросрочки23мес 
	//|				) КАК ПремииШтрафыСотрудниковСрезПоследних
	//|				) КАК ПремииШтрафы
	//|			ПО (ПремииШтрафы.Сотрудник = Т.Продавец)
	|	ГДЕ
	|		Т.БонусУценки > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Магазин,		
	|		Т.Продавец
	|	) КАК Т1
	//|ГДЕ
	//|	Т1.БонусУценки <> Т1.СуммаНачислено
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДт);
	Запрос.УстановитьПараметр("КонецПериода",	КонецДт);
	
	МассивКачество = Новый Массив;
	МассивКачество.Очистить();
	МассивКачество.Добавить(Справочники.Качество.НайтиПоНаименованию("просрочка 2 мес", Истина));
	МассивКачество.Добавить(Справочники.Качество.НайтиПоНаименованию("просрочка 3 мес", Истина));		
	Запрос.УстановитьПараметр("СписокКачество", МассивКачество);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();	
	
	Попытка
		
		// очистить все значения по этомой премии за период (на последнюю дату)
		НаборЗаписей = РегистрыСведений.ПремииШтрафыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(КонецДт);
		НаборЗаписей.Отбор.ПремияШтраф.Установить(Справочники.ВидыПремийШтрафов.БонусЗапродажуПросрочки23мес);
		НаборЗаписей.Отбор.СформированоАвтоматически.Установить(Истина);
		НаборЗаписей.Прочитать(); 
		КолЗаписейУдалено = НаборЗаписей.Количество();
		
		НаборЗаписей.Очистить(); //Производим очистку набора, после чего производим его запись
		НаборЗаписей.Записать();
		
		ЗаписатьСтрокуВЛог("Бонусы по товару с истекшим сроком - удалено старых записей " 
		+ Формат(КолЗаписейУдалено, "ЧЦ=12; ЧДЦ=; ЧН=0; ЧГ=0"), стрЗаголовок);
		
		
		Сч = 0;
		
		// запись всех значений (новых)
		Пока Выборка.Следующий() Цикл
			
			Сч = Сч + 1;
			
			ЗаписьНачисление = РегистрыСведений.ПремииШтрафыСотрудников.СоздатьМенеджерЗаписи();
			ЗаписьНачисление.Период		 	= КонецДт;
			ЗаписьНачисление.Сотрудник	 	= Выборка.Продавец;
			ЗаписьНачисление.Магазин	 	= Выборка.Магазин;	
			ЗаписьНачисление.СформированоАвтоматически = Истина;
			ЗаписьНачисление.ПремияШтраф	= Справочники.ВидыПремийШтрафов.БонусЗапродажуПросрочки23мес;
			ЗаписьНачисление.Прочитать();
			
			ЗаписьНачисление.Период			= КонецДт;
			ЗаписьНачисление.Сотрудник	 	= Выборка.Продавец;
			ЗаписьНачисление.Магазин	 	= Выборка.Магазин;		
			ЗаписьНачисление.СформированоАвтоматически = Истина;  
			ЗаписьНачисление.ПремияШтраф	= Справочники.ВидыПремийШтрафов.БонусЗапродажуПросрочки23мес;
			
			ЗаписьНачисление.Сумма 			= Выборка.БонусУценки;
			ЗаписьНачисление.Содержание 	= "Сформировано автоматически " + Формат(ТекущаяДата(), "ДФ='dd.MM.yy HH:mm'");
			
			
			ЗаписьНачисление.Записать(Истина);				
			ЗаписатьСтрокуВЛог("Новая запись (" + Формат(Сч, "ЧЦ=12; ЧДЦ=; ЧН=0; ЧГ=0") + ") : "
			+ Формат(ЗаписьНачисление.Период, "ДФ='dd.MM.yyyy HH:mm:ss'") + ", "
			+ Строка(ЗаписьНачисление.Сотрудник) + ", " + Строка(ЗаписьНачисление.Магазин) + ", "
			+ Строка(ЗаписьНачисление.ПремияШтраф) + " =" + Формат(ЗаписьНачисление.Сумма, "ЧЦ=14; ЧДЦ=2; ЧН=0; ЧГ=0")
			+ " " + ЗаписьНачисление.Содержание);
			
			
		КонецЦикла;
		
		ЗаписатьСтрокуВЛог("Бонусы по товару с истекшим сроком - количество новых записей "
		+ Формат(Сч, "ЧЦ=12; ЧДЦ=; ЧН=0; ЧГ=0"), стрЗаголовок);
		
		
	Исключение
		
	Конецпопытки;
	
КонецПроцедуры

// за проджу по акции "Горячее лето"
Процедура УстановитьПремииГорячиеПродажи(НачалоДт, КонецДт)
	
	стрЗаголовок = "Регл.задание (автозагрузка) премий продацов";		
	стрИДРаздел = "Бонусы";                  
	//КаталогФайловНаДиске = КаталогВременныхФайлов();    	
	//ИмяЛогФайла = КаталогФайловНаДиске + "\protocol.log";
	
	ЗаписатьСтрокуВЛог("");
	ЗаписатьСтрокуВЛог("Автоматическая установка бонусов по акциям", стрЗаголовок);	
	СтрДт = Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'");	                                		
	ЗаписатьСтрокуВЛог("Начало : " + СтрДт, стрЗаголовок);                                       		
	//Дт = ДатаПериод;  	
	//НачалоДт 	= НачалоМесяца(Дт);
	//КонецДт 	= КонецМесяца(Дт);
	ЗаписатьСтрокуВЛог("Обрабатываются даныне за период с " + Формат(НачалоДт, "ДФ='dd.MM.yyyy HH:mm:ss'")
	+ " по " + Формат(КонецДт, "ДФ='dd.MM.yyyy HH:mm:ss'"), стрЗаголовок);
	
	ПроцентПремии = 10;
	
	стрПремия = "Продажи продуктов HОТ SALE";
	НайденаПремия = Справочники.ВидыПремийШтрафов.НайтиПоНаименованию(стрПремия, Истина);
	Если НЕ ЗначениеЗаполнено(НайденаПремия) Тогда
		//Сообщить("Не найдена премия с названием """ + стрПремия + """!", СтатусСообщения.Важное);
		ЗаписатьСтрокуВЛог("Не найдена премия с названием """ + стрПремия + """!", стрЗаголовок, Истина);
		Возврат;
	КонецЕсли;
	
	
	
	Запрос = Новый Запрос;   	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СкидкиНоменклатуры.Номенклатура КАК Номенклатура,
	|	СкидкиНоменклатуры.ПолучательСкидки КАК Магазин
	|ПОМЕСТИТЬ втСкидкиНоменклатура
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
	|			&КонПериода,
	|			ВЫРАЗИТЬ(Регистратор.Комментарий КАК СТРОКА(200)) ПОДОБНО &Комментарий
	// < 06.02.17 Вялов - попадают в начисления давно "закрытие" акции
	|	И (ДатаОкончания = ДАТАВРЕМЯ(1,1,1) ИЛИ КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &КонПериода)
	// 06.02.17 Вялов >
	|			) КАК СкидкиНоменклатуры
	//|ГДЕ
	//|	СкидкиНоменклатуры.ПолучательСкидки = &Контрагент
	|;		
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Магазин КАК Магазин,
	|	Т.Продавец КАК Продавец,
	|	СУММА(Т.Продажи) КАК Продажи
	|
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	ПродажиОбороты.ДокументПродажи КАК ДокументПродажи,
	|	ПродажиОбороты.ДокументПродажи.Ответственный КАК Продавец,
	|	ПродажиОбороты.Контрагент КАК Магазин,
	|	ПродажиОбороты.Номенклатура КАК Номенклатура,
	|	ПродажиОбороты.СтоимостьОборот КАК Продажи
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			АВТО,
	|			(Контрагент, Номенклатура) В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Магазин, Т.Номенклатура ИЗ	втСкидкиНоменклатура КАК Т)
	|					
	|		) КАК ПродажиОбороты
	|) КАК Т					
	|СГРУППИРОВАТЬ ПО
	|	Магазин, Продавец	
	//|ПО
	//|	Магазин,
	//|	Продавец
	|";
	
	Запрос.УстановитьПараметр("НачПериода", 	НачалоДт);
	Запрос.УстановитьПараметр("КонПериода", 	КонецДт);
	Запрос.УстановитьПараметр("Комментарий", 	"%""Жаркое лето""%");
	//	Запрос.УстановитьПараметр("КонецПериода",	 КонДата);	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Попытка
		
		
		// очистить все значения по этомой премии за период (на последнюю дату)
		НаборЗаписей = РегистрыСведений.ПремииШтрафыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(КонецДт);
		НаборЗаписей.Отбор.ПремияШтраф.Установить(НайденаПремия);
		НаборЗаписей.Прочитать(); 
		КолЗаписейУдалено = НаборЗаписей.Количество();
		
		НаборЗаписей.Очистить(); //Производим очистку набора, после чего производим его запись
		НаборЗаписей.Записать();
		
		ЗаписатьСтрокуВЛог("Бонусы по акциям - - удалено старых записей " 
		+ Формат(КолЗаписейУдалено, "ЧЦ=12; ЧДЦ=; ЧН=0; ЧГ=0"), стрЗаголовок);
		
		Сч = 0;
		
		Пока Выборка.Следующий() Цикл
			
			Сч = Сч + 1;
			
			ЗаписьНачисление = РегистрыСведений.ПремииШтрафыСотрудников.СоздатьМенеджерЗаписи();
			ЗаписьНачисление.Период		 	= КонецДт;
			ЗаписьНачисление.Сотрудник	 	= Выборка.Продавец;
			ЗаписьНачисление.Магазин	 	= Выборка.Магазин;
			ЗаписьНачисление.ПремияШтраф	= НайденаПремия.Ссылка;
			ЗаписьНачисление.СформированоАвтоматически = Истина;
			
			ЗаписьНачисление.Прочитать();
			
			ЗаписьНачисление.Период			= КонецДт;
			ЗаписьНачисление.Сотрудник	 	= Выборка.Продавец;
			ЗаписьНачисление.Магазин	 	= Выборка.Магазин;			
			ЗаписьНачисление.ПремияШтраф	= НайденаПремия.Ссылка;
			ЗаписьНачисление.СформированоАвтоматически = Истина;
			
			ЗаписьНачисление.Сумма 			= Выборка.Продажи * ПроцентПремии / 100;
			ЗаписьНачисление.Содержание 	= "Сформировано автоматически " + Формат(ТекущаяДата(), "ДФ='dd.MM.yy HH:mm'");
			
			ЗаписьНачисление.Записать(Истина);	
			
			ЗаписатьСтрокуВЛог("Новая запись (" + Формат(Сч, "ЧЦ=12; ЧДЦ=; ЧН=0; ЧГ=0") + ") : "
			+ Формат(ЗаписьНачисление.Период, "ДФ='dd.MM.yyyy HH:mm:ss'") + ", "
			+ Строка(ЗаписьНачисление.Сотрудник) + ", " + Строка(ЗаписьНачисление.Магазин) + ", "
			+ Строка(ЗаписьНачисление.ПремияШтраф) + " =" + Формат(ЗаписьНачисление.Сумма, "ЧЦ=14; ЧДЦ=2; ЧН=0; ЧГ=0")
			+ " " + ЗаписьНачисление.Содержание);
			
		КонецЦикла;
		
		ЗаписатьСтрокуВЛог("Бонусы по акциям - количество новых записей "
		+ Формат(Сч, "ЧЦ=12; ЧДЦ=; ЧН=0; ЧГ=0"), стрЗаголовок);
		
		
		
	Исключение
		
	Конецпопытки;
	
КонецПроцедуры



///////////////////////////////////////////////////////
// НЕ ИСПОЛЬЗУЕТСЯ ПОЗЖЕ УДАЛИТЬ

Процедура СтатусыОплаты() Экспорт
	
	Попытка
		ИмяФайла = ПолучитьИмяВременногоФайла();
		
		Соединение = ПолучитьСоединениеFTP1();
		Соединение.Получить("status\orders_status_for_1c.xml", ИмяФайла);
		
		Чтение = Новый ЧтениеXML; 
		Чтение.ОткрытьФайл(ИмяФайла); 
		
		Пока Чтение.Прочитать() Цикл 
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
				ТекЗак = Неопределено;
				
				ИмяУзла = Чтение.Имя; 
				Если (ИмяУзла <> "order") Тогда
					продолжить;
				КонецЕсли;
				
				Пока Чтение.ПрочитатьАтрибут() Цикл 
					
					ТипУзла = Чтение.ТипУзла; 
					Имя = Чтение.Имя; 
					Значение = Чтение.Значение; 
					
					Если (Имя = "id") И (ИмяУзла = "order")  Тогда
						идЗаказа = Значение;
					КонецЕсли;
					
					Если (Имя = "pay_type") И (ИмяУзла = "order")  Тогда
						идТипОпл = Значение;
					КонецЕсли;
					
					Если (Имя = "pay_status") И (ИмяУзла = "order")  Тогда
						статусОпл = Значение;
					КонецЕсли;
					
					
				КонецЦикла;
				
				ТекЗак = Документы.ЗаказПокупателя.НайтиПоНомеру(СокрЛП(идЗаказа),ТекущаяДата());
				Если ТекЗак.Пустая() Тогда продолжить КонецЕсли;
				
				Об = ТекЗак.ПолучитьОбъект();
				Об.ВидОплаты = Справочники.ВидыОплатЧекаККМ.НайтиПоКоду(идТипОпл);
				Об.СтатусОплаты = ?(СокрЛп(статусОпл)="оплачен",Перечисления.СтатусОплаты.Оплачен,Перечисления.СтатусОплаты.НеОпалчен);
				Попытка
					Об.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
				КонецПопытки;
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда 
				
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
				
			КонецЕсли; 
			
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
	Попытка
		//с другого хостинга
		ИмяФайла = ПолучитьИмяВременногоФайла();
		
		Соединение = ПолучитьСоединениеFTP2();
		Соединение.Получить("status\orders_status_for_1c.xml", ИмяФайла);
		
		Чтение = Новый ЧтениеXML; 
		Чтение.ОткрытьФайл(ИмяФайла); 
		
		Пока Чтение.Прочитать() Цикл 
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
				ТекЗак = Неопределено;
				
				ИмяУзла = Чтение.Имя; 
				Если (ИмяУзла <> "order") Тогда
					продолжить;
				КонецЕсли;
				
				Пока Чтение.ПрочитатьАтрибут() Цикл 
					
					ТипУзла = Чтение.ТипУзла; 
					Имя = Чтение.Имя; 
					Значение = Чтение.Значение; 
					
					Если (Имя = "id") И (ИмяУзла = "order")  Тогда
						идЗаказа = Значение;
					КонецЕсли;
					
					Если (Имя = "pay_type") И (ИмяУзла = "order")  Тогда
						идТипОпл = Значение;
					КонецЕсли;
					
					Если (Имя = "pay_status") И (ИмяУзла = "order")  Тогда
						статусОпл = Значение;
					КонецЕсли;
					
					
				КонецЦикла;
				
				ТекЗак = Документы.ЗаказПокупателя.НайтиПоНомеру(СокрЛП(идЗаказа),ТекущаяДата());
				Если ТекЗак.Пустая() Тогда продолжить КонецЕсли;
				
				Об = ТекЗак.ПолучитьОбъект();
				Об.ВидОплаты = Справочники.ВидыОплатЧекаККМ.НайтиПоКоду(идТипОпл);
				Об.СтатусОплаты = ?(СокрЛп(статусОпл)="оплачен",Перечисления.СтатусОплаты.Оплачен,Перечисления.СтатусОплаты.НеОпалчен);
				Попытка
					Об.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
				КонецПопытки;
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда 
				
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
				
			КонецЕсли; 
			
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации("ОбменXML", , , ,ОписаниеОшибки(),);
	КонецПопытки;
	
КонецПроцедуры

//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 26/02/2018//==============================================================================================
#Область ПВЗ_РассылкаСМС_Email

Процедура РазослатьСМС_Email() Экспорт 
	
	МассивЗаказовСМС = ПолучитьЗаказыДвухдневнойДавности();
	
	Если МассивЗаказовСМС.количество()> 0 Тогда
		ДобавитьСМСДляОтправки(МассивЗаказовСМС);
	КонецЕсли;

	МассивЗаказов  =   ПолучитьЗаказыПятидневнойДавности();
	ИнициироватьРасылкуEmail(МассивЗаказов);
	
КонецПроцедуры

Процедура ДобавитьСМСДляОтправки(МассивЗаказовСМС)
	
	Для каждого Заказ из  МассивЗаказовСМС  Цикл
		
		МенеджерЗаписи = РегистрыСведений.СМСДляОтправки.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ИмяПолучателя = Заказ.ФИО;
		
		МенеджерЗаписи.ТелефонПолучателя = Заказ.Телефон;
		
		МенеджерЗаписи.Объект = Заказ.Ссылка;
		
		МенеджерЗаписи.Текст ="Напоминаем:Заказ №"+строка(Заказ.НомерДокаСайт)+" ожидает в магазине. Через 2 дня он будет расформирован.";
		
		МенеджерЗаписи.Прочитать();
		
		Если  НЕ МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.ИмяПолучателя = Заказ.ФИО;
			
			МенеджерЗаписи.ТелефонПолучателя = Заказ.Телефон;
			
			МенеджерЗаписи.Объект = Заказ.Ссылка;
			
			МенеджерЗаписи.Текст ="Напоминаем:Заказ №"+строка(Заказ.НомерДокаСайт)+" ожидает в магазине. Через 2 дня он будет расформирован.";
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
  
Процедура ИнициироватьРасылкуEmail(МассивЗаказов)
    ЗаголовокСобытияВЖурнале = "ПВЗ Email рассылка";	
	ТекстПисьма = "Внимание! Заказ(ы) ";	
	ТемаПисьма = "Внимание! Заказы ПВЗ более 5 дней ";
 	
	МассивПисем = Новый Массив;
	МассивПисем.Очистить();
	
	Для Каждого ТекСтр Из МассивЗаказов Цикл
	
		ТекстПисьма = ТекстПисьма +"№"+ Строка(ТекСтр.НомерДокаСайт)+ Символы.Таб+ Символы.ПС; 
		
	КонецЦикла;
	
	ТекстПисьма = ТекстПисьма + " не забраны клиентом более 5 дней. Необходимо связаться с получателем.";		
	ЭлПисьмо = Новый ИнтернетПочтовоеСообщение;
	ЭлПисьмо.Тема = ТемаПисьма;
	ЭлПисьмо.Тексты.Добавить(ТекстПисьма);
	ЭлПисьмо.Отправитель = "1cinfo@ukitgroup.ru"; 
	ЭлПисьмо.ИмяОтправителя = "ПВЗ";
	ЭлПисьмо.Получатели.Добавить("Shop@5lb.ru");
	МассивПисем.Добавить(ЭлПисьмо);	
	
		
	// отправить
	Если МассивПисем.Количество() > 0 Тогда	
		Попытка
			Для Каждого ТекПисьмо Из МассивПисем Цикл
				МассивПисемОтправка = Новый Массив;
				МассивПисемОтправка.Очистить();
				МассивПисемОтправка.Добавить(ТекПисьмо);			
				РаботаСРегламентныеЗаданиями.ОтправитьЭлектронныеПисьма(МассивПисемОтправка);
				стрОтправленоНаАдрес = "<неизвестный адрес>";	
			КонецЦикла;		
		Исключение
			ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, УровеньЖурналаРегистрации.Ошибка , , , "Ошибка при попытке отправить письмо на адрес " 
				+ Строка(стрОтправленоНаАдрес));	
		КонецПопытки;	
	Иначе
		ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, УровеньЖурналаРегистрации.Информация , , , "Нет адресов для отправки писем ПВЗ Email рассылка");	
	КонецЕсли;
	

КонецПроцедуры  


Функция ПолучитьЗаказыДвухдневнойДавности() Экспорт 
	КрайняяДатаЗаказа_5_Дней  = ПолучитьДень(ТекущаяДата(), -5);
	КрайняяДатаЗаказа_2_Дня = ПолучитьДень(ТекущаяДата(), -2);
	МассивЗаказов_2_дней =ОтобратьДокументы(КрайняяДатаЗаказа_5_Дней,КрайняяДатаЗаказа_2_Дня);
	Возврат  МассивЗаказов_2_дней;
КонецФункции


Функция ПолучитьЗаказыПятидневнойДавности()Экспорт 
	КрайняяДатаЗаказа_5_Дней  = ПолучитьДень(ТекущаяДата(), -5);
	МассивЗаказов_5_дня = ОтобратьДокументы(КрайняяДатаЗаказа_5_Дней,Неопределено);
	Возврат МассивЗаказов_5_дня;
КонецФункции



//Получает заказы со статусом "ПринятВПВЗ" за определенные периоды. 
Функция ОтобратьДокументы(КрайняяДатаЗаказа_5_Дней,КрайняяДатаЗаказа_2_Дня)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыЗаказов.Заказ,
	|	МАКСИМУМ(СтатусыЗаказов.Дата) КАК Дата,
	|	СтатусыЗаказов.ФИОПродавца
	|ПОМЕСТИТЬ ВТ_Срез
	|ИЗ
	|	РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыЗаказов.Заказ,
	|	СтатусыЗаказов.ФИОПродавца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Срез.Заказ КАК ДокументЗаказа
	|ИЗ
	|	РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Срез КАК ВТ_Срез
	|		ПО (ВТ_Срез.Заказ = СтатусыЗаказов.Заказ)
	|			И (ВТ_Срез.Дата = СтатусыЗаказов.Дата)
	|			И (ВТ_Срез.ФИОПродавца = СтатусыЗаказов.ФИОПродавца)
	|ГДЕ
	|	СтатусыЗаказов.СтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.ПринятВПВЗ)
	|	И &УсловиеПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Срез.Дата,
	|	СтатусыЗаказов.СтатусЗаказа";
	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПериода",?(ЗначениеЗаполнено(КрайняяДатаЗаказа_2_Дня),"ВТ_Срез.Дата Между &КрайняяДатаЗаказа_5_Дней И &КрайняяДатаЗаказа_2_Дня","ВТ_Срез.Дата <= &КрайняяДатаЗаказа_5_Дней" ));
	
	Запрос.УстановитьПараметр("КрайняяДатаЗаказа_2_Дня",КрайняяДатаЗаказа_2_Дня);                                                           
	Запрос.УстановитьПараметр("КрайняяДатаЗаказа_5_Дней",КрайняяДатаЗаказа_5_Дней);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументЗаказа");
	
	Возврат Результат;
	
КонецФункции

//Отнимает кол-во дней от даты
Функция ПолучитьДень(ИсходнаяДата, КоличествоПрибавляемыхДней)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ИсходнаяДата, ДЕНЬ), ДЕНЬ, &Количество) КАК Дата";
	
	Запрос.УстановитьПараметр("ИсходнаяДата", ИсходнаяДата); 
	Запрос.УстановитьПараметр("Количество", КоличествоПрибавляемыхДней); 
	Возврат Запрос.Выполнить().Выгрузить()[0].Дата; 
КонецФункции 

//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 26/02/2018//==============================================================================================


//БЛОК ОТПРАВКИ СМС

Процедура РазослатьСМСИзРегистра() Экспорт
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СМСДляОтправки.ИмяПолучателя,
	|	СМСДляОтправки.ТелефонПолучателя,
	|	СМСДляОтправки.Объект,
	|	СМСДляОтправки.Текст,
	|	СМСДляОтправки.Отправлено,
	|	СМСДляОтправки.ДатаОтправки
	|ИЗ
	|	РегистрСведений.СМСДляОтправки КАК СМСДляОтправки
	|ГДЕ
	|	НЕ СМСДляОтправки.Отправлено";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаРегистра = РезультатЗапроса.Выбрать();
	
	
	//ВыборкаРегистра = РегистрыСведений.СМСДляОтправки.Выбрать();
	
	Пока ВыборкаРегистра.Следующий() Цикл
		
		Если СМСОтправлено(ВыборкаРегистра) Тогда
			
			//Удалим из регистра
			
			МенеджерЗаписи = РегистрыСведений.СМСДляОтправки.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.ИмяПолучателя = ВыборкаРегистра.ИмяПолучателя;
			
			МенеджерЗаписи.ТелефонПолучателя = ВыборкаРегистра.ТелефонПолучателя;
			
			МенеджерЗаписи.Объект = ВыборкаРегистра.Объект;
			
			МенеджерЗаписи.Текст = ВыборкаРегистра.Текст;
			
			МенеджерЗаписи.Прочитать();
			
			//МенеджерЗаписи.Удалить();
			
			МенеджерЗаписи.Отправлено = Истина;
			МенеджерЗаписи.ДатаОтправки = ТекущаяДата();
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СМСОтправлено(ЗаписьРегистра)
	
	РезультатОтправки = Истина;
	
	//НомерТелефона = ПолучитьНомерТелефона(ЗаписьРегистра.Получатель);
	
	//НомерТелефона = "79150424133";
	
	НомерТелефона = ЗаписьРегистра.ТелефонПолучателя;
	
	ТекстСМС = ЗаписьРегистра.Текст;
	
	//БЛОК ОТПРАВКИ СМС
	
	Если ЗначениеЗаполнено(НомерТелефона) и не ПустаяСтрока(ТекстСМС) Тогда
		
		// ОтправитьСМССообщение(НомерТелефона, ТекстСмс, РезультатОтправки);
		
		ОтправитьСМСУпрощённая(НомерТелефона, ТекстСмс, РезультатОтправки);
		
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция ПолучитьНомерТелефона(Получатель)
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	// Данный фрагмент построен конструктором.
	
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	| КонтактнаяИнформация.Объект,
	| КонтактнаяИнформация.Вид,
	| КонтактнаяИнформация.Представление Как Телефон
	|ИЗ
	| РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	| КонтактнаяИнформация.Объект = &Объект
	| И КонтактнаяИнформация.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Объект", Получатель);
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Телефон;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////

Процедура ПроверкаСтатусовЗаказовПокупателей() Экспорт
	
	//м Шаг 1 выделение голубым цветом
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыЗаказов.Заказ,
	               |	СтатусыЗаказов.Дата
	               |ИЗ
	               |	РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
	               |ГДЕ
	               |	СтатусыЗаказов.СтатусЗаказа = &СтатусЗаказа";
	Запрос.УстановитьПараметр("СтатусЗаказа",Перечисления.СтатусыЗаказов.ПринятВПВЗ);
	ТзПринятыхЗаказов = Запрос.Выполнить().Выгрузить();
	
	Для каждого зак из ТзПринятыхЗаказов Цикл
		Запрос2 = Новый Запрос;
		Запрос2.Текст = "ВЫБРАТЬ
		                |	СтатусыЗаказов.Заказ,
		                |	СтатусыЗаказов.Дата КАК Дата
		                |ИЗ
		                |	РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
		                |ГДЕ
		                |	СтатусыЗаказов.СтатусЗаказа <> &СтатусЗаказа
		                |	И СтатусыЗаказов.Дата > &ДатаСтатуса
		                |	И СтатусыЗаказов.Заказ = &Заказ
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	Дата УБЫВ";
		Запрос2.УстановитьПараметр("СтатусЗаказа",Перечисления.СтатусыЗаказов.ПринятВПВЗ);
		Запрос2.УстановитьПараметр("ДатаСтатуса",Зак.Дата);
		Запрос2.УстановитьПараметр("Заказ",Зак.Заказ);
		Рез = Запрос2.Выполнить().Выбрать();
		Если рез.Следующий()Тогда
			Если Рез.Заказ.ФлГолубой Тогда
				ЗакОбъект = Рез.Заказ.ПолучитьОбъект();
				ЗакОбъект.ФлГолубой = Ложь;
				ЗакОбъект.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				Если НачалоДня(Рез.Дата) + 60*60*24*2<=НачалоДня(ТекущаяДата()) Тогда
					ЗакОбъект = Рез.Заказ.ПолучитьОбъект();
					ЗакОбъект.ФлГолубой = Истина;
					ЗакОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
					
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//м Шаг 2 Отправка по e-mail
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыЗаказов.Заказ,
	               |	СтатусыЗаказов.Дата
	               |ИЗ
	               |	РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
	               |ГДЕ
	               |	СтатусыЗаказов.СтатусЗаказа = &СтатусЗаказа";
	Запрос.УстановитьПараметр("СтатусЗаказа",Перечисления.СтатусыЗаказов.ПринятВПВЗ);
	Рез = Запрос.Выполнить().Выбрать();
	Пока рез.Следующий() Цикл
		Запрос2 = Новый запрос;
		Запрос2.Текст = "ВЫБРАТЬ
		                |	СтатусыЗаказов.Заказ,
		                |	СтатусыЗаказов.Дата КАК Дата
		                |ИЗ
		                |	РегистрСведений.СтатусыЗаказов КАК СтатусыЗаказов
		                |ГДЕ
		                |	СтатусыЗаказов.СтатусЗаказа <> &СтатусЗаказа
		                |	И СтатусыЗаказов.Дата > &ДатаСтатуса
		                |	И СтатусыЗаказов.Заказ = &Заказ
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	Дата УБЫВ";
		Запрос2.УстановитьПараметр("СтатусЗаказа",Перечисления.СтатусыЗаказов.ПринятВПВЗ);
		Запрос2.УстановитьПараметр("ДатаСтатуса",Рез.Дата);
		Запрос2.УстановитьПараметр("Заказ",Рез.Заказ);
		Рез2 = Запрос2.Выполнить().Выбрать();
		Если рез2.Следующий()Тогда
			
		Иначе
			Если НачалоДня(Рез.Дата) + 60*60*24*5<=НачалоДня(ТекущаяДата()) Тогда
				ОтправкаПисьмаПоЗаказу(Рез.Заказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;;
	
	// Отправка Логисту
	ЗЗапрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ЗаказПокупателя.Ссылка
	             |ИЗ
	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	             |ГДЕ
	             |	НАЧАЛОПЕРИОДА(ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ) = &ТекДата
	             |	И ЗаказПокупателя.ПунктСамовывоза <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	             |	И ЗаказПокупателя.СтатусыСборкиЗаказа = ЗНАЧЕНИЕ(Перечисление.СтатусыСборкиЗаказа.Собран)";
	Запрос.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()));
	Рез = Запрос.Выполнить().Выбрать();
	
	МассивЗаказов = Новый Массив;
	Пока Рез.Следующий() Цикл
	   МассивЗаказов.Добавить(Рез.Ссылка);
	КонецЦикла;
	
	Если МассивЗаказов.Количество()>0 Тогда
		ОтправкаСпискаЗаказов(МассивЗаказов);	
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОтправкаПисьмаПоЗаказу(Заказ)
	
	АдресМэйл = "";
	Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Заказы4Logistic.email КАК email
			               |ИЗ
			               |	РегистрСведений.Заказы4Logistic КАК Заказы4Logistic
			               |ГДЕ
			               |	Заказы4Logistic.Заказ = &Заказ";
			Запрос.УстановитьПараметр("Заказ",Заказ.Ссылка);
			Рез = Запрос.Выполнить().Выбрать();
			Если Рез.Следующий() Тогда
				АдресМэйл = Рез.email;
			КонецЕсли;
	Если не ЗначениеЗаполнено(АдресМэйл) Тогда
	
	ЗапросКонтакт = Новый Запрос;
	ЗапросКонтакт.Текст = "ВЫБРАТЬ
	                      |	КонтактнаяИнформация.Представление
	                      |ИЗ
	                      |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |ГДЕ
	                      |	КонтактнаяИнформация.Объект = &Объект
	                      |	И КонтактнаяИнформация.Тип = &Тип";
	ЗапросКонтакт.УстановитьПараметр("Объект",Заказ.Контрагент);
	ЗапросКонтакт.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Рез = ЗапросКонтакт.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		АдресМэйл =  Рез.Представление;
	КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресМэйл) Тогда
		ЗаголовокСобытияВЖурнале = "ПВЗ Email рассылка";
		МассивПисем = Новый Массив;
		ЭлПисьмо = Новый ИнтернетПочтовоеСообщение;
		ТекстПисьма = "Сегодня последний день хранения вашего заказа" +Заказ.Номер + Символы.ПС+
		"в пункте самовывоза "+Заказ.ПунктСамовывоза+". Если по какой-то" + Символы.ПС+
		"причине вы не можете забрать заказ, просим связаться с нами" + Символы.ПС+
		"ответом на это письмо или по телефонам +7 (495) 646-87-80 или" +Символы.ПС +
		"+7 (968) 565-82-28 для того, чтобы мы могли продлить время его" + Символы.ПС +
		"хранения в пункте самовывоза. Если вы передумали забирать" + Символы.ПС+
		"заказ, просим вас заполнить заявление во вложении, подписать"+ Символы.ПС+
		"его и отправить скан или фото ответным письмом.";
		
		ЭлПисьмо.Тема = "Напоминаем, что вас ожидает заказ в пункте самовывоза";
		ЭлПисьмо.Тексты.Добавить(ТекстПисьма);
		ЭлПисьмо.Отправитель = "1cinfo@ukitgroup.ru"; 
		ЭлПисьмо.ИмяОтправителя = "ПВЗ";
		
		МакетВложения = ПолучитьОбщийМакет ("ЗаявлениеНаВозврат");
		ЭлПисьмо.Вложения.Добавить(МакетВложения,"Заявление на возврат ГТР.pdf");
		
		ЭлПисьмо.Получатели.Добавить(АдресМэйл);
		МассивПисем.Добавить(ЭлПисьмо);	
		
		стрОтправленоНаАдрес = "<неизвестный адрес>";
		Если МассивПисем.Количество() > 0 Тогда	
			Попытка
				Для Каждого ТекПисьмо Из МассивПисем Цикл
					МассивПисемОтправка = Новый Массив;
					МассивПисемОтправка.Очистить();
					МассивПисемОтправка.Добавить(ТекПисьмо);			
					РаботаСРегламентныеЗаданиями.ОтправитьЭлектронныеПисьма(МассивПисемОтправка);
					стрОтправленоНаАдрес = "<неизвестный адрес>";	
				КонецЦикла;		
			Исключение
				ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, УровеньЖурналаРегистрации.Ошибка , , , "Ошибка при попытке отправить письмо на адрес " 
				+ Строка(стрОтправленоНаАдрес));	
			КонецПопытки;	
		Иначе
			ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, УровеньЖурналаРегистрации.Информация , , , "Нет адресов для отправки писем ПВЗ Email рассылка");	
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПроверкаОплаты() Экспорт
	Запрос= Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка,
	               |	ЗаказПокупателя.Дата
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Дата >= &ДатаЗаказа
	               |	И ЗаказПокупателя.СтатусОплаты <> &СтатусОплаты";
	Запрос.УстановитьПараметр("ДатаЗаказа",ТекущаяДата()-60*60*72);
	Запрос.УстановитьПараметр("СтатусОплаты",Перечисления.СтатусОплаты.Оплачен);;
	Рез = Запрос.Выполнить().Выбрать();
	Пока рез.Следующий() Цикл
		Если ЗначениеЗаполнено(Рез.Ссылка.ПунктСамовывоза) Тогда
		ДокЗаказ = Рез.Ссылка.ПолучитьОбЪект();     
		Если ТекущаяДата() - Рез.Дата > 60*60*48 Тогда
			ДокЗаказ.записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокЗаказ.ПометкаУдаления = Истина;
		Иначе
			ДокЗаказ.ДатаОтгрузки = ТекущаяДата() + 60*60*24;			
		КонецЕсли;
		ДокЗаказ.ОбменДанными.Загрузка=Истина;
		ДокЗаказ.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
		
	
КонецПроцедуры

Процедура ОтправкаСпискаЗаказов(МассивЗаказов)
	Запрос= новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Псевдонимы.Значение
	               |ИЗ
	               |	РегистрСведений.Псевдонимы КАК Псевдонимы
	               |ГДЕ
	               |	Псевдонимы.Раздел = &Раздел";
	Запрос.УстановитьПараметр("Раздел",Справочники.ПсевдонимыРазделы.НайтиПоНаименованию("ПредупреждениНазначитьКурьераПВЗ"));
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Количество() >0 Тогда
			
		
		
		ЗаголовокСобытияВЖурнале = "ПВЗ Email рассылка";
		МассивПисем = Новый Массив;
		ЭлПисьмо = Новый ИнтернетПочтовоеСообщение;
		
		ТекстПисьма = "Здравствуйте! В письме список заказов для ПВЗ на сегодня. Просьба проставить в этих заказах ответственного (курьера)." + Символы.ПС;
		Для каждого Эл из МассивЗаказов Цикл
			ТекстПисьма = ТекстПисьма + "Заказ №"+ Эл.Ссылка.Номер + " от " +Эл.Ссылка.Дата+ " " +Символы.ПС;			
		КонецЦикла;
		ЭлПисьмо.Тема = "";
		ЭлПисьмо.Тексты.Добавить(ТекстПисьма);
		ЭлПисьмо.Отправитель = "1cinfo@ukitgroup.ru"; 
		ЭлПисьмо.ИмяОтправителя = "ПВЗ";
		
		Пока Рез.Следующий() Цикл;
			ЭлПисьмо.Получатели.Добавить(Рез.Значение);
		КонецЦикла;
		МассивПисем.Добавить(ЭлПисьмо);	
		
		стрОтправленоНаАдрес = "<неизвестный адрес>";
		Если МассивПисем.Количество() > 0 Тогда	
			Попытка
				Для Каждого ТекПисьмо Из МассивПисем Цикл
					МассивПисемОтправка = Новый Массив;
					МассивПисемОтправка.Очистить();
					МассивПисемОтправка.Добавить(ТекПисьмо);			
					РаботаСРегламентныеЗаданиями.ОтправитьЭлектронныеПисьма(МассивПисемОтправка);
					стрОтправленоНаАдрес = "<неизвестный адрес>";	
				КонецЦикла;		
			Исключение
				ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, УровеньЖурналаРегистрации.Ошибка , , , "Ошибка при попытке отправить письмо на адрес " 
				+ Строка(стрОтправленоНаАдрес));	
			КонецПопытки;	
		Иначе
			ЗаписьЖурналаРегистрации(ЗаголовокСобытияВЖурнале, УровеньЖурналаРегистрации.Информация , , , "Нет адресов для отправки писем ПВЗ Email рассылка");	
		КонецЕсли;
	КонецЕсли;
			
			
	
КонецПроцедуры

//***{+Добавления}*** Тасмаджиев 20/07/2018// ->>
//***=!{Добавлен обмен через каталог}!=*** ->>
// Итсина - через каталог
// Ложь  - через FTP
Функция УстановитьВарианТранспортаДанных()
		
		Если Константы._5LB_ОбменСайтЧерезДиректорию.Получить() Тогда
			
			Если ЗначениеЗаполнено(Константы._5LB_ОбменСайтАдресДиректории.Получить()) Тогда
				
				КаталогНаДиске = Новый Файл(Константы._5LB_ОбменСайтАдресДиректории.Получить());
				
				Если КаталогНаДиске.Существует() Тогда
					
					Возврат Истина; 
					
				КонецЕсли;
				
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
			
КонецФункции  //***{-Добавления}*** Тасмаджиев 20/07/2018// <<-

