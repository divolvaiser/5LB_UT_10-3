// Copyright (C) 2012-2016 Engineer Mareev Enterprises

Функция ПеремещениеТоваровКакВнутреннее(ПеремещениеТоваров)
	
	Возврат ПеремещениеТоваров.СкладОтправитель.EmeWmsУчет И ПеремещениеТоваров.СкладПолучатель.EmeWmsУчет;

КонецФункции


//	Процедура ИмпортироватьПеремещенияТоваровКакПриходы импортирует перемещения товаров.
Процедура ИмпортироватьПеремещенияТоваровКакПриходы(ERPData) Экспорт
	
	ЗаголовкиСообщений = Новый ТаблицаЗначений();
	EmeWmsERPEngine.GetHeaders(ERPData, "wms", "erp", "receipt", "NEW,WRN", ЗаголовкиСообщений);
	Счетчик = 0;
	Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней	
		EmeWmsERPEngine.BeginImport(ERPData, "wms", "erp", "receipt", ЗаголовокСообщения.id);
		Попытка
			НовоеСообщение = (ЗаголовокСообщения.state = "NEW");
			Трассировка = "";
			ТемаСообщения = "";
			НачатьТранзакцию();
			Попытка
				Пока EmeWmsERPEngine.NextHeaderLine(ERPData) Цикл
					Если EmeWmsУтилиты.ЭтоТрансфер(ERPData.header.asn_reg_no) Тогда
						ИмпортироватьПеремещениеТоваровКакПриход(ERPData, Трассировка, ТемаСообщения);
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЦикла;
			
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
			EmeWmsERPEngine.CommitImport(ERPData);
			Если НовоеСообщение И ТемаСообщения <> "" Тогда
				ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " 
					+ ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Трассировка;
				EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
			КонецЕсли
		Исключение
			EmeWmsERPEngine.RollbackImport(ERPData);
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Импорт сообщений RECEIPT-трансфер: " + Ошибка);
			ТемаСообщения = "Критическая ошибка импорта сообщения RECEIPT-трансфер";
			ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " 
				+ ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Ошибка;
			EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

	Если Счетчик <> 0 Тогда
		Сообщить("Проимпортировали сообщения RECEIPT-трансфер (" + Счетчик + "шт)");
	КонецЕсли
	
КонецПроцедуры

Процедура ИмпортироватьПеремещениеТоваровКакПриход(ERPData, Трассировка, ТемаСообщения)
	
	//*** Делаем проверки ***
	НомерПриходаEME = ERPData.header.id; //НМА 23.11.17 перемещение из магазина   //Номер приходного документа EME
	
	//	Проверим наличие перемещения товаров
	Если Не ЗначениеЗаполнено(ERPData.header.asn_id) Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "TRNNUL");
		Возврат;
	КонецЕсли;
	
	//	Соберем товары и количества в карту соответствий (ключ - ссылка на товар, значение - количество)
	КоличестваТоваров = Новый Соответствие();
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваров, "receipt_qty", Ложь);
	
	//	Если были ошибки в номенклатуре - выйдем
	Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
		Возврат;
	КонецЕсли;
	
	//НМА 23.11.17 перемещение из магазина >>
	ЗапросПоНомеруЕМЕ = Новый Запрос();
	ЗапросПоНомеруЕМЕ.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.EmeWmsНомер = &НомерПриходаEME И
	|	НЕ ПеремещениеТоваров.ПометкаУдаления";
	ЗапросПоНомеруЕМЕ.УстановитьПараметр("НомерПриходаEME", НомерПриходаEME);
	ВыборкаПоНомеруЕМЕ = ЗапросПоНомеруЕМЕ.Выполнить().Выбрать();
	Если ВыборкаПоНомеруЕМЕ.Следующий() Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "IDEXST");
		Возврат;
	КонецЕсли;
	//НМА 23.11.17 перемещение из магазина <<
	
	//НМА 23.11.17 перемещение из магазина >>
	////	Трассировка начальных количеств
	//Трассировка = Трассировка + Символы.ПС + "Приход по EME:" + Символы.ПС;
	//EmeWmsУтилиты.ТрассировкаКоличествТоваров(Трассировка, КоличестваТоваров);
	//НМА 23.11.17 перемещение из магазина <<

	//	Проверим перемещения
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		
		//	Проверим тип прихода
		Если Не EmeWmsУтилиты.ЭтоТрансфер(ERPData.asns.asn_reg_no) Тогда
			EmeWmsERPEngine.ErrorChild(ERPData, "TRNTYP");
			Продолжить;
		КонецЕсли;
		
		ПеремещениеТоваровСсылка = EmeWmsУтилиты.ПолучитьПеремещениеТоваров(ERPData.asns.id);
		//НМА 19.06.17 Проверка на битую ссылку (<Объект не найден>) >>
		//Если ПеремещениеТоваровСсылка.Пустая() Тогда
		Если ПеремещениеТоваровСсылка.Пустая() или ПеремещениеТоваровСсылка.ПолучитьОбъект()=Неопределено Тогда
		//НМА 19.06.17 Проверка на битую ссылку (<Объект не найден>) <<
			EmeWmsERPEngine.ErrorChild(ERPData, "TRNBAD");
			Продолжить;
		КонецЕсли;	
		
		//	Трассировка перемещения
		//НМА 15.12.16
		//Трассировка = Трассировка + Символы.ПС + ПеремещениеТоваровСсылка.адмЗаказПокупателя + Символы.ПС;
		//НМА 15.12.16
		//НМА 23.11.17 перемещение из магазина >>
		//Трассировка = Трассировка + ПеремещениеТоваровСсылка + Символы.ПС;
		//EmeWmsУтилиты.ТрассировкаТабличнойЧастиТоваров(Трассировка, ПеремещениеТоваровСсылка.Товары);
		//
		//EmeWmsУтилиты.ВычестьКоличестваТоваровПоДокументу(КоличестваТоваров, ПеремещениеТоваровСсылка.Товары); 
		//НМА 23.11.17 перемещение из магазина <<
		
	КонецЦикла;
	
	//НМА 23.11.17 перемещение из магазина >>
	Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
		Возврат;
	КонецЕсли;
	//
	//Если КоличестваТоваров.Количество() <> 0 Тогда
	//	Трассировка = Трассировка + Символы.ПС + "Остался нераспределенный товар:" + Символы.ПС;
	//	EmeWmsУтилиты.ТрассировкаКоличествТоваров(Трассировка, КоличестваТоваров);
	//	ТемаСообщения = "Избыток/недостача товара в " + ERPData.header.id;
	//	EmeWmsERPEngine.WarningHeader(ERPData, "QTYBAD");
	//	Возврат
	//КонецЕсли;
	//НМА 23.11.17 перемещение из магазина <<
	
	//*** Проверки сделали, пишем в базу данных 1C ***
	
	//НМА 27.01.18 Для учета брака >>
	ТЗИзWMS = Новый ТаблицаЗначений;
	КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);  
	ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	ТЗИзWMS.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗИзWMS.Колонки.Добавить("КоличествоПринято",ОписаниеЧисла);
	//НМА 07.07.17
	ТЗИзWMS.Колонки.Добавить("КоличествоБрака",ОписаниеЧисла); 
	ТЗИзWMS.Колонки.Добавить("СрокГодности",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("ДатаПроизводства",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("Штрихкод",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	ТЗИзWMS.Колонки.Добавить("ТипШтрихкода",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ТипыШтрихкодов"));
	//ТЗИзWMS.Колонки.Добавить("НомерГТДПоставщика",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	//ТЗИзWMS.Колонки.Добавить("КодНоменклатурыПоставщика",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(20,0)));
	//НМА 07.07.17
	//ТЗИзWMS.Колонки.Добавить("КачествоТовара",Новый ОписаниеТипов("Строка"),,150); //НМА 07.07.17  //НМА 15.08.17
	ТЗИзWMS.Колонки.Добавить("ЭтоБрак",Новый ОписаниеТипов("Булево"));
	ТЗИзWMS.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТолькоEMEСклад = Ложь;
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	EmeWmsУтилиты.ПолучитьТЗИзWMS(ERPData, ТЗИзWMS, ТолькоEMEСклад);
	//НМА 12.12.16 <<
	//НМА 31.07.17 >>
	//ТЗИзWMS.Свернуть("Номенклатура,СрокГодности,ДатаПроизводства,Штрихкод,ТипШтрихкода,ЕдиницаИзмерения,ЭтоБрак","КоличествоПринято,КоличествоБрака");
	//ТЗИзWMS.Сортировать("КоличествоПринято Убыв, Номенклатура Возр, СрокГодности Возр"); //НМА  29.08.17
	ТЗИзWMS.Свернуть("Номенклатура,ЕдиницаИзмерения,ЭтоБрак","КоличествоПринято,КоличествоБрака"); //НМА  27.01.17
	ТЗИзWMS.Сортировать("КоличествоПринято Убыв, Номенклатура Возр"); //НМА  27.01.17
	
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		
		ПеремещениеТоваровСсылка = EmeWmsУтилиты.ПолучитьПеремещениеТоваров(ERPData.asns.id);
		//Если ПеремещениеТоваровСсылка.адмСтатусЗаказа = Справочники.адмСтатусы.ВПути Тогда  //НМА 19.06.17 закомментировал адмСтатусЗаказа
		ПеремещениеТоваров = ПеремещениеТоваровСсылка.ПолучитьОбъект();
		//ПеремещениеТоваров.ОтражатьВУправленческомУчете = Истина; //НМА 23.11.17 перемещение из магазина
		ПеремещениеТоваров.СтатусДоставки = Перечисления.СтатусПеревозки.Доставлено;
		ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран; //НМА 23.11.17 перемещение из магазина
		
		ПеремещениеТоваров_ИзлишкиНедостача = ПеремещениеТоваров.Скопировать(); //НМА 14.08.17
		ПеремещениеТоваров_ИзлишкиНедостача.Дата   = ТекущаяДата();
		//ПеремещениеТоваров_ИзлишкиНедостача.ДатаПлан = ТекущаяДата();
		ПеремещениеТоваров_ИзлишкиНедостача.ДатаСоздания = ТекущаяДата();
		ПеремещениеТоваров_ИзлишкиНедостача.ДатаФакт = ТекущаяДата();
		ПеремещениеТоваров_ИзлишкиНедостача.ОтражатьВУправленческомУчете = Истина;
		ПеремещениеТоваров_ИзлишкиНедостача.Товары.Очистить();   
		ПеремещениеТоваров_ИзлишкиНедостача.Комментарий =" !Создан на основании перемещения №"+Строка(ПеремещениеТоваровСсылка.Номер)+" от "+Строка(ПеремещениеТоваровСсылка.Дата)+" при приемке из WMS!";  //НМА 14.08.17
		ПеремещениеТоваров_ИзлишкиНедостача.ВнутреннийЗаказ = Неопределено;
		ПеремещениеТоваров_ИзлишкиНедостача.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		
		Если Справочники.Склады.НайтиПоНаименованию("Брак",Истина)<>Справочники.Склады.ПустаяСсылка() Тогда
			//ПеремещениеТоваров_ИзлишкиНедостача.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Транзит;
			ПеремещениеТоваров_ИзлишкиНедостача.СкладПолучатель = Справочники.Склады.НайтиПоНаименованию("Брак",Истина);
		КонецЕсли;
		
		ПеремещениеТоваров_Недостача = Документы.ПеремещениеТоваров.СоздатьДокумент();
		ПеремещениеТоваров_Недостача.Организация = ПеремещениеТоваровСсылка.Организация;
		ПеремещениеТоваров_Недостача.Дата   = ТекущаяДата();
		ПеремещениеТоваров_Недостача.ДатаСоздания = ТекущаяДата();
		ПеремещениеТоваров_Недостача.ДатаФакт = ТекущаяДата();
		ПеремещениеТоваров_Недостача.ОтражатьВУправленческомУчете = Истина;
		ПеремещениеТоваров_Недостача.СкладОтправитель = ПеремещениеТоваровСсылка.СкладОтправитель;
		ПеремещениеТоваров_Недостача.СкладПолучатель = Справочники.Склады.НайтиПоНаименованию("Претензионный",Истина);
		ПеремещениеТоваров_Недостача.Комментарий ="Создан по факту недостачи в перемещении "+Строка(ПеремещениеТоваровСсылка.Номер)+" при приемке из WMS";
		ПеремещениеТоваров_Недостача.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		ПеремещениеТоваров_Недостача.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке;
		ПеремещениеТоваров_Недостача.EmeWmsДатаИмпорта = ТекущаяДата();
		ПеремещениеТоваров_Недостача.EmeWmsНомер = НомерПриходаEME;
		
		ПеремещениеТоваров_Излишки = Документы.ПеремещениеТоваров.СоздатьДокумент();
		ПеремещениеТоваров_Излишки.Организация = ПеремещениеТоваровСсылка.Организация;
		ПеремещениеТоваров_Излишки.Дата   = ТекущаяДата();
		ПеремещениеТоваров_Излишки.ДатаСоздания = ТекущаяДата();
		ПеремещениеТоваров_Излишки.ДатаФакт = ТекущаяДата();
		ПеремещениеТоваров_Излишки.ОтражатьВУправленческомУчете = Истина;
		ПеремещениеТоваров_Излишки.СкладОтправитель = ПеремещениеТоваровСсылка.СкладОтправитель;
		ПеремещениеТоваров_Излишки.СкладПолучатель = ПеремещениеТоваровСсылка.СкладПолучатель;
		ПеремещениеТоваров_Излишки.Комментарий ="Создан по факту излишек в перемещении "+Строка(ПеремещениеТоваровСсылка.Номер)+" при приемке из WMS";
		ПеремещениеТоваров_Излишки.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		ПеремещениеТоваров_Излишки.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке;
		ПеремещениеТоваров_Излишки.EmeWmsДатаИмпорта = ТекущаяДата();
		ПеремещениеТоваров_Излишки.EmeWmsНомер = НомерПриходаEME;


		
		// проставим во все строки "КоличествоСобрано" равные "Количеству", мы обрабатываем только такой случай
		Для каждого СтрокаТЗИзWMS из ТЗИзWMS Цикл 
			//НМА 27.01.18 Для учета брака >>
			//Качество - брак
			СтрокаТЧ = ПеремещениеТоваров.Товары.Найти(СтрокаТЗИзWMS.Номенклатура);
			Если СтрокаТЧ <> Неопределено Тогда
				Если СтрокаТЗИзWMS.КоличествоБрака>0 или СтрокаТЗИзWMS.ЭтоБрак Тогда
					НоменклатураПоБраку = СтрокаТЗИзWMS.Номенклатура;
					ЕдиницаИзмеренияНоменклатурыПоБраку = СтрокаТЗИзWMS.ЕдиницаИзмерения;
					СтрокаПеремещениеТоваров_ИзлишкиНедостача = ПеремещениеТоваров_ИзлишкиНедостача.Товары.Добавить();
					СтрокаПеремещениеТоваров_ИзлишкиНедостача.Качество = Справочники.Качество.НайтиПоНаименованию("Брак",Истина); //НМА 17.07.17
					
					СтрокаПеремещениеТоваров_ИзлишкиНедостача.Номенклатура      = НоменклатураПоБраку;
					СтрокаПеремещениеТоваров_ИзлишкиНедостача.ЕдиницаИзмерения  = ЕдиницаИзмеренияНоменклатурыПоБраку;
					СтрокаПеремещениеТоваров_ИзлишкиНедостача.Коэффициент       = ЕдиницаИзмеренияНоменклатурыПоБраку.Коэффициент;
					//СтрокаПеремещениеТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЧ.Количество-СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя
					Если СтрокаТЗИзWMS.ЭтоБрак Тогда
						//СтрокаПеремещениеТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЧ.Количество*СтрокаТЧ.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент-СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя
						СтрокаПеремещениеТоваров_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
						СтрокаПеремещениеТоваров_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоПринято;
					Иначе
						//СтрокаПеремещениеТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЧ.Количество*СтрокаТЧ.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент-СтрокаТЗИзWMS.КоличествоБрака; //НМА 27.01.18 возврат от покупателя
						СтрокаПеремещениеТоваров_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоБрака;
						СтрокаПеремещениеТоваров_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоБрака;
					КонецЕсли;
					////ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПеремещениеТоваров_ИзлишкиНедостача, ПеремещениеТоваров_ИзлишкиНедостача);
					////ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПеремещениеТоваров_ИзлишкиНедостача, ПеремещениеТоваров_ИзлишкиНедостача);
					
					Если (СтрокаТЗИзWMS.ЭтоБрак) ИЛИ (СтрокаТЗИзWMS.КоличествоПринято<=0) Тогда
						ПеремещениеТоваров.Товары.Удалить(СтрокаТЧ);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТЧ.ЕдиницаИзмерения <> СтрокаТЗИзWMS.ЕдиницаИзмерения Тогда
					СтрокаТЗИзWMS.КоличествоПринято = (СтрокаТЗИзWMS.КоличествоПринято*СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент)/СтрокаТЧ.Коэффициент;
				КонецЕсли;
				
				Если СтрокаТЗИзWMS.КоличествоПринято<=0 Тогда
					СтрокаНедостача = ПеремещениеТоваров_Недостача.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНедостача,СтрокаТЧ);
					ПеремещениеТоваров.Товары.Удалить(СтрокаТЧ);
					Продолжить;
				КонецЕсли;
				
				Разница=0;
				Если СтрокаТЗИзWMS.КоличествоПринято<>СтрокаТЧ.Количество Тогда
					Разница = СтрокаТЧ.Количество - СтрокаТЗИзWMS.КоличествоПринято;
					Если Разница>0 Тогда //недостача
						СтрокаНедостача = ПеремещениеТоваров_Недостача.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНедостача,СтрокаТЧ);
						СтрокаНедостача.Количество = Разница;
					ИначеЕсли Разница<0 Тогда //излишки
						СтрокаИзлишки = ПеремещениеТоваров_Излишки.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаИзлишки,СтрокаТЧ);
						СтрокаИзлишки.Количество = -Разница;
						СтрокаИзлишки.КоличествоПринято = -Разница;
					КонецЕсли;
				КонецЕсли;

				
				//СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЗИзWMS.ЕдиницаИзмерения;
				//СтрокаТЧ.Коэффициент = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
				Если Разница>0 Тогда
					СтрокаТЧ.Количество = СтрокаТЗИзWMS.КоличествоПринято;
				КонецЕсли;
				СтрокаТЧ.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
			Иначе
				Если СтрокаТЗИзWMS.КоличествоБрака>0 ИЛИ СтрокаТЗИзWMS.ЭтоБрак Тогда
					НоменклатураПоБраку = СтрокаТЗИзWMS.Номенклатура;
					ЕдиницаИзмеренияНоменклатурыПоБраку = СтрокаТЗИзWMS.ЕдиницаИзмерения;
					СтрокаПеремещениеТоваров_ИзлишкиНедостача = ПеремещениеТоваров_ИзлишкиНедостача.Товары.Добавить();
					СтрокаПеремещениеТоваров_ИзлишкиНедостача.Качество = Справочники.Качество.НайтиПоНаименованию("Брак",Истина); //НМА 17.07.17
					
					СтрокаПеремещениеТоваров_ИзлишкиНедостача.Номенклатура      = НоменклатураПоБраку;
					СтрокаПеремещениеТоваров_ИзлишкиНедостача.ЕдиницаИзмерения  = ЕдиницаИзмеренияНоменклатурыПоБраку;
					СтрокаПеремещениеТоваров_ИзлишкиНедостача.Коэффициент       = ЕдиницаИзмеренияНоменклатурыПоБраку.Коэффициент;
					//СтрокаПеремещениеТоваров_ИзлишкиНедостача.КоличествоСобрано = СтрокаТЧ.Количество-СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя
					Если СтрокаТЗИзWMS.ЭтоБрак Тогда
						//СтрокаПеремещениеТоваров_ИзлишкиНедостача.КоличествоСобрано = 0-СтрокаТЗИзWMS.КоличествоПринято; //НМА 27.01.18 возврат от покупателя
						СтрокаПеремещениеТоваров_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
						СтрокаПеремещениеТоваров_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоПринято;	 
					Иначе
						//СтрокаПеремещениеТоваров_ИзлишкиНедостача.КоличествоСобрано = 0-СтрокаТЗИзWMS.КоличествоБрака; //НМА 27.01.18 возврат от покупателя
						СтрокаПеремещениеТоваров_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоБрака;
						СтрокаПеремещениеТоваров_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоБрака;
					КонецЕсли;
				Иначе
					СтрокаИзлишки = ПеремещениеТоваров_Излишки.Товары.Добавить();
					СтрокаИзлишки.Номенклатура = СтрокаТЗИзWMS.Номенклатура;
					СтрокаИзлишки.ЕдиницаИзмерения = СтрокаТЗИзWMS.ЕдиницаИзмерения;
					СтрокаИзлишки.Коэффициент = СтрокаИзлишки.ЕдиницаИзмерения.Коэффициент;
					СтрокаИзлишки.Количество = СтрокаТЗИзWMS.КоличествоПринято;
					СтрокаИзлишки.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
					СтрокаИзлишки.Качество = Справочники.Качество.Новый;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Сч = 0;
		Пока Сч < ПеремещениеТоваров.Товары.Количество() Цикл
			СтрокаТЧ = ПеремещениеТоваров.Товары.Получить(Сч);
			//СтрокаТЧ.Количество = СтрокаТЧ.КоличествоПринято;  //НМА 23.01.18 перемещение из магазина
			Если СтрокаТЧ.КоличествоПринято<=0 Тогда
				СтрокаНедостача = ПеремещениеТоваров_Недостача.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНедостача,СтрокаТЧ);
				ПеремещениеТоваров.Товары.Удалить(СтрокаТЧ);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		//ПеремещениеТоваров.Дата = ТекущаяДата();
		ПеремещениеТоваров.EmeWmsНомер = НомерПриходаEME;
		ПеремещениеТоваров.EmeWmsДатаИмпорта = ТекущаяДата();
		Если ПеремещениеТоваров_ИзлишкиНедостача.Товары.Количество()>0 Тогда
			//Попытка
			//	ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
			//Исключение
			//	Текст_ОшибкаЗаписи = ОписаниеОшибки();
			//	ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеТоваров, Текст_ОшибкаЗаписи);
			//	ВызватьИсключение Текст_ОшибкаЗаписи;
			//КонецПопытки;
			Попытка
				ПеремещениеТоваров_ИзлишкиНедостача.Записать(РежимЗаписиДокумента.Проведение);
				ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеТоваров_ИзлишкиНедостача.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
				
				СвязанныеДокиНабор = РегистрыСведений.СвязанныеДокументы.СоздатьНаборЗаписей();
				СвязанныеДокиНабор.Отбор.ДокументОснование.Установить(ПеремещениеТоваров.Ссылка);
				СвязанныеДокиНабор.Отбор.Документ.Установить(ПеремещениеТоваров_ИзлишкиНедостача.Ссылка);
				СвязанныеДокиЗапись = СвязанныеДокиНабор.Добавить();
				СвязанныеДокиЗапись.ДокументОснование = ПеремещениеТоваров.Ссылка;
				СвязанныеДокиЗапись.Документ = ПеремещениеТоваров_ИзлишкиНедостача.Ссылка;
				СвязанныеДокиНабор.Записать();
			Исключение
				Попытка
					ПеремещениеТоваров_ИзлишкиНедостача.Записать(РежимЗаписиДокумента.Запись);
					ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеТоваров_ИзлишкиНедостача.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
					
					СвязанныеДокиНабор = РегистрыСведений.СвязанныеДокументы.СоздатьНаборЗаписей();
					СвязанныеДокиНабор.Отбор.ДокументОснование.Установить(ПеремещениеТоваров.Ссылка);
					СвязанныеДокиНабор.Отбор.Документ.Установить(ПеремещениеТоваров_ИзлишкиНедостача.Ссылка);
					СвязанныеДокиЗапись = СвязанныеДокиНабор.Добавить();
					СвязанныеДокиЗапись.ДокументОснование = ПеремещениеТоваров.Ссылка;
					СвязанныеДокиЗапись.Документ = ПеремещениеТоваров_ИзлишкиНедостача.Ссылка;
					СвязанныеДокиНабор.Записать();
				Исключение
					Текст_ОшибкаЗаписи = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеТоваров_ИзлишкиНедостача.Ссылка, Текст_ОшибкаЗаписи);
					ВызватьИсключение Текст_ОшибкаЗаписи;
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
		
		Если ПеремещениеТоваров.Товары.Количество()>0 Тогда
			Попытка
				ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Текст_ОшибкаЗаписи = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеТоваров, Текст_ОшибкаЗаписи);
				ВызватьИсключение Текст_ОшибкаЗаписи;
			КонецПопытки;
		ИначеЕсли ПеремещениеТоваров.Товары.Количество()=0 Тогда //весь товар бракованный или всё в недостаче
		   	Попытка
				ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Текст_ОшибкаЗаписи = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеТоваров, Текст_ОшибкаЗаписи);
				ВызватьИсключение Текст_ОшибкаЗаписи;
			КонецПопытки;
		КонецЕсли;
		
		Если ПеремещениеТоваров_Недостача.Товары.Количество()>0 Тогда
			Попытка
				ПеремещениеТоваров_Недостача.Записать(РежимЗаписиДокумента.Запись);
				ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеТоваров_Недостача.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
				
				СвязанныеДокиНабор = РегистрыСведений.СвязанныеДокументы.СоздатьНаборЗаписей();
				СвязанныеДокиНабор.Отбор.ДокументОснование.Установить(ПеремещениеТоваров.Ссылка);
				СвязанныеДокиНабор.Отбор.Документ.Установить(ПеремещениеТоваров_Недостача.Ссылка);
				СвязанныеДокиЗапись = СвязанныеДокиНабор.Добавить();
				СвязанныеДокиЗапись.ДокументОснование = ПеремещениеТоваров.Ссылка;
				СвязанныеДокиЗапись.Документ = ПеремещениеТоваров_Недостача.Ссылка;
				СвязанныеДокиНабор.Записать();
			Исключение
				Текст_ОшибкаЗаписи = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеТоваров_Недостача.Ссылка, Текст_ОшибкаЗаписи);
				ВызватьИсключение Текст_ОшибкаЗаписи;
			КонецПопытки;
		КонецЕсли;

		Если ПеремещениеТоваров_Излишки.Товары.Количество()>0 Тогда
			Попытка
				ПеремещениеТоваров_Излишки.Записать(РежимЗаписиДокумента.Запись);
				ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеТоваров_Излишки.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
				
				СвязанныеДокиНабор = РегистрыСведений.СвязанныеДокументы.СоздатьНаборЗаписей();
				СвязанныеДокиНабор.Отбор.ДокументОснование.Установить(ПеремещениеТоваров.Ссылка);
				СвязанныеДокиНабор.Отбор.Документ.Установить(ПеремещениеТоваров_Излишки.Ссылка);
				СвязанныеДокиЗапись = СвязанныеДокиНабор.Добавить();
				СвязанныеДокиЗапись.ДокументОснование = ПеремещениеТоваров.Ссылка;
				СвязанныеДокиЗапись.Документ = ПеремещениеТоваров_Излишки.Ссылка;
				СвязанныеДокиНабор.Записать();
			Исключение
				Текст_ОшибкаЗаписи = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеТоваров_Излишки.Ссылка, Текст_ОшибкаЗаписи);
				ВызватьИсключение Текст_ОшибкаЗаписи;
			КонецПопытки;
		КонецЕсли;

		
		
		//КонецЕсли;  //НМА 19.06.17 закомментировал адмСтатусЗаказа
	КонецЦикла;
	//НМА 27.01.18 Для учета брака <<
	
	//БЫЛО
	//EmeWmsERPEngine.SelectChild(ERPData, "asns");
	//Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
	//	
	//	ПеремещениеТоваровСсылка = EmeWmsУтилиты.ПолучитьПеремещениеТоваров(ERPData.asns.id);
	//	//Если ПеремещениеТоваровСсылка.адмСтатусЗаказа = Справочники.адмСтатусы.ВПути Тогда  //НМА 19.06.17 закомментировал адмСтатусЗаказа
	//	ПеремещениеТоваров = ПеремещениеТоваровСсылка.ПолучитьОбъект();
	//	ПеремещениеТоваров.ОтражатьВУправленческомУчете = Истина; //НМА 23.11.17 перемещение из магазина
	//	ПеремещениеТоваров.СтатусДоставки = Перечисления.СтатусПеревозки.Доставлено;
	//	ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран; //НМА 23.11.17 перемещение из магазина
	//	// проставим во все строки "КоличествоСобрано" равные "Количеству", мы обрабатываем только такой случай
	//	Для каждого СтрокаТЧ Из ПеремещениеТоваров.Товары Цикл //НМА 23.11.17 перемещение из магазина
	//		СтрокаТЧ.КоличествоСобрано = СтрокаТЧ.Количество;  //НМА 23.11.17 перемещение из магазина
	//		СтрокаТЧ.КоличествоПринято = КоличестваТоваров.Получить(СтрокаТЧ.Номенклатура); //НМА 23.11.17 перемещение из магазина
	//		СтрокаТЧ.Количество = СтрокаТЧ.КоличествоПринято;  //НМА 23.01.18 перемещение из магазина
	//	КонецЦикла; //НМА 21.11.17 возврат от покупателя
	//	ПеремещениеТоваров.EmeWmsНомер = НомерПриходаEME;
	//	ПеремещениеТоваров.EmeWmsДатаИмпорта = ТекущаяДата();
	//	ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Проведение);
	//	//КонецЕсли;  //НМА 19.06.17 закомментировал адмСтатусЗаказа
	//КонецЦикла;
	
	EmeWmsERPEngine.Success(ERPData);
		
КонецПроцедуры

//	Процедура ИмпортироватьПеремещенияТоваровКакОтгрузки импортирует перемещения товаров.
Процедура ИмпортироватьПеремещенияТоваровКакОтгрузки(ERPData) Экспорт
	
	ЗаголовкиСообщений = Новый ТаблицаЗначений();
	EmeWmsERPEngine.GetHeaders(ERPData, "wms", "erp", "despatch", "NEW,WRN", ЗаголовкиСообщений);
	
	Счетчик = 0;
	Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
		
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней	
		EmeWmsERPEngine.BeginImport(ERPData, "wms", "erp", "despatch", ЗаголовокСообщения.id);
		Попытка
			НовоеСообщение = (ЗаголовокСообщения.state = "NEW");
			Трассировка = "";
			ТемаСообщения = "";
			НачатьТранзакцию();
			Попытка
				Пока EmeWmsERPEngine.NextHeaderLine(ERPData) Цикл
					Если EmeWmsУтилиты.ЭтоТрансфер(ERPData.header.order_no) Тогда
						ИмпортироватьПеремещениеТоваровКакОтгрузка(ERPData, Трассировка, ТемаСообщения);
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
			EmeWmsERPEngine.CommitImport(ERPData);
			Если НовоеСообщение И ТемаСообщения <> "" Тогда
				ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " 
					+ ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.order_no + Символы.ПС + Трассировка;
				EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
			КонецЕсли
		Исключение
			EmeWmsERPEngine.RollbackImport(ERPData);
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Импорт сообщений DESPATCH-трансфер: " + Ошибка);
			ТемаСообщения = "Критическая ошибка импорта сообщения DESPATCH-трансфер";
			ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " 
				+ ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.order_no + Символы.ПС + Ошибка;
			EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если Счетчик <> 0 Тогда
		Сообщить("Проимпортировали сообщения DESPATCH-трансфер (" + Счетчик + "шт)");
	КонецЕсли

КонецПроцедуры

Процедура ИмпортироватьПеремещениеТоваровКакОтгрузка(ERPData, Трассировка, ТемаСообщения)
	
	//	Проверим наличие перемещения товаров
	ПеремещениеТоваровСсылка = EmeWmsУтилиты.ПолучитьПеремещениеТоваров(ERPData.header.id);
	//НМА 19.06.17 Проверка на битую ссылку (<Объект не найден>) >>
	//Если ПеремещениеТоваровСсылка.Пустая() Тогда
	Если ПеремещениеТоваровСсылка.Пустая() или ПеремещениеТоваровСсылка.ПолучитьОбъект()=Неопределено Тогда
		//НМА 19.06.17 Проверка на битую ссылку (<Объект не найден>) <<
		EmeWmsERPEngine.ErrorHeader(ERPData, "TRNBAD");
		Возврат;
	КонецЕсли;	
	
	//	Соберем товары и количества в карту соответствий (ключ - ссылка на товар, значение - количество)
	КоличестваТоваров = Новый Соответствие();
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	//EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваров, "shipped_qty", Ложь);
	//НМА 23.11.17 перемещения с основного склада в магазины >>
	Если ERPData.header.order_status = "Подобран" Тогда 
		EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваров, "shipped_qty", Ложь);
	Иначе
		EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваров, "picked_qty", Ложь);
	КонецЕсли; 
	//НМА 23.11.17 перемещения с основного склада в магазины <<
	
	//	Если были ошибки в номенклатуре - выйдем
	Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
		Возврат;
	КонецЕсли;
	
	//НМА 23.11.17 перемещения с основного склада в магазины >>
	////	Трассировка начальных количеств
	//Трассировка = Трассировка + Символы.ПС + "Отгрузка по EME:" + Символы.ПС;
	//EmeWmsУтилиты.ТрассировкаКоличествТоваров(Трассировка, КоличестваТоваров);
	//НМА 23.11.17 перемещения с основного склада в магазины <<
	
	//	Проверим тип прихода
	Если Не EmeWmsУтилиты.ЭтоТрансфер(ERPData.header.order_no) Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "TRNTYP");
		Возврат;
	КонецЕсли;
	
	//	Трассировка перемещения
	//НМА 15.12.16
	//Трассировка = Трассировка + Символы.ПС + ПеремещениеТоваровСсылка.адмЗаказПокупателя + Символы.ПС;
	//НМА 15.12.16
	//НМА 23.11.17 перемещения с основного склада в магазины >>
	//Трассировка = Трассировка + ПеремещениеТоваровСсылка + Символы.ПС;
	//EmeWmsУтилиты.ТрассировкаТабличнойЧастиТоваров(Трассировка, ПеремещениеТоваровСсылка.Товары);
	//
	////	Сверим количества в перемещении и уведомлении
	//EmeWmsУтилиты.ВычестьКоличестваТоваровПоДокументу(КоличестваТоваров, ПеремещениеТоваровСсылка.Товары);
	//Если КоличестваТоваров.Количество() <> 0 Тогда
	//	Трассировка = Трассировка + Символы.ПС + "Остался нераспределенный товар:" + Символы.ПС;
	//	EmeWmsУтилиты.ТрассировкаКоличествТоваров(Трассировка, КоличестваТоваров);
	//	ТемаСообщения = "Избыток/недостача товара в " + ERPData.header.order_no;
	//	EmeWmsERPEngine.WarningHeader(ERPData, "QTYBAD");
	//	Возврат
	//КонецЕсли;
	
	//*** Проверки сделали, пишем в базу данных 1C ***
	
	//Если ПеремещениеТоваровСсылка.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собирается И ERPData.header.order_status = "Закрыт" Тогда
	//		
	//	ПеремещениеТоваров = ПеремещениеТоваровСсылка.ПолучитьОбъект();
	//	ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;
	//	//ПеремещениеТоваров.СтатусДоставки = Перечисления.СтатусПеревозки.Подготовка;
	//	ПеремещениеТоваров.EmeWmsНомер = ERPData.header.order_no;
	//	ПеремещениеТоваров.EmeWmsДатаИмпорта = ТекущаяДата();
	//	ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Проведение);
	//	//	ПеремещениеТоваров.ОбработкаПроведения меняет в объекте статус до ВПути, поэтому еще раз проведем.
	//	//ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Проведение);
	//		
	//КонецЕсли;
	//НМА 23.11.17 перемещения с основного склада в магазины <<
	
	//Если ERPData.header.order_status = "Закрыт" Тогда
	//	
	//	ПеремещениеТоваров = ПеремещениеТоваровСсылка.ПолучитьОбъект();
	//	ПеремещениеТоваров.адмСтатусЗаказа = Справочники.адмСтатусы.ВПути;
	//	ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Проведение);
	//	
	//КонецЕсли;
	
	//НМА 23.11.17 перемещения с основного склада в магазины >>
	//Если ERPData.header.order_status = "Закрыт" Тогда //НМА 04.12.17
	Если (ERPData.header.order_status = "Подобран") ИЛИ (ERPData.header.order_status = "Закрыт") Тогда //и ПеремещениеТоваровСсылка.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собирается Тогда //НМА 04.12.17
		
		Если Константы.EmeWmsИмпортDespatchПроставлятьСобрано.Получить() Тогда //НМА 06.12.17 константа EmeWmsИмпортDespatchПроставлятьСобрано
			//НМА 06.12.17 >>
			Если Константы.EmeWmsИмпортDespatchОбрабатыватьСРасхождениями.Получить() = Ложь Тогда
				Если ERPData.header.is_exist_no_loaded = 1 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			//НМА 06.12.17 <<
			
			ПеремещениеТоваров = ПеремещениеТоваровСсылка.ПолучитьОбъект();
			//ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран; //НМА 07.12.17
			// проставим во все строки "КоличествоСобрано" равные "Количеству", мы обрабатываем только такой случай
			Для каждого СтрокаТЧ Из ПеремещениеТоваров.Товары Цикл
				WMSКоличествоСобрано = КоличестваТоваров.Получить(СтрокаТЧ.Номенклатура);
				Если WMSКоличествоСобрано=Неопределено Тогда
					WMSКоличествоСобрано=0;
				КонецЕсли;
				СтрокаТЧ.КоличествоСобрано = (WMSКоличествоСобрано/?(СтрокаТЧ.Коэффициент=0,1,СтрокаТЧ.Коэффициент));
				Если СтрокаТЧ.КоличествоСобрано>СтрокаТЧ.Количество Тогда
					Возврат;
				КонецЕсли;
				
				Если СтрокаТЧ.КоличествоСобрано>0 Тогда
					EMEWMSУтилиты.РегистрируемСборку(СтрокаТЧ,ПеремещениеТоваровСсылка);
				КонецЕсли;
				
				//СтрокаТЧ.КоличествоСобрано = КоличестваТоваров.Получить(СтрокаТЧ.Номенклатура);
			КонецЦикла; 
			
			//Если EmeWmsУтилиты.ЕстьРасхожденияВПеремещении(ПеремещениеТоваров.Товары) Тогда
			//	ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Недостача;
			//КонецЕсли;

			
			ПеремещениеТоваров.EmeWmsНомер = ERPData.header.order_no;
			ПеремещениеТоваров.EmeWmsДатаИмпорта = ТекущаяДата();
			
			ПеремещениеТоваров.Комментарий = ERPData.header.comment;
			
			Если ERPData.header.is_packed=1 Тогда
				EmeWmsУтилиты.ЗаписатьДанныеПоКоробкамВПеремещение(ERPData.header.sscc_array,ПеремещениеТоваров);
			КонецЕсли;
			
			//ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Проведение); //НМА 07.12.17
			//ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись); //НМА 07.12.17
			
			//EmeWmsERPEngine.Success(ERPData);
			
		КонецЕсли; //НМА 06.12.17 константа EmeWmsИмпортDespatchПроставлятьСобрано
		
				
		Если (ERPData.header.order_status = "Подобран") И  (ERPData.header.is_packed=0) Тогда
			тмп = EmeWmsУтилиты.ЕстьРасхожденияВПеремещении(ПеремещениеТоваров.Товары,ПеремещениеТоваров);
			ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собирается;
			ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
			EmeWmsERPEngine.Success(ERPData);
		ИначеЕсли (ERPData.header.order_status = "Подобран") И  (ERPData.header.is_packed=1) Тогда
			//тмп = EmeWmsУтилиты.ЕстьРасхожденияВПеремещении(ПеремещениеТоваров.Товары,ПеремещениеТоваров);
			ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;
			ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
			EmeWmsERPEngine.Success(ERPData);
		ИначеЕсли ERPData.header.order_status = "Закрыт" Тогда
			ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;
			ПеремещениеТоваров.СтатусДоставки = Перечисления.СтатусПеревозки.ВПути;
			ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
			EmeWmsERPEngine.Success(ERPData);
		КонецЕсли;

		
		//ИначеЕсли ERPData.header.order_status = "Перемещается в пикинг/OA" ИЛИ ERPData.header.order_status = "В подборке" ИЛИ ERPData.header.order_status = "Подобран" Тогда //НМА 04.12.17
	//ИначеЕсли ERPData.header.order_status = "Перемещается в пикинг/OA" ИЛИ ERPData.header.order_status = "Просчитан" ИЛИ ERPData.header.order_status = "В пачке" Тогда //НМА 06.12.17
	//	ПеремещениеТоваров = ПеремещениеТоваровСсылка.ПолучитьОбъект();
	//	//НМА 07.11.17 >>
	//	
	//	//НМА 06.12.17 >> константа EmeWmsИмпортDespatchОбрабатыватьСРасхождениями
	//	Если Константы.EmeWmsИмпортDespatchОбрабатыватьСРасхождениями.Получить() = Ложь Тогда
	//		Если ERPData.header.is_exist_no_loaded = 1 Тогда
	//			Возврат;
	//		КонецЕсли;
	//	КонецЕсли;
	//	//НМА 06.12.17 << константа EmeWmsИмпортDespatchОбрабатыватьСРасхождениями
	//	
	//	//Если ERPData.header.is_exist_no_loaded = 1 Тогда //Требуется корректировка в 1С //НМА 06.12.17
	//	//НМА 04.12.17
	//	//ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.КорректировкаЗаказа;
	//	//Для каждого СтрокаТЧ Из ПеремещениеТоваров.Товары Цикл
	//	//	СтрокаТЧ.КоличествоСобрано = КоличестваТоваров.Получить(СтрокаТЧ.Номенклатура);
	//	//КонецЦикла;
	//	//ПеремещениеТоваров.Записать();
	//	//НМА 04.12.17
	//	//ИначеЕсли ПеремещениеТоваровСсылка.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ОтправленНаСклад Тогда  //НМА 04.12.17
	//	//ИначеЕсли ПеремещениеТоваровСсылка.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке Тогда  //НМА 04.12.17 
	//	Если ПеремещениеТоваровСсылка.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке Тогда //НМА 06.12.17
	//		ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собирается;   //НМА 07.09.17 << Перемещается в пикинг/OA = Собирается
	//		ПеремещениеТоваров.Записать();
	//	КонецЕсли;
		//НМА 07.11.17 <<
	КонецЕсли;
	//НМА 23.11.17 перемещения с основного склада в магазины <<
			
	//EmeWmsERPEngine.Success(ERPData); //НМА 23.11.17 перемещения с основного склада в магазины
		
	КонецПроцедуры

Процедура ИмпортироватьПеремещенияТоваровКакВнутренние(ERPData) Экспорт
	
	ЗаголовкиСообщений = Новый ТаблицаЗначений();
	EmeWmsERPEngine.GetHeaders(ERPData, "wms", "erp", "change", "NEW,WRN", ЗаголовкиСообщений);
	
	Счетчик = 0;
	Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
		
		EmeWmsERPEngine.BeginImport(ERPData, "wms", "erp", "change", ЗаголовокСообщения.id);
		Попытка
			НовоеСообщение = (ЗаголовокСообщения.state = "NEW");
			Трассировка = "";
			ТемаСообщения = "";
			НачатьТранзакцию();
			Попытка
				Пока EmeWmsERPEngine.NextHeaderLine(ERPData) Цикл
					Если ЗначениеЗаполнено(ERPData.header.change_reg_no) Тогда
						ИмпортироватьПеремещениеТоваровКакВнутреннее(ERPData, Трассировка, ТемаСообщения);
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
			EmeWmsERPEngine.CommitImport(ERPData);
		Исключение
			EmeWmsERPEngine.RollbackImport(ERPData);
			Ошибка = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Импорт сообщений change: " + Ошибка);
		КонецПопытки;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ИмпортироватьПеремещениеТоваровКакВнутреннее(ERPData, Трассировка, ТемаСообщения)
	
	//	Проверим наличие перемещения товаров
	//ПеремещениеТоваровСсылка = EmeWmsУтилиты.ПолучитьПеремещениеТоваров(ERPData.header.id);
	ПеремещениеТоваровСсылка = Документы.ПеремещениеТоваров.НайтиПоНомеру(СокрЛП(ERPData.header.change_reg_no),ТекущаяДата());
	Если ПеремещениеТоваровСсылка.Пустая() или ПеремещениеТоваровСсылка.ПолучитьОбъект()=Неопределено Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "TRNBAD");
		Возврат;
	КонецЕсли;	
	
	Если НЕ ПеремещениеТоваровКакВнутреннее(ПеремещениеТоваровСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	//	Соберем товары и количества в карту соответствий (ключ - ссылка на товар, значение - количество)
	КоличестваТоваров = Новый Соответствие();
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваров, "quantity", Ложь);
	
	
	Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Константы.EmeWmsИмпортDespatchПроставлятьСобрано.Получить() Тогда 
		Если Константы.EmeWmsИмпортDespatchОбрабатыватьСРасхождениями.Получить() = Ложь Тогда
			Если ERPData.header.is_exist_no_loaded = 1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПеремещениеТоваров = ПеремещениеТоваровСсылка.ПолучитьОбъект();
		
		ЕстьНедостача = Ложь;
		Для каждого СтрокаТЧ Из ПеремещениеТоваров.Товары Цикл
			WMSКоличествоСобрано = КоличестваТоваров.Получить(СтрокаТЧ.Номенклатура);
			Если WMSКоличествоСобрано=Неопределено Тогда
				WMSКоличествоСобрано=0;
			КонецЕсли;
			СтрокаТЧ.КоличествоСобрано = (WMSКоличествоСобрано/?(СтрокаТЧ.Коэффициент=0,1,СтрокаТЧ.Коэффициент));
			Если СтрокаТЧ.КоличествоСобрано>СтрокаТЧ.Количество Тогда
				Возврат;
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоСобрано<>СтрокаТЧ.Количество Тогда
				ЕстьНедостача=Истина;
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоСобрано>0 Тогда
				EMEWMSУтилиты.РегистрируемСборку(СтрокаТЧ,ПеремещениеТоваровСсылка);
			КонецЕсли;
			
			
		КонецЦикла; 
		
		ПеремещениеТоваров.EmeWmsНомер = ERPData.header.id;
		ПеремещениеТоваров.EmeWmsДатаИмпорта = ТекущаяДата();
		
	КонецЕсли; 		
	
	
	
	Если ЕстьНедостача Тогда
		ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Недостача;
	Иначе
		ПеремещениеТоваров.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран;
	КонецЕсли;
	ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
	EmeWmsERPEngine.Success(ERPData);
		
				
КонецПроцедуры
