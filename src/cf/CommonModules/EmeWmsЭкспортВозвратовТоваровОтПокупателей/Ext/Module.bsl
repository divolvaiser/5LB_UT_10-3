// Copyright (C) 2012-2016 Engineer Mareev Enterprises

//	Функция РазрешенКЭкспорту возвращает Истина, если возврат товаров от покупателя разрешен к экспорту.
Функция РазрешенКЭкспорту(ВозвратТоваровОтПокупателя) Экспорт
	
	//НМА 21.11.17 возврат от покупателя
	//Если ВозвратТоваровОтПокупателя.ПометкаУдаления Тогда
	//	Возврат Ложь;
	//КонецЕсли;
    //НМА 21.11.17 возврат от покупателя

	//НМА 01.11.2017 >>
	//Если Не ВозвратТоваровОтПокупателя.Проведен Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если ВозвратТоваровОтПокупателя.СтатусСборки <> Перечисления.СтатусыСборкиЗаказа.ГотовКСборке Тогда
		Возврат Ложь;
	КонецЕсли;
	//НМА 01.11.2017 <<
	
	Если Не ВозвратТоваровОтПокупателя.СкладОрдер.EmeWmsУчет Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

//	Процедура ПометитьКЭкспорту помечает возврат товаров от покупателя к экспорту.
Процедура ПометитьКЭкспорту(ВозвратТоваровОтПокупателя) Экспорт

	Если Не РазрешенКЭкспорту(ВозвратТоваровОтПокупателя) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуВозвратовТоваровОтПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВозвратТоваровОтПокупателя.Установить(ВозвратТоваровОтПокупателя.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.КЭкспорту = Истина;
		НаборЗаписей.Записать();
		Возврат;
	КонецЦикла;
	
  	НоваяЗапись = РегистрыСведений.EmeWmsПометкиКЭкспортуВозвратовТоваровОтПокупателей.СоздатьМенеджерЗаписи();
	НоваяЗапись.ВозвратТоваровОтПокупателя = ВозвратТоваровОтПокупателя.Ссылка;
	НоваяЗапись.КЭкспорту = Истина;
    НоваяЗапись.Записать(); 
		 
КонецПроцедуры

//	Функция ПомеченКЭкспорту возвращает Истина, если возврат товаров от покупателя помечен к экспорту.
Функция ПомеченКЭкспорту(ВозвратТоваровОтПокупателя) Экспорт
	
	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуВозвратовТоваровОтПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВозвратТоваровОтПокупателя.Установить(ВозвратТоваровОтПокупателя.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Возврат Запись.КЭкспорту;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//	Процедура ПодтвердитьЭкспорт подтверждает экспорт возврата товаров от покупателя.
Процедура ПодтвердитьЭкспорт(ВозвратТоваровОтПокупателя) Экспорт

	НаборЗаписей = РегистрыСведений.EmeWmsПометкиКЭкспортуВозвратовТоваровОтПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВозвратТоваровОтПокупателя.Установить(ВозвратТоваровОтПокупателя.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.КЭкспорту = Ложь;
		Запись.ДатаЭкспорта = ТекущаяДата();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	////НМА 21.11.17 возврат от покупателя
	////	Переведем статус заказа ГотовКСборке->ОтправленНаСклад
	//Если ВозвратТоваровОтПокупателя.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ГотовКСборке ИЛИ ВозвратТоваровОтПокупателя.ПометкаУдаления Тогда //НМА 10.11.17
	//	ВозвратТоваровОтПокупателяОбъект = ВозвратТоваровОтПокупателя.ПолучитьОбъект();
	//	ВозвратТоваровОтПокупателяОбъект.СтатусСборки = Перечисления.СтатусыСборкиЗаказа.ОтправленНаСклад;
	//	ВозвратТоваровОтПокупателяОбъект.Записать();
	//КонецЕсли;
	////НМА 21.11.17 возврат от покупателя
	
КонецПроцедуры

//	Процедура ПометитьКЭкспорту помечает возврат товаров от покупателя на событии при записи возврат товаров от покупателя.
Процедура ПометитьКЭкспортуПриЗаписиВозвратаТоваровОтПокупателя(Источник, Отказ) Экспорт

	ПометитьКЭкспорту(Источник);
		 
КонецПроцедуры

//	Процедура ЭкспортироватьВозвратыТоваровОтПокупателей экспортирует возвраты товаров от покупателей, помеченные к экспорту.
Процедура ЭкспортироватьВозвратыТоваровОтПокупателей(ERPData) Экспорт
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	EmeWmsПометкиКЭкспортуВозвратовТоваровОтПокупателей.ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.EmeWmsПометкиКЭкспортуВозвратовТоваровОтПокупателей КАК EmeWmsПометкиКЭкспортуВозвратовТоваровОтПокупателей
		|ГДЕ
		|	EmeWmsПометкиКЭкспортуВозвратовТоваровОтПокупателей.КЭкспорту";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Счетчик = 0;
	
	Пока Выборка.Следующий() Цикл
		
		//	Защита от плохих данных
		Если Выборка.Ссылка = Null Тогда
			Продолжить;
		КонецЕсли;
			
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней
		НачатьТранзакцию();
		Попытка    		
				
			EmeWmsERPEngine.BeginExport(ERPData, "erp", "wms", "asn");
			Попытка
				
				Если РазрешенКЭкспорту(Выборка.Ссылка) Тогда
					////	Вначале подтверждаем экспорт,
					//ПодтвердитьЭкспорт(Выборка.Ссылка);
					////	а только потом экспортируем, чтобы не потерять флажок КЭКспорту при параллельном изменении данных.
					ЭкспортироватьВозвратТоваровОтПокупателя(ERPData, Выборка.Ссылка);
					ПодтвердитьЭкспорт(Выборка.Ссылка); //НМА 06.12.17
					Счетчик = Счетчик + 1;
				КонецЕсли;
					
				EmeWmsERPEngine.CommitExport(ERPData);
				
			Исключение
				Сообщить(ОписаниеОшибки());
				EmeWmsERPEngine.RollbackExport(ERPData);
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт сообщения ASN-возврат: " + Ошибка);
			ТекстСообщения = "ИБ: " + СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "No: " + Выборка.Ссылка + Символы.ПС + Ошибка;
			EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Критическая ошибка экспорта сообщения ASN-возврат", ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если Счетчик <> 0 Тогда
		Сообщить("Проэкспортировали сообщения ASN-возврат (" + Счетчик + "шт)");
	КонецЕсли
	
КонецПроцедуры

//	Процедура ЭкспортироватьВозвратТоваровОтПокупателя экспортирует один возврат товаров от покупателей.
Процедура ЭкспортироватьВозвратТоваровОтПокупателя(ERPData, ВозвратТоваровОтПокупателя)
	
	//	Заголовок возврата
	EmeWmsERPEngine.AppendHeaderLine(ERPData);
	ERPData.header.id             	= ВозвратТоваровОтПокупателя.УникальныйИдентификатор();
	ERPData.header.asn_reg_no	  	= ВозвратТоваровОтПокупателя.Номер + " (возврат)";
	ERPData.header.whs_to_code 	  	= EmeWmsУтилиты.ПолучитьКодСклада(ВозвратТоваровОтПокупателя.СкладОрдер);
	ERPData.header.vendor_to_code 	= "7715948131";
	//ERPData.header.supplier_id  	= ВозвратТоваровОтПокупателя.Контрагент.УникальныйИдентификатор();
	ERPData.header.supplier_id  	= EmeWmsУтилиты.ПолучитьКод(ВозвратТоваровОтПокупателя.Контрагент);
	//ERPData.header.supplier_code  	= СокрЛП(ВозвратТоваровОтПокупателя.Контрагент.Код);
	ERPData.header.supplier_code  	= EmeWmsУтилиты.ПолучитьКод(ВозвратТоваровОтПокупателя.Контрагент);
	ERPData.header.supplier_name  	= ВозвратТоваровОтПокупателя.Контрагент.Наименование;
	ERPData.header.comment        	= Лев(ВозвратТоваровОтПокупателя.Комментарий, 128);
	
	Если НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления Тогда //НМА 21.11.17 возврат от покупателя если не ПометкаУдаления
		
		//	Строки возврата
		EmeWmsERPEngine.SelectChild(ERPData, "lines");
		УИДСтроки = 0;
		Для Каждого СтрокаТовара Из ВозвратТоваровОтПокупателя.Товары Цикл
			УИДСтроки = УИДСтроки + 1;
			EmeWmsERPEngine.AppendChildLine(ERPData);
			ERPData.lines.id			= УИДСтроки;
			ERPData.lines.asn_line_no	= СтрокаТовара.НомерСтроки;
			// Катков А. 10.10.2016 >>
			//ERPData.lines.goods_id		= СтрокаТовара.Номенклатура.УникальныйИдентификатор();
			ERPData.lines.goods_id		= EmeWmsУтилиты.ПолучитьКод(СтрокаТовара.Номенклатура);
			//ERPData.lines.goods_code	= СокрЛП(СтрокаТовара.Номенклатура.Код);
			ERPData.lines.goods_code	= EmeWmsУтилиты.ПолучитьКодСпрНоменклатура_НеДляСинхронизации(СтрокаТовара.Номенклатура);
			ERPData.lines.lot_no		= "-";
			//ERPData.lines.quantity		= СтрокаТовара.Количество * СтрокаТовара.Коэффициент;
			//ERPData.lines.mu_code		= СокрЛП(СтрокаТовара.Номенклатура.БазоваяЕдиницаИзмерения.Код);
			
			////НМА 13.10.17 >> //НМА 21.11.17
			Если СтрокаТовара.Номенклатура.емеЭтоДополнительнаяНоменклатура И ЗначениеЗаполнено(СтрокаТовара.Номенклатура.емеСсылкаНаОсновнуюНоменклатуру) Тогда //НМА 11.10.17 Срок годности дополнительных
				ERPData.lines.bbd = СтрокаТовара.Номенклатура.емеСрокГодностиДляДополнительных; //НМА 11.10.17 Срок годности дополнительных
			ИначеЕсли ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры) Тогда
				Если ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры.СрокГодности) Тогда
					ERPData.lines.bbd = СтрокаТовара.СерияНоменклатуры.СрокГодности;
				КонецЕсли;
			КонецЕсли;
			////НМА 13.10.17 <<
			
			// выберем как базовую Единицу измерения с коэффициентом 1
			ЕдИзм_К1 = EmeWmsУтилиты.ПолучитьБазовуюЕдиницуИзмеренияК1(СтрокаТовара.Номенклатура);
			
			Если СтрокаТовара.ЕдиницаИзмерения = ЕдИзм_К1 Тогда // берем кол-во в базовых единицах
				ERPData.lines.quantity		= СтрокаТовара.Количество;
				ЕдиницаИзмерения 			= ЕдИзм_К1;
			Иначе
				Если ЕдИзм_К1 <> Неопределено Тогда
					ERPData.lines.quantity	= СтрокаТовара.Количество * СтрокаТовара.Коэффициент; // берем кол-во в базовых единицах
					ЕдиницаИзмерения 		= ЕдИзм_К1;
				Иначе
					ERPData.lines.quantity	= СтрокаТовара.Количество;  // не нашли базовую единицу берем кол-во в текущих единицах (ОШИБКА!)
					ЕдиницаИзмерения 		= СтрокаТовара.ЕдиницаИзмерения;
					ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Экспорт док-та: """ + ВозвратТоваровОтПокупателя + """, не найдена Базовая единица измерения у """ + СтрокаТовара.Номенклатура + """");
				КонецЕсли; 
			КонецЕсли; 
			Если ЗначениеЗаполнено(ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации) Тогда
				ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.емеКодСинхронизации;
			Иначе
				ERPData.lines.mu_code		= ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование;
			КонецЕсли;
			// Катков А. 10.10.2016 <<  
		КонецЦикла;	
		
	КонецЕсли; //НМА 21.11.17 возврат от покупателя если не ПометкаУдаления
			
КонецПроцедуры
