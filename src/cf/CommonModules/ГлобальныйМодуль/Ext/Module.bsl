#Если Клиент Тогда
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ОЖИДАНИЯ

// Процедура выполняет отключение пользователей от информационной 
// базы в случае, если был запущен сеанс с параметром "ЗавершитьРаботуПользователей"
//
Процедура КонтрольРежимаЗавершенияРаботыПользователей() Экспорт

	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = УправлениеСоединениямиИБ.УстановленаБлокировкаСоединений();
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
	ВремяОкончанияБлокировки = ТекущийРежим.Конец;
	
	ИнтервалПредупреждения    = УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей();
	ИнтервалЗакрытьСЗапросом  = 0;
	ИнтервалЗакрытьБезЗапроса = - УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей() / 5;
	ИнтервалПрекратить        = - УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей() / 2.5;
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена Тогда
		
		Если ВремяОкончанияБлокировки <> '00010101' И ТекущийМомент > ВремяОкончанияБлокировки Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПрекратить Тогда
			
			ПрекратитьРаботуСистемы(Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьБезЗапроса Тогда
			
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение("Работа системы завершается" + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			ЗавершитьРаботуСистемы(Ложь, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьСЗапросом Тогда
			
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение("Работа системы завершается" + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			ЗавершитьРаботуСистемы(Истина, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПредупреждения Тогда
			
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение("Работа системы будет завершена в " + ВремяНачалаБлокировки + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // КонтрольРежимаЗавершенияРаботыПользователей

// Завершение работы только при условии удачной установки монопольного режима работы
// Вызывается, только при запуске системы от имени администратора с параметром запуска "ЗавершитьРаботуПользователей"
//
Процедура ЗавершитьРаботуПользователей() Экспорт

	Соединения = ПолучитьСоединенияИнформационнойБазы();
	
	Если Соединения.Количество() = 1 Тогда
		// Отключены все пользователи, кроме текущего сеанса
		// В последнюю очередь завершается сеанс, запущенный с параметром "ЗавершитьРаботуПользователей".
		// Такой порядок отключений необходим для обновления конфигурации с помощью пакетного файла
		
		ЗавершитьРаботуСистемы(Ложь);
		
		Возврат;
	КонецЕсли; 
	
	// Получим текущее значение параметров блокировки
	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = ТекущийРежим.Установлена;
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
		
	ИнтервалОтключения    = - 5 * 60;
	
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена и
		(НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалОтключения) Тогда
			
		// через 5 минут после начала блокировки сеансы всех пользователей должны быть отключены	
		// если этого не произошло пробуем принудительно прервать соединение в клиент-серверном режиме работы.
		ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
		
		ПодстрокиСтрокиСоединения  = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаСоединенияИнформационнойБазы(),";");
		
		Если ПодстрокиСтрокиСоединения.Количество()> 1 и Лев(ПодстрокиСтрокиСоединения[0], 5) = "Srvr=" и Лев(ПодстрокиСтрокиСоединения[1], 4) = "Ref=" Тогда
			
			ИмяСервера = Сред(ПодстрокиСтрокиСоединения[0],7, СтрДлина(ПодстрокиСтрокиСоединения[0]) - 7);
			ИмяИБ      = Сред(ПодстрокиСтрокиСоединения[1],6, СтрДлина(ПодстрокиСтрокиСоединения[1]) - 6);
			
			ПодстрокиПараметровЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
			
			Попытка
				
				ComConnector = Новый COMОбъект("v81.COMConnector");
				
				РазделительПорта = Найти(ИмяСервера, ":");
				Если РазделительПорта > 0 Тогда
					ИмяСервера = Сред(ИмяСервера, 1, (РазделительПорта - 1));
					НомерПортаКластера = Число(Сред(ИмяСервера, (РазделительПорта + 1)));
				Иначе
					НомерПортаКластера = ComConnector.RMngrPortDefault;
				КонецЕсли;
				
				// Подключение к агенту сервера
				ServerAgent = ComConnector.ConnectAgent(ИмяСервера);
				
				// Получим массив кластеров сервера у агента сервера
				Clasters = ServerAgent.GetClusters();
				
				// Найдем необходимый нам кластер
				Для Каждого Claster Из Clasters Цикл
					Если Claster.MainPort <> НомерПортаКластера Тогда
						Продолжить;
					КонецЕсли;
					
					// Аутефикация к найденному кластеру
					Если ПодстрокиПараметровЗапуска.Количество() > 2 и Врег(ПодстрокиПараметровЗапуска[0]) = Врег("ЗавершитьРаботуПользователей") Тогда
						ServerAgent.Authenticate(Claster, ПодстрокиПараметровЗапуска[1], ПодстрокиПараметровЗапуска[2]);
					Иначе
						ServerAgent.Authenticate(Claster, "", "");
					КонецЕсли;
					
					// Получаем список рабочих процессов
					WorkingProcesses = ServerAgent.GetWorkingProcesses(Claster);
					
					Для Каждого WorkingProcess Из WorkingProcesses Цикл
						
						Если WorkingProcess.Running <> 1 Тогда
							Продолжить;
						КонецЕсли;
						
						// Для каждого рабочего процесса создаем соединение с рабочим процессом
						ConnectToWorkProcess = ComConnector.ConnectWorkingProcess("tcp://" + WorkingProcess.HostName + ":" + Формат(WorkingProcess.MainPort, "ЧГ=0"));
						
						Если ПодстрокиПараметровЗапуска.Количество() > 2 и Врег(ПодстрокиПараметровЗапуска[0]) = Врег("ЗавершитьРаботуПользователей") Тогда
							ConnectToWorkProcess.AddAuthentication(ПодстрокиПараметровЗапуска[1], ПодстрокиПараметровЗапуска[2]);
						Иначе
							ConnectToWorkProcess.AddAuthentication(ИмяПользователя(), "");
						КонецЕсли;
						
						// Получаем список ИБ рабочего процесса
						InfoBases = ConnectToWorkProcess.GetInfoBases();
						Для Каждого InfoBase Из InfoBases Цикл
							// Ищем нужную базу
							Если InfoBase.Name = ИмяИБ Тогда
								
								// Получаем массив соединений с ИБ
								Connections = ConnectToWorkProcess.GetInfoBaseConnections(InfoBase);
								Для Каждого Connection Из Connections Цикл
									Если ИмяПользователя() <> connection.userName Тогда
										// Разрываем Connections с ИБ
										СтрСообщения = "Разрывается соединение: Пользователь " + Connection.UserName + ", компьютер " + Connection.HostName + ", установлено " + Connection.ConnectedAt + ", режим " + Connection.AppID;
										ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Информация, , , СтрСообщения);
										ConnectToWorkProcess.Disconnect(Connection);
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			Исключение
				ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		
		Соединения = ПолучитьСоединенияИнформационнойБазы();
		Если Соединения.Количество() > 1 Тогда
			
			Сообщение = "Не удалось завершить работу пользователей:";
			
			Для каждого Соединение Из Соединения Цикл
				Если Не Соединение.НомерСоединения = НомерСоединенияИнформационнойБазы() Тогда
					Сообщение = Сообщение + Символы.ПС + " - " + Соединение;
				КонецЕсли;
			КонецЦикла; 
			
			Сообщить(Сообщение, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		Иначе
			Сообщить("Завершение работы пользователей выполнено успешно.", СтатусСообщения.Информация);
		КонецЕсли;
		
		ЗавершитьРаботуСистемы(Ложь);
		
		Возврат;		
	КонецЕсли;
	
КонецПроцедуры // ЗавершитьРаботуПользователей

// Процедура перезапуска сеанса работы с программой
Процедура ПерезапуститьСеансРаботыСПрограммой() Экспорт
	глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
	
	ЗавершитьРаботуСистемы(Истина, Истина);
КонецПроцедуры
	
// Проверяет в конфигурации ИБ наличие изменений появившихся после старта сеанса
//
Процедура ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ() Экспорт

	// Если в конфигурации после старта текущего сеанса что-то изменилось
	Если КонфигурацияБазыДанныхИзмененаДинамически() Тогда


		// Завершим проверку обновления
		ЗавершитьПроверкуДинамическогоОбновленияИБ();

		// Спросим пользователя о его желании перезапустить сеанс
		ТекстВопроса = "В конфигурацию ИБ внесены изменения." + Символы.ПС +
						"Для работы с ними рекомендуется перезапустить программу." + Символы.ПС +
						"Перезапустить?";
		РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		// Если пользователь не хочет перезапускать сеанс
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			// Запустим проверку обновления опять
			НачатьПроверкуДинамическогоОбновленияИБ();
			Возврат;
		КонецЕсли;

	
		// Попробуем перезапустить
		ПерезапуститьСеансРаботыСПрограммой();

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ДИНАМИЧЕСКОГО ОБНОВЛЕНИЯ
//

// Начинает проверку динамического обновления конфигурации ИБ
//
Процедура НачатьПроверкуДинамическогоОбновленияИБ()Экспорт
	
	// проверка дин. обновления конфигурации каждые 20 мин.
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ", 20 * 60);

КонецПроцедуры

// Завершает проверку динамического обновления конфигурации ИБ
//
Процедура ЗавершитьПроверкуДинамическогоОбновленияИБ()Экспорт

	// Отключим соответствующий обработчик ожидания
	ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ");

КонецПроцедуры

// ins SailPlay 23.11.2015 
Процедура ОбработчикПодключитьОбработчикВосстановитьСвязь() Экспорт
    Если ПараметрыСеанса.НеВыгружатьВSailPlay = Ложь Тогда
        Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина Тогда
            ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Ложь;
            SailPlay_Модуль.ПройтиАвторизациюSailPlay();         
        КонецЕсли; 
        
        //Запрос = Новый Запрос;
        //Запрос.УстановитьПараметр("Склад",ПараметрыСеанса.ТекущийМагазинSailPlay);
        //Запрос.Текст = "ВЫБРАТЬ
        //               |    ОтложенныеТранзакцииSailPlayСрезПоследних.Документ
        //               |ИЗ
        //               |    РегистрСведений.ОтложенныеТранзакцииSailPlay.СрезПоследних КАК ОтложенныеТранзакцииSailPlayСрезПоследних
        //               |ГДЕ
        //               |    ОтложенныеТранзакцииSailPlayСрезПоследних.ТранзакцияЗавершена = ЛОЖЬ
        //               |    И (ОтложенныеТранзакцииSailPlayСрезПоследних.Документ.СкладОрдер = &Склад
        //               |            ИЛИ ОтложенныеТранзакцииSailPlayСрезПоследних.Документ.Склад = &Склад)
        //               |
        //               |УПОРЯДОЧИТЬ ПО
        //               |    ОтложенныеТранзакцииSailPlayСрезПоследних.Период";
        //Выборка = Запрос.Выполнить().Выбрать();
        //Пока Выборка.Следующий() Цикл
        //    ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Ложь;
        //    SailPlay_Модуль.ВыгрузитьОтложенныеТранзакцииSailPlay(Выборка.Документ);	
        //КонецЦикла; 
    КонецЕсли; 
КонецПроцедуры
 
Процедура ПодключитьОбработчикВосстановитьСвязь() Экспорт
    
    Если ПараметрыСеанса.НеВыгружатьВSailPlay = Ложь Тогда                          
        ПодключитьОбработчикОжидания("ОбработчикПодключитьОбработчикВосстановитьСвязь",700); // заменить на 10 мин                   
	КонецЕсли;

КонецПроцедуры
// ins SailPlay 23.11.2015 

#КонецЕсли

Функция ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции



#Если Сервер И НЕ Клиент И НЕ ВнешнееСоединение Тогда

Функция глЗначениеПеременной(Имя) Экспорт
	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();
	КэшИзменен = Ложь;
	ПолученноеЗначение = ОбщегоНазначения.ПолучитьЗначениеПеременной(Имя, Кэш, КэшИзменен);
	
	Если КэшИзменен Тогда
		ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);
	КонецЕсли;
	
	Возврат ПолученноеЗначение;
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  Имя - строка, содержит имя переменной целиком
// 	Значение - значение переменной
//
Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();	
	ОбщегоНазначения.УстановитьЗначениеПеременной(Имя, Кэш, Значение);
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);	
	
КонецПроцедуры


#КонецЕсли
