//ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Подставляет параметры в строку. Неограниченное число параметров в строке.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%1").
//  МассивПараметров   - Массив - массив строк, которые соответствуют параметрам в строке подстановки
//
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// МассивПараметров = Новый Массив;
// МассивПараметров = МассивПараметров.Добавить("Вася");
// МассивПараметров = МассивПараметров.Добавить("Зоопарк");
//
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), МассивПараметров);
//
Функция ПодставитьПараметрыВСтрокуИзМассива(Знач СтрокаПодстановки, Знач МассивПараметров) Экспорт
	
	СтрокаРезультата = СтрокаПодстановки;
	
	Для Индекс = 1 По МассивПараметров.Количество() Цикл
		Если Не ПустаяСтрока(МассивПараметров[Индекс-1]) Тогда
			СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%"+Строка(Индекс), МассивПараметров[Индекс-1]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаРезультата;
	
КонецФункции

Функция ПолучитьМагазинПользователя(знач Пользователь=Неопределено) Экспорт
    ТекПользователь = Пользователь;
    Если НЕ ЗначениеЗаполнено(ТекПользователь) Тогда
        ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
    КонецЕсли; 
    
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ Первые 1
                   |    НастройкиПользователей.Значение
                   |ИЗ
                   |    РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
                   |ГДЕ
                   |    НастройкиПользователей.Пользователь = &Пользователь
                   |    И НастройкиПользователей.Настройка = &Настройка";
                   
    Запрос.УстановитьПараметр("Пользователь",ТекПользователь);
    Запрос.УстановитьПараметр("Настройка",ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойСклад);
    Выборка = Запрос.Выполнить().Выбрать();
    Если Выборка.Следующий() Тогда
        Магазин = Выборка.Значение;        
    Иначе
        Магазин = Справочники.Склады.ПустаяСсылка();
    КонецЕсли;
    
    Возврат Магазин;
КонецФункции // ()
 

Функция ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,Запрос,ИмяВходящегоФайла,СообщатьОбОшибке = Истина)Экспорт
    Если ПараметрыСеанса.НеВыгружатьВSailPlay Тогда
        Возврат Неопределено;	
    КонецЕсли; 

	Попытка
		КомОбъект=Новый COMObject("WinHttp.WinHttpRequest.5.1");
		КомОбъект.SetTimeouts(20000, 20000, 20000, 20000);
		КомОбъект.Open("GET","http://" +HTTPСервер +"/"+Запрос ,0);
		КомОбъект.Send();
		Ответ = СокрЛП(КомОбъект.ResponseText());
		глКоличествоОтказовSailPlay = 0;
		ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Ложь;
		Возврат Ответ; 
	Исключение
		Если СообщатьОбОшибке = Истина Тогда
			//#Если Клиент Тогда
				Сообщить("[SailPlay]Ошибка отправки запроса. Продолжайте работать и сообщите об этом в службу поддержки.",СтатусСообщения.Важное);
			//#КонецЕсли	
		КонецЕсли;
		ЗаписатьЛог("Ошибка SailPlay.", "Произошла ошибка при выполнении запроса: " + "http://" +HTTPСервер +Запрос +" " + ОписаниеОшибки());
		глКоличествоОтказовSailPlay = глКоличествоОтказовSailPlay + 1;
		Если глКоличествоОтказовSailPlay >= 2 Тогда //2 попытки и откладываем транзакции
			ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина;
		КонецЕсли;	
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСтрокуИзJSON(ИмяФайла)Экспорт
	
	ТекстЛог = Новый ТекстовыйДокумент;
	ТекстЛог.ТолькоПросмотр = Истина;
	ТекстЛог.Прочитать(ИмяФайла);
	стр = ТекстЛог.ПолучитьСтроку(1);
	Возврат Стр;
	
КонецФункции	

Функция ПреобразованиеСтрокуВURL(Стр="")Экспорт
	
	Длина=СтрДлина(Стр);
	Итог="";
	Для Н=1 По Длина Цикл
		Знак=Сред(Стр,Н,1);
		Код=КодСимвола(Знак);
		
		если ((Знак>="a")и(Знак<="z")) или
			 ((Знак>="A")и(Знак<="Z")) или
			 ((Знак>="0")и(Знак<="9")) тогда
			Итог=Итог+Знак;
		Иначе
			Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
				Итог=Итог+"%"+РаботаСJSON_Процедуры.ПреобразоватьвСистему(208,16)+"%"+РаботаСJSON_Процедуры.ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
			ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
				Итог=Итог+"%"+РаботаСJSON_Процедуры.ПреобразоватьвСистему(209,16)+"%"+РаботаСJSON_Процедуры.ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
			ИначеЕсли (Знак="ё") Тогда
				Итог=Итог+"%"+РаботаСJSON_Процедуры.ПреобразоватьвСистему(209,16)+"%"+РаботаСJSON_Процедуры.ПреобразоватьвСистему(145,16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог=Итог+"%"+РаботаСJSON_Процедуры.ПреобразоватьвСистему(208,16)+"%"+РаботаСJSON_Процедуры.ПреобразоватьвСистему(129,16);
			Иначе
				Итог=Итог+"%"+РаботаСJSON_Процедуры.ПреобразоватьвСистему(Код,16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Итог;
	
КонецФункции

Функция ПреобразованиеURLВСтроку(ВхСтр="")Экспорт
	
	ВыхСтр="";
	
	поз=1;
    Пока поз<=СтрДлина(ВхСтр) Цикл
		
		симв=Сред(ВхСтр,поз,1);
		
		Если симв="\" И Сред(ВхСтр,поз+1,1)="u" Тогда
           поз=поз+2;
           Вес=4096;
           ВыхКод=0;
           Для п=0 По 3 Цикл
               кодСимв=КодСимвола(ВхСтр,поз+п);
               Если кодСимв>96 Тогда // a-f
                  кодСимв=кодСимв-87;
               ИначеЕсли кодСимв>64 Тогда // A-F
                  кодСимв=кодСимв-55;
               Иначе
                  кодСимв=кодСимв-48; // 0-9
              КонецЕсли;
              ВыхКод=ВыхКод+кодСимв*Вес;
              Вес=Вес/16;
          КонецЦикла;
          ВыхСтр=ВыхСтр+Символ(ВыхКод);
          поз=поз+4;
        Иначе
           ВыхСтр=ВыхСтр+симв;
           поз=поз+1;
	   КонецЕсли;
	   
	КонецЦикла;
	
    Возврат ВыхСтр;
	
КонецФункции 

Функция ПолучитьДКИзЧека(Чек)Экспорт
	
	КодДК = Неопределено; 
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	МИНИМУМ(ЧекККМДисконтныеКарты.КодДисконтнойКарты) КАК КодДисконтнойКарты,
	|	ЧекККМДисконтныеКарты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.ДисконтныеКарты КАК ЧекККМДисконтныеКарты
	|ГДЕ
	|	ЧекККМДисконтныеКарты.Ссылка = &Ссылка
	|	И ЧекККМДисконтныеКарты.ДисконтнаяПрограмма.ЭтоДисконтнаяПрограммаПоставщика = ЛОЖЬ
	|	И ЧекККМДисконтныеКарты.КодДисконтнойКарты <> """"
	|	И ЧекККМДисконтныеКарты.Ссылка.Проведен
	|	И ЧекККМДисконтныеКарты.Ссылка.ЧекПробитККМ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМДисконтныеКарты.Ссылка";
	Запрос.УстановитьПараметр("Ссылка",	Чек);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
    	КодДК = Выборка.КодДисконтнойКарты;
	КонецЕсли;
	
	Возврат КодДК;
	
КонецФункции	

Процедура ЗаписатьЛог(Событие, Описание = "") Экспорт
	
	Попытка
		НовЗапись = РегистрыСведений.ЛогSailPlay.СоздатьМенеджерЗаписи();
		НовЗапись.Дата 				= ТекущаяДата();
		НовЗапись.Пользователь 		= ПараметрыСеанса.ТекущийПользователь;
		НовЗапись.Событие 			= Событие;
		НовЗапись.ОписаниеСобытия 	= Описание;
		НовЗапись.Записать(Истина);
	Исключение
		//#Если Клиент Тогда
			Сообщить("Не удалось записать событие в лог. Обратитесь в службу поддержки!");
		//#КонецЕсли
	КонецПопытки;
	
	//по уму надо очищать этот регистр, лучше за чеками по периоду
	
КонецПроцедуры

Процедура ОбновитьПараметрыСеансаSailPlay(Ид = 0,Ключ = 0,Пин = 0,Магазин=Неопределено)Экспорт
	
	Попытка
    
    	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
            ТекМагазин = ПолучитьМагазинПользователя(ПараметрыСеанса.ТекущийПользователь);
        Иначе
            ТекМагазин = Магазин;
        КонецЕсли; 
    
    
        ИдМагазинаSailPlay      = ТекМагазин.ИдМагазинаSailPlay;
    	КлючМагазинаSailPlay    = ТекМагазин.КлючМагазинаSailPlay;
        ПинКодМагазинаSailPlay  = ТекМагазин.ПинКодМагазинаSailPlay;
        НеВыгружатьВSailPlay    = НЕ ТекМагазин.ПрограммаЛояльностиSailPlay;
        
        ПараметрыСеанса.ТекущийМагазинSailPlay          = ТекМагазин;
		ПараметрыСеанса.ИдМагазинаSailPlay 				= ?(ИдМагазинаSailPlay <> 0,    ИдМагазинаSailPlay,     Ид);
		ПараметрыСеанса.КлючМагазинаSailPlay 			= ?(КлючМагазинаSailPlay<>0,    КлючМагазинаSailPlay,   Ключ);
		ПараметрыСеанса.ПинКодМагазинаSailPlay 			= ?(ПинКодМагазинаSailPlay<>0,  ПинКодМагазинаSailPlay, Пин);
		ПараметрыСеанса.ТокенSailPlay 					= "";
		ПараметрыСеанса.ДатаНачалаТокенаSailPlay 		= Дата(1,1,1);
		ПараметрыСеанса.НеВыгружатьВSailPlay 			= НеВыгружатьВSailPlay;
		ПараметрыСеанса.ОткладыватьТранзакцииSailPlay 	= Ложь;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ВернутьЦифрыИзСтроки(СтрокаПроверки, УдалитьЛидирующиеНули = Истина)Экспорт
    
    Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
        Возврат "";
    КонецЕсли;
    
    ЦифрыИзСтроки = "";
    
    Для сч = 1 По СтрДлина(СтрокаПроверки) Цикл
        Символ = Сред(СтрокаПроверки, сч, 1);
        Если ЭтоЦифра(Символ) Тогда
            ЦифрыИзСтроки = ЦифрыИзСтроки + Символ;
        КонецЕсли;
    КонецЦикла;
    
    Если УдалитьЛидирующиеНули Тогда
    КонецЕсли;
        
    Возврат ЦифрыИзСтроки;
    
КонецФункции

Функция ЭтоЦифра(Символ) Экспорт
	
    КодСимвола = КодСимвола(Символ);
    Возврат (КодСимвола >= 48 И КодСимвола <= 57);
	
КонецФункции

Функция ПолучитьБонусыВПадеже(число)Экспорт
	
	ДП = Истина;
	РезультатСклонения = ЧислоПрописью(число, "L=ru_RU; ДП = "+ДП+"","бонус, бонуса, бонусов, м");
	МСтр = СтрЗаменить(РезультатСклонения," ",Символы.ПС);
	ЧислоСтрок = СтрЧислоСтрок(МСтр);
	СТР = СтрПолучитьСтроку(МСтр,ЧислоСтрок-1);

	Возврат Стр;
	
КонецФункции

Функция ПолучитьЧекПоНомеруИСумме(НомерЧека,СуммаЧека)Экспорт
	
	Чек = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЧекНовый.Ссылка
	|ИЗ
	|	Документ.ЧекНовый КАК ЧекНовый
	|ГДЕ
	|	ЧекНовый.Проведен
	|	И ЧекНовый.Номер = &Номер
	|	И ЧекНовый.СуммаДокумента = &СуммаДокумента";
	Запрос.УстановитьПараметр("Номер",	НомерЧека);	 //Строка
	Запрос.УстановитьПараметр("СуммаДокумента",	СуммаЧека);	 //Число
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Чек = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Чек;
	
КонецФункции	

Функция ПолучитьНомерДокумента(Номер,Дата)
	Возврат ПреобразованиеСтрокуВURL("" + Номер + " / " + Формат(ПараметрыСеанса.ИдМагазинаSailPlay,"ЧГ=") + " / " + Формат(Дата,"ДЛФ=DT"));
КонецФункции	

Функция ПолучитьНачалоТэгаВыдатьКарту() Экспорт
    Возврат "";
КонецФункции // ()

Функция ПолучитьНачалоТэгаСтатусКарты() Экспорт
    Возврат "Выдать карту";
КонецФункции // ()

Функция ПолучитьСтатусИзТэга(стрТэг) Экспорт

    Попытка
        СтрСтатус = стрТэг.Name;
    Исключение
        СтрСтатус = "";
    КонецПопытки;
    
    Если НЕ ЗначениеЗаполнено(СтрСтатус) Тогда
        Возврат Неопределено;
    КонецЕсли; 
    
    СтрСтатус = SailPlay_Модуль.ПреобразованиеURLВСтроку(СтрСтатус);
    начВыдать = ПолучитьНачалоТэгаВыдатьКарту();
    начСтатус = ПолучитьНачалоТэгаСтатусКарты();
    
    СтрСтатус = СокрЛП(СтрЗаменить(СтрСтатус,начВыдать,""));
    СтрСтатус = СокрЛП(СтрЗаменить(СтрСтатус,начСтатус,""));
    
    
    Попытка
        Статус = Перечисления.СтатусКартыSailPlay[СтрСтатус];
    Исключение
        Статус = Перечисления.СтатусКартыSailPlay.ПустаяСсылка();
    КонецПопытки; 
    
    Возврат Статус;

КонецФункции // ()

Функция ПолучитьСтатусКарты(НомерКарты="",знач НомерТелефона="") Экспорт
    ЧистыйНомер = SailPlay_Модуль.ВернутьЦифрыИзСтроки(НомерТелефона);
    Если НЕ ЗначениеЗаполнено(НомерКарты) И (НЕ ЗначениеЗаполнено(ЧистыйНомер) ИЛИ ЧистыйНомер = "7") Тогда
        Возврат Неопределено;    
    КонецЕсли; 
    СтатусКарты = Неопределено;
    СтрокаТэг = "";
    НачалоТэгаСтатус = ПолучитьНачалоТэгаСтатусКарты();
    
    Для каждого зн Из Перечисления.СтатусКартыSailPlay Цикл
        СтрокаТэг = СтрокаТэг + ?(ЗначениеЗаполнено(СтрокаТэг),",","") + """" + НачалоТэгаСтатус +" " + СокрЛП(зн) + """";
    КонецЦикла; 
    
    ИспользоватьКарту = ?(ЗначениеЗаполнено(НомерКарты),ИСТИНА,ЛОЖЬ);
    ДанныеОТэгах = SailPlay_Модуль.ПолучитьТэгиКлиента(?(ИспользоватьКарту,НомерКарты,""),СтрокаТэг,,?(ИспользоватьКарту,"",ЧистыйНомер));
    Если ЗначениеЗаполнено(ДанныеОТэгах) И  ДанныеОТэгах.status = "ok" Тогда
        Если ЗначениеЗаполнено(ДанныеОТэгах.events) И ТипЗнч(ДанныеОТэгах.events) = Тип("Массив")Тогда
            Попытка
                ПредСтатус = Неопределено;
                Для каждого стрОтвета Из ДанныеОТэгах.events Цикл
                    //СтрСтатус = СтрОтвета.Name;
                    текСтатус = ПолучитьСтатусИзТэга(стрОтвета);
                    Если текСтатус = Перечисления.СтатусКартыSailPlay.Платиновый Тогда
                        ПредСтатус = текСтатус;
                        Прервать; /// максимальный статус
                    ИначеЕсли текСтатус = Перечисления.СтатусКартыSailPlay.Золотой 
                        И НЕ ПредСтатус = Перечисления.СтатусКартыSailPlay.Платиновый Тогда
                        ПредСтатус = текСтатус;
                    ИначеЕсли текСтатус = Перечисления.СтатусКартыSailPlay.Серебряный 
                        И НЕ предСтатус = Перечисления.СтатусКартыSailPlay.Золотой 
                        И НЕ ПредСтатус = Перечисления.СтатусКартыSailPlay.Платиновый Тогда
                        предСтатус = текСтатус;
                    ИначеЕсли текСтатус = Перечисления.СтатусКартыSailPlay.Стальной 
                        И ПредСтатус = Неопределено Тогда
                        предСтатус = текСтатус;
                    КонецЕсли; 
                КонецЦикла; 
                СтатусКарты = предСтатус;
            Исключение
                
            КонецПопытки;
        КонецЕсли;     
    КонецЕсли;
    
    Возврат СтатусКарты;
КонецФункции // ПолучитьСтатусКарты()

Функция ПолучитьТипыКартСГраницами()Экспорт
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ТипКарты",				Новый ОписаниеТипов("ПеречислениеСсылка.СтатусКартыSailPlay"));
	тз.Колонки.Добавить("ИмяТэгаКартаВыдана",	Новый ОписаниеТипов("Строка"));
	тз.Колонки.Добавить("НижняяГраница", 		Новый ОписаниеТипов("Число"));
	тз.Колонки.Добавить("ВерхняяГраница", 		Новый ОписаниеТипов("Число"));
	тз.Колонки.Добавить("Ранг", 				Новый ОписаниеТипов("Число"));
	тз.Колонки.Добавить("ПроцентСкидки", 		Новый ОписаниеТипов("Число"));
	тз.Колонки.Добавить("ОснованиеВыдачи", 		Новый ОписаниеТипов("Строка"));
	
	НачалоТэгаКартаВыдана = ПолучитьНачалоТэгаВыдатьКарту();
    
    
    // порядок добавления строк имеет значение - идет от максимального статуса к самому маленькому
    
	НоваяСтрока = тз.Добавить();
	НоваяСтрока.ТипКарты 			= Перечисления.СтатусКартыSailPlay.Платиновый;
	НоваяСтрока.ИмяТэгаКартаВыдана 	= НачалоТэгаКартаВыдана + СокрЛП(НоваяСтрока.ТипКарты);
	НоваяСтрока.НижняяГраница 		= 10001;
	НоваяСтрока.ВерхняяГраница 		= 999999;
	НоваяСтрока.Ранг 				= 4;
	НоваяСтрока.ПроцентСкидки 		= 20;
	НоваяСтрока.ОснованиеВыдачи		= "Сумма покупок превысила 7000";
	
	НоваяСтрока = тз.Добавить();
	НоваяСтрока.ТипКарты 			= Перечисления.СтатусКартыSailPlay.Золотой;
	НоваяСтрока.ИмяТэгаКартаВыдана 	= НачалоТэгаКартаВыдана + СокрЛП(НоваяСтрока.ТипКарты);
	НоваяСтрока.НижняяГраница 		= 5001;
	НоваяСтрока.ВерхняяГраница 		= 7000;
	НоваяСтрока.Ранг 				= 3;
	НоваяСтрока.ПроцентСкидки 		= 10;
	НоваяСтрока.ОснованиеВыдачи		= "Сумма покупок превысила 5000";
	
	НоваяСтрока = тз.Добавить();
	НоваяСтрока.ТипКарты 			= Перечисления.СтатусКартыSailPlay.Серебряный;
	НоваяСтрока.ИмяТэгаКартаВыдана 	= НачалоТэгаКартаВыдана + СокрЛП(НоваяСтрока.ТипКарты);
	НоваяСтрока.НижняяГраница 		= 3001;
	НоваяСтрока.ВерхняяГраница 		= 5000;
	НоваяСтрока.Ранг 				= 2;
	НоваяСтрока.ПроцентСкидки 		= 7;
	НоваяСтрока.ОснованиеВыдачи		= "Сумма покупок превысила 3000";
    
	НоваяСтрока = тз.Добавить();
	НоваяСтрока.ТипКарты 			= Перечисления.СтатусКартыSailPlay.Серебряный;
	НоваяСтрока.ИмяТэгаКартаВыдана 	= НачалоТэгаКартаВыдана + СокрЛП(НоваяСтрока.ТипКарты);
	НоваяСтрока.НижняяГраница 		= 1;
	НоваяСтрока.ВерхняяГраница 		= 3000;
	НоваяСтрока.Ранг 				= 1;
	НоваяСтрока.ПроцентСкидки 		= 7;
	НоваяСтрока.ОснованиеВыдачи		= "Сумма покупок превысила 1";
    
	Возврат ТЗ;
	
КонецФункции	

Процедура Пауза(ИнтервалОжидания)Экспорт
	
	Скрипт=Новый ТекстовыйДокумент();
	Скрипт.Вывод = ИспользованиеВывода.Разрешить;
	Скрипт.УстановитьТекст
	(
	"if (WScript.Arguments.Count()==0)
	|    WScript.Quit();
	|else
	|    if (isNaN(parseInt(WScript.Arguments(0))))
	|        WScript.Quit();
	|WScript.Sleep(WScript.Arguments(0));"
	);
	Скрипт.Записать(КаталогВременныхФайлов()+"sleep.js",КодировкаТекста.ANSI);
	WshShell=Новый COMОбъект("wscript.shell");
	ВремяНач = ТекущаяДата();
	WshShell.Run("wscript.exe """+КаталогВременныхФайлов()+"sleep.js"" "+Формат(ИнтервалОжидания,"ЧГ=0"),0,-1);
	ВремяКонца = ТекущаяДата();
	//УдалитьФайлы(КаталогВременныхФайлов()+"sleep.js");
	
КонецПроцедуры

Функция ПолучитьШтрихКодПоНоменклатуре(СтрокаЧека)Экспорт
	
	ШтрихКод = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Штрихкоды.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|	И Штрихкоды.Владелец = &Номенклатура
	|	И Штрихкоды.Характеристика = &Характеристика");
	Запрос.УстановитьПараметр("Номенклатура", 	СтрокаЧека.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтрокаЧека.Характеристика);
	//Запрос.УстановитьПараметр("Упаковка", 		СтрокаЧека.Упаковка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ШтрихКод = Выборка.ШтрихКод;
	КонецЕсли;
	
	Возврат ШтрихКод;
	
КонецФункции	

Функция АПечаталсяЛиЧек(Документ) Экспорт
    Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Р.Документ
	             |ИЗ
	             |	РегистрСведений.ЧекиККМ.СрезПоследних(, Документ = &Док) КАК Р";
	Запрос.УстановитьПараметр("Док",Документ);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьСтрокуstatus_code(status_code) Экспорт

    status_code = СокрЛП(status_code);	
    status_code = СтрЗаменить(status_code,Символы.НПП,"");
    
    Возврат status_code;
КонецФункции // ()

Функция ПолучитьСтрокуВУРЛ(Строка,ДопСтрока = "")Экспорт
	
	Строка = СокрЛП(Строка);
	Строка = СтрЗаменить(Строка,".","");
	Строка = СтрЗаменить(Строка,",","");
	Строка = СтрЗаменить(Строка,":","");
	Строка = СтрЗаменить(Строка,"'","");
	Строка = СтрЗаменить(Строка,"&","");
	Строка = СтрЗаменить(Строка,"%","");
	Строка = СтрЗаменить(Строка,"+","");
	Строка = СтрЗаменить(Строка,"{","(");
	Строка = СтрЗаменить(Строка,"}",")");
	Строка = СтрЗаменить(Строка,"[","(");
	Строка = СтрЗаменить(Строка,"]",")");
	Строка = СтрЗаменить(Строка,"/","|");
	Строка = СтрЗаменить(Строка,"\","|");
	
	Если ДопСтрока <> "" Тогда
		Строка = Строка + "("+СокрЛП(ДопСтрока)+")";	
	КонецЕсли;
	
	Попытка
		СтрокаВУРЛ = ПреобразованиеСтрокуВURL(Строка);
	Исключение
		Ошибка = ОписаниеОшибки();
		СтрокаВУРЛ = "";
	КонецПопытки;

	Возврат СтрокаВУРЛ; 
	
КонецФункции	


//ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПРОГРАММЫ ЛОЯЛЬНОСТИ SailPlay 

Процедура ВыгрузитьВсеОтложенныеТранзакции() Экспорт

    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
                   |    ОтложенныеТранзакцииSailPlayСрезПоследних.Период КАК Период,
                   |    ОтложенныеТранзакцииSailPlayСрезПоследних.Документ,
                   |    ЕСТЬNULL(ОтложенныеТранзакцииSailPlayСрезПоследних.Документ.Склад, ОтложенныеТранзакцииSailPlayСрезПоследних.Документ.СкладОрдер) КАК Склад
                   |ИЗ
                   |    РегистрСведений.ОтложенныеТранзакцииSailPlay.СрезПоследних(
                   |            ,
                   |            Документ.СкладОрдер.ПрограммаЛояльностиSailPlay
                   |                ИЛИ Документ.Склад.ПрограммаЛояльностиSailPlay) КАК ОтложенныеТранзакцииSailPlayСрезПоследних
                   |ГДЕ
                   |    НЕ ОтложенныеТранзакцииSailPlayСрезПоследних.ТранзакцияЗавершена
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |    Склад,
                   |    Период
                   |ИТОГИ ПО
                   |    Склад";
                   
    ВЫборкаСклад = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    Пока ВЫборкаСклад.Следующий() Цикл
        ОбновитьПараметрыСеансаSailPlay(,,,ВЫборкаСклад.Склад);
        ПройтиАвторизациюSailPlay(Ложь);
        Выборка = ВЫборкаСклад.Выбрать();
        Пока ВЫборка.Следующий() Цикл
            ВыгрузитьОтложенныеТранзакцииSailPlay(ВЫборка.Документ);    
        КонецЦикла; 
    КонецЦикла; 

КонецПроцедуры
 

Процедура РегламентноеЗадание_ВыгрузитьОтложенныеТранзакцииSailPlay() Экспорт
    ВыгрузитьВсеОтложенныеТранзакции();
КонецПроцедуры

Процедура РегламентноеЗадание_ВыгрузитьНоменклатуруНаОстатках() Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
                   |    Склады.Ссылка
                   |ИЗ
                   |    Справочник.Склады КАК Склады
                   |ГДЕ
                   |    Склады.ПрограммаЛояльностиSailPlay
                   |    И Склады.ИспользоватьНастройкиДляВыгрузкиНоменклатуры";
    Выборка = Запрос.Выполнить().Выбрать();
    Если Выборка.Следующий() Тогда
        Магазин = Выборка.Ссылка;
    Иначе	
        ЗаписатьЛог("Регламентное задание выгрузки по остаткам не выполнено"
                      ,"Не задан склад, настройки которого используются для выгрузки по умолчанию!");
        Возврат;
    КонецЕсли; 
    
    ОбновитьПараметрыСеансаSailPlay(,,,Магазин);
    ПройтиАвторизациюSailPlay(Ложь);
    Отказ = Ложь;    
    ДатаНач = ТекущаяДата();
    ВыгрузитьНоменклатуруНаОстатках(Отказ,Истина);	
    Если Отказ Тогда
        ЗаписатьЛог("Регламентное задание выгрузки по остаткам не выполнено","Начало: " + СокрЛП(ДатаНач) + " окончание: " + СокрЛП(ТекущаяДата()));
    КонецЕсли; 
КонецПроцедуры

/// выгрузка справочника Номенклатура ************ ////////////////////////////
 
Процедура ВыгрузитьНоменклатуруНаОстатках(Отказ=Ложь,ЗаписатьВЛог=Ложь) Экспорт
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат;		
	КонецЕсли;
	
	ИдМагазинаSailPlay 	= ПараметрыСеанса.ИдМагазинаSailPlay;
	HTTPСервер          = ПолучитьHTTPСерверSailPlay();
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Отказ = Ложь;
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    
    Запрос.Текст = "ВЫБРАТЬ
    |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура
    |ПОМЕСТИТЬ СписокНоменклатуры
    |ИЗ
    |	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
    |ГДЕ
    |	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
    |
    |СГРУППИРОВАТЬ ПО
    |	ТоварыНаСкладахОстатки.Номенклатура";
    
    Результат = Запрос.Выполнить();
    
    
    Запрос.Текст = "ВЫБРАТЬ т.Номенклатура Из СписокНоменклатуры КАК Т";
    мНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
    
    ////создаем справочники
    СоздатьСправочникиВSailPlay(ТокенSailPlay,Отказ,мНоменклатуры);		
    Если Отказ = Истина Тогда
        #Если Клиент Тогда
            Сообщить("Ошибка создания справочников в SailPlay!!! Операция прервана",СтатусСообщения.ОченьВажное);
        #КонецЕсли
        Если ЗаписатьВЛог Тогда
            ЗаписатьЛог("Ошибка создания справочников в SailPlay!!! Операция прервана ");
        КонецЕсли; 
        Возврат;
    КонецЕсли;
    ////создаем справочники
    
    ////выгрузка записей справочников
    ДобавитьИзменитьЗаписиСправочниковSailPlayВсе(ТокенSailPlay,Отказ,мНоменклатуры);
    Если Отказ = Истина Тогда
        #Если Клиент Тогда
            Сообщить("Ошибка выгрузки записей справочника в SailPlay!!! Операция прервана",СтатусСообщения.ОченьВажное);
        #КонецЕсли
        Если ЗаписатьВЛог Тогда
            ЗаписатьЛог("Ошибка выгрузки записей справочника в SailPlay!!! Операция прервана ");
        КонецЕсли;
        Возврат;
    КонецЕсли;
    ////выгрузка записей справочников
    
	//выгружаем группы
    #Если Клиент Тогда
        Сообщить("Начало выгрузки групп номенклатур: "  + ТекущаяДата());
    #КонецЕсли
    ВыгрузитьГруппыВSailPlayСОтбором(ТокенSailPlay,Отказ,мНоменклатуры);
    
    Если Отказ = Истина Тогда
        #Если Клиент Тогда
            Сообщить("Ошибка выгрузки Групп номенклатур!!! Операция прервана",СтатусСообщения.ОченьВажное);
        #КонецЕсли
        Если ЗаписатьВЛог Тогда
            ЗаписатьЛог("Ошибка выгрузки групп справочника в SailPlay!!! Операция прервана ");
        КонецЕсли;
        Возврат;
    КонецЕсли;
    #Если Клиент Тогда
        Сообщить("Начало выгрузки номенклатуры: "  + ТекущаяДата());
    #КонецЕсли
    Запрос.Текст = "ВЫБРАТЬ
                   |    Номенклатура.Ссылка КАК Ссылка,
                   |    Номенклатура.Код КАК КодНоменклатуры,
                   |    Номенклатура.Наименование КАК НаименованиеНоменклатуры,
                   |    Номенклатура.Родитель.Код КАК КодКатегории,
                   |    Номенклатура.ВидНоменклатуры.Код КАК КодВидНоменклатуры,
                   |    ЗначенияСвойствОбъектов.Свойство.Код + ""_Свойство"" КАК КодСвойство,
                   |    ЗначенияСвойствОбъектов.Значение.Код КАК КодЗначение
                   |ИЗ
                   |    Справочник.Номенклатура КАК Номенклатура
                   |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
                   |        ПО Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
                   |ГДЕ
                   |    НЕ Номенклатура.ЭтоГруппа
                   |    И Номенклатура.Ссылка В
                   |            (ВЫБРАТЬ
                   |                Т.Номенклатура
                   |            ИЗ
                   |                СписокНоменклатуры КАК Т)
                   |ИТОГИ
                   |    МАКСИМУМ(КодНоменклатуры),
                   |    МАКСИМУМ(НаименованиеНоменклатуры),
                   |    МАКСИМУМ(КодКатегории),
                   |    МАКСИМУМ(КодВидНоменклатуры)
                   |ПО
                   |    Ссылка";
    
    РезультатЗапроса = Запрос.Выполнить();
	Выборкассылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Всего = Выборкассылка.Количество();
    сч = 0;
    Пока Выборкассылка.Следующий() Цикл
		
		#Если Клиент Тогда
            Состояние("Выгружено: " +сч +" из " + Всего);
		#КонецЕсли
        
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
        
        НаменованиеНоменклатуры = СокрЛП(Выборкассылка.НаименованиеНоменклатуры);
		НаменованиеНоменклатуры = ВырезатьИзСтрокиСпецСимволы(НаменованиеНоменклатуры);
		
		Попытка
			НаменованиеНоменклатурыВУРЛ = ПреобразованиеСтрокуВURL(НаменованиеНоменклатуры);
		Исключение
			НаменованиеНоменклатурыВУРЛ = "";
        КонецПопытки;
		
		Попытка
			//++ Кузнецов С.А. - Добавил СокрЛП - 01.07.2016
			КодНоменклатурыВУРЛ = ПреобразованиеСтрокуВURL(СокрЛП(Выборкассылка.КодНоменклатуры));				
			//-- Кузнецов С.А. - 01.07.2016	
		Исключение
			КодНоменклатурыВУРЛ = "";
		КонецПопытки;
        
		Попытка
			КодКатегорииВУРЛ = ПреобразованиеСтрокуВURL(Выборкассылка.КодКатегории);
		Исключение
			КодКатегорииВУРЛ = "";
		КонецПопытки;
	
		Запись = Новый Структура;
		Запись.Вставить("token", 				ТокенSailPlay);
		Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
		Запись.Вставить("sku", 					КодНоменклатурыВУРЛ);
		Запись.Вставить("name", 				НаменованиеНоменклатурыВУРЛ);
		Запись.Вставить("category_sku", 		КодКатегорииВУРЛ);
        
        СтрокаНачалоЗапроса = "/api/v2/basket/products/edit/";  // по умолчание считаем что номенклатура есть на стороне СП
        
        СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
        Файл 				= ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла);
        МассивАтрибуты 		= Неопределено;
        
        Если Файл = Неопределено Тогда 
            #Если Клиент Тогда
                Сообщить(Выборкассылка.НаименованиеНоменклатуры,СтатусСообщения.ОченьВажное);
            #КонецЕсли
            сч = сч + 1;
            Продолжить;
        Иначе
			
			//проверяем ответ от Ресурса
			Стр = Файл;
			Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
			Статус = Структура.status;
			Если Статус <> "ok" Тогда
                Если Структура.status = "error" Тогда
                    
                    //добавляем категорию номенклатуры
                    СтрокаНачалоЗапроса = "/api/v2/basket/products/add/";
                    СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
                    Файл 				= ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла);
                    
                    Если НЕ ЗначениеЗаполнено(Файл) Тогда
                        Отказ = Истина;
                        ЗаписатьЛог("Ошибка выгрузки номенклатуры в SailPlay!!! Операция прервана ", СтрокаЗапроса);
                        Возврат;
                    Иначе
                        //проверяем ответ от Ресурса
                        Стр             = Файл;
                        Структура       = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
                        Статус = Структура.status;
                        Если Статус <> "ok" Тогда
                            #Если Клиент  Тогда
                                Сообщить("Ошибка при создании номенклатуры в SailPlay. " +Выборкассылка.НаименованиеНоменклатуры+ " "+ Структура.message,СтатусСообщения.ОченьВажное);	
                            #КонецЕсли
                            Если ЗаписатьВЛог Тогда
                                ЗаписатьЛог("Ошибка при создании номенклатуры в SailPlay. " +Выборкассылка.НаименованиеНоменклатуры+ " "+ Структура.message, СтрокаЗапроса);
                            КонецЕсли;
                            Отказ = Истина;
                        Иначе
                            МассивАтрибуты = Новый Массив;
                        КонецЕсли;
                    КонецЕсли;	
                    
                Иначе
                    #Если Клиент  Тогда
                        Сообщить("Ошибка при изменении номенклатуры в SailPlay. "  +Выборкассылка.НаименованиеНоменклатуры+ " " + Структура.message,СтатусСообщения.ОченьВажное);
                    #КонецЕсли
                    Если ЗаписатьВЛог Тогда
                        ЗаписатьЛог("Ошибка при изменении номенклатуры в SailPlay. "  +Выборкассылка.НаименованиеНоменклатуры+ " " + Структура.message, СтрокаЗапроса);
                    КонецЕсли;
                    Отказ = Истина;
                КонецЕсли;
			Иначе
                
                МассивАтрибуты = Структура.attributes;
                
				Если МассивАтрибуты <> Неопределено Тогда
                    ПрисвоитьАтрибутыТовару(ТокенSailPlay,Выборкассылка,МассивАтрибуты,Отказ);	
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		сч = сч + 1;
		
	КонецЦикла;
	
    #Если Клиент Тогда
        Сообщить("Окончание выгрузки номенклатуры: "  + ТекущаяДата());
    #КонецЕсли
КонецПроцедуры

Процедура ДобавитьКатегорииSailPlay(Токен,КодКатегории,НаименованиеКатегории, КодРодителя,Отказ)
    
    Если НЕ ЗначениеЗаполнено(КодКатегории) Тогда
        Возврат;
    КонецЕсли; 
    
	НаменованиеКатегорииВУРЛ = ПолучитьСтрокуВУРЛ(НаименованиеКатегории);
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				Токен);
	Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
	Запись.Вставить("sku", 					КодКатегории);
	Если ЗначениеЗаполнено(КодРодителя) Тогда
		Запись.Вставить("parent_sku", 		КодРодителя);
	КонецЕсли;	
	Запись.Вставить("name", 				НаменованиеКатегорииВУРЛ);
	
	HTTPСервер          = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/basket/categories/add/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,Истина);
	Если Файл = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	Иначе
		//проверяем ответ от Ресурса
		Стр = Файл;
        Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус <> "ok" Тогда
			
			Попытка
				status_code = ПолучитьСтрокуstatus_code(Структура.status_code);//СОКРЛП(Структура.status_code);
			Исключение
				status_code = Неопределено;
			КонецПопытки;
			
			Если status_code = "-7000" Тогда
			Иначе
				Сообщить("Ошибка при создании группы в SailPlay. "+ Структура.message,СтатусСообщения.ОченьВажное);
				//Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьГруппыВSailPlayСОтбором(Токен,Отказ,мНоменклатуры) Экспорт 
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("мНоменклатуры",мНоменклатуры);
    Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
    |    Т1.Ссылка.Родитель КАК Ссылка
    |ИЗ
    |    Справочник.Номенклатура КАК Т1
    |ГДЕ
    |    Т1.Ссылка В ИЕРАРХИИ(&мНоменклатуры)
    |    И Т1.ЭтоГруппа = ЛОЖЬ
    |ИТОГИ ПО
    |    Ссылка ТОЛЬКО ИЕРАРХИЯ";
    
    РезультатЗапроса = Запрос.Выполнить();
    Если РезультатЗапроса.Пустой() = Ложь Тогда
        
        Выборка = РезультатЗапроса.Выбрать();
        КоличествоЗаписей = Выборка.Количество();
        сч = 1;
        
        Пока Выборка.Следующий() Цикл
            
            #Если Клиент Тогда
                ОбработкаПрерыванияПользователя();
            #КонецЕсли
            
            ДобавитьКатегорииSailPlay(Токен,СокрЛП(Выборка.Ссылка.Код),СокрЛП(Выборка.Ссылка.Наименование),СокрЛП(Выборка.Ссылка.Родитель.Код),Отказ);
            #Если Клиент Тогда
                Состояние("Выгружено групп номенклатур: " +сч + " из " + КоличествоЗаписей);
            #КонецЕсли
            сч = сч + 1;
            
            Если Отказ = Истина Тогда
                Прервать;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры	

Процедура ВыгрузитьВсеГруппыВSailPlay(Токен,Отказ) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
                   |    Номенклатура.Ссылка КАК Ссылка,
                   |    Номенклатура.Код КАК Код,
                   |    Номенклатура.Наименование КАК Наименование,
                   |    Номенклатура.Родитель.Код КАК РодительКод
                   |ИЗ
                   |    Справочник.Номенклатура КАК Номенклатура
                   |ГДЕ
                   |    Номенклатура.ЭтоГруппа = ИСТИНА
                   |ИТОГИ ПО
                   |    Ссылка ТОЛЬКО ИЕРАРХИЯ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Ложь Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		КоличествоЗаписей = Выборка.Количество();
		сч = 1;
		
		Пока Выборка.Следующий() Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ДобавитьКатегорииSailPlay(Токен,СокрЛП(Выборка.Код),СокрЛП(Выборка.Наименование),СокрЛП(Выборка.РодительКод),Отказ);
            #Если Клиент Тогда
                Состояние("Выгружено групп номенклатур: " +сч + " из " + КоличествоЗаписей);
            #КонецЕсли
            сч = сч + 1;
			
			Если Отказ = Истина Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры	

Процедура СоздатьСправочникиВSailPlay(Токен,Отказ,мНоменклатуры=Неопределено)Экспорт
	
	тзСправочников = Новый ТаблицаЗначений;
	тзСправочников.Колонки.Добавить("ИмяСправочника");
	тзСправочников.Колонки.Добавить("НаименованиеСправочника");
	НоваяСтрока = тзСправочников.Добавить();
	НоваяСтрока.ИмяСправочника 			= Метаданные.Справочники.ВидыНоменклатуры.ПолноеИмя();
	НоваяСтрока.НаименованиеСправочника = "ВидыНоменклатуры";
    
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
                   |    ЗначенияСвойств.Свойство.Код + ""_Свойство"" КАК Код,
                   |    ЗначенияСвойств.Свойство.Наименование КАК Наименование
                   |ИЗ
                   |    РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
                   |ГДЕ
                   |    ЗначенияСвойств.Объект ССЫЛКА Справочник.Номенклатура
                   |    И &ЗаменитьУсловиеНоменклатура";
    
    Если мНоменклатуры=Неопределено Тогда
        Запрос.УстановитьПараметр("ЗаменитьУсловиеНоменклатура",Истина);
    Иначе	
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ЗаменитьУсловиеНоменклатура"," ЗначенияСвойств.Объект В (&мНоменклатуры)");
        Запрос.УстановитьПараметр("мНоменклатуры",мНоменклатуры);
    КонецЕсли;                    
                   
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
        НоваяСтрока = тзСправочников.Добавить();
        НоваяСтрока.ИмяСправочника 			= СОКРЛП(Выборка.Код) ;
        НоваяСтрока.НаименованиеСправочника = Выборка.Наименование;
    КонецЦикла; 
    
    тзСправочников.Свернуть("НаименованиеСправочника,ИмяСправочника");
    
	Для Каждого СтрокаТз Из тзСправочников Цикл
		
		Запись = Новый Структура;
		Запись.Вставить("token", 				Токен);
		Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
		Запись.Вставить("sku", 					ПолучитьСтрокуВУРЛ(СтрокаТз.ИмяСправочника));
		Запись.Вставить("name", 				ПолучитьСтрокуВУРЛ(СтрокаТз.НаименованиеСправочника));
		Запись.Вставить("data_type", 			"text");
		
		HTTPСервер = ПолучитьHTTPСерверSailPlay();
		СтрокаНачалоЗапроса = "/api/v2/basket/attributes/add/";
		СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
		ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
		
		Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла);
		Если Файл = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			//проверяем ответ от Ресурса
			Стр = Файл;
			Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
			Статус = Структура.status;
			
			Если Статус <> "ok" Тогда
				Если Структура.message <> "already exists" Тогда
                    #Если Клиент Тогда
                        Сообщить("Ошибка при создании справочника в SailPlay. " + Структура.message,СтатусСообщения.ОченьВажное);	
                    #КонецЕсли
                    Отказ = Истина;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ДобавитьЗаписиСправочниковSailPlay(Токен,СправочникСсылка,КодСправочника,НаименованиеСправочника,Отказ)Экспорт
	 
	//если ссылка то получим имя по метаданным
	Попытка
		ИмяСправочника = СправочникСсылка.Метаданные().ПолноеИмя();  //это наименование по метаданным
	Исключение
		ИмяСправочника = СправочникСсылка;
	КонецПопытки;
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				Токен);
	Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
	Запись.Вставить("sku", 					ПолучитьСтрокуВУРЛ(ИмяСправочника));
	Запись.Вставить("value_sku", 			ПолучитьСтрокуВУРЛ(КодСправочника));
	Запись.Вставить("value", 				ПолучитьСтрокуВУРЛ(НаименованиеСправочника));
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/basket/attributes/values/add/"; 
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла);
	Если Файл = Неопределено Тогда 
		Отказ = Истина;
		Возврат;
	Иначе
		//проверяем ответ от Ресурса
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус <> "ok" Тогда
			Если Структура.message = "Value with such sku already exists for this attribute" Тогда
			Иначе
                #Если Клиент Тогда
                    Сообщить("Ошибка при создании записей справочника в SailPlay. "+ Структура.message,СтатусСообщения.ОченьВажное);	
                #КонецЕсли
                Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Файл = Неопределено;
	
КонецПроцедуры	

Процедура ДобавитьИзменитьЗаписиСправочниковSailPlayВсе(Токен,Отказ,мНоменклатуры=Неопределено)Экспорт
    // нужно добавить выгрузку значений свойств - Размер и цвет (это план видов характеристик СвойстваОбъектов)
	Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
                   |    Спр.Ссылка,
                   |    Спр.Код КАК Код,
                   |    Спр.Наименование КАК Наименование
                   |ИЗ
                   |    Справочник.ВидыНоменклатуры КАК Спр
                   |
                   |ОБЪЕДИНИТЬ ВСЕ
                   |
                   |ВЫБРАТЬ РАЗЛИЧНЫЕ
                   |    ЗначенияСвойств.Свойство.Код + ""_Свойство"",
                   |    ЗначенияСвойств.Значение.Код,
                   |    ЗначенияСвойств.Значение.Наименование
                   |ИЗ
                   |    РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
                   |ГДЕ
                   |    ЗначенияСвойств.Объект ССЫЛКА Справочник.Номенклатура
                   |    И НЕ ЗначенияСвойств.Значение.Код ЕСТЬ NULL 
                   |    И &ЗаменитьУсловиеНоменклатура";
                   
    Если мНоменклатуры=Неопределено Тогда
        Запрос.УстановитьПараметр("ЗаменитьУсловиеНоменклатура",Истина);
    Иначе	
        Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ЗаменитьУсловиеНоменклатура"," ЗначенияСвойств.Объект В (&мНоменклатуры)");
        Запрос.УстановитьПараметр("мНоменклатуры",мНоменклатуры);
    КонецЕсли;                    
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Ложь Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Всего = Выборка.Количество();
		сч = 1;
		
		Пока Выборка.Следующий() Цикл
            Если НЕ ЗначениеЗаполнено(Выборка.Код) Тогда
                Продолжить;
            КонецЕсли; 
            
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ДобавитьЗаписиСправочниковSailPlay(Токен,Выборка.Ссылка,СокрЛП(Выборка.Код),СокрЛП(Выборка.Наименование),Отказ);
            #Если Клиент Тогда
                Состояние("Выгружено справочников: " +сч + " из " + Всего);
            #КонецЕсли
            сч = сч + 1;
			
			Если Отказ = Истина Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьЗначениеАтрибутаТовару(Токен,КодНоменклатуры,МетаданныеСправочника,КодАтрибута, Отказ) Экспорт
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				Токен);
	Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
	Запись.Вставить("sku", 					ПолучитьСтрокуВУРЛ(КодНоменклатуры));
	Запись.Вставить("attribute_sku", 		ПолучитьСтрокуВУРЛ(МетаданныеСправочника));
	Запись.Вставить("value_sku", 			ПолучитьСтрокуВУРЛ(КодАтрибута));
	
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/basket/products/attributes/add/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла);
	Если Файл = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	Иначе
		//проверяем ответ от Ресурса
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус <> "ok" Тогда
            #Если Клиент Тогда
                Сообщить("Ошибка при назначении атрибута " + СокрЛП(МетаданныеСправочника)+ " значение " + СокрЛП(КодАтрибута)+ " товару: " +КодНоменклатуры +" " + Структура.message,СтатусСообщения.ОченьВажное);	
            #КонецЕсли
            Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗначениеАтрибутаУТовара(Токен,КодНоменклатуры,МетаданныеСправочника,Отказ) Экспорт
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				Токен);
	Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
	Запись.Вставить("sku", 					ПолучитьСтрокуВУРЛ(КодНоменклатуры));
	Запись.Вставить("attribute_sku", 		ПолучитьСтрокуВУРЛ(МетаданныеСправочника));
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/basket/products/attributes/delete/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла);
	Если Файл = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	Иначе
		//проверяем ответ от Ресурса
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус <> "ok" Тогда
            #Если Клиент Тогда
                Сообщить("Ошибка при удалении атрибута у товара в SailPlay. " + Структура.message,СтатусСообщения.ОченьВажное);	
            #КонецЕсли
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрисвоитьАтрибутыТовару(Токен,Выборка,МассивАтрибуты,Отказ)
	
	Если МассивАтрибуты.Количество() = 0 Тогда //просто добавляем
		
		Если ЗначениеЗаполнено(Выборка.КодВидНоменклатуры) Тогда
			ДобавитьЗначениеАтрибутаТовару(Токен,СокрЛП(Выборка.КодНоменклатуры),Метаданные.Справочники.ВидыНоменклатуры.ПолноеИмя(),СокрЛП(Выборка.КодВидНоменклатуры),Отказ);
		КонецЕсли;
        
		ВыборкаСвойства = Выборка.Выбрать();
        Пока ВыборкаСвойства.Следующий() Цикл
            Если ЗначениеЗаполнено(ВыборкаСвойства.КодСвойство) Тогда
                ДобавитьЗначениеАтрибутаТовару(Токен,СокрЛП(ВыборкаСвойства.КодНоменклатуры),СокрЛП(ВыборкаСвойства.КодСвойство),СокрЛП(ВыборкаСвойства.КодЗначение),Отказ);
            КонецЕсли; 
        КонецЦикла; 
		
	Иначе
		
		Если ЗначениеЗаполнено(Выборка.КодВидНоменклатуры) Тогда
			ДобавитьЗначениеАтрибутаТовару(Токен,СокрЛП(Выборка.КодНоменклатуры),Метаданные.Справочники.ВидыНоменклатуры.ПолноеИмя(),СокрЛП(Выборка.КодВидНоменклатуры),Отказ);
		Иначе //удаляем
			УдалитьЗначениеАтрибутаУТовара(Токен,СокрЛП(Выборка.КодНоменклатуры),Метаданные.Справочники.ВидыНоменклатуры.ПолноеИмя(),Отказ);	
		КонецЕсли;
        
		ВыборкаСвойства = Выборка.Выбрать();
        Пока ВыборкаСвойства.Следующий() Цикл
            Если ЗначениеЗаполнено(ВыборкаСвойства.КодЗначение) Тогда
			    ДобавитьЗначениеАтрибутаТовару(Токен,СокрЛП(ВыборкаСвойства.КодНоменклатуры),СокрЛП(ВыборкаСвойства.КодСвойство),СокрЛП(ВыборкаСвойства.КодЗначение),Отказ);
            ИначеЕсли ЗначениеЗаполнено(ВыборкаСвойства.КодСвойство) Тогда	
			    УдалитьЗначениеАтрибутаУТовара(Токен,СокрЛП(ВыборкаСвойства.КодНоменклатуры),СокрЛП(ВыборкаСвойства.КодСвойство),Отказ);	
            КонецЕсли; 
        КонецЦикла; 
        
	КонецЕсли;
	
КонецПроцедуры

Функция ВырезатьИзСтрокиСпецСимволы(СтрокаЗамены) Экспорт

		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,".","");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,",","");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,":","");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,"'","");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,"&","");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,"%","");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,"+","");		
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,"{","(");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,"}",")");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,"[","(");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,"]",")");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,"/","|");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены,"\","|");
        
        Возврат СтрокаЗамены;

КонецФункции // ()

Функция ПолучитьСписокНоменклатурыСП() Экспорт
    
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код",		Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(11))); // поменять на 11
	ТЗ.Колонки.Добавить("Наименование",	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
    
    ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат ТЗ;		
	КонецЕсли;
	
	ИдМагазинаSailPlay 	= ПараметрыСеанса.ИдМагазинаSailPlay;
	HTTPСервер          = ПолучитьHTTPСерверSailPlay();
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
    
    СтрокаНачалоЗапроса = "/api/v2/basket/products/list/";
	
	КоличествоСтраниц = 1;
	ТекущаяСтраница = 1;
	
	
	Пока ТекущаяСтраница<= КоличествоСтраниц Цикл
            // убрать
        //Прервать;
        
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
        #Если Клиент Тогда
            Состояние("Страница " + ТекущаяСтраница+ " из " + КоличествоСтраниц);
        #КонецЕсли
        Запись = Новый Структура;
		Запись.Вставить("token", 				ТокенSailPlay);
		Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
		Запись.Вставить("page", 				ТекущаяСтраница);
		
		СтрокаЗапроса = СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
		
		Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла);
		Если Файл = Неопределено Тогда //откладываем транзакцию
			тз = Неопределено;
			Прервать;
		Иначе
			//проверяем ответ от Ресурса
			Стр = Файл;
			Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
			Статус = Структура.status;
			
			КоличествоСтраниц = Число(Структура.num_pages);
			
			Для Каждого СтрНоменклатура Из Структура.products Цикл
				
				Попытка
					ИмяНоменклатуры = ПреобразованиеURLВСтроку(СтрНоменклатура.name);
				Исключение
					ИмяНоменклатуры = "";
				КонецПопытки;
                
                Попытка
                	Код = ПреобразованиеURLВСтроку(СтрНоменклатура.sku);
                Исключение
                    Код = "";
                КонецПопытки; 
                
                // преобразуем скю в код номенклатуры
                // надо поменять на артикул
				Попытка
					НоваяСтрока 				= ТЗ.Добавить();
					НоваяСтрока.Код      		= Код;
					НоваяСтрока.Наименование 	= ИмяНоменклатуры;
				Исключение
                    #Если Клиент Тогда
                        Сообщить(ОписаниеОшибки());
                    #КонецЕсли
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекущаяСтраница = ТекущаяСтраница + 1;
		
	КонецЦикла;

    Возврат ТЗ;
КонецФункции // ()

Процедура ВыгрузитьВсюИнформациюВSailPlay(ТолькоНовуюНоменклатуру=Ложь)Экспорт
    
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат;		
	КонецЕсли;
	
	ИдМагазинаSailPlay 	= ПараметрыСеанса.ИдМагазинаSailPlay;
	HTTPСервер          = ПолучитьHTTPСерверSailPlay();
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Отказ = Ложь;
	//выгружаем группы
	Сообщить("Начало выгрузки групп номенклатур: "  + ТекущаяДата());
    // снять коммент
    ВыгрузитьВсеГруппыВSailPlay(ТокенSailPlay,Отказ);
    
    Если Отказ = Истина Тогда
        #Если Клиент Тогда
            Сообщить("Ошибка выгрузки Групп номенклатур!!! Операция прервана",СтатусСообщения.ОченьВажное);
        #КонецЕсли
        Возврат;
	КонецЕсли;
	//выгружаем группы
	
    ////создаем справочники
    // снять коммент
    СоздатьСправочникиВSailPlay(ТокенSailPlay,Отказ);		
    Если Отказ = Истина Тогда
        #Если Клиент Тогда
            Сообщить("Ошибка создания справочников в SailPlay!!! Операция прервана",СтатусСообщения.ОченьВажное);
        #КонецЕсли
        Возврат;
    КонецЕсли;
    ////создаем справочники
    
    ////выгрузка записей справочников
    // снять коммент
    ДобавитьИзменитьЗаписиСправочниковSailPlayВсе(ТокенSailPlay,Отказ);
    Если Отказ = Истина Тогда
        #Если Клиент Тогда
            Сообщить("Ошибка выгрузки записей справочника в SailPlay!!! Операция прервана",СтатусСообщения.ОченьВажное);
        #КонецЕсли
        Возврат;
    КонецЕсли;
    ////выгрузка записей справочников

	//выгрузка номенклатуры
    #Если Клиент Тогда
        Сообщить("Начало выгрузки номенклатуры: "  + ТекущаяДата());
    #КонецЕсли
    
    тз = ПолучитьСписокНоменклатурыСП();
    
	Если Тз = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
    #Если Клиент Тогда
        Состояние("Выполняем запрос...");
    #КонецЕсли
    
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НоменклатураСаилПлай.Код,
	|	НоменклатураСаилПлай.Наименование
	|ПОМЕСТИТЬ НоменклатураСаилПлай
	|ИЗ
	|	&НоменклатураСаилПлай КАК НоменклатураСаилПлай";
	Запрос.УстановитьПараметр("НоменклатураСаилПлай",ТЗ);
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Запрос.Текст = "ВЫБРАТЬ
                   |    Номенклатура.Ссылка КАК Ссылка,
                   |    Номенклатура.Код КАК КодНоменклатуры,
                   |    Номенклатура.Наименование КАК НаименованиеНоменклатуры,
                   |    НоменклатураСэйлПлей.Наименование КАК НаименованиеСэйлПлей,
                   |    НоменклатураСэйлПлей.Код КАК КодСэйлПлей,
                   |    Номенклатура.Родитель.Код КАК КодКатегории,
                   |    Номенклатура.ВидНоменклатуры.Код КАК КодВидНоменклатуры,
                   |    ЗначенияСвойствОбъектов.Свойство.Код + ""_Свойство"" КАК КодСвойство,
                   |    ЗначенияСвойствОбъектов.Значение.Код КАК КодЗначение
                   |ИЗ
                   |    Справочник.Номенклатура КАК Номенклатура
                   |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
                   |        ПО Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
                   |        ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураСаилПлай КАК НоменклатураСэйлПлей
                   |        ПО Номенклатура.Код = НоменклатураСэйлПлей.Код
                   |ГДЕ
                   |    НЕ Номенклатура.ЭтоГруппа
                   |ИТОГИ
                   |    МАКСИМУМ(КодНоменклатуры),
                   |    МАКСИМУМ(НаименованиеНоменклатуры),
                   |    МАКСИМУМ(НаименованиеСэйлПлей),
                   |    МАКСИМУМ(КодСэйлПлей),
                   |    МАКСИМУМ(КодКатегории),
                   |    МАКСИМУМ(КодВидНоменклатуры)
                   |ПО
                   |    Ссылка";
    
    
    
    РезультатЗапроса = Запрос.Выполнить();
	Выборкассылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Всего = Выборкассылка.Количество();
    сч = 0;
    Пока Выборкассылка.Следующий() Цикл
		
		#Если Клиент Тогда
            Состояние("Выгружено: " +сч +" из " + Всего);
		#КонецЕсли
        
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
        
        НаменованиеНоменклатуры = СокрЛП(Выборкассылка.НаименованиеНоменклатуры);
		НаменованиеНоменклатуры = ВырезатьИзСтрокиСпецСимволы(НаменованиеНоменклатуры);
		
		Попытка
			НаменованиеНоменклатурыВУРЛ = ПреобразованиеСтрокуВURL(НаменованиеНоменклатуры);
		Исключение
			НаменованиеНоменклатурыВУРЛ = "";
        КонецПопытки;
        
		Попытка
			//++ Кузнецов С.А. - Добавил СокрЛП - 01.07.2016
        	КодНоменклатурыВУРЛ = ПреобразованиеСтрокуВURL(СокрЛП(Выборкассылка.КодНоменклатуры));
			//++ Кузнецов С.А. - 01.07.2016
		Исключение
        	КодНоменклатурыВУРЛ = "";
        КонецПопытки;
        
		Попытка
			КодКатегорииВУРЛ = ПреобразованиеСтрокуВURL(Выборкассылка.КодКатегории);		
		Исключение
			КодКатегорииВУРЛ = "";
        КонецПопытки;
	
		Запись = Новый Структура;
		Запись.Вставить("token", 				ТокенSailPlay);
		Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
		Запись.Вставить("sku", 					КодНоменклатурыВУРЛ);
		Запись.Вставить("name", 				НаменованиеНоменклатурыВУРЛ);
		Запись.Вставить("category_sku", 		КодКатегорииВУРЛ);
        
        ТоварыЕстьВСП = Ложь;
        Если ЗначениеЗаполнено(Выборкассылка.НаименованиеСэйлПлей) Тогда //товар есть, но его надо поменять
            ТоварыЕстьВСП = Истина;
			СтрокаНачалоЗапроса = "/api/v2/basket/products/edit/";
		Иначе
			СтрокаНачалоЗапроса = "/api/v2/basket/products/add/";
		КонецЕсли;
        
        Выгрузить = НЕ ТоварыЕстьВСП ИЛИ НЕ ТолькоНовуюНоменклатуру;
        
        Если НЕ Выгрузить Тогда
            Продолжить;
        КонецЕсли; 
        СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
        Файл 				= ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла);
        МассивАтрибуты 		= Неопределено;
        
		Если Файл = Неопределено Тогда 
            #Если Клиент Тогда
                Сообщить(Выборкассылка.НаименованиеНоменклатуры,СтатусСообщения.ОченьВажное);
            #КонецЕсли
             сч = сч + 1;
			 Продолжить;
		Иначе
			
			//проверяем ответ от Ресурса
			Стр = Файл;
			Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
			Статус = Структура.status;
			Если Статус <> "ok" Тогда
				//ЛогОбработок_Процедуры.ЗаписатьВЛогОбработки("ВыгрузкаВSailPlay","ВыгрузкаНоменклатуры","Ошибка создания номенклатуры "+ Выборка.НаименованиеНоменклатуры +  " Описание ошибки: " + Структура.message);
                #Если Клиент Тогда
                    Сообщить("Ошибка при создании номенклатуры в SailPlay. " +Выборкассылка.НаименованиеНоменклатуры+ " "+ Структура.message,СтатусСообщения.ОченьВажное);	
                #КонецЕсли
			Иначе
                
                Если СтрокаНачалоЗапроса = "/api/v2/basket/products/edit/" Тогда
					МассивАтрибуты = Структура.attributes;
				Иначе
					МассивАтрибуты = Новый Массив;	
                КонецЕсли;
                
				Если МассивАтрибуты <> Неопределено Тогда
                    ПрисвоитьАтрибутыТовару(ТокенSailPlay,Выборкассылка,МассивАтрибуты,Отказ);	
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		сч = сч + 1;
		
	КонецЦикла;
	
    #Если Клиент Тогда
        Сообщить("Окончание выгрузки номенклатуры: "  + ТекущаяДата());
    #КонецЕсли
КонецПроцедуры

Процедура ВыгрузитьВсюИнформациюВSailPlay_Ориг()Экспорт
    
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат;		
	КонецЕсли;
	
	ИдМагазинаSailPlay 	= ПараметрыСеанса.ИдМагазинаSailPlay;
	HTTPСервер          = ПолучитьHTTPСерверSailPlay();
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Отказ = Ложь;
	//выгружаем группы
	Сообщить("Начало выгрузки групп номенклатур: "  + ТекущаяДата());
	ВыгрузитьВсеГруппыВSailPlay(ТокенSailPlay,Отказ);
    
    Если Отказ = Истина Тогда
        #Если Клиент Тогда
            Сообщить("Ошибка выгрузки Групп номенклатур!!! Операция прервана",СтатусСообщения.ОченьВажное);
        #КонецЕсли
        Возврат;
	КонецЕсли;
	//выгружаем группы
	
    ////создаем справочники
    СоздатьСправочникиВSailPlay(ТокенSailPlay,Отказ);		
    Если Отказ = Истина Тогда
        #Если Клиент Тогда
            Сообщить("Ошибка создания справочников в SailPlay!!! Операция прервана",СтатусСообщения.ОченьВажное);
        #КонецЕсли
        Возврат;
    КонецЕсли;
    ////создаем справочники
    
    ////выгрузка записей справочников
    ДобавитьИзменитьЗаписиСправочниковSailPlayВсе(ТокенSailPlay,Отказ);
    Если Отказ = Истина Тогда
        #Если Клиент Тогда
            Сообщить("Ошибка выгрузки записей справочника в SailPlay!!! Операция прервана",СтатусСообщения.ОченьВажное);
        #КонецЕсли
        Возврат;
    КонецЕсли;
    ////выгрузка записей справочников

	//выгрузка номенклатуры
    #Если Клиент Тогда
        Сообщить("Начало выгрузки номенклатуры: "  + ТекущаяДата());
    #КонецЕсли
    
    
	СтрокаНачалоЗапроса = "/api/v2/basket/products/list/";
	
	КоличествоСтраниц = 1;
	ТекущаяСтраница = 1;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код",			Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(11)));
	ТЗ.Колонки.Добавить("Наименование",	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	
	Пока ТекущаяСтраница<= КоличествоСтраниц Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
        #Если Клиент Тогда
            Состояние("Страница " + ТекущаяСтраница+ " из " + КоличествоСтраниц);
        #КонецЕсли
        Запись = Новый Структура;
		Запись.Вставить("token", 				ТокенSailPlay);
		Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
		Запись.Вставить("page", 				ТекущаяСтраница);
		
		СтрокаЗапроса = СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
		
		Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла);
		Если Файл = Неопределено Тогда //откладываем транзацкцию
			тз = Неопределено;
			Прервать;
		Иначе
			//проверяем ответ от Ресурса
			Стр = Файл;
			Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
			Статус = Структура.status;
			
			КоличествоСтраниц = Число(Структура.num_pages);
			
			Для Каждого СтрНоменклатура Из Структура.products Цикл
				
				Попытка
					ИмяНоменклатуры = ПреобразованиеURLВСтроку(СтрНоменклатура.name);
				Исключение
					ИмяНоменклатуры = "";
				КонецПопытки;
                
                Попытка
                	код = ПреобразованиеURLВСтроку(СтрНоменклатура.sku);
                Исключение
                    код = "";
                КонецПопытки; 
                
                // преобразуем скю в код номенклатуры
                // надо поменять на артикул
				Попытка
					НоваяСтрока 				= ТЗ.Добавить();
					НоваяСтрока.Код 			= код;
					НоваяСтрока.Наименование 	= СтрЗаменить(ИмяНоменклатуры,"(" +СокрЛП(НоваяСтрока.Код) + ")","");
				Исключение
                    #Если Клиент Тогда
                        Сообщить(ОписаниеОшибки());
                    #КонецЕсли
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекущаяСтраница = ТекущаяСтраница + 1;
		
	КонецЦикла;
	
	Если Тз = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
    #Если Клиент Тогда
        Состояние("Выполняем запрос...");
    #КонецЕсли
    
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НоменклатураСаилПлай.Код,
	|	НоменклатураСаилПлай.Наименование
	|ПОМЕСТИТЬ НоменклатураСаилПлай
	|ИЗ
	|	&НоменклатураСаилПлай КАК НоменклатураСаилПлай";
	Запрос.УстановитьПараметр("НоменклатураСаилПлай",ТЗ);
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Запрос.Текст = "ВЫБРАТЬ
                   |    Номенклатура.Ссылка КАК Ссылка,
                   |    Номенклатура.Код КАК КодНоменклатуры,
                   |    Номенклатура.Наименование КАК НаименованиеНоменклатуры,
                   |    НоменклатураСаилПлай.Наименование КАК НаименованиеСаилПлай,
                   |    НоменклатураСаилПлай.Код КАК КодСаилПлай,
                   |    Номенклатура.Родитель.Код КАК КодКатегории,
                   |    Номенклатура.ВидНоменклатуры.Код КАК КодВидНоменклатуры,
                   |    ЗначенияСвойствОбъектов.Свойство.Код + ""_Свойство"" КАК КодСвойство,
                   |    ЗначенияСвойствОбъектов.Значение.Код КАК КодЗначение
                   |ИЗ
                   |    Справочник.Номенклатура КАК Номенклатура
                   |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
                   |        ПО Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
                   |            И (ЗначенияСвойствОбъектов.Свойство.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура))
                   |        ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураСаилПлай КАК НоменклатураСаилПлай
                   |        ПО Номенклатура.Код = НоменклатураСаилПлай.Код
                   |ГДЕ
                   |    НЕ Номенклатура.ЭтоГруппа
                   |ИТОГИ
                   |    МАКСИМУМ(КодНоменклатуры),
                   |    МАКСИМУМ(НаименованиеНоменклатуры),
                   |    МАКСИМУМ(НаименованиеСаилПлай),
                   |    МАКСИМУМ(КодСаилПлай),
                   |    МАКСИМУМ(КодКатегории),
                   |    МАКСИМУМ(КодВидНоменклатуры)
                   |ПО
                   |    Ссылка";
    
    
    
    РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Всего = Выборка.Количество();
	
	сч = 1;
	Пока Выборка.Следующий() Цикл
		
		#Если Клиент Тогда
            Состояние("Выгружено: " +сч +" из " + Всего);
		#КонецЕсли
        
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		НаменованиеНоменклатуры = СокрЛП(Выборка.НаименованиеНоменклатуры);
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,".","");
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,",","");
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,":","");
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,"'","");
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,"&","");
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,"%","");
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,"+","");		
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,"{","(");
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,"}",")");
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,"[","(");
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,"]",")");
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,"/","|");
		НаменованиеНоменклатуры = СтрЗаменить(НаменованиеНоменклатуры,"\","|");
		
		Попытка
			НаменованиеНоменклатурыВУРЛ = ПреобразованиеСтрокуВURL(НаменованиеНоменклатуры + "("+Выборка.КодНоменклатуры +")");
		Исключение
			НаменованиеНоменклатурыВУРЛ = "";
        КонецПопытки;
        
		Попытка
			//++ Кузнецов С.А. - Добавил СокрЛП - 01.07.2016
			КодНоменклатурыВУРЛ = ПреобразованиеСтрокуВURL(СокрЛП(Выборка.КодНоменклатуры));
			//-- Кузнецов С.А. - 01.07.2016
		Исключение
			КодНоменклатурыВУРЛ = "";
        КонецПопытки;
        
		Попытка
			КодКатегорииВУРЛ = ПреобразованиеСтрокуВURL(Выборка.КодКатегории);
		Исключение
			КодКатегорииВУРЛ = "";
        КонецПопытки;
	
		Запись = Новый Структура;
		Запись.Вставить("token", 				ТокенSailPlay);
		Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
		Запись.Вставить("sku", 					КодНоменклатурыВУРЛ);
		Запись.Вставить("name", 				НаменованиеНоменклатурыВУРЛ);
		Запись.Вставить("category_sku", 		КодКатегорииВУРЛ);
		
		Если ЗначениеЗаполнено(Выборка.КодСаилПлай) Тогда //товар есть, но его надо поменять
			СтрокаНачалоЗапроса = "/api/v2/basket/products/edit/";
		Иначе
			СтрокаНачалоЗапроса = "/api/v2/basket/products/add/";
		КонецЕсли;
		
		СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
		Файл 				= ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла);
		МассивАтрибуты 		= Неопределено;
		
		Если Файл = Неопределено Тогда 
            #Если Клиент Тогда
                Сообщить(Выборка.НаименованиеНоменклатуры,СтатусСообщения.ОченьВажное);
            #КонецЕсли
             сч = сч + 1;
			 Продолжить;
		Иначе
			
			//проверяем ответ от Ресурса
			Стр = Файл;
			Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
			Статус = Структура.status;
			Если Статус <> "ok" Тогда
				//ЛогОбработок_Процедуры.ЗаписатьВЛогОбработки("ВыгрузкаВSailPlay","ВыгрузкаНоменклатуры","Ошибка создания номенклатуры "+ Выборка.НаименованиеНоменклатуры +  " Описание ошибки: " + Структура.message);
                #Если Клиент Тогда
                    Сообщить("Ошибка при создании номенклатуры в SailPlay. " +Выборка.НаименованиеНоменклатуры+ " "+ Структура.message,СтатусСообщения.ОченьВажное);	
                #КонецЕсли
			Иначе
				Если СтрокаНачалоЗапроса = "/api/v2/basket/products/edit/" Тогда
					МассивАтрибуты = Структура.attributes;
				Иначе
					МассивАтрибуты = Новый Массив;	
				КонецЕсли;	
				Если МассивАтрибуты <> Неопределено Тогда
					ПрисвоитьАтрибутыТовару(ТокенSailPlay,Выборка,МассивАтрибуты,Отказ);	
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		сч = сч + 1;
		
	КонецЦикла;
	
    #Если Клиент Тогда
        Сообщить("Окончание выгрузки номенклатуры: "  + ТекущаяДата());
    #КонецЕсли
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////


Функция ОтправитьСМССКодомПодтверждения(НомерТелефона) Экспорт

	Структура = Неопределено;
	ЧистыйНомер = "";
	
	Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
		Возврат Структура; 
	КонецЕсли;
	
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НомерТелефона <> Неопределено Тогда //очистим номер
		ЧистыйНомер = SailPlay_Модуль.ВернутьЦифрыИзСтроки(НомерТелефона);
		Если НЕ ЗначениеЗаполнено(СокрЛП(ЧистыйНомер)) Тогда
			Возврат Структура;
		КонецЕсли;
	КонецЕсли;
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				ТокенSailPlay);
	Запись.Вставить("store_department_id", 	Формат(ПараметрыСеанса.ИдМагазинаSailPlay,"ЧГ="));
	Запись.Вставить("pin_code", 			ПараметрыСеанса.ПинКодМагазинаSailPlay);//СокрЛП(ПараметрыСеанса.ТекущийКассир.Код));
    Запись.Вставить("user_phone", 		    ЧистыйНомер);
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/users/sms-code/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,Ложь);
	Если Файл <> Неопределено Тогда 
		
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);

	КонецЕсли;
	
	Возврат Структура;

КонецФункции // ()
 

/// *** работа с чеком ***
Функция ОбновитьЧек(ЧекСсылка,КодДКSailPlay,СообщатьОбОшибке = Истина)Экспорт
	
	Обновлен = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат Обновлен;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат Обновлен;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат Обновлен;		
	КонецЕсли;

	Запись = Новый Структура;
	Запись.Вставить("token", 				ТокенSailPlay);
	Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
	Запись.Вставить("origin_user_id", 		КодДКSailPlay);
	Запись.Вставить("order_num", 			ПолучитьНомерДокумента(ЧекСсылка.Номер,ЧекСсылка.Дата));
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/purchases/edit/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда 
	Иначе
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			Обновлен = Истина;
		Иначе
            status_code = ПолучитьСтрокуstatus_code(Структура.status_code);
			Если status_code = "-3003" ИЛИ status_code = "-4001" Тогда //ПОВТОРНАЯ ПРИВЯЗКА ИЛИ ЧЕКА НЕТ
				Обновлен = Истина;
			Иначе
				Если СообщатьОбОшибке = Истина Тогда
					//#Если Клиент Тогда
						Сообщить("[SailPlay]Ошибка привязки к чеку Карты клиента.Продолжайте работать и сообщите об этом в службу поддержки.",СтатусСообщения.Внимание);
					//#КонецЕсли	
					ЗаписатьЛог("Ошибка SailPlay.", "Ошибка привязки к чеку Карты клиента: "+СтрокаЗапроса+ " "+ Структура.message);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Обновлен;

КонецФункции

Функция РассчитатьЧек(Чек,РассчитыватьАкции = Истина,СообщатьОбОшибке = Истина) Экспорт
	
	Структура = Неопределено;
	
	Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина Тогда
		Возврат Структура;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат Структура;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат Структура;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат Структура;		
	КонецЕсли;
	
	//Если Чек.СуммаДокумента <= 0 Тогда
	//	Если СообщатьОбОшибке = Истина Тогда
	//		//#Если Клиент Тогда
	//			Сообщить("[SailPlay]Ошибка расчета корзины. Сумма в чеке равна 0!",СтатусСообщения.Внимание);
	//		//#КонецЕсли
	//	КонецЕсли;
	//	Возврат Структура;
	//КонецЕсли;
	
	Если Чек.Товары.Количество() = 0 Тогда
		Если СообщатьОбОшибке = Истина Тогда
			#Если Клиент Тогда
                Предупреждение("[SailPlay]Ошибка расчета корзины. Нет товара в чеке!");
            #Иначе
                Сообщить("[SailPlay]Ошибка расчета корзины. Нет товара в чеке!",СтатусСообщения.Внимание);
			#КонецЕсли
		КонецЕсли;
		Возврат Структура;
	КонецЕсли;
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				ТокенSailPlay);
	Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
	Если ЗначениеЗаполнено(Чек.НомерКартыSailPlay) Тогда
		Запись.Вставить("origin_user_id", 		Чек.НомерКартыSailPlay);
    Иначе    
        // ins SailPlay 11.12.2015 
        НомерТелефона = СокрЛП(Чек.НомерТелефонаSailPlay);
        Если НомерТелефона <> "" Тогда
            Запись.Вставить("user_phone",НомерТелефона);
        КонецЕсли; 
        // ins SailPlay 11.12.2015 
	КонецЕсли;	
	Если РассчитыватьАкции = Ложь Тогда
		Запись.Вставить("is_cart_calc",   "0");
	КонецЕсли;
	
	//Если РассчитыватьАкции = Истина Тогда //если рассчитываем акции то сумму оплаченную сертификатом не исключаем из чека
	Корзина = "";
	Для Каждого СтрокаТовар Из Чек.Товары Цикл
		//Штрихкод = ПолучитьШтрихКодПоНоменклатуре(СтрокаТовар);
		//Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		//	Сообщить("[SailPlay]Ошибка расчета корзины. Для строки № " +СтрокаТовар.НомерСтроки + " не найден Штрихкод. Обратитесь в службу поддержки" ,СтатусСообщения.Внимание);
		//	Возврат Структура;
		//КонецЕсли;	
		КодНоменклатуры = СокрЛП(СтрокаТовар.Номенклатура.Код);		
		Корзина = Корзина + ?(Корзина = "","",",") +"""" +СтрокаТовар.НомерСтроки + """"
                  +":{""sku"":""" + КодНоменклатуры+ """,""price"":"+Формат(СтрокаТовар.Количество * СтрокаТовар.Цена,"ЧРД=.; ЧН=; ЧГ=")
                  +",""quantity"":"+Формат(СтрокаТовар.Количество,"ЧРД=.; ЧН=; ЧГ=")
                  +",""discount_points"":"+Формат(СтрокаТовар.СуммаСкидкиОплатыБонусомSailPlay,"ЧРД=.; ЧН=; ЧГ=") +"}";
	КонецЦикла;
	//Корзина = "{" + Корзина + "}";
	//Иначе
	//	
	//	СуммаСертификатамиОсталась = Чек.СертификатыИкупоны.Итог("Номинал");
	//	
	//	Корзина = "";
	//	Для Каждого СтрокаТовар Из Чек.Товары Цикл
	//		
	//		СуммаПоПозиции = СтрокаТовар.Сумма;
	//		Если СуммаСертификатамиОсталась > 0 Тогда
	//			СуммаПоПозиции = СуммаПоПозиции-СуммаСертификатамиОсталась;
	//			Если СуммаПоПозиции<0 Тогда
	//				СуммаПоПозиции = 0;
	//			КонецЕсли;
	//			СуммаСертификатамиОсталась = СуммаСертификатамиОсталась - СтрокаТовар.Сумма - СтрокаТовар.СуммаСкидки;
	//			Если СуммаСертификатамиОсталась < 0 Тогда
	//				СуммаСертификатамиОсталась = 0;
	//			КонецЕсли;	
	//		КонецЕсли;
	//		
	//		//Корзина = Корзина + ?(Корзина = "","",",") +"""" +СтрокаТовар.НомерСтроки + """"+":{""sku"":""" + СокрЛП(СтрокаТовар.Номенклатура.Код)+ """,""price"":"+Формат(СуммаПоПозиции,"ЧРД=.; ЧН=; ЧГ=")+",""quantity"":"+Формат(СтрокаТовар.Количество,"ЧРД=.; ЧН=; ЧГ=")+"}";
	//		КодНоменклатуры = СокрЛП(СтрокаТовар.Артикул.Код) + Прав("00" + СокрЛП(СтрокаТовар.Цвет.Код), 2) + Прав("00" + СокрЛП(СтрокаТовар.Размер.Код), 2); //этот код мне дал программист занимающийся выгрузкой номенклатуры в SailPlay		
	//		Корзина = Корзина + ?(Корзина = "","",",") +"""" +СтрокаТовар.НомерСтроки + """"+":{""sku"":""" + КодНоменклатуры+ """,""price"":"+Формат(СуммаПоПозиции,"ЧРД=.; ЧН=; ЧГ=")+",""quantity"":"+Формат(1,"ЧРД=.; ЧН=; ЧГ=")+"}";

	//	КонецЦикла;
	//	//Корзина = "{" + Корзина + "}";

	//КонецЕсли;
	
	Если Корзина = "" Тогда
		Сообщить("[SailPlay]Ошибка расчета корзины. Нет товара в чеке!",СтатусСообщения.Внимание);
		Возврат Структура;
	КонецЕсли;
	Корзина = "{" + Корзина + "}";

	Запись.Вставить("cart", 		Корзина);
	
	НомераКарт = "";
	ДисконтнаяКарта = Чек.ДисконтнаяКарта;
	НомерКупона 	= Чек.НомерКупонаSailPlay;

	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		НомераКарт = НомераКарт + ?(НомераКарт = "","",",") + """"+СокрЛП(ДисконтнаяКарта.КодКарты) + """";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерКупона) Тогда
		НомераКарт = НомераКарт + ?(НомераКарт = "","",",") + """"+СокрЛП(НомерКупона)+"""";
	КонецЕсли;
	
	Если НомераКарт <> "" Тогда
		НомераКарт = "["+НомераКарт+"]";
		Запись.Вставить("card_numbers", НомераКарт);
    КонецЕсли;
    
		
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/marketing-actions/calc/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда 
	Иначе
		//проверяем ответ от Ресурса
		//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			Возврат Структура;
		Иначе
			Если СообщатьОбОшибке = Истина Тогда
				//#Если Клиент Тогда
					Сообщить("[SailPlay]Ошибка расчета корзины.Продолжайте работать и сообщите об этом в службу поддержки.",СтатусСообщения.Внимание);
				//#КонецЕсли	
				ЗаписатьЛог("Ошибка SailPlay.", "Произошла ошибка при расчете корзины: "+СтрокаЗапроса+ " "+ Структура.message);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции	


Функция РассчитатьСуммуОкругленияВСтроке(СтрокаТабличнойЧасти,Магазин) Экспорт

    Сумма               = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
    СуммаВСтроке        = СтрокаТабличнойЧасти.СуммаКОплатеВСтроке;
    СуммаБонусами       = СтрокаТабличнойЧасти.СуммаСкидкиОплатыБонусомSailPlay;
    СуммаСкидки         = (Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	СуммаБезОкругления  = Сумма - СуммаСкидки - СуммаБонусами;
    
    Округление = СуммаБезОкругления - СуммаВСтроке;
    Возврат Округление;
КонецФункции // ()

Функция ВыгруженаПродажаВSailPlayПоЧеку(Чек,УжеОтложеннаяТранзакция = Ложь,СообщатьОбОшибке = Истина) Экспорт
	
	Выгружен = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ЕстьСеанс = Истина; 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		ЕстьСеанс = Ложь;		
	КонецЕсли;
	//проверяем есть ли сеанс с SailPlay
	
	//принудительное сваливание транзакций в отложенные
	Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина Тогда
		ЕстьСеанс = Ложь;		
	КонецЕсли;
	
	//если нет сеанса и транзакция уже отложена тогда ничего не деалем
	Если ЕстьСеанс = Ложь И УжеОтложеннаяТранзакция = Истина Тогда
		Возврат Выгружен;
	КонецЕсли;
    
    Если АПечаталсяЛиЧек(Чек)=Ложь Тогда
        Возврат Выгружен;
    КонецЕсли; 
    
	Запрос = Новый Запрос;
                  
    Запрос.Текст = "ВЫБРАТЬ
                   |    ДокТовары.Ссылка КАК Ссылка,
                   |    ДокТовары.Ссылка.НомерКартыSailPlay КАК НомерКартыSailPlay,
                   |    ДокТовары.Ссылка.ИДПокупкиSailPlay КАК ИДПокупкиSailPlay,
                   |    ДокТовары.Ссылка.Номер КАК Номер,
                   |    ДокТовары.Ссылка.Дата КАК Дата,
                   |    ДокТовары.Ссылка.ДисконтнаяКарта.КодКарты КАК ДисконтнаяКартаКод,
                   |    ДокТовары.НомерСтроки,
                   |    ДокТовары.Цена КАК Цена,
                   |    ДокТовары.Цена * ДокТовары.Количество КАК Сумма,
                   |    ДокТовары.Сумма КАК СуммаКОплатеВСтроке,
                   |    ДокТовары.Номенклатура.Код,
                   |    ДокТовары.СуммаСкидкиОплатыБонусомSailPlay КАК СуммаСкидкиОплатыБонусомSailPlay,
                   |    ДокТовары.Количество,
                   |    ДокТовары.Ссылка.НомерКупонаSailPlay КАК НомерКупона,
                   |    ДокТовары.Ссылка.НомерТелефонаSailPlay,
                   |    ДокТовары.СуммаСкидкиSailPlay,
                   |    ДокТовары.Ссылка.Ответственный.Код КАК ПинКод
                   |ИЗ
                   |    Документ.РеализацияТоваровУслуг.Товары КАК ДокТовары
                   |ГДЕ
                   |    ДокТовары.Ссылка = &Ссылка
                   |    И НЕ ДокТовары.Ссылка.ПометкаУдаления
                   |    И ДокТовары.Ссылка = &Ссылка
                   |    И ДокТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
                   |ИТОГИ
                   |    СУММА(Сумма),
                   |    МАКСИМУМ(ПинКод)
                   |ПО
                   |    Ссылка";
                  

	Запрос.УстановитьПараметр("Ссылка",	Чек);
	РезультатЗапроса = Запрос.Выполнить();
    
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //отправляем информацию иначе считаем что и не должно
	Если ВыборкаСсылка.Следующий() Тогда 
		
		Если ВыборкаСсылка.Сумма <= 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ЕстьСеанс = Ложь Тогда
			ЗапишемОтложеннуюТранзакцияSailPlay(Чек,Перечисления.ВидыОперацииSailPlay.Продажа);
		Иначе
			
			//доп. проверку вставлю на всякий случай. если чек уже в отложенных трнзаций то ничего не делаю
			Запись = Новый Структура;
			Запись.Вставить("token", 				ТокенSailPlay);
			Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
            пинкод = СокрЛП(ВыборкаСсылка.ПинКод);
            Если ЗначениеЗаполнено(пинкод) Тогда
                пинкод = SailPlay_Модуль.ПреобразованиеСтрокуВURL(пинкод);
            Иначе	
                пинкод = ПараметрыСеанса.ПинКодМагазинаSailPlay;
            КонецЕсли; 
			Запись.Вставить("pin_code",пинкод);
            //Запись.Вставить("pin_code", 			ПараметрыСеанса.ПинКодМагазинаSailPlay);
			Запись.Вставить("price", 				Формат(ВыборкаСсылка.Сумма,"ЧРД=.; ЧН=; ЧГ="));
			Запись.Вставить("order_num", 			ПолучитьНомерДокумента(ВыборкаСсылка.Номер,ВыборкаСсылка.Дата)); 
			Если ЗначениеЗаполнено(ВыборкаСсылка.НомерКартыSailPlay) Тогда
				Запись.Вставить("origin_user_id", ВыборкаСсылка.НомерКартыSailPlay);
            ИначеЕсли ЗначениеЗаполнено(ВыборкаСсылка.НомерТелефонаSailPlay) Тогда
				Запись.Вставить("user_phone", ВыборкаСсылка.НомерТелефонаSailPlay);
            КонецЕсли; 
            // ins SailPlay 10.12.2015 
            
			НомераКарт = "";
			ДисконтнаяКарта = ВыборкаСсылка.НомерКартыSailPlay;
			НомерКупона 	= ВыборкаСсылка.НомерКупона;
			
			Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
				НомераКарт = НомераКарт + ?(НомераКарт = "","",",") + """"+СокрЛП(ДисконтнаяКарта) + """";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НомерКупона) Тогда
				НомераКарт = НомераКарт + ?(НомераКарт = "","",",") + """"+СокрЛП(НомерКупона)+"""";
			КонецЕсли;
			
			Если НомераКарт <> "" Тогда
				НомераКарт = "["+НомераКарт+"]";
				Запись.Вставить("card_numbers", НомераКарт);
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(ВыборкаСсылка.ДисконтнаяКартаКод) Тогда
			//	НомераКарт ="{""card_number"": ["""+ВыборкаСсылка.ДисконтнаяКартаКод+"""]}";
			//	Запись.Вставить("attrs", НомераКарт);
			//КонецЕсли;
			
			//товары
			//СуммаСертификатамиОсталась 	= ВыборкаСсылка.СуммаСертификатами;
			Корзина = "";
			Выборка = ВыборкаСсылка.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				//СуммаПозиции = Выборка.Сумма; //сумма за минусом всех скидок
				//
				//Если СуммаСертификатамиОсталась > 0 Тогда
				//	СуммаПозиции = СуммаПозиции-СуммаСертификатамиОсталась;
				//	Если СуммаПозиции<0 Тогда
				//		СуммаПозиции = 0;
				//	КонецЕсли;
				//	СуммаСертификатамиОсталась = СуммаСертификатамиОсталась - Выборка.Сумма;
				//	Если СуммаСертификатамиОсталась < 0 Тогда
				//		СуммаСертификатамиОсталась = 0;
				//	КонецЕсли;	
				//КонецЕсли;
				//
				//СуммаПозицииСБонусами = СуммаПозиции + Выборка.СуммаБонусами; 
				//Корзина = Корзина + ?(Корзина = "","",",") +"""" +Выборка.НомерСтроки + """"+":{""sku"":""" + СокрЛП(Выборка.НоменклатураКод)+ """,""price"":"+Формат(СуммаПозицииСБонусами,"ЧРД=.; ЧН=; ЧГ=")+",""quantity"":"+Формат(Выборка.Количество,"ЧРД=.; ЧН=; ЧГ=")+",""discount_points"":"+Формат(Выборка.СуммаБонусами,"ЧРД=.; ЧН=; ЧГ=")+"}";
                
                //СуммаОкругления = РассчитатьСуммуОкругленияВСтроке(Выборка,Чек.Магазин);
                СуммаОкругления = 0;
                Корзина = Корзина + ?(Корзина = "","",",") +"""" +Выборка.НомерСтроки + """"+":{""sku"":""" + СокрЛП(Выборка.НоменклатураКод)+ """,""price"":"+Формат(Выборка.Сумма,"ЧРД=.; ЧН=; ЧГ=")
                          +",""quantity"":"+Формат(Выборка.Количество,"ЧРД=.; ЧН=; ЧГ=")+",""discount_points"":"+Формат(Выборка.СуммаСкидкиОплатыБонусомSailPlay,"ЧРД=.; ЧН=; ЧГ=")
                          //+",""discount_1c"":"+Формат(Выборка.СуммаСкидкиSailPlay,"ЧРД=.; ЧН=; ЧГ=")
						  +",""round"":"+ Формат(СуммаОкругления,"ЧРД=.; ЧН=; ЧГ=") +"}";

			КонецЦикла;
			
			Корзина = "{" + Корзина + "}";
			Запись.Вставить("cart", 		Корзина);
			//товары

			HTTPСервер = ПолучитьHTTPСерверSailPlay();
			СтрокаНачалоЗапроса = "/api/v2/purchases/new/";
			СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
			ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
			
			Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
			Если Файл = Неопределено Тогда //откладываем транзацкцию
				Если УжеОтложеннаяТранзакция = Ложь Тогда
					ЗапишемОтложеннуюТранзакцияSailPlay(Чек,Перечисления.ВидыОперацииSailPlay.Продажа);
				КонецЕсли;	
			Иначе
				//проверяем ответ от Ресурса
				//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
				Стр = Файл;
				Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
				Статус = Структура.status;
				
				Если Статус = "ok" Тогда
					Выгружен = Истина;
				Иначе
                    status_code = ПолучитьСтрокуstatus_code(Структура.status_code);
					Если status_code = "-3006" ИЛИ status_code = "-7020" Тогда //такая транзакция уже есть
						Выгружен = Истина;
					Иначе
						Если УжеОтложеннаяТранзакция = Ложь Тогда
							ЗапишемОтложеннуюТранзакцияSailPlay(Чек,Перечисления.ВидыОперацииSailPlay.Продажа);
						КонецЕсли;
						Если СообщатьОбОшибке = Истина Тогда
							Сообщить("[SailPlay]Ошибка начисления Бонусов. Бонусы будут начислены позже. Продолжайте работать и сообщите об этом службе поддержки.",СтатусСообщения.Внимание);
							ЗаписатьЛог("Ошибка SailPlay.", "Произошла ошибка начислении Бонусов: "+СтрокаЗапроса+ " "+ Структура.message);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//КонецЦикла;
	Иначе
		Выгружен = Истина;	
	КонецЕсли;
	
	Возврат Выгружен;
	
КонецФункции	


Функция ПокупкаПодтверждена(Чек,СообщатьОбОшибке = Истина)Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат Ложь;		
	КонецЕсли;
	//проверяем есть ли сеанс с SailPlay
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				ТокенSailPlay);
	Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
	Запись.Вставить("order_num", 			ПолучитьНомерДокумента(Чек.Номер,Чек.Дата));
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/purchases/confirm/"; 
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда
	Иначе
		//проверяем ответ от Ресурса
		//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			Возврат Истина;
		Иначе
			Если СообщатьОбОшибке = Истина Тогда
				Сообщить("[SailPlay]Ошибка при возврате бонусов. Бонусы начисляться позже. Продолжайте работать и сообщите об этом в службу поддержки.",СтатусСообщения.Внимание);
				ЗаписатьЛог("Ошибка SailPlay.", "Ошибка подтверждения покупки перед возвратом " +СтрокаЗапроса+" "+ Структура.message);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//работа с чеком

//работа с возвратом

Функция НачислитьСписатьБонусыВSailPlayПоВозврату_Ориг(ДокВозврат,УжеОтложеннаяТранзакция = Ложь,СообщатьОбОшибке = Истина)Экспорт
    Чек = Неопределено;
    
    Если ТипЗнч(ДокВозврат) = Тип("ДокументСсылка.ЧекККМ") Тогда
        
        Чек = ДокВозврат.ЧекККМПродажа;
        Если НЕ ЗначениеЗаполнено(Чек)Тогда
            Возврат Истина;
        КонецЕсли;
        
        Если ТипЗнч(Чек) <> Тип("ДокументСсылка.ЧекККМ") Тогда
            Возврат Истина;
        КонецЕсли;
        
    ИначеЕсли ТипЗнч(ДокВозврат) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
        Если ДокВозврат.Проведен = Ложь Тогда
            Возврат Истина;
        КонецЕсли;     
    Иначе
        Возврат ИСТИНА;
    КонецЕсли; 
    
	
	Выгружен = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ЕстьСеанс = Истина; 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		ЕстьСеанс = Ложь;		
	КонецЕсли;
	//проверяем есть ли сеанс с SailPlay
	
	//принудительное сваливание транзакций в отложенные
	Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина Тогда
		ЕстьСеанс = Ложь;		
	КонецЕсли;
	
	//если нет сеанса и транзакция уже отложена тогда ничего не деалем
	Если ЕстьСеанс = Ложь И УжеОтложеннаяТранзакция = Истина Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	Если ТипЗнч(ДокВозврат) = Тип("ДокументСсылка.ЧекККМ") Тогда //это возврат день в день
		
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
                      | Товары.Ссылка КАК Ссылка,
                      | Товары.СуммаСкидкиОплатыБонусомSailPlay КАК СуммаБонусами,
                      | Товары.Ссылка.ЧекККМПродажа.НомерКартыSailPlay КАК КодДисконтнойКарты,
                      | ЧекПробитый.НомерСтроки КАК НомерСтрокиЧека,
                      | ЧекПробитый.Ссылка.Номер КАК НомерЧека,
                      | Товары.Ссылка.Номер КАК Номер,
                      | Товары.Ссылка.Дата КАК Дата,
                      | Товары.Ссылка.ЧекККМПродажа.НомерТелефонаSailPlay КАК НомерТелефонаSailPlay
                      |ИЗ
                      | Документ.ЧекККМ.Товары КАК Товары
                      |     ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекПробитый
                      |     ПО (ЧекПробитый.Ссылка = Товары.Ссылка.ЧекККМПродажа)
                      |         И (ЧекПробитый.Номенклатура = Товары.Номенклатура)
                      |         И Товары.ХарактеристикаНоменклатуры = ЧекПробитый.ХарактеристикаНоменклатуры
                      |ГДЕ
                      | Товары.Ссылка.Проведен
                      | И Товары.Ссылка = &Ссылка
                      | И (Товары.Ссылка.ЧекККМПродажа.НомерКартыSailPlay <> """"
                      |         ИЛИ Товары.Ссылка.ЧекККМПродажа.НомерТелефонаSailPlay <> """")
                      | И Товары.Ссылка.ЧекККМПродажа ССЫЛКА Документ.ЧекККМ
                      | И Товары.Ссылка.ЧекККМПродажа.Проведен
                      | И ЧекПробитый.НомерСтроки > 0
                      | И Товары.Количество > 0
                      |ИТОГИ
                      | СУММА(СуммаБонусами)
                      |ПО
                      | Ссылка";
		
	ИначеЕсли ТипЗнч(ДокВозврат) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда  //это возврат не день в день
		
        Запрос = Новый Запрос;
        Запрос.Текст = "ВЫБРАТЬ
                       |    ЧекККМТовары.Ссылка КАК Ссылка,
                       |    ЧекККМТовары.СуммаСкидкиОплатыБонусомSailPlay КАК СуммаБонусами,
                       |    ЧекККМТовары.Ссылка.Номер КАК НомерЧека,
                       |    ЧекККМТовары.НомерСтроки КАК НомерСтрокиЧека,
                       |    ЧекККМТовары.Ссылка.НомерКартыSailPlay КАК КодДисконтнойКарты,
                       |    ЧекККМТовары.Ссылка.НомерТелефонаSailPlay КАК НомерТелефонаSailPlay,
                       |    ЧекККМТовары.Ссылка.Номер КАК Номер,
                       |    ЧекККМТовары.Ссылка.Дата КАК Дата
                       |ИЗ
                       |    Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваров
                       |        ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
                       |        ПО ВозвратТоваров.ЧекККМ = ЧекККМТовары.Ссылка
                       |            И ВозвратТоваров.Номенклатура = ЧекККМТовары.Номенклатура
                       |            И ВозвратТоваров.SP_КлючСтрокиВЧеке = ЧекККМТовары.КлючСтроки
                       |ГДЕ
                       |    ВозвратТоваров.Ссылка = &Ссылка
                       |    И (ЧекККМТовары.Ссылка.НомерКартыSailPlay <> """"
                       |            ИЛИ ЧекККМТовары.Ссылка.НомерТелефонаSailPlay <> """")
                       |    И ЧекККМТовары.НомерСтроки > 0
                       |    И ВозвратТоваров.Количество > 0
                       |ИТОГИ
                       |    СУММА(СуммаБонусами)
                       |ПО
                       |    Ссылка";
        
                       
    Иначе
		//#Если Клиент Тогда
			Сообщить("[SailPlay]Ошибка при возврате бонусов. Этот документ не описан в выгрузке. Продолжайте работать и сообщите об этом в службу поддержки.",СтатусСообщения.Внимание);
		//#КонецЕсли	
		ЗаписатьЛог("Ошибка SailPlay.", "Произошла ошибка при выполнении запроса на возврат бонусов. Этот документ не описан в выгрузке: "+ ДокВозврат);
		Возврат Выгружен; 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",	ДокВозврат);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаСсылка.Следующий() Тогда
		
		Если ЕстьСеанс = Ложь Тогда
			ЗапишемОтложеннуюТранзакцияSailPlay(ДокВозврат,Перечисления.ВидыОперацииSailPlay.Возврат);
		Иначе
            
            Если Чек = Неопределено Тогда
                Чек = ВыборкаСсылка.Ссылка;
            КонецЕсли; 
			ИнформацияПоЧеку = ПолучитьИнформациюПоЧекуИзSailPlay(Чек);
			
			Если ИнформацияПоЧеку <> Неопределено Тогда
				
				Если ИнформацияПоЧеку.purchase.is_completed = "false" Тогда
					
					//подтвердим покупку
					Если ПокупкаПодтверждена(Чек,СообщатьОбОшибке) = Ложь Тогда
						Если УжеОтложеннаяТранзакция = Ложь Тогда
							ЗапишемОтложеннуюТранзакцияSailPlay(ДокВозврат,Перечисления.ВидыОперацииSailPlay.Возврат);
						КонецЕсли;
						Возврат Выгружен;		
					КонецЕсли;
					
				КонецЕсли;
				
				БонусыНачисленныеПриПокупке = Число(ИнформацияПоЧеку.purchase.points_delta); //это количество бонусов может отличаться от того которое в ТабличнойЧасти чека
				
				БонусыСписанныеПриПокупке = 0;
				мВозвращенныхСтрок = Новый Массив;
				
				Выборка = ВыборкаСсылка.Выбрать();
				Пока Выборка.Следующий() Цикл
					БонусыСписанныеПриПокупке = БонусыСписанныеПриПокупке + Выборка.СуммаБонусами;
					мВозвращенныхСтрок.Добавить(СокрЛП(Выборка.НомерСтрокиЧека)); 
				КонецЦикла;
				
				мСтруктурПозиций = ИнформацияПоЧеку.cart.cart.positions;
				БонусыНачисленныеПриПокупкеБезКоэфициента = 0;
				БонусыДляНачисленияБезКоэфициента = 0;
				Для Каждого СтрокаСтруктура Из мСтруктурПозиций Цикл
					БонусыНачисленныеПриПокупкеБезКоэфициента = БонусыНачисленныеПриПокупкеБезКоэфициента + Число(СтрокаСтруктура.points);
					Если мВозвращенныхСтрок.Найти(СтрокаСтруктура.num) = Неопределено Тогда //это строка которая не была сторнирована, бонусы по ней возвращаем
						БонусыДляНачисленияБезКоэфициента = БонусыДляНачисленияБезКоэфициента + Число(СтрокаСтруктура.points);
					КонецЕсли;	
				КонецЦикла;
				
				Если БонусыНачисленныеПриПокупкеБезКоэфициента <> 0 Тогда 
					Коэфициент = БонусыНачисленныеПриПокупке/БонусыНачисленныеПриПокупкеБезКоэфициента;
				Иначе
					Коэфициент = 1;
				КонецЕсли;	
				
				Начисляем = Цел(БонусыСписанныеПриПокупке - БонусыНачисленныеПриПокупке + БонусыДляНачисленияБезКоэфициента*Коэфициент);
				
				Если Начисляем <> 0 Тогда
					
					БонусыНачислены = СписатьНачислитьБонусы(ВыборкаСсылка.КодДисконтнойКарты,
                                                              Начисляем,
                                                              ПолучитьНомерДокумента(ВыборкаСсылка.Номер,ВыборкаСсылка.Дата),
                                                              "Корректировка бонусов по возврату чека №" +ВыборкаСсылка.НомерЧека,
                                                              СообщатьОбОшибке,
                                                              ВыборкаСсылка.НомерТелефонаSailPlay);
					
					Если БонусыНачислены = Истина Тогда
						Выгружен = Истина;
					Иначе	
						Если УжеОтложеннаяТранзакция = Ложь Тогда
							ЗапишемОтложеннуюТранзакцияSailPlay(ДокВозврат,Перечисления.ВидыОперацииSailPlay.Возврат);
						КонецЕсли;
						Если СообщатьОбОшибке = Истина Тогда
							//#Если Клиент Тогда
								Сообщить("[SailPlay]Ошибка при возврате бонусов. Бонусы начисляться позже. Продолжайте работать и сообщите об этом в службу поддержки.",СтатусСообщения.Внимание);
							//#КонецЕсли	
							//ЗаписатьЛог("Ошибка SailPlay.", "Произошла ошибка при выполнении запроса на возврат бонусов: " +СтрокаЗапроса+" "+ Структура.message);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					Выгружен = Истина;
				КонецЕсли;
			Иначе
				Если УжеОтложеннаяТранзакция = Ложь Тогда
					ЗапишемОтложеннуюТранзакцияSailPlay(ДокВозврат,Перечисления.ВидыОперацииSailPlay.Возврат);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Выгружен = Истина;		
	КонецЕсли;	
	
	Возврат Выгружен;

КонецФункции	

Функция НачислитьСписатьБонусыВSailPlayПоВозврату(ДокВозврат,УжеОтложеннаяТранзакция = Ложь,СообщатьОбОшибке = Истина)Экспорт
    Чек = Неопределено;
    
    Если ТипЗнч(ДокВозврат) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
        Если ДокВозврат.Проведен = Ложь Тогда
            Возврат Истина;
        КонецЕсли;     
    Иначе
        Возврат ИСТИНА;
    КонецЕсли; 
    
	Выгружен = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ЕстьСеанс = Истина; 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		ЕстьСеанс = Ложь;		
	КонецЕсли;
	//проверяем есть ли сеанс с SailPlay
	
	//принудительное сваливание транзакций в отложенные
	Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина Тогда
		ЕстьСеанс = Ложь;		
	КонецЕсли;
	
	//если нет сеанса и транзакция уже отложена тогда ничего не деалем
	Если ЕстьСеанс = Ложь И УжеОтложеннаяТранзакция = Истина Тогда
		Возврат Выгружен;
	КонецЕсли;
	
    Запрос = Новый Запрос;
    
    Запрос.Текст = "ВЫБРАТЬ
                   |    ВозвратТовары.Номенклатура,
                   |    ВозвратТовары.Количество,
                   |    ВозвратТовары.Цена,
                   |    ВозвратТовары.Сумма,
                   |    РеализацияТовары.Ссылка КАК Реализация,
                   |    ВозвратТовары.Ссылка КАК Возврат,
                   |    ВозвратТовары.Ссылка.Номер КАК Номер,
                   |    ВозвратТовары.Ссылка.Дата КАК Дата,
                   |    РеализацияТовары.Ссылка.Номер КАК НомерЧека,
                   |    РеализацияТовары.Ссылка.Дата КАК ДатаЧека,
                   |    РеализацияТовары.СуммаСкидкиОплатыБонусомSailPlay КАК СуммаБонусами,
                   |    РеализацияТовары.Ссылка.НомерТелефонаSailPlay,
                   |    РеализацияТовары.Ссылка.НомерКартыSailPlay КАК КодДисконтнойКарты,
                   |    РеализацияТовары.Количество КАК КоличествоВЧеке,
                   |    РеализацияТовары.Сумма КАК СуммаВЧеке,
                   |    РеализацияТовары.ХарактеристикаНоменклатуры,
                   |    ВЫРАЗИТЬ(ВЫБОР
                   |            КОГДА ЕСТЬNULL(ВозвратТовары.Количество, 0) = 0
                   |                    ИЛИ ЕСТЬNULL(РеализацияТовары.Количество, 0) = 0
                   |                ТОГДА 0
                   |            КОГДА ЕСТЬNULL(ВозвратТовары.Количество, 0) >= ЕСТЬNULL(РеализацияТовары.Количество, 0)
                   |                ТОГДА 1
                   |            ИНАЧЕ ЕСТЬNULL(ВозвратТовары.Количество, 0) / ЕСТЬNULL(РеализацияТовары.Количество, 0)
                   |        КОНЕЦ КАК ЧИСЛО(15, 4)) КАК КоэффициентРаспределения,
                   |    ВозвратТовары.КлючСвязиSailPlay КАК НОмерСтрокиЧека
                   |ИЗ
                   |    Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТовары
                   |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТовары
                   |        ПО ВозвратТовары.ДокументПартии = РеализацияТовары.Ссылка
                   |            И ВозвратТовары.Номенклатура = РеализацияТовары.Номенклатура
                   |            И ВозвратТовары.ХарактеристикаНоменклатуры = РеализацияТовары.ХарактеристикаНоменклатуры
                   |            И ВозвратТовары.КлючСвязиSailPlay = РеализацияТовары.НомерСтроки
                   |ГДЕ
                   |    ВозвратТовары.Ссылка = &Ссылка
                   |    И (РеализацияТовары.Ссылка.НомерКартыSailPlay <> """"
                   |            ИЛИ РеализацияТовары.Ссылка.НомерТелефонаSailPlay <> """")
                   |    И РеализацияТовары.НомерСтроки > 0
                   |    И РеализацияТовары.Сумма > 0
                   |ИТОГИ
                   |    СУММА(СуммаБонусами)
                   |ПО
                   |    Реализация";
    
	Запрос.УстановитьПараметр("Ссылка",	ДокВозврат);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    табРаспределенияБонусов = Новый ТаблицаЗначений;
    табРаспределенияБонусов.Колонки.Добавить("Номенклатура");
    табРаспределенияБонусов.Колонки.Добавить("Характеристика");
    табРаспределенияБонусов.Колонки.Добавить("КоличествоВозврат");
    табРаспределенияБонусов.Колонки.Добавить("КоличествоВЧеке");
    табРаспределенияБонусов.Колонки.Добавить("БонусовНачислено");
    табРаспределенияБонусов.Колонки.Добавить("БонусовСписано");
    
    Если ВыборкаСсылка.Следующий() Тогда
		
		Если ЕстьСеанс = Ложь Тогда
			ЗапишемОтложеннуюТранзакцияSailPlay(ДокВозврат,Перечисления.ВидыОперацииSailPlay.Возврат);
		Иначе
            
            Если Чек = Неопределено Тогда
                Чек = ВыборкаСсылка.Реализация;
            КонецЕсли; 
			ИнформацияПоЧеку = ПолучитьИнформациюПоЧекуИзSailPlay(Чек);
			
			Если ИнформацияПоЧеку <> Неопределено Тогда
                
				Если ИнформацияПоЧеку.purchase.is_completed = "false" ИЛИ ИнформацияПоЧеку.purchase.is_completed = Ложь Тогда
					
					//подтвердим покупку
					Если ПокупкаПодтверждена(Чек,СообщатьОбОшибке) = Ложь Тогда
						Если УжеОтложеннаяТранзакция = Ложь Тогда
							ЗапишемОтложеннуюТранзакцияSailPlay(ДокВозврат,Перечисления.ВидыОперацииSailPlay.Возврат);
						КонецЕсли;
						Возврат Выгружен;		
					КонецЕсли;
					
				КонецЕсли;
				
				мСтруктурПозиций = ИнформацияПоЧеку.cart.cart.positions;
                
                тСтрокВозврата = Новый ТаблицаЗначений;
                тСтрокВозврата.Колонки.Добавить("НомерСтрокиЧека");
                тСтрокВозврата.Колонки.Добавить("БонусовНачислено");
                тСтрокВозврата.Колонки.Добавить("БонусовСписано");
                тСтрокВозврата.Колонки.Добавить("КоэффициентРаспределения");
                
				БонусыНачисленныеПриПокупке = Число(ИнформацияПоЧеку.purchase.points_delta); //это количество бонусов может отличаться от того которое в ТабличнойЧасти чека
				БонусыСписанныеПриПокупке = 0;
				мВозвращенныхСтрок = Новый Массив;
				
				Выборка = ВыборкаСсылка.Выбрать();
                БонусыНачисленыПоСтрокам = 0; // сколько бонусов по строкам товары начислили
                БонусыСписаныПоСтрокам = 0;
                Пока Выборка.Следующий() Цикл
                    ////
                    БонусовСписано = МАКС(ОКР(Выборка.СуммаБонусами * Выборка.КоэффициентРаспределения -0.5,0),0);
                    
                    стрВозврата = тСтрокВозврата.Добавить();
                    стрВозврата.НомерСтрокиЧека = Выборка.НомерСтрокиЧека;
                    стрВозврата.КоэффициентРаспределения = Выборка.КоэффициентРаспределения;
                    стрВозврата.БонусовСписано = БонусовСписано;
                    ////
                    
					БонусыСписанныеПриПокупке = БонусыСписанныеПриПокупке + БонусовСписано; //Выборка.СуммаБонусами;
					мВозвращенныхСтрок.Добавить(СокрЛП(Выборка.НомерСтрокиЧека));  // делают тип знч строка
				КонецЦикла;
				
				БонусыНачисленныеПриПокупкеБезКоэфициента = 0;
				БонусыДляНачисленияБезКоэфициента = 0;
				Для Каждого СтрокаСтруктура Из мСтруктурПозиций Цикл
					БонусыНачисленныеПриПокупкеБезКоэфициента = БонусыНачисленныеПриПокупкеБезКоэфициента + Число(СтрокаСтруктура.points);
					Если мВозвращенныхСтрок.Найти(СтрокаСтруктура.num) = Неопределено Тогда //это строка которая не была сторнирована, бонусы по ней возвращаем
						БонусыДляНачисленияБезКоэфициента = БонусыДляНачисленияБезКоэфициента + Число(СтрокаСтруктура.points);
                        //    
                    Иначе
                        мСТР = тСтрокВозврата.НайтиСтроки(Новый Структура("НомерСтрокиЧека",Число(СтрокаСтруктура.num)));
                        Если мСтр.Количество()>0 Тогда
                            стрВозврат = мСтр[0];
                            
                            БонусовНачислено = Число(СтрокаСтруктура.points);   
                            БонусовНачислено = МАКС(ОКР(БонусовНачислено*стрВозврат.КоэффициентРаспределения -0.5,0),0);
                            
                            БонусыДляНачисленияБезКоэфициента = БонусыДляНачисленияБезКоэфициента + Число(СтрокаСтруктура.points) - БонусовНачислено; // уменьшаем на сумму возврата
                        КонецЕсли; 
                        
                    КонецЕсли;	
                    ///
				КонецЦикла;                                    
				
				Если БонусыНачисленныеПриПокупкеБезКоэфициента <> 0 Тогда 
					Коэфициент = БонусыНачисленныеПриПокупке/БонусыНачисленныеПриПокупкеБезКоэфициента;
				Иначе
					Коэфициент = 1;
				КонецЕсли;	
				
				Начисляем = Цел(БонусыСписанныеПриПокупке - БонусыНачисленныеПриПокупке + БонусыДляНачисленияБезКоэфициента*Коэфициент);
				
				Если Начисляем <> 0 Тогда
					
					БонусыНачислены = СписатьНачислитьБонусы(ВыборкаСсылка.КодДисконтнойКарты,
                                                              Начисляем,
                                                              ПолучитьНомерДокумента(ВыборкаСсылка.НомерЧека,ВыборкаСсылка.ДатаЧека),
                                                              "Корректировка бонусов по возврату чека №" +ВыборкаСсылка.НомерЧека,
                                                              СообщатьОбОшибке,
                                                              ВыборкаСсылка.НомерТелефонаSailPlay);
					
					Если БонусыНачислены = Истина Тогда
						Выгружен = Истина;
					Иначе	
						Если УжеОтложеннаяТранзакция = Ложь Тогда
							ЗапишемОтложеннуюТранзакцияSailPlay(ДокВозврат,Перечисления.ВидыОперацииSailPlay.Возврат);
						КонецЕсли;
						Если СообщатьОбОшибке = Истина Тогда
							//#Если Клиент Тогда
								Сообщить("[SailPlay]Ошибка при возврате бонусов. Бонусы начисляться позже. Продолжайте работать и сообщите об этом в службу поддержки.",СтатусСообщения.Внимание);
							//#КонецЕсли	
							//ЗаписатьЛог("Ошибка SailPlay.", "Произошла ошибка при выполнении запроса на возврат бонусов: " +СтрокаЗапроса+" "+ Структура.message);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					Выгружен = Истина;
				КонецЕсли;
			Иначе
				Если УжеОтложеннаяТранзакция = Ложь Тогда
					ЗапишемОтложеннуюТранзакцияSailPlay(ДокВозврат,Перечисления.ВидыОперацииSailPlay.Возврат);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
        
    Иначе
        Выгружен = Истина;
    КонецЕсли;
    
    //Выгружен = Истина;		
	
	Возврат Выгружен;

КонецФункции	
//работа с возвратом

Функция СписатьНачислитьБонусы(КодДисконтнойКарты,
                               СуммаБонусов,
                               НомерДокумента = Неопределено,
                               Комментарий = Неопределено,
                               СообщатьОбОшибке = Истина,
                               НомерТелефона = "")Экспорт
	
	Выгружен = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ЕстьСеанс = Истина; 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат Выгружен;		
	КонецЕсли;
	//проверяем есть ли сеанс с SailPlay
	
	//принудительное сваливание транзакций в отложенные
	Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина Тогда
		Возврат Выгружен;		
	КонецЕсли;
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				ТокенSailPlay);
	Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
	Если ЗначениеЗаполнено(СокрЛП(КодДисконтнойКарты)) Тогда
        Запись.Вставить("origin_user_id", 	КодДисконтнойКарты);
    ИначеЕсли ЗначениеЗаполнено(СокрЛП(НомерТелефона)) Тогда
        Запись.Вставить("user_phone",НомерТелефона);
    КонецЕсли; 
    
	Запись.Вставить("points",			СуммаБонусов);
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		Запись.Вставить("order_num",	НомерДокумента);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Запись.Вставить("comment",		ПреобразованиеСтрокуВURL(Комментарий));
	КонецЕсли;	
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/points/add/"; 
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда
	Иначе
		//проверяем ответ от Ресурса
		//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
        Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			Выгружен = Истина;
		Иначе
            status_code = ПолучитьСтрокуstatus_code(Структура.status_code);
			Если status_code = "-8001" Тогда //такая транзакция уже есть
				Выгружен = Истина;
            ИначеЕсли status_code = "-4000" 
                И ЗначениеЗаполнено(СокрЛП(КодДисконтнойКарты))
                И ЗначениеЗаполнено(СокрЛП(НомерТелефона)) Тогда // не нашли по карте попробуем выгрузить по номеру телефона
                Возврат СписатьНачислитьБонусы("",
                                                СуммаБонусов,
                                                НомерДокумента,
                                                Комментарий,
                                                СообщатьОбОшибке,
                                                НомерТелефона);
            Иначе
				Если СообщатьОбОшибке = Истина Тогда
					УточнающееСообщение = ?(НЕ ЗначениеЗаполнено(Комментарий),"начисление бонусов",Комментарий);
					ЗаписатьЛог("Ошибка SailPlay.", "Произошла ошибка при выполнении запроса на  " +УточнающееСообщение + ": " +СтрокаЗапроса+" "+ Структура.message);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Выгружен;
	
КонецФункции	

Функция ПолучитьИнформациюПоЧекуИзSailPlay(Чек)Экспорт
	
	Если ТипЗнч(Чек) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;

	//проверяем есть ли сеанс с SailPlay 
	ЕстьСеанс = Истина; 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат Неопределено;		
	КонецЕсли;
	//проверяем есть ли сеанс с SailPlay
	
	//Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина Тогда
	//	Возврат Неопределено;		
	//КонецЕсли;

	Запись = Новый Структура;
	Запись.Вставить("token", 				ТокенSailPlay);
	Запись.Вставить("store_department_id", 	Формат(ПараметрыСеанса.ИдМагазинаSailPlay,"ЧГ="));
	Запись.Вставить("pin_code", 			ПараметрыСеанса.ПинКодМагазинаSailPlay);
	Запись.Вставить("order_num", 			ПолучитьНомерДокумента(Чек.Номер,Чек.Дата));
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/purchases/get/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,Ложь);
	Если Файл = Неопределено Тогда //откладываем транзацкцию
	Иначе
		//проверяем ответ от Ресурса
		//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			Возврат Структура;
		Иначе
			//#Если Клиент Тогда
				Сообщить("[SailPlay]Ошибка отправки запроса по получению информации о чеке. Продолжайте работать и сообщите об этом в службу поддержки.",СтатусСообщения.Внимание);
			//#КонецЕсли	
			ЗаписатьЛог("Ошибка SailPlay.", "Произошла ошибка при получении информации о чеке: " + СтрокаЗапроса+" "+Структура.message);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//отложенные транзакции
Процедура ЗапишемОтложеннуюТранзакцияSailPlay(Ссылка,ВидОперации)Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОтложенныеТранзакцииSailPlay.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.ВидОперации.Установить(ВидОперации);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НовЗапись 				= НаборЗаписей.Добавить();
		НовЗапись.Период 		= ТекущаяДата();
		НовЗапись.Документ 		= Ссылка;
		НовЗапись.ВидОперации	= ВидОперации;
		НаборЗаписей.Записать();
	КонецЕсли;	
	
	НаборЗаписей = Неопределено;
	
КонецПроцедуры

Процедура ВыгрузитьОтложенныеТранзакцииSailPlay(Ссылка = Неопределено)Экспорт
	
	//Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина Тогда
	//	Возврат;
	//КонецЕсли;
    Если Ссылка = Неопределено Тогда //тоесть когда плановая выгрузка отложенных транзакций, пробуем востановить связь
        Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay Тогда
            ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Ложь;  //каждые N минут пробуем наладить связь с SailPlay
            ПройтиАвторизациюSailPlay();         
        КонецЕсли; 
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтложенныеТранзакцииSailPlay.Документ,
	|	ОтложенныеТранзакцииSailPlay.ВидОперации КАК ВидОперации
	|ИЗ
	|	РегистрСведений.ОтложенныеТранзакцииSailPlay КАК ОтложенныеТранзакцииSailPlay
	|ГДЕ
	|	ОтложенныеТранзакцииSailPlay.ТранзакцияЗавершена = ЛОЖЬ
	|	И &УсловиеПоДокументу
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтложенныеТранзакцииSailPlay.ВидОперации.Порядок,
	|	ОтложенныеТранзакцииSailPlay.Документ.Дата";
	
	Если Ссылка  = Неопределено Тогда //накладываем фильтр
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПоДокументу","Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПоДокументу","ОтложенныеТранзакцииSailPlay.Документ = &Документ");
		Запрос.УстановитьПараметр("Документ",Ссылка);
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Ложь Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Выгружен = Ложь;
			
			Если Выборка.ВидОперации = Перечисления.ВидыОперацииSailPlay.Продажа Тогда
				Выгружен = ВыгруженаПродажаВSailPlayПоЧеку(Выборка.Документ,,Истина);
			ИначеЕсли Выборка.ВидОперации = Перечисления.ВидыОперацииSailPlay.Возврат Тогда
				Выгружен = НачислитьСписатьБонусыВSailPlayПоВозврату(Выборка.Документ,Истина);
			КонецЕсли;
			
			Если Выгружен = Истина Тогда
				
				НаборЗаписей = РегистрыСведений.ОтложенныеТранзакцииSailPlay.СоздатьНаборЗаписей(); 
				НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
				НаборЗаписей.Отбор.ВидОперации.Установить(Выборка.ВидОперации);
				НаборЗаписей.Прочитать(); 
				
				Для Каждого Запись Из НаборЗаписей Цикл 
					Запись.ТранзакцияЗавершена = Истина; 
				КонецЦикла; 
				
				НаборЗаписей.Записать(); 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	
//отложенные транзакции

Функция ПолучитьHTTPСерверSailPlay()Экспорт
	
	//Если DEBUG_MODE = Истина Тогда
	//	Возврат "dev.sailplay.ru";
	//Иначе
		Возврат "sailplay.ru";	
	//КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяВходящегоФайлаSailPlay()Экспорт
	
	Каталог = КаталогВременныхФайлов();
	Возврат Каталог +?(Прав(Каталог, 1) = "\", "", "\") + "SailPlay.txt"; 
	
КонецФункции

Функция СформироватьЗапросДляSailPlay(СтруктураРеквизитов,СтрокаНачалоЗапроса)Экспорт
	
	Строка = "";
	Для Каждого Элемент Из СтруктураРеквизитов Цикл
		Строка = Строка + ?(Строка = "","?","&") + Элемент.Ключ + "=" + СокрЛП(Формат(Элемент.Значение,"ЧГ="));	
	КонецЦикла;
	
	КонечныйТекст = СтрокаНачалоЗапроса + Строка;
	
	Возврат КонечныйТекст;
	
КонецФункции	

Процедура ПройтиАвторизациюSailPlay(СообщатьОбОшибке = Истина)Экспорт
	
	ИдМагазинаSailPlay = ПараметрыСеанса.ИдМагазинаSailPlay; 
	
	Если НЕ ЗначениеЗаполнено(ИдМагазинаSailPlay) Тогда //нет ид нет конфетки
		Возврат;
	КонецЕсли;	
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина Тогда
		Возврат;		
	КонецЕсли;

	//если есть ид проверяем есть ли уже ссесия
	ТокенSailPlay = ПараметрыСеанса.ТокенSailPlay;
	Если ЗначениеЗаполнено(ТокенSailPlay) Тогда //проверяем время работы сеанса, если более 12 часов делаем реконнект
		Если ТекущаяДата() - ПараметрыСеанса.ДатаНачалаТокенаSailPlay<12*60*60 Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/login/";
	
	Запись = Новый Структура;
	Запись.Вставить("store_department_key", Формат(ПараметрыСеанса.КлючМагазинаSailPlay,"ЧГ="));
	Запись.Вставить("store_department_id", 	Формат(ИдМагазинаSailPlay,"ЧГ="));
	Запись.Вставить("pin_code", 			ПараметрыСеанса.ПинКодМагазинаSailPlay);
	
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда //откладываем транзацкцию
		ПараметрыСеанса.ДатаНачалаТокенаSailPlay = Дата(1,1,1);
		ПараметрыСеанса.ТокенSailPlay = "";
		Если СообщатьОбОшибке = Истина Тогда
			#Если Клиент Тогда
				Сообщить("[SailPlay]Программа лояльности не доступна. Сообщите об этом в службу поддержки. Бонусы за покупку начисляться позже! ПРОДОЛЖАЙТЕ РАБОТАТЬ НА КАССЕ!",СтатусСообщения.Внимание);
			#КонецЕсли
		КонецЕсли;	
	Иначе
		//проверяем ответ от Ресурса
		//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		
		Попытка
			Статус = Структура.status;
		Исключение
			Ошибка = "Непредвиденная ошибка: " + ОписаниеОшибки();
			//#Если Клиент Тогда
				Сообщить(Ошибка,СтатусСообщения.Внимание);
			//#КонецЕсли
			ЗаписатьЛог("Ошибка SailPlay.", Ошибка);
			Возврат;
		КонецПопытки;
		
		Если Статус = "ok" Тогда
			ПараметрыСеанса.ДатаНачалаТокенаSailPlay 	= ТекущаяДата();
			ПараметрыСеанса.ТокенSailPlay 				= СокрЛП(Структура.token);
			Если СообщатьОбОшибке = Истина Тогда
				#Если Клиент Тогда
					Сообщить("[SailPlay]Авторизация прошла успешно",СтатусСообщения.Информация);
				#КонецЕсли
			КонецЕсли;	
		Иначе
			Если СообщатьОбОшибке = Истина Тогда
				#Если Клиент Тогда
					Сообщить("[SailPlay]Программа лояльности не доступна. Сообщите об этом в службу поддержки. Бонусы за покупку начисляться позже! ПРОДОЛЖАЙТЕ РАБОТАТЬ НА КАССЕ!",СтатусСообщения.Важное);
				#КонецЕсли	
				ЗаписатьЛог("Ошибка SailPlay.", "Произошла ошибка при авторизации: " + Структура.message);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

Функция ПокупательЗарегистрированВСистемеSailPlay(КодДисконтнойКарты)Экспорт
	
	Зарегистрирован = Неопределено;
	
	Попытка
		
		СтруктураОтвета = ПолучитьИнформациюОКлиентеИзSailPlay(КодДисконтнойКарты);
		
		Если СтруктураОтвета <> Неопределено Тогда
			
			Статус = СтруктураОтвета.status;
			
			Если Статус = "ok" Тогда
				Зарегистрирован = Истина;
			Иначе
				Зарегистрирован = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	Возврат Зарегистрирован;
	
КонецФункции

Функция ПолучитьИнформациюОКлиентеИзSailPlay(КодДисконтнойКарты = Неопределено,НомерТелефона = Неопределено,Почта = Неопределено,ПолучатьИсторию = Ложь) Экспорт

	Структура = Неопределено;
	ЧистыйНомер = "";
	
	Если НЕ ЗначениеЗаполнено(КодДисконтнойКарты) И НЕ ЗначениеЗаполнено(НомерТелефона) И НЕ ЗначениеЗаполнено(Почта) Тогда
		Возврат Структура; 
	КонецЕсли;
	
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодДисконтнойКарты) И  НомерТелефона <> Неопределено Тогда //очистим номер
		ЧистыйНомер = SailPlay_Модуль.ВернутьЦифрыИзСтроки(НомерТелефона);
		Если НЕ ЗначениеЗаполнено(СокрЛП(ЧистыйНомер)) Тогда
			Возврат Структура;
		КонецЕсли;
	КонецЕсли;
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				ТокенSailPlay);
	Запись.Вставить("store_department_id", 	Формат(ПараметрыСеанса.ИдМагазинаSailPlay,"ЧГ="));
	Запись.Вставить("pin_code", 			ПараметрыСеанса.ПинКодМагазинаSailPlay);//СокрЛП(ПараметрыСеанса.ТекущийКассир.Код));
	
	Если ПолучатьИсторию = Истина Тогда
		Запись.Вставить("history", 	"1");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодДисконтнойКарты) Тогда
		Запись.Вставить("origin_user_id", 	КодДисконтнойКарты);
	ИначеЕсли ЗначениеЗаполнено(ЧистыйНомер) Тогда
		Запись.Вставить("user_phone", 		ЧистыйНомер);
	Иначе
		Запись.Вставить("email", 			Почта);	
	КонецЕсли;	
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/users/info/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,Ложь);
	Если Файл <> Неопределено Тогда 
		
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);

	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

Функция ПродавецЗарегистрированВSailPlay(Кассир,СообщатьОбОшибке = Ложь) Экспорт
	
	Токен = ПараметрыСеанса.ТокенSailPlay;
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдМагазинаSailPlay = ПараметрыСеанса.ИдМагазинаSailPlay;
	Если НЕ ЗначениеЗаполнено(ИдМагазинаSailPlay) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//получаем список пользователей аптеки
	Запись = Новый Структура;
	Запись.Вставить("token", 				Токен);
	Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/partners/managers/list/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда
		
	Иначе
		//проверяем ответ от Ресурса
		//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			
			Менеджеры = Структура.Managers;
			Для Каждого СтрокаСтруктура Из Менеджеры Цикл
				Если СтрокаСтруктура.department = Строка(ИдМагазинаSailPlay) И СтрокаСтруктура.pin_code = СокрЛП(Кассир.Код) Тогда
					Возврат Истина;
				КонецЕсли;	
			КонецЦикла;
			
			Возврат Ложь;
			
		Иначе
			Если СообщатьОбОшибке = Истина Тогда
				//#Если Клиент Тогда
					Сообщить("Ошибка при получении списка пользователей программы лояльности. " + Структура.message,СтатусСообщения.ОченьВажное);
				//#КонецЕсли
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

Процедура СоздатьПользователяSailPlay(Кассир,СообщатьОбОшибке = Ложь)Экспорт
	
	Токен = ПараметрыСеанса.ТокенSailPlay;
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Возврат;
	КонецЕсли;
	
	ИдМагазинаSailPlay = ПараметрыСеанса.ИдМагазинаSailPlay;
	Если НЕ ЗначениеЗаполнено(ИдМагазинаSailPlay) Тогда
		Возврат;
	КонецЕсли;
	
	//создаем пользователя Аптеки
	Запись = Новый Структура;
	Запись.Вставить("token", 				Токен);
	Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
	Запись.Вставить("role", 				"seller");
	Запись.Вставить("dep_id", 				ИдМагазинаSailPlay);
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/partners/managers/create/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда 
	Иначе
		//проверяем ответ от Ресурса
		//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			НазначитьНовыйПинКодПользователю(Структура.manager.id,Кассир.Код,СообщатьОбОшибке);
		Иначе
			Если СообщатьОбОшибке = Истина Тогда
				//#Если Клиент Тогда
					Сообщить("Ошибка при создании пользователя в SailPlay. " + Структура.message,СтатусСообщения.ОченьВажное);
				//#КонецЕсли	
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//клиент
Функция ДобавитьОбновитьДанныеКлиентаВSailPlay(СтруктураДанныхОКлиенте,СообщатьОбОшибке = Ложь)Экспорт
	
	//вообще постараюсь на этот алгоритм нарисовать человеческую схему иначе без нее здесь черт ногу сломит.
	//для себя примем обозначение: передаваемая карта это новая карта, ну а старая карта -это старая карта. 
	Отказ = Ложь;
	ДанныеВыгружены = Истина;
	СклеиваемЗаписи = Ложь;
	НоваяКартаЗарегистрирована = Ложь; //новая карта зарегистрирована в SailPlay
	
	//ЕстьСтараяКарта = Ложь;  //в 1с у новой карты есть старая карты
	//СтараяКартаЗарегистрирована = Ложь;//старая карта зарегистрирована в SailPlay	
	//НТЗарегистрированНаСтаройКарте = Ложь; //номер телефона зарегистрирован на старой карте
	
	НТЗарегистрирован = Ложь;  //номер телефона зарегистрирован ли вообще
	НТЗарегистрированНаНовойКарте = Ложь; //номер телефона зарегистрирован на новой карте
	
	Попытка
		ШтрихКодДК 	= СокрЛП(СтруктураДанныхОКлиенте.КодДК);
	Исключение
		ШтрихКодДК 	= Неопределено;		
	КонецПопытки;
	
	Попытка
		НомерТелефона = СокрЛП(СтруктураДанныхОКлиенте.НомерТелефона);
		ЧистыйНомер = SailPlay_Модуль.ВернутьЦифрыИзСтроки(НомерТелефона);
		СтруктураДанныхОКлиенте.НомерТелефона = ЧистыйНомер;
	Исключение
		ЧистыйНомер = Неопределено;
	КонецПопытки;
	
	//Попытка
	//	КодСтаройКарты = СокрЛП(СтруктураДанныхОКлиенте.КодСтаройКарты);
	//Исключение
	//	КодСтаройКарты = "";
	//КонецПопытки;
	//
	//Если ЗначениеЗаполнено(КодСтаройКарты) Тогда
	//	ЕстьСтараяКарта = Истина;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ШтрихКодДК) И НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
		Если СообщатьОбОшибке = Истина Тогда
			//#Если Клиент Тогда
				Сообщить("Не указан код Дисконтной карты и номер телефона!",СтатусСообщения.Важное);
			//#КонецЕсли	
		КонецЕсли;
		//Если Карта <> Неопределено Тогда
		//	ЗапишемОтложеннуюТранзакцияSailPlay(Карта,Перечисления.ВидыОперацииSailPlay.ДанныеКлиента);
		//КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ОтветПоДК = SailPlay_Модуль.ПолучитьИнформациюОКлиентеИзSailPlay(ШтрихКодДК,НомерТелефона);
	Если ОтветПоДК = Неопределено Тогда
		Если СообщатьОбОшибке = Истина Тогда
			#Если Клиент Тогда
				Предупреждение("[SailPlay]Не получен ответ от сервера.Попробуйте позже или свяжитесь со службой поддержки.");
			#КонецЕсли
		КонецЕсли;
		//Если КартаАктивирована = Истина Тогда //если активируется карта и связи нет, то не даем запись т.к. не можем проверить на дубли 
		//	Сообщить("[SailPlay]При активации карты нет возможности проверить карту на дубль т.к. не связи. Свяжитесь со службой поддержки.", СтатусСообщения.ОченьВажное);
		//	Отказ = Истина;
		//Иначе	
			//Если Карта <> Неопределено Тогда
			//	ЗапишемОтложеннуюТранзакцияSailPlay(Карта,Перечисления.ВидыОперацииSailPlay.ДанныеКлиента);
			//КонецЕсли;
		//КонецЕсли;	
		Возврат Ложь;
	КонецЕсли;
	
	Если ОтветПоДК.status = "ok" Тогда
		//Если КартаАктивирована = Истина Тогда
		//	Отказ = Истина;
		//	//#Если Клиент Тогда
		//		Сообщить("[SailPlay]Карта с таким кодом уже активирована. Свяжитесь со службой поддержки.", СтатусСообщения.ОченьВажное);
		//	//#КонецЕсли	
		//	Возврат Ложь;
		//КонецЕсли;	
		НоваяКартаЗарегистрирована = Истина;
		Если ЧистыйНомер <> Неопределено И ОтветПоДК.phone = ЧистыйНомер Тогда
			НТЗарегистрированНаНовойКарте = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	//Если ЕстьСтараяКарта = Истина Тогда
	//	
	//	ОтветПоСтаройДК = SailPlay_Модуль.ПолучитьИнформациюОКлиентеИзSailPlay(КодСтаройКарты);
	//	Если ОтветПоСтаройДК = Неопределено Тогда
	//		Если СообщатьОбОшибке = Истина Тогда
	//			//#Если Клиент Тогда
	//				Сообщить("[SailPlay]Не получен ответ от сервера.При получении данных о старой карте клиентка. Попробуйте позже или свяжитесь со службой поддержки.", СтатусСообщения.ОченьВажное);
	//			//#КонецЕсли
	//		КонецЕсли;
	//		//Если Карта <> Неопределено Тогда
	//		//	ЗапишемОтложеннуюТранзакцияSailPlay(Карта,Перечисления.ВидыОперацииSailPlay.ДанныеКлиента);
	//		//КонецЕсли;
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	Если ОтветПоСтаройДК.status = "ok" Тогда //если старой карты нет в SailPlay, будем относится ни как к замене карты
	//		СклеиваемЗаписи = Истина;
	//		Если ЧистыйНомер <> Неопределено И ОтветПоСтаройДК.phone = ЧистыйНомер Тогда
	//			НТЗарегистрированНаСтаройКарте = Истина;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если НТЗарегистрированНаНовойКарте = Ложь И ЧистыйНомер <> Неопределено Тогда
		//теперь телефон перепривязываем всегда
		ОтветПоНТ = SailPlay_Модуль.ПолучитьИнформациюОКлиентеИзSailPlay(,ЧистыйНомер);
		Если ОтветПоНТ  = Неопределено Тогда
			Если СообщатьОбОшибке = Истина Тогда
				#Если Клиент Тогда
					Предупреждение("[SailPlay]Не получен ответ от сервера.При получении данных о номере телефона клиента. Попробуйте позже или свяжитесь со службой поддержки.");
				#КонецЕсли
			КонецЕсли;
			//Если Карта <> Неопределено Тогда
			//	ЗапишемОтложеннуюТранзакцияSailPlay(Карта,Перечисления.ВидыОперацииSailPlay.ДанныеКлиента);
			//КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Если ОтветПоНТ.status = "ok" Тогда
			НТЗарегистрирован = Истина;
		КонецЕсли;
	Иначе
		НТЗарегистрирован = Истина;	
	КонецЕсли;

	Если НоваяКартаЗарегистрирована = Ложь Тогда// создаем только с кодом карты
		
		ДанныеВыгружены = SailPlay_Модуль.ДобавитьКлиентаВSailPlay(СтруктураДанныхОКлиенте,СообщатьОбОшибке);
        
        Если НЕ ЗначениеЗаполнено(ШтрихКодДК) Тогда
            НТЗарегистрирован = Истина;
        КонецЕсли; 
	КонецЕсли;	
	
	//Если СклеиваемЗаписи = Истина Тогда
	//	
	//	//Режим = РежимДиалогаВопрос.ДаНет;
	//	//Ответ = Вопрос("Будет перенесена история и бонусы с карты "+КодСтаройКарты+ " на карту " +ШтрихКодДК+"?", Режим, 0);
	//	//Если Ответ = КодВозвратаДиалога.Да Тогда
	//		СтруктураДанныхОКлиентеДляСклейки = Новый Структура;
	//		СтруктураДанныхОКлиентеДляСклейки.Вставить("СКарты",			ШтрихКодДК);
	//		СтруктураДанныхОКлиентеДляСклейки.Вставить("НаКарту",			КодСтаройКарты);
	//		ДанныеВыгружены = SailPlay_Модуль.ОбновитьДанныеКлиентаВSailPlayСПереносомБонусов(СтруктураДанныхОКлиентеДляСклейки,СообщатьОбОшибке);
	//	//КонецЕсли;
	//	
	//КонецЕсли;
	
	Если ДанныеВыгружены = Истина Тогда
		Если НТЗарегистрирован = Ложь Тогда
			СтруктураДанныхОКлиенте.Вставить("НовыйНомер",	ЧистыйНомер);
        КонецЕсли;
        ДанныеВыгружены = SailPlay_Модуль.ОбновитьДанныеКлиентаВSailPlay(СтруктураДанныхОКлиенте,СообщатьОбОшибке);
	КонецЕсли;
	
	//Если ДанныеВыгружены = Истина И ЗначениеЗаполнено(ШтрихКодДК)  И ЗначениеЗаполнено(СтруктураДанныхОКлиенте.НомерЧека)
	//	И СтруктураДанныхОКлиенте.СуммаПервойПокупки > 0 Тогда //И СтруктураДанныхОКлиенте.КартаВыданаПрошлымПериодом = Истина
	//	ЧекСсылка = ПолучитьЧекПоНомеруИСумме(СтруктураДанныхОКлиенте.НомерЧека,СтруктураДанныхОКлиенте.СуммаПервойПокупки);
	//	Если ЗначениеЗаполнено(ЧекСсылка) Тогда
	//		ДанныеВыгружены = ОбновитьЧек(ЧекСсылка,ШтрихКодДК);
	//	КонецЕсли;	
	//КонецЕсли;
	
	//Если ДанныеВыгружены = Истина И ЗначениеЗаполнено(ШтрихКодДК) И ЗначениеЗаполнено(Карта) ТОгда //добавим тэг о том что карта выдана
	//	тзТипыКартSP = SailPlay_Модуль.ПолучитьТипыКартСГрницами();
	//	СтрокаТЗ = тзТипыКартSP.Найти(Карта.ОснованиеВыдачи,"ОснованиеВыдачи");
	//	Если СтрокаТЗ <> Неопределено Тогда
	//		ДанныеВыгружены = ВыгруженТэгКлиента(ШтрихКодДК,СтрокаТЗ.ИмяТэгаКартаВыдана);	
	//	КонецЕсли;	
	//КонецЕсли;
	
	//Если ДанныеВыгружены = Ложь И Карта <> Неопределено Тогда
	//	ЗапишемОтложеннуюТранзакцияSailPlay(Карта,Перечисления.ВидыОперацииSailPlay.ДанныеКлиента);
	//КонецЕсли;
	
	Возврат ДанныеВыгружены;
	
КонецФункции

Функция ОбновитьДанныеКлиентаВSailPlay(СтруктураДанныхОКлиенте,СообщатьОбОшибке = Ложь) Экспорт
	
	ДанныеВыгружены = Ложь;
	
	Токен = ПараметрыСеанса.ТокенSailPlay;
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдМагазинаSailPlay = ПараметрыСеанса.ИдМагазинаSailPlay;
	Если НЕ ЗначениеЗаполнено(ИдМагазинаSailPlay) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		НомерТелефона = СтруктураДанныхОКлиенте.НомерТелефона; 
	Исключение
		НомерТелефона = Неопределено;
	КонецПопытки;
	
	Попытка
		КодДК = СтруктураДанныхОКлиенте.КодДК; 
	Исключение
		КодДК = Неопределено;
	КонецПопытки;
	
	Попытка
		Пол = СтруктураДанныхОКлиенте.Пол; 
	Исключение
		Пол = Неопределено;
	КонецПопытки;
	
	Попытка
		ДатаРождения = СтруктураДанныхОКлиенте.ДатаРождения; 
	Исключение
		ДатаРождения = Неопределено;
	КонецПопытки;
	
	Попытка
		НовыйНомер = СтруктураДанныхОКлиенте.НовыйНомер; 
	Исключение
		НовыйНомер = Неопределено;
	КонецПопытки;
	
	Попытка
		Фамилия = СтруктураДанныхОКлиенте.Фамилия; 
	Исключение
		Фамилия = Неопределено;
	КонецПопытки;
	
	Попытка
		Имя = СтруктураДанныхОКлиенте.Имя; 
	Исключение
		Имя = Неопределено;
	КонецПопытки;
	
	Попытка
		Отчество = СтруктураДанныхОКлиенте.Отчество; 
	Исключение
		Отчество = Неопределено;
	КонецПопытки;
	
	Попытка
		Почта = СтруктураДанныхОКлиенте.Почта; 
	Исключение
		Почта = Неопределено;
	КонецПопытки;
    
    
	Если НЕ ЗначениеЗаполнено(КодДК) И  НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
		Если СообщатьОбОшибке = Истина Тогда
			//#Если Клиент Тогда
				Сообщить("[SailPlay]Ошибка при отправке данных по Клиенту, не указан ни Номер телефона ни Дисконтная карта",СтатусСообщения.ОченьВажное);
			//#КонецЕсли
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	//с почтой так же не все гладко, если адресс почты уже зарегистрирован, то ничего не делаем
	Если Почта <> Неопределено Тогда
		
		ОтветПоПочте = SailPlay_Модуль.ПолучитьИнформациюОКлиентеИзSailPlay(,,Почта);
		Если ОтветПоПочте = Неопределено Тогда
			Если СообщатьОбОшибке = Истина Тогда
				//#Если Клиент Тогда
					Сообщить("[SailPlay]Не получен ответ от сервера.При получении данных о почте клиента. Попробуйте позже или свяжитесь со службой поддержки.", СтатусСообщения.ОченьВажное);
				//#КонецЕсли
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		
		Если ОтветПоПочте.status = "ok" Тогда //тогда почту не трогаем
	    	Почта = Неопределено;	
		КонецЕсли;
		
	КонецЕсли;	
	//
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				Токен);
	Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
	Если ЗначениеЗаполнено(Пол) Тогда
		ПолКод = ?(Пол = Перечисления.ПолФизическихЛиц.Мужской,1,2);
		Запись.Вставить("sex", 					ПолКод);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаРождения) Тогда
		Запись.Вставить("birth_date", 			Формат(ДатаРождения,"ДФ=yyyy-MM-dd"));
	КонецЕсли;	
	Если ЗначениеЗаполнено(КодДК) Тогда
		Запись.Вставить("origin_user_id", 	СокрЛП(КодДК));
	Иначе	
		Запись.Вставить("user_phone", 		СокрЛП(НомерТелефона));
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НовыйНомер) Тогда
		Запись.Вставить("new_phone", 		НовыйНомер);
		//Запись.Вставить("add_phone", 		НовыйНомер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Почта) Тогда
		Запись.Вставить("add_email", 		Почта);
	КонецЕсли;
	
	//
	Если ЗначениеЗаполнено(Фамилия) Тогда
		Запись.Вставить("last_name", 		Фамилия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Имя) Тогда
		Запись.Вставить("first_name", 		Имя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчество) Тогда
		Запись.Вставить("middle_name", 		Отчество);
	КонецЕсли;
	//
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/users/update/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда 
	Иначе
		//проверяем ответ от Ресурса
		//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			ДанныеВыгружены = Истина;
		Иначе
			ДанныеВыгружены = Ложь;
			Если СообщатьОбОшибке = Истина Тогда
				//#Если Клиент Тогда
					Сообщить("Ошибка при отправке данных по Клиенту в SailPlay. " + Структура.message,СтатусСообщения.ОченьВажное);
				//#КонецЕсли
				ЗаписатьЛог("Ошибка SailPlay.", "Ошибка обновления информации о клиенте: "+СтрокаЗапроса+ " "+ Структура.message);
			КонецЕсли;
		КонецЕсли;
		
    КонецЕсли;
    
    Если ДанныеВыгружены Тогда
        
        Запись = Новый Структура;
        Запись.Вставить("token", 				Токен);
        Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
        
        Если ЗначениеЗаполнено(КодДК) Тогда
            Запись.Вставить("origin_user_id", 	СокрЛП(КодДК));
        Иначе	
            Запись.Вставить("user_phone", 		СокрЛП(НомерТелефона));
        КонецЕсли;	
        
        Попытка
            СтатусКарты = СтруктураДанныхОКлиенте.СтатусКарты;
        Исключение
            СтатусКарты = Неопределено;
        КонецПопытки; 
        
        НачалоТэгаСтатус = ПолучитьНачалоТэгаСтатусКарты();
        Если ЗначениеЗаполнено(СтатусКарты)  Тогда
            тэг = НачалоТэгаСтатус + " " + СокрЛП(СтатусКарты);
        Иначе
            Возврат ДанныеВыгружены;
        КонецЕсли; 
        
        Запись.Вставить("tags" , тэг);
        
        HTTPСервер = ПолучитьHTTPСерверSailPlay();
        СтрокаНачалоЗапроса = "/api/v2/users/tags/add/";
        СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
        ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
        
        Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
        Если Файл = Неопределено Тогда 
        Иначе
            Стр = Файл;
            Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
            Статус = Структура.status;
            
            Если Статус = "ok" Тогда
            Иначе
                Если СообщатьОбОшибке = Истина Тогда
                    #Если Клиент Тогда
                        Предупреждение("Ошибка при создании тэга 'Статус' для Клиента в SailPlay. " + Структура.message);
                    #КонецЕсли
                КонецЕсли;
            КонецЕсли;
            
        КонецЕсли;
    КонецЕсли; 
	
	Возврат ДанныеВыгружены;
	
КонецФункции	

Функция ОбновитьДанныеКлиентаВSailPlayСПереносомБонусов(СтруктураДанныхОКлиенте,СообщатьОбОшибке = Ложь) Экспорт
	
	ДанныеВыгружены = Ложь;
	
	Токен = ПараметрыСеанса.ТокенSailPlay;
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдМагазинаSailPlay = ПараметрыСеанса.ИдМагазинаSailPlay;
	Если НЕ ЗначениеЗаполнено(ИдМагазинаSailPlay) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		НаНомерТелефона = СтруктураДанныхОКлиенте.НаНомерТелефона;
	Исключение
		НаНомерТелефона = Неопределено;
	КонецПопытки;
	
	Попытка
		СНомераТелефона = СтруктураДанныхОКлиенте.СНомераТелефона;
	Исключение
		СНомераТелефона = Неопределено;
	КонецПопытки;
	
	Попытка
		НаКарту 		= СтруктураДанныхОКлиенте.НаКарту;
	Исключение
		НаКарту 		= Неопределено;
	КонецПопытки;
	
	Попытка
		СКарты			= СтруктураДанныхОКлиенте.СКарты;
	Исключение
		СКарты			= Неопределено;
	КонецПопытки;
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				Токен);
	Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
	
	Если СНомераТелефона <> Неопределено ТОгда
		Запись.Вставить("from_phone", 	СокрЛП(СНомераТелефона));
	КонецЕсли;
	
	Если СКарты <> Неопределено ТОгда
		Запись.Вставить("from_oid", 		СокрЛП(СКарты));
	КонецЕсли;
	
	Если НаНомерТелефона <> Неопределено ТОгда
		Запись.Вставить("to_phone", 	СокрЛП(НаНомерТелефона));
	КонецЕсли;	
	
	Если НаКарту <> Неопределено ТОгда
		Запись.Вставить("to_oid", 			СокрЛП(НаКарту));
	КонецЕсли;
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/users/merge/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда 
	Иначе
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			ДанныеВыгружены = Истина;
		Иначе
			Если СообщатьОбОшибке = Истина Тогда
				#Если Клиент Тогда
					Предупреждение("Ошибка при отправке данных по Клиенту в SailPlay. " + Структура.message,);
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеВыгружены;
	
КонецФункции	

Функция ДобавитьКлиентаВSailPlay(СтруктураДанныхОКлиенте,СообщатьОбОшибке = Ложь) Экспорт
	
	ДанныеВыгружены = Ложь;
	
	Токен = ПараметрыСеанса.ТокенSailPlay;
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдМагазинаSailPlay = ПараметрыСеанса.ИдМагазинаSailPlay;
	Если НЕ ЗначениеЗаполнено(ИдМагазинаSailPlay) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		НомерТелефона = СтруктураДанныхОКлиенте.НомерТелефона;
		ЧистыйНомер = SailPlay_Модуль.ВернутьЦифрыИзСтроки(НомерТелефона);
		СтруктураДанныхОКлиенте.НомерТелефона = ЧистыйНомер;
	Исключение
		НомерТелефона = Неопределено;
	КонецПопытки;
	
	Попытка
		КодДК = СтруктураДанныхОКлиенте.КодДК; 
	Исключение
		КодДК = Неопределено;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(КодДК) И  НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
		Если СообщатьОбОшибке = Истина Тогда
			#Если Клиент Тогда
				Предупреждение("Ошибка при отправке данных по Клиенту, не указан ни Номер телефона ни Дисконтная карта",СтатусСообщения.ОченьВажное);
			#КонецЕсли
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				Токен);
	Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
	Если ЗначениеЗаполнено(КодДК) Тогда
		Запись.Вставить("origin_user_id", 	СокрЛП(КодДК));
	Иначе	
		Запись.Вставить("user_phone", 		СокрЛП(НомерТелефона));
	КонецЕсли;	
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/users/add/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда 
	Иначе
		//проверяем ответ от Ресурса
		//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			ДанныеВыгружены = Истина;
		Иначе
			Если СообщатьОбОшибке = Истина Тогда
				#Если Клиент Тогда
					Предупреждение("Ошибка при добавлении Клиента в SailPlay. " + Структура.message);
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
    
    Если ДанныеВыгружены Тогда
        
        Запись = Новый Структура;
        Запись.Вставить("token", 				Токен);
        Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
        Если ЗначениеЗаполнено(КодДК) Тогда
            Запись.Вставить("origin_user_id", 	СокрЛП(КодДК));
        Иначе	
            Запись.Вставить("user_phone", 		СокрЛП(НомерТелефона));
        КонецЕсли;	
        
        //тэг =  "Зарегистрирован в магазине " + СокрЛП(ПараметрыСеанса.ТекущийМагазин.Наименование);
        тэг = "";
        
        Попытка
            СтатусКарты = СтруктураДанныхОКлиенте.СтатусКарты;
        Исключение
            СтатусКарты = Неопределено;
        КонецПопытки; 
        
        Если НЕ ЗначениеЗаполнено(СтатусКарты) Тогда
            Возврат ДанныеВыгружены;
        КонецЕсли; 
        
        НачалоТэгаСтатус = ПолучитьНачалоТэгаСтатусКарты();
        Если ЗначениеЗаполнено(СтатусКарты)  Тогда
            тэг = тэг + "," + НачалоТэгаСтатус+" "+ СокрЛП(СтатусКарты);
            тэг = тэг + НачалоТэгаСтатус+" "+ СокрЛП(СтатусКарты);
        КонецЕсли; 
        
        Если ЗначениеЗаполнено(тэг) Тогда
            Запись.Вставить("tags" , тэг);
            HTTPСервер = ПолучитьHTTPСерверSailPlay();
            СтрокаНачалоЗапроса = "/api/v2/users/tags/add/";
            СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
            ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
            
            Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
            Если Файл = Неопределено Тогда 
            Иначе
                Стр = Файл;
                Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
                Статус = Структура.status;
                
                Если Статус = "ok" Тогда
                Иначе
                    Если СообщатьОбОшибке = Истина Тогда
                        #Если Клиент Тогда
                            Предупреждение("Ошибка при создании тэга для Клиента в SailPlay. " + Структура.message);
                        #КонецЕсли
                    КонецЕсли;
                КонецЕсли;
                
            КонецЕсли;
        КонецЕсли; 
    КонецЕсли; 
    
    
	Возврат ДанныеВыгружены;
	
КонецФункции	

Функция ПолучитьТэгиКлиента(КодДКSailPlay,Тэги = Неопределено,СообщатьОбОшибке = Истина, НомерТелефона="")Экспорт
	
	СтруктураОтвета = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат СтруктураОтвета;		
	КонецЕсли;
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				ТокенSailPlay);
	Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
    
    Если ЗначениеЗаполнено(НомерТелефона) И НЕ ЗначениеЗаполнено(КодДКSailPlay) Тогда
        ЧистыйНомер = SailPlay_Модуль.ВернутьЦифрыИзСтроки(НомерТелефона);
        Если Лев(ЧистыйНомер,1)<> "7" Тогда
            ЧистыйНомер = "7" + ЧистыйНомер;
        КонецЕсли;
        Запись.Вставить("user_phone", 		ЧистыйНомер);
    Иначе	
        Запись.Вставить("origin_user_id", 	КодДКSailPlay);
    КонецЕсли; 
    
    Если ЗначениеЗаполнено(Тэги) Тогда
		Запись.Вставить("tags",					"["+ПреобразованиеСтрокуВURL(Тэги)+"]");
	КонецЕсли;	
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/users/tags/list/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда 
	Иначе
		Стр = Файл;
		СтруктураОтвета = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = СтруктураОтвета.status;
		
		Если Статус = "ok" Тогда
			Возврат СтруктураОтвета;
		Иначе
            status_code = ПолучитьСтрокуstatus_code(СтруктураОтвета.status_code);
			Если status_code = "-4000" Тогда //такого пользователя нет
				Возврат СтруктураОтвета;	
			Иначе	
				Если СообщатьОбОшибке = Истина Тогда
					#Если Клиент Тогда
						Предупреждение("[SailPlay]Ошибка получения информации о Тегах клиента. Продолжайте работать и сообщите об этом в службу поддержки.");
					#КонецЕсли	
					ЗаписатьЛог("Ошибка SailPlay.", "Ошибка получения информации о Тегах клиента: "+СтрокаЗапроса+ " "+ СтруктураОтвета.message);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции	

Функция ВыгруженТэгКлиента(КодДКSailPlay,Тэги,СообщатьОбОшибке = Истина)Экспорт
	
	Выполнено = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат Выполнено;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат Выполнено;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат Выполнено;		
	КонецЕсли;
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				ТокенSailPlay);
	Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
	Запись.Вставить("origin_user_id", 		КодДКSailPlay);
	Запись.Вставить("tags",					Тэги);//"["+ПреобразованиеСтрокуВURL(Тэги)+"]");
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/users/tags/add/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда 
	Иначе
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			Возврат Истина;
		Иначе
			Если СообщатьОбОшибке = Истина Тогда
				//#Если Клиент Тогда
					Сообщить("[SailPlay]Ошибка выгрузки Тэга клиенту. Продолжайте работать и сообщите об этом в службу поддержки.",СтатусСообщения.Внимание);
				//#КонецЕсли	
				ЗаписатьЛог("Ошибка SailPlay.", "Ошибка выгрузки Тэга клиенту: "+СтрокаЗапроса+ " "+ Структура.message);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Выполнено;
	
КонецФункции	


//клиент

//работа с сертификатом
Процедура ПроверитьСертификатДляПродажи(Чек,Отказ,ТекстОшибки)Экспорт
	Возврат;
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда //нет ид, нет проверки
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда //магазин отключен от SailPlay
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	Товары.НомерСтроки,
	|	Товары.Количество
	|ПОМЕСТИТЬ ТабТоварыВСЕ
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура,
	|	ТабТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТабТовары.НомерСтроки,
	|	ТабТовары.Количество
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	ТабТоварыВСЕ КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТабТовары.Номенклатура.ИспользоватьСерийныеНомера
	|	И ТабТовары.Количество >0	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СерийныеНомера.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер,
	|	СерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ ТабСерийныеНомера
	|ИЗ
	|	&СерийныеНомера КАК СерийныеНомера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабТовары.НомерСтроки,
	|	ТабТовары.Номенклатура.Наименование КАК Наименование,
	|	ТабТовары.Номенклатура.Номинал КАК НоминалСертификата,
	|	ТабТовары.Номенклатура КАК Сертификат,
	|	ТабСерийныеНомера.СерийныйНомер.Наименование КАК НомерСертификата
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабСерийныеНомера КАК ТабСерийныеНомера
	|		ПО ТабТовары.КлючСвязиСерийныхНомеров = ТабСерийныеНомера.КлючСвязиСерийныхНомеров
	|ГДЕ
	|	(НЕ ТабСерийныеНомера.КлючСвязиСерийныхНомеров ЕСТЬ NULL )
	|	И ТабСерийныеНомера.СерийныйНомер <> ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Товары", Чек.Товары.Выгрузить());
	Запрос.УстановитьПараметр("СерийныеНомера", Чек.СерийныеНомера.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтвета = SailPlay_Модуль.ПолучитьИнформациюОСертификате(Выборка.НомерСертификата,Истина);
		
		Если СтруктураОтвета = Неопределено Тогда
			
			Текст = ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По номеру сертификата %1 (строка №%2) не получен ответ от SailPlay, продажа невозможна'"),
			Выборка.НомерСертификата,
			Выборка.НомерСтроки);
			
			Отказ = Истина;
			Прервать;
		Иначе
			
			Статус = СтруктураОтвета.status;
			Если Статус = "ok" Тогда
				Если СтруктураОтвета.used = "true" ИЛИ СтруктураОтвета.used = ИСТИНА тогда // уже использовали
					Текст = ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сертификат с номером %1 (строка №%2) уже был использован, продажа невозможна'"),
					Выборка.НомерСертификата,
					Выборка.НомерСтроки);
					Отказ = Истина;
				ИначеЕсли СтруктураОтвета.activated = "true" ИЛИ СтруктураОтвета.activated = Истина Тогда
					Текст = ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сертификат с номером %1 (строка №%2) уже был активирован, продажа невозможна'"),
					Выборка.НомерСертификата,
					Выборка.НомерСтроки);
					Отказ = Истина;
				ИначеЕсли ПараметрыСеанса.ИдМагазинаSailPlay <> Число(СтруктураОтвета.dep_id)Тогда
					Текст = ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сертификат с номером %1 (строка №%2) принадлежит другому магазину, продажа невозможна'"),
					Выборка.НомерСертификата,
					Выборка.НомерСтроки);
					Отказ = Истина;
				ИначеЕсли Выборка.НоминалСертификата <> Число(СтруктураОтвета.value) Тогда
					Текст = ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сертификат с номером %1 (строка №%2) номиналы не совпадают, по данным SailPlay "+СтруктураОтвета.value+"р., продажа невозможна'"),
					Выборка.НомерСертификата,
					Выборка.НомерСтроки);
					Отказ = Истина;
				КонецЕсли;	
			Иначе
				
                status_code = ПолучитьСтрокуstatus_code(СтруктураОтвета.status_code);
				Если status_code = "-4202" Тогда
					Текст = ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сертификат с номером %1 (строка №%2) не зарегистрирован в SailPlay, продажа невозможна'"),
					Выборка.НомерСертификата,
					Выборка.НомерСтроки);
					Отказ = Истина;
				Иначе
					
					Попытка
						СообщениеСайлПлай = СтруктураОтвета.message;
					Исключение
						СообщениеСайлПлай = "Ошибка не распознана";
					КонецПопытки;
					
					Текст = ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка работы с сертификатом %1 (строка №%2) "+СообщениеСайлПлай+", продажа невозможна'"),
					Выборка.НомерСертификата,
					Выборка.НомерСтроки);
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСертификатДляПогашения(Чек,Отказ,ТекстОшибки) Экспорт
	Возврат;
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда //нет ид, нет проверки
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда //магазин отключен от SailPlay
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из Чек.ПогашениеПодарочныхСертификатов Цикл
		
		Если Строка.СерийныйНомер = Справочники.СерийныеНомера.ПустаяСсылка() Тогда //проверяем сертификаты только по сериям
			Продолжить;
		КонецЕсли;
		
		НомерСертификата = Строка.СерийныйНомер.Наименование;
		
		СтруктураОтвета = SailPlay_Модуль.ПолучитьИнформациюОСертификате(НомерСертификата,Истина);
		
		Если СтруктураОтвета = Неопределено Тогда
			
			Текст = ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По сертификату с номером %1 не получен ответ от SailPlay, оплата сертификатом невозможна'"),
			НомерСертификата);
			
			Отказ = Истина;
			Прервать;
			
		Иначе
			
			Статус = СтруктураОтвета.status;
			Если Статус = "ok" Тогда
				Если СтруктураОтвета.used = "true" ИЛИ СтруктураОтвета.used = ИСТИНА тогда // уже использовали
					Текст = ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сертификата с номером %1 уже погашен, оплата сертификатом невозможна'"),
					НомерСертификата);
					Отказ = Истина;
				ИначеЕсли СтруктураОтвета.activated <> "true" Тогда
					Текст = ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сертификата с номером %1 не активирован, оплата сертификатом невозможна'"),
					НомерСертификата);
					Отказ = Истина;
				ИначеЕсли Строка.ПодарочныйСертификат.Номинал <> Число(СтруктураОтвета.value) Тогда
					Текст = ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У Сертификата с номером %1 неправильный номинал, по данным SailPlay "+СтруктураОтвета.value+"р., оплата сертификатом невозможна'"),
					НомерСертификата);
					Отказ = Истина;
				КонецЕсли;	
			Иначе
				
                status_code = ПолучитьСтрокуstatus_code(СтруктураОтвета.status_code);
				Если status_code = "-4202" Тогда
					Текст = ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сертификат с номером %1 не зарегистрирован в SailPlay, оплата сертификатом невозможна'"),
					НомерСертификата);
					Отказ = Истина;
				Иначе
					
					Попытка
						СообщениеСайлПлай = СтруктураОтвета.message;
					Исключение
						СообщениеСайлПлай = "Ошибка не распознана";
					КонецПопытки;
					
					Текст = ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка работы с сертификатом %1 "+СообщениеСайлПлай+", оплата сертификатом невозможна'"),
					НомерСертификата);
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИнформациюОСертификате(НомерСертификата,СообщатьОбОшибке)Экспорт
	Возврат Неопределено;
	СтруктураОтвета = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		Возврат СтруктураОтвета;		
	КонецЕсли;
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				ТокенSailPlay);
	Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
	Запись.Вставить("number", 				НомерСертификата);
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/promocodes/coupons/numbers/status/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда 
	Иначе
		Стр = Файл;
		СтруктураОтвета = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция АктивированыСертификатыПоЧекуВSailPlay(Чек,УжеОтложеннаяТранзакция = Ложь,СообщатьОбОшибке = Истина)Экспорт
	Возврат Истина;
	Выгружен = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ЕстьСеанс = Истина; 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		ЕстьСеанс = Ложь;		
	КонецЕсли;
	//проверяем есть ли сеанс с SailPlay
	
	//принудительное сваливание транзакций в отложенные
	Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина Тогда
		ЕстьСеанс = Ложь;		
	КонецЕсли;
	
	//если нет сеанса и транзакция уже отложена тогда ничего не деалем
	Если ЕстьСеанс = Ложь И УжеОтложеннаяТранзакция = Истина Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ЧекККМТовары.Количество > 0
	|	И ЧекККМТовары.Номенклатура.ИспользоватьСерийныеНомера = ИСТИНА
	|	И ЧекККМТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМСерийныеНомера.КлючСвязиСерийныхНомеров,
	|	ЧекККМСерийныеНомера.СерийныйНомер
	|ПОМЕСТИТЬ СерийныеНомера
	|ИЗ
	|	Документ.ЧекККМ.СерийныеНомера КАК ЧекККМСерийныеНомера
	|ГДЕ
	|	ЧекККМСерийныеНомера.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	СерийныеНомера.СерийныйНомер,
	|	СерийныеНомера.СерийныйНомер.Наименование КАК НомерСертификата
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерийныеНомера КАК СерийныеНомера
	|		ПО Товары.КлючСвязиСерийныхНомеров = СерийныеНомера.КлючСвязиСерийныхНомеров
	|ГДЕ
	|	НЕ СерийныеНомера.КлючСвязиСерийныхНомеров ЕСТЬ NULL 
	|	И СерийныеНомера.СерийныйНомер <> ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Ссылка",	Чек);	 //Чек ККМ
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Ложь Тогда
		
		Если ЕстьСеанс = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = Новый Структура;
			Запись.Вставить("token", 				ТокенSailPlay);
			Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
			Запись.Вставить("number", 				Выборка.НомерСертификата);
			
			HTTPСервер = ПолучитьHTTPСерверSailPlay();
			СтрокаНачалоЗапроса = "/api/v2/promocodes/coupons/numbers/activate/";
			СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
			ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
			
			Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
			Если Файл = Неопределено Тогда
				Возврат Ложь;
			Иначе
				Стр = Файл;
				СтруктураОтвета = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
				Статус = СтруктураОтвета.status;
				Если Статус = "ok" Тогда
					Выгружен = Истина;
				Иначе
					Если СообщатьОбОшибке = Истина ТОгда
						Сообщить("[SailPlay]Ошибка активации сертификата. Продолжайте работать и сообщите об этом службе поддержки.",СтатусСообщения.Внимание);
						ЗаписатьЛог("Ошибка SailPlay.", "Ошибка активации сертификата: "+СтрокаЗапроса+ " "+ СтруктураОтвета.message);
					КонецЕсли;
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
	Иначе
		Выгружен = Истина;
	КонецЕсли;
	
	Возврат Выгружен;
	
КонецФункции	

Функция ПогашеныСертификатыПоЧекуВSailPlay(Чек,УжеОтложеннаяТранзакция = Ложь,СообщатьОбОшибке = Истина)Экспорт
	Возврат Истина;	
	Выгружен = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Истина Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	//проверяем есть ли сеанс с SailPlay 
	ЕстьСеанс = Истина; 
	ТокенSailPlay = СокрЛП(ПараметрыСеанса.ТокенSailPlay);
	Если НЕ ЗначениеЗаполнено(ТокенSailPlay) Тогда
		ЕстьСеанс = Ложь;		
	КонецЕсли;
	//проверяем есть ли сеанс с SailPlay
	
	//принудительное сваливание транзакций в отложенные
	Если ПараметрыСеанса.ОткладыватьТранзакцииSailPlay = Истина Тогда
		ЕстьСеанс = Ложь;		
	КонецЕсли;
	
	//если нет сеанса и транзакция уже отложена тогда ничего не деалем
	Если ЕстьСеанс = Ложь И УжеОтложеннаяТранзакция = Истина Тогда
		Возврат Выгружен;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекККМПогашениеПодарочныхСертификатов.СерийныйНомер.Наименование КАК НомерСертификата,
	|	ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат.Номинал КАК Номинал
	|ИЗ
	|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ЧекККМПогашениеПодарочныхСертификатов
	|ГДЕ
	|	ЧекККМПогашениеПодарочныхСертификатов.Ссылка = &Ссылка
	|	И ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат.ИспользоватьСерийныеНомера
	|	И ЧекККМПогашениеПодарочныхСертификатов.СерийныйНомер <> ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Ссылка",	Чек);	 //Чек ККМ
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Ложь Тогда
		
		Если ЕстьСеанс = Ложь Тогда
			Возврат Выгружен;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = Новый Структура;
			Запись.Вставить("token", 				ТокенSailPlay);
			Запись.Вставить("store_department_id", 	ПараметрыСеанса.ИдМагазинаSailPlay);
			Запись.Вставить("number", 				Выборка.НомерСертификата);
			
			HTTPСервер = ПолучитьHTTPСерверSailPlay();
			СтрокаНачалоЗапроса = "/api/v2/promocodes/coupons/numbers/use/";
			СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
			ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
			
			Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
			Если Файл = Неопределено Тогда
				Возврат Ложь;
			Иначе
				Стр = Файл;
				СтруктураОтвета = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
				Статус = СтруктураОтвета.status;
				Если Статус = "ok" Тогда
					Сообщить("[SailPlay]Сертификат №"+Выборка.НомерСертификата+" на сумму "+Выборка.Номинал+" руб. успешно погашен",СтатусСообщения.Информация);
					Выгружен = Истина;
				Иначе
					Если СообщатьОбОшибке = Истина ТОгда
						Сообщить("[SailPlay]Ошибка активации сертификата. Продолжайте работать и сообщите об этом службе поддержки.",СтатусСообщения.Внимание);
						ЗаписатьЛог("Ошибка SailPlay.", "Ошибка активации сертификата: "+СтрокаЗапроса+ " "+ СтруктураОтвета.message);
					КонецЕсли;
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
	Иначе
		Выгружен = Истина;
	КонецЕсли;
	
	Возврат Выгружен;

КонецФункции	
//работа с сертификатом

Процедура НазначитьНовыйПинКодПользователю(IDСотрудника,ПинКод,СообщатьОбОшибке = Ложь)Экспорт
	
	Токен = ПараметрыСеанса.ТокенSailPlay;
	Если Не ЗначениеЗаполнено(Токен) Тогда
		Возврат;
	КонецЕсли;
	
	ИдМагазинаSailPlay = ПараметрыСеанса.ИдМагазинаSailPlay;
	Если НЕ ЗначениеЗаполнено(ИдМагазинаSailPlay) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Новый Структура;
	Запись.Вставить("token", 				Токен);
	Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
	Запись.Вставить("id", 					IDСотрудника);
	Запись.Вставить("pin_code", 			ПинКод);
	
	HTTPСервер 			= ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/partners/managers/edit/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда //откладываем транзацкцию
	Иначе
		//проверяем ответ от Ресурса
		//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
		Иначе
			Если СообщатьОбОшибке = Истина ТОгда
				//#Если Клиент Тогда
					Сообщить("Ошибка при получении Пин-Кода пользователя в SailPlay. " + Структура.message,СтатусСообщения.ОченьВажное);
				//#КонецЕсли
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодОтправленныйКлиентуПоСМС(НомерТелефона,СообщатьОбОшибке = Ложь)Экспорт
	
	КодОтвета = Неопределено;
	
	Токен = ПараметрыСеанса.ТокенSailPlay;
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		Если СообщатьОбОшибке = Истина Тогда
			//#Если Клиент Тогда
				Сообщить("Нет активного сеанса с SailPlay.", СтатусСообщения.ОченьВажное);
			//#КонецЕсли	
		КонецЕсли;	
		Возврат Неопределено;
	КонецЕсли;
	
	ИдМагазинаSailPlay = ПараметрыСеанса.ИдМагазинаSailPlay;
	Если НЕ ЗначениеЗаполнено(ИдМагазинаSailPlay) Тогда
		Если СообщатьОбОшибке = Истина Тогда
			//#Если Клиент Тогда
				Сообщить("Не заполнен ид вашего магазина.", СтатусСообщения.ОченьВажное);
			//#КонецЕсли	
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ЧистыйНомер = SailPlay_Модуль.ВернутьЦифрыИзСтроки(НомерТелефона);
	Если Лев(ЧистыйНомер,1)<> "7" Тогда
		ЧистыйНомер = "7" + ЧистыйНомер;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(ЧистыйНомер)) И СтрДлина(ЧистыйНомер)<>11 Тогда
		Если СообщатьОбОшибке = Истина Тогда
			//#Если Клиент Тогда
				Сообщить("Не заполнен номер телефона", СтатусСообщения.ОченьВажное);
			//#КонецЕсли	
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	//получаем список пользователей аптеки
	Запись = Новый Структура;
	Запись.Вставить("token", 				Токен);
	Запись.Вставить("store_department_id", 	ИдМагазинаSailPlay);
	Запись.Вставить("user_phone", 			ЧистыйНомер);
	
	HTTPСервер = ПолучитьHTTPСерверSailPlay();
	СтрокаНачалоЗапроса = "/api/v2/users/sms-code/";
	СтрокаЗапроса 		= СформироватьЗапросДляSailPlay(Запись,СтрокаНачалоЗапроса);
	ИмяВходящегоФайла 	= ПолучитьИмяВходящегоФайлаSailPlay();
	
	Файл = ВыполнитьAPIЗапросСРезультатомВJSON(HTTPСервер,СтрокаЗапроса,ИмяВходящегоФайла,СообщатьОбОшибке);
	Если Файл = Неопределено Тогда
		
	Иначе
		//проверяем ответ от Ресурса
		//Стр = ПолучитьСтрокуИзJSON(Файл.ПолноеИмя);
		Стр = Файл;
		Структура = РаботаСJSON_Процедуры.ЗаполнитьСтруктуруИзОтветаJSON(стр);
		Статус = Структура.status;
		
		Если Статус = "ok" Тогда
			КодОтвета = Структура.sms_code;	
		Иначе
			Если СообщатьОбОшибке = Истина Тогда
				//#Если Клиент Тогда
					Сообщить("Ошибка при отправки запроса на получение кода по СМС " + Структура.message,СтатусСообщения.ОченьВажное);
				//#КонецЕсли
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;

	Возврат КодОтвета;
	
КонецФункции	
	
//подписка на события
Процедура ПроведениеВозвратаОтПокупателяSailPlayОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
    Если Источник.ОбменДанными.Загрузка = Истина Тогда
        Возврат;
    КонецЕсли; 
    //Если ПараметрыСеанса.НеВыгружатьВSailPlay Тогда
    //    Возврат;
    //КонецЕсли;
    
    Если Источник.СкладОрдер.ПрограммаЛояльностиSailPlay = Ложь Тогда
        Возврат;
    КонецЕсли; 
    
    SailPlay_Модуль.ЗапишемОтложеннуюТранзакцияSailPlay(Источник.Ссылка,Перечисления.ВидыОперацииSailPlay.Возврат);
    SailPlay_Модуль.ВыгрузитьВсеОтложенныеТранзакции();
КонецПроцедуры

//подписка на события
Процедура ЧекОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
    
    Если ПараметрыСеанса.НеВыгружатьВSailPlay Тогда
        Возврат;
    КонецЕсли; 
    
	Если Источник.ОбменДанными.Загрузка = Ложь И ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда  // не обмен данными и магазин работает с SailPlay
        //Если Источник.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
			Если Источник.ПометкаУдаления = Ложь И АПечаталсяЛиЧек(Источник.Ссылка) Тогда
				SailPlay_Модуль.ЗапишемОтложеннуюТранзакцияSailPlay(Источник.Ссылка,Перечисления.ВидыОперацииSailPlay.Продажа);
				ВыгрузитьЧекВSailPlay(Источник);
			КонецЕсли;	
        //ИначеЕсли Источник.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю 
        //    И (НЕ ТипЗнч(Источник.Ссылка)=Тип("ДокументСсылка.ЧекККМ") ИЛИ  Источник.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый) Тогда
        //	SailPlay_Модуль.ЗапишемОтложеннуюТранзакцияSailPlay(Источник.Ссылка,Перечисления.ВидыОперацииSailPlay.Возврат);
        //    ВыгрузитьОтложенныеТранзакцииSailPlay(Источник.Ссылка);
        //КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриходнаяНакладнаяОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Ложь Тогда //на всякий случай
		Если ЗначениеЗаполнено(Источник.ДокументОснование) И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЧекНовый") Тогда  //считаю что любой приходник с чеком на борту это возрат.
			ВыгрузитьВозвратВSailPlay(Источник);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьЧекВSailPlay(ЧекОбъект)Экспорт
	
	ВыгрузитьВSailPlay 		= Ложь;
	ОткладываемТранзакцию 	= Ложь;
	
    Если //ЧекОбъект.Проведен = Истина И 
        ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		ВыгрузитьВSailPlay = Истина;	
	КонецЕсли;
	
	Если ВыгрузитьВSailPlay = Истина Тогда
		
		Ссылка = ЧекОбъект.Ссылка;
		
		Попытка
			SailPlay_Модуль.ПройтиАвторизациюSailPlay(Ложь);
		Исключение
			ПараметрыСеанса.ДатаНачалаТокенаSailPlay 	= Дата(1,1,1);
			ПараметрыСеанса.ТокенSailPlay 				= "";
			ОткладываемТранзакцию = Истина;
		КонецПопытки;
		
		Если ОткладываемТранзакцию = Ложь Тогда
			
			Попытка
				SailPlay_Модуль.ВыгрузитьОтложенныеТранзакцииSailPlay(Ссылка);
			Исключение
				ЗаписатьЛог("Ошибка SailPlay.", "Ошибка выгрузки начисления по чеку. " + ОписаниеОшибки());
				ОткладываемТранзакциюПоНачислению = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	

Процедура ВыгрузитьВозвратВSailPlay(ВозвратОбъект)Экспорт
	
	Ссылка = ВозвратОбъект.Ссылка;
	
	ОткладываемТранзакцию = Ложь;
	ВыгрузитьВSailPlay = Ложь;
	//ОткладываемТранзакциюПоОтменеЧека 		= Ложь;
	//ОткладываемТранзакциюПоОтменеСписания 	= Ложь;
	
	Если ВозвратОбъект.Проведен = Истина И ЗначениеЗаполнено(ПараметрыСеанса.ИдМагазинаSailPlay) Тогда
		ВыгрузитьВSailPlay = Истина;	
	КонецЕсли;
	
	Если ВыгрузитьВSailPlay = Истина Тогда
		
		Попытка
			SailPlay_Модуль.ПройтиАвторизациюSailPlay(Ложь);
		Исключение
			ПараметрыСеанса.ДатаНачалаТокенаSailPlay 	= Дата(1,1,1);
			ПараметрыСеанса.ТокенSailPlay 				= "";
			ОткладываемТранзакцию = Истина;
		КонецПопытки;
		
		Если ОткладываемТранзакцию = Ложь Тогда
			
			Попытка
				SailPlay_Модуль.НачислитьСписатьБонусыВSailPlayПоВозврату(Ссылка);
			Исключение
				ЗаписатьЛог("Ошибка SailPlay.", "Ошибка выгрузки Возврат. " + ОписаниеОшибки());
				//ОткладываемТранзакциюПоОтменеЧека = Истина;
				ОткладываемТранзакцию = Истина;
			КонецПопытки;
			//Попытка
			//	SailPlay_Модуль.СписатьБонусыВSailPlayПоВозврату(Ссылка);
			//Исключение
			//	ЗаписатьЛог("Ошибка SailPlay.", "Ошибка выгрузки Возврат. " + ОписаниеОшибки());
			//	ОткладываемТранзакциюПоОтменеЧека = Истина;
			//КонецПопытки;
			//
			//Попытка
			//	SailPlay_Модуль.НачислитьБонусыВSailPlayПоВозврату(Ссылка);
			//Исключение
			//	ЗаписатьЛог("Ошибка SailPlay.", "Ошибка выгрузки начисление по Возврату. " + ОписаниеОшибки());
			//	ОткладываемТранзакциюПоОтменеСписания = Истина;
			//КонецПопытки;
			
		Иначе	
			ОткладываемТранзакцию = Истина;  //это пробитие чека после ошибки, админом. 
		КонецЕсли;
		
		Если ОткладываемТранзакцию = Истина Тогда
			SailPlay_Модуль.ЗапишемОтложеннуюТранзакцияSailPlay(Ссылка,Перечисления.ВидыОперацииSailPlay.Возврат)
			//SailPlay_Модуль.ЗапишемОтложеннуюТранзакцияSailPlay(Ссылка,Перечисления.ВидыОперацииSailPlay.СписаниеВозврат);
			//SailPlay_Модуль.ЗапишемОтложеннуюТранзакцияSailPlay(Ссылка,Перечисления.ВидыОперацииSailPlay.НачислениеВозврат);
		//Иначе
		//	
		//	Если ОткладываемТранзакциюПоОтменеЧека = Истина Тогда
		//		SailPlay_Модуль.ЗапишемОтложеннуюТранзакцияSailPlay(Ссылка,Перечисления.ВидыОперацииSailPlay.СписаниеВозврат);
		//	КонецЕсли;
		//	
		//	Если ОткладываемТранзакциюПоОтменеСписания = Истина Тогда
		//		SailPlay_Модуль.ЗапишемОтложеннуюТранзакцияSailPlay(Ссылка,Перечисления.ВидыОперацииSailPlay.НачислениеВозврат);
		//	КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ВыгруженаИнформационнаяКартаВSailPlay(Ссылка = Неопределено,КартаАктивирована = Ложь,Отказ = Ложь) Экспорт
	
	Выгружена = Ложь;
	
	#Если Клиент Тогда
		Состояние("собираю карты клиентов...");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка,
	|	ИнформационныеКарты.КодКарты,
	|	ИнформационныеКарты.ВладелецКарты,
	|	ИнформационныеКарты.ТипКарты,
	|	ИнформационныеКарты.ВидВладельцаКарты,
	|	ВЫБОР
	|		КОГДА ИнформационныеКарты.СтараяКарта ССЫЛКА Справочник.ИнформационныеКарты
	|			ТОГДА ИнформационныеКарты.СтараяКарта.КодКарты
	|		ИНАЧЕ ИнформационныеКарты.СтараяКарта
	|	КОНЕЦ КАК КодСтаройКарты,
	|	ВЫБОР
	|		КОГДА ИнформационныеКарты.ВладелецКарты.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА 1
	|		КОГДА ИнформационныеКарты.ВладелецКарты.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Пол,
	|	ИнформационныеКарты.ВладелецКарты.ДатаРождения КАК ДатаРождения,
	|	ИнформационныеКарты.ВладелецКарты.МобильныйТелефон КАК НомерТелефона,
	|	ИнформационныеКарты.ВладелецКарты.АдресЭлектроннойПочты КАК Почта,
	|	ИнформационныеКарты.ВладелецКарты.Наименование КАК ФИО,
	|	ИнформационныеКарты.КартаВыданаПрошлымПериодом,
	|	ИнформационныеКарты.НомерЧека,
	|	ИнформационныеКарты.СуммаПервойПокупки
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.Активность = ИСТИНА
	|	И &УсловиеПоКарте
	|	И ИнформационныеКарты.ТипКарты.УчаствуетВПрограммеЛояльностиSailPlay";
	
	Если Ссылка = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПоКарте","Истина");	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПоКарте","ИнформационныеКарты.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() = Ложь Тогда
		
		сч = 1;
		Выборка = РезультатЗапроса.Выбрать();
		ОбщееКоличество = Выборка.Количество();
		Пока Выборка.Следующий() Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				Состояние("Выгружено " + сч + " из " + ОбщееКоличество);
			#КонецЕсли	
			
			Если НЕ ЗначениеЗаполнено(Выборка.КодКарты) Тогда
				//Сообщить("Не заполнена Карта клиента",СтатусСообщения.ОченьВажное);
				Возврат Ложь;
			КонецЕсли;
			
			СтруктураДанныхОКлиенте = Новый Структура;
			СтруктураДанныхОКлиенте.Вставить("КодДК",			СокрЛП(Выборка.КодКарты));
			
			ЧистыйНомер = SailPlay_Модуль.ВернутьЦифрыИзСтроки(Выборка.НомерТелефона);
			
			//передумал вставлять эту проверку
			//Если СтрДлина(ЧистыйНомер) <> 11 Тогда 
			//	Если НЕ ЗначениеНеЗаполнено(ЧистыйНомер) Тогда
			//		Сообщить("[SailPlay]Неправильно введен номер телефона. Транзакция отложена",СтатусСообщения.ОченьВажное);
			//		Возврат;
			//	КонецЕсли;
			//Иначе
			//	СтруктураДанныхОКлиенте.Вставить("НомерТелефона",	ЧистыйНомер);
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(ЧистыйНомер) Тогда
				СтруктураДанныхОКлиенте.Вставить("НомерТелефона",	ЧистыйНомер);
			КонецЕсли;
			
			КодСтаройКарты = СокрЛП(Выборка.КодСтаройКарты);
			Если ЗначениеЗаполнено(КодСтаройКарты) Тогда
				СтруктураДанныхОКлиенте.Вставить("КодСтаройКарты",	КодСтаройКарты);
			КонецЕсли;
			
			СтруктураДанныхОКлиенте.Вставить("КартаВыданаПрошлымПериодом", Выборка.КартаВыданаПрошлымПериодом);
			СтруктураДанныхОКлиенте.Вставить("НомерЧека", 				   Выборка.НомерЧека);
			СтруктураДанныхОКлиенте.Вставить("СуммаПервойПокупки", 		   Выборка.СуммаПервойПокупки);
			
			Если ЗначениеЗаполнено(Выборка.ВладелецКарты) Тогда
				
				мФИО = СтрЗаменить(СокрЛП(Выборка.ФИО)," ",Символы.ПС);
				Попытка
					Фамилия = СокрЛП(СтрПолучитьСтроку(мФИО,1));
				Исключение
					Фамилия = "";
				КонецПопытки;
				Попытка
					Имя = СокрЛП(СтрПолучитьСтроку(мФИО,2));
				Исключение
					Имя = "";
				КонецПопытки;
				Попытка
					Отчество = СокрЛП(СтрПолучитьСтроку(мФИО,3));
				Исключение
					Отчество = "";
				КонецПопытки;
				
				Если ЗначениеЗаполнено(Фамилия) Тогда
					СтруктураДанныхОКлиенте.Вставить("Фамилия",			Фамилия);
				КонецЕсли;
				Если ЗначениеЗаполнено(Имя) Тогда
					СтруктураДанныхОКлиенте.Вставить("Имя",				Имя);
				КонецЕсли;
				Если ЗначениеЗаполнено(Отчество) Тогда
					СтруктураДанныхОКлиенте.Вставить("Отчество",		Отчество);
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(Выборка.ДатаРождения) Тогда
					СтруктураДанныхОКлиенте.Вставить("ДатаРождения",	Выборка.ДатаРождения);
				КонецЕсли;
				
				Почта = СокрЛП(Выборка.Почта);
				Если ЗначениеЗаполнено(Почта) Тогда
					СтруктураДанныхОКлиенте.Вставить("Почта",			Почта);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Пол) Тогда
					СтруктураДанныхОКлиенте.Вставить("Пол",				Выборка.Пол);
				КонецЕсли;
				
			КонецЕсли;
			
			Выгружена = SailPlay_Модуль.ДобавитьОбновитьДанныеКлиентаВSailPlay(СтруктураДанныхОКлиенте,Выборка.Ссылка,Истина,КартаАктивирована,Отказ);
			
			сч = сч+1;
			
		КонецЦикла;
	Иначе
		Выгружена = Истина;
	КонецЕсли;
	
	Возврат Выгружена;
	
КонецФункции	


//подписка на события

//ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПРОГРАММЫ ЛОЯЛЬНОСТИ SailPlay