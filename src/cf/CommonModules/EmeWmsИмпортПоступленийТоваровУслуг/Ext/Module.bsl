// Copyright (C) 2012-2016 Engineer Mareev Enterprises

////НЕ ИСПОЛЬЗУЕТСЯ c 01.07.17 >>
//	Процедура ИмпортироватьПоступленияТоваровУслуг импортирует поступления товаров и услуг.
Процедура ИмпортироватьПоступленияТоваровУслуг(ERPData) Экспорт
	
	ЗаголовкиСообщений = Новый ТаблицаЗначений();
	EmeWmsERPEngine.GetHeaders(ERPData, "wms", "erp", "receipt", "NEW,WRN", ЗаголовкиСообщений);
	ОшибкиОбработки = "";
	Счетчик = 0;
	Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
		
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней	
		EmeWmsERPEngine.BeginImport(ERPData, "wms", "erp", "receipt", ЗаголовокСообщения.id);
		Попытка
			НовоеСообщение = (ЗаголовокСообщения.state = "NEW");
			Трассировка = "";
			ТемаСообщения = "";
			НачатьТранзакцию();
			Попытка
				
				Пока EmeWmsERPEngine.NextHeaderLine(ERPData) Цикл
					Если ERPData.header.asn_id <> "" И
						Не EmeWmsУтилиты.ЭтоТрансфер(ERPData.header.asn_reg_no) И
						Не EmeWmsУтилиты.ЭтоВозврат(ERPData.header.asn_reg_no) Тогда
						ИмпортироватьПоступлениеТоваровУслуг(ERPData, Трассировка, ТемаСообщения, ОшибкиОбработки);
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
			EmeWmsERPEngine.CommitImport(ERPData);
			Если НовоеСообщение И ТемаСообщения <> "" Тогда
				ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " 
					+ ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Трассировка;
				EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
			КонецЕсли
		Исключение
			EmeWmsERPEngine.RollbackImport(ERPData);
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Импорт сообщения RECEIPT: " + Ошибка);
			ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " + ЗаголовокСообщения.id 
				+ Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Ошибка;
			EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Критическая ошибка экспорта сообщения RECEIPT", ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;

	Если Счетчик <> 0 Тогда
		Сообщить("Проимпортировали сообщения RECEIPT (" + Счетчик + "шт)");
	КонецЕсли;
	
	Если ОшибкиОбработки <> "" Тогда
		ОшибкиОбработки = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + ОшибкиОбработки;
		EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Ошибки экспорта сообщений RECEIPT", ОшибкиОбработки);
	КонецЕсли; 
	
КонецПроцедуры

//	Процедура ИмпортироватьПоступленияТоваровУслуг импортирует одно поступление товаров и услуг.
Процедура ИмпортироватьПоступлениеТоваровУслуг(ERPData, Трассировка = "", ТемаСообщения = "", ОшибкиОбработки = "")
	
	//*** Делаем проверки ***

	НомерПриходаEME  			= ERPData.header.id;                 //	Номер приходного документа EME
	ОснованиеПрихода			= ERPData.header.reason_code;		 //	Код основания прихода
	ДатаДокумента     			= ERPData.header.created_at;         //	Время создания документа
	СкладКод     	  			= ERPData.header.whs_to_code;        //	Код склада приёмки
	УИД_Организация   			= ERPData.header.vendor_to_code;     //	Организация, которой пренадлежит товар
	Партнер						= ERPData.header.supplier_name;      //	Полное наименование организации поставщика
	КонтрагентКод    			= ERPData.header.supplier_code;      //	Код организации поставщика
	ЭтоВозврат					= ERPData.header.is_return;          //	Если это возврат

	//	Проверим наличие заказа поставщику
	Если Не ЗначениеЗаполнено(ERPData.header.asn_id) Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "ASNNUL");
		Возврат;
	КонецЕсли;
	
	ЗапросПоНомеруЕМЕ = Новый Запрос();
	ЗапросПоНомеруЕМЕ.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.EmeWmsНомер = &НомерПриходаEME И
		|	НЕ ПоступлениеТоваровУслуг.ПометкаУдаления";
	ЗапросПоНомеруЕМЕ.УстановитьПараметр("НомерПриходаEME", НомерПриходаEME);
	ВыборкаПоНомеруЕМЕ = ЗапросПоНомеруЕМЕ.Выполнить().Выбрать();
	Если ВыборкаПоНомеруЕМЕ.Следующий() Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "IDEXST");
		Возврат;
	КонецЕсли;
	
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		СсылкаНаЗаказПоставщику = EmeWmsУтилиты.ПолучитьЗаказПоставщику(ERPData.asns.id);
		//НМА 16.06.17 Проверка на битую ссылку (<Объект не найден>) >>
		//Если СсылкаНаЗаказПоставщику.Пустая() Тогда
		Если СсылкаНаЗаказПоставщику.Пустая() или СсылкаНаЗаказПоставщику.ПолучитьОбъект()=Неопределено Тогда
	    //НМА 16.06.17 Проверка на битую ссылку (<Объект не найден>) <<
			EmeWmsERPEngine.ErrorChild(ERPData, "ASNBAD");
		//ИначеЕсли СсылкаНаЗаказПоставщику.Статус <> Перечисления.СтатусыЗаказовПоставщикам.КПоступлению Тогда
		//	EmeWmsERPEngine.ErrorChild(ERPData, "STATUS");
		Иначе
			Организация = СсылкаНаЗаказПоставщику.Организация;
		КонецЕсли;	
	КонецЦикла;

	//НМА 13.12.16 >>	
	////	Соберем товары и количества в карту соответствий (ключ - ссылка на товар, значение - количество)
	//КоличестваТоваров = Новый Соответствие();
	//EmeWmsERPEngine.SelectChild(ERPData, "lines");
	//EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваров, "receipt_qty", Ложь);
	//НМА 13.12.16 <<
	
	//НМА 12.12.16 >>
	ТЗИзWMS = Новый ТаблицаЗначений;
	КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);
    ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	ТЗИзWMS.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗИзWMS.Колонки.Добавить("КоличествоПринято",ОписаниеЧисла);
	ТЗИзWMS.Колонки.Добавить("КачествоТовара",Новый ОписаниеТипов("Строка"),,150);
	ТЗИзWMS.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТолькоEMEСклад = Ложь;
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	EmeWmsУтилиты.ПолучитьТЗИзWMS(ERPData, ТЗИзWMS, ТолькоEMEСклад);
	//НМА 12.12.16 <<
	
	Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
		Возврат;
	КонецЕсли;
	
	//ОдноПТУНаЗаказ = Ложь; 
	ОдноПТУНаЗаказ = ИСТИНА;
	
	ПТУ = Неопределено;
	
	//*** Проверки сделали, пишем в базу данных 1C ***
	
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		
		СсылкаНаЗаказПоставщику = EmeWmsУтилиты.ПолучитьЗаказПоставщику(ERPData.asns.id);
		
		Если ПТУ = Неопределено Или ОдноПТУНаЗаказ Тогда
			
			//ПоступлениеТоваровУслуг
			ПТУ	= Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			ПТУ.Заполнить(СсылкаНаЗаказПоставщику);
			ПТУ.Дата = ТекущаяДата();
			ПТУ.ДатаС = ТекущаяДата();
			ПТУ.ДатаПо = ТекущаяДата();
			ПТУ.ОтражатьВУправленческомУчете = Истина;
			ПТУ.EmeWmsНомер	= НомерПриходаEME;
			
		КонецЕсли;
		
		// заполним оприходованные на склад позиции и проверим количества и единицы измерения
		//НМА 13.12.16 >>
		ПТУ.Товары.Очистить();
		Для Каждого СтрокаТЗИзWMS Из ТЗИзWMS Цикл
			
			СтрокаПТУ = ПТУ.Товары.Добавить();
			СтрокаПТУ.Номенклатура      = СтрокаТЗИзWMS.Номенклатура;
			СтрокаПТУ.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
			СтрокаПТУ.Коэффициент       = СтрокаПТУ.ЕдиницаИзмерения.Коэффициент;
			Если СтрокаТЗИзWMS.КачествоТовара = "N" Тогда
				СтрокаПТУ.КачествоТовара = Справочники.Качество.Новый;
			ИначеЕсли СтрокаТЗИзWMS.КачествоТовара = "B" Тогда
				СтрокаПТУ.КачествоТовара = Справочники.Качество.НайтиПоНаименованию("Брак",Истина);	
			Иначе
				СтрокаПТУ.КачествоТовара = Справочники.Качество.НайтиПоНаименованию("Карантин",Истина);
			КонецЕсли;
			 
			Если СтрокаПТУ.КачествоТовара = Справочники.Качество.Новый Тогда
				СтрокаПТУ.Склад = ПТУ.СкладОрдер;
			Иначе
				СтрокаПТУ.Склад = Справочники.Склады.НайтиПоНаименованию("Брак");
			КонецЕсли;
			
			СтрокаПТУ.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
			СтрокаПТУ.Количество        = СтрокаПТУ.КоличествоПринято;
			НайденнаяСтрока = СсылкаНаЗаказПоставщику.Товары.Найти(СтрокаПТУ.Номенклатура, "Номенклатура");
			Если НайденнаяСтрока<>Неопределено Тогда
				СтрокаПТУ.Цена             = НайденнаяСтрока.Цена;
				СтрокаПТУ.Сумма            = НайденнаяСтрока.Сумма;
				СтрокаПТУ.СтавкаНДС        = НайденнаяСтрока.СтавкаНДС; //НМА 19.06.17
				СтрокаПТУ.ЦенаИзДокумента  = СтрокаПТУ.Цена;
				СтрокаПТУ.СуммаИзДокумента = СтрокаПТУ.Сумма;
			Иначе
				СтрокаПТУ.Цена             = 0.01;
				СтрокаПТУ.Сумма            = 0;
				СтрокаПТУ.ЦенаИзДокумента  = 0;
				СтрокаПТУ.СуммаИзДокумента = 0;
				СтрокаПТУ.СтавкаНДС        = СтрокаПТУ.Номенклатура.СтавкаНДС; //НМА 19.06.17
				ПТУ.Комментарий = ПТУ.Комментарий+" !В строке №"+СтрокаПТУ.НомерСтроки+" '"+СтрокаПТУ.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в заказе)!";
			КонецЕсли;
			
			//Если СтрокаПТУ.КоличествоПринято > СтрокаПТУ.КоличествоПлан Тогда
			//	Если СтрокаПТУ.КачествоТовара <> Справочники.Качество.НайтиПоНаименованию("Карантин",Истина) Тогда
			//	ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПоступлениеТоваровУслуг, , Текст_ОшибкаЗаписи);	
			//	КонецЕсли;
			//	СтрокаПТУ.КачествоТовара = Справочники.Качество.НайтиПоНаименованию("Карантин",Истина);
			//КонецЕсли;

		//Для Каждого СтрокаПТУ Из ПТУ.Товары Цикл
		//		
		//Если СтрокаПТУ.Коэффициент > 1 Тогда
		//	КоличествоПринято = КоличестваТоваров.Получить(СтрокаПТУ.Номенклатура);
		//	СтароеКоличество = СтрокаПТУ.Количество * СтрокаПТУ.Коэффициент;
		//	
		//	Если КоличествоПринято = СтароеКоличество Тогда
		//		СтрокаПТУ.КоличествоПринято = КоличествоПринято / СтрокаПТУ.Коэффициент;
		//	Иначе
		//		ЕдиницаИзмеренияС_К_1 = EmeWmsУтилиты.ПолучитьБазовуюЕдиницуИзмеренияК1(СтрокаПТУ.Номенклатура);
		//		Если ЕдиницаИзмеренияС_К_1 = Неопределено Тогда
		//			СтрокаПТУ.КоличествоПринято = КоличествоПринято / СтрокаПТУ.Коэффициент;
		//			ЗаписьЖурналаРегистрации("Экспорт в EME.WMS",,,,"Импорт док-та Приемка по: """ + СсылкаНаЗаказПоставщику + """, не найдена Базовая единица измерения у """ + СтрокаПТУ.Номенклатура + """");
		//			ОшибкиОбработки = ОшибкиОбработки + Символы.ПС + СсылкаНаЗаказПоставщику + ", не найдена Базовая единица (К = 1) измерения у " + СтрокаПТУ.Номенклатура + "";
		//		Иначе
		//			СтрокаПТУ.Количество = СтрокаПТУ.Количество * СтрокаПТУ.Коэффициент;
		//			СтрокаПТУ.КоличествоПринято = КоличествоПринято;
		//			СтрокаПТУ.Цена = СтрокаПТУ.Цена / СтрокаПТУ.Коэффициент;
		//			СтрокаПТУ.ЕдиницаИзмерения = ЕдиницаИзмеренияС_К_1;
		//		КонецЕсли; 
		//	КонецЕсли; 
		//Иначе
		//	КоличествоПринято = КоличестваТоваров.Получить(СтрокаПТУ.Номенклатура);
		//	СтрокаПТУ.КоличествоПринято = КоличествоПринято;
		//КонецЕсли; 
		//НМА 13.12.16 <<
		
		//НМА 09.12.16 >>
		//НМА 13.12.16 >> закомментировал
		//СтрокаПТУ.КоличествоПлан = СтрокаПТУ.Количество;
		//СтрокаПТУ.Количество = КоличествоПринято;
		//НайденнаяСтрока = ТЗИзWMS.Найти(СтрокаПТУ.Номенклатура, "Номенклатура");
		//Если НайденнаяСтрока<>Неопределено Тогда
		//	Если НайденнаяСтрока.КачествоТовара = "N" Тогда
		//		СтрокаПТУ.КачествоТовара = Справочники.Качество.Новый;
		//	ИначеЕсли НайденнаяСтрока.КачествоТовара = "B" Тогда
		//		СтрокаПТУ.КачествоТовара = Справочники.Качество.НайтиПоНаименованию("Брак",Истина);	
		//	Иначе
		//		СтрокаПТУ.КачествоТовара = Справочники.Качество.НайтиПоНаименованию("Карантин",Истина);
		//	КонецЕсли;
		//Иначе
		//	СтрокаПТУ.КачествоТовара = Справочники.Качество.Новый;
		//КонецЕсли;
		//НМА 13.12.16 << закомментировал
		//НМА 09.12.16 <<

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ, ПТУ);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ, ПТУ);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ, ПТУ);
			
		КонецЦикла;
	
	КонецЦикла;		
	
	Если ОдноПТУНаЗаказ Тогда
		ПТУ.УстановитьНовыйНомер();
		//НМА 14.12.16 >>
		//добавим строки из заказа, если их нет в поступлении
		Для Каждого СтрокаИзЗаказаПоставщику ИЗ СсылкаНаЗаказПоставщику.Товары Цикл
			НедостающаяСтрокаИзЗаказаПоставщику = ТЗИзWMS.Найти(СтрокаИзЗаказаПоставщику.Номенклатура, "Номенклатура");
			Если НедостающаяСтрокаИзЗаказаПоставщику=Неопределено Тогда
				СтрокаПТУ = ПТУ.Товары.Добавить();
				СтрокаПТУ.Номенклатура      = СтрокаИзЗаказаПоставщику.Номенклатура;
				СтрокаПТУ.ЕдиницаИзмерения  = СтрокаИзЗаказаПоставщику.ЕдиницаИзмерения;
				СтрокаПТУ.Коэффициент       = СтрокаИзЗаказаПоставщику.Коэффициент;
				СтрокаПТУ.КачествоТовара    = Справочники.Качество.Новый;
				СтрокаПТУ.Склад             = ПТУ.СкладОрдер;
				
				СтрокаПТУ.КоличествоПринято = 0;
				СтрокаПТУ.Количество        = СтрокаПТУ.КоличествоПринято;
				СтрокаПТУ.КоличествоПлан    = СтрокаИзЗаказаПоставщику.Количество;
				СтрокаПТУ.Цена              = СтрокаИзЗаказаПоставщику.Цена;
				СтрокаПТУ.Сумма             = СтрокаИзЗаказаПоставщику.Сумма;
				СтрокаПТУ.ЦенаИзДокумента   = СтрокаПТУ.Цена;
				СтрокаПТУ.СуммаИзДокумента  = СтрокаПТУ.Сумма;
				ПТУ.Комментарий = ПТУ.Комментарий+" !Товар '"+СтрокаПТУ.Номенклатура.Наименование+"' добавлен из заказа (т.к. позиции не было в приходе)!";
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ, ПТУ);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ, ПТУ);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ, ПТУ);
			КонецЕсли;
			
			//Заполним КоличествоПлан из заказа 
			СтрокаПТУ = ПТУ.Товары.Найти(СтрокаИзЗаказаПоставщику.Номенклатура, "Номенклатура");
			Если СтрокаПТУ<>Неопределено Тогда
				Если Не ЗначениеЗаполнено(СтрокаПТУ.КоличествоПлан) Тогда
					СтрокаПТУ.КоличествоПлан = СтрокаИзЗаказаПоставщику.Количество;
					Если СтрокаПТУ.КачествоТовара = Справочники.Качество.Новый Тогда
						Если СтрокаПТУ.КоличествоПринято>СтрокаПТУ.КоличествоПлан Тогда //Излишки
							//СтрокаПТУ.Склад = Справочники.Склады.НайтиПоНаименованию("Брак");
							СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПлан;
						КонецЕсли;
					//Иначе
					//	СтрокаПТУ.КоличествоПлан = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		//ПТУ.СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ПТУ);
		////КурсДокументаБух = ПТУ.Товары.Итог("СуммаИзДокумента");
				
		Попытка
			ПТУ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Попытка
				ПТУ.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Текст_ОшибкаЗаписи = " (Не удалось записать ПТУ, созданный на основании " + СсылкаНаЗаказПоставщику + ")";
				ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПоступлениеТоваровУслуг, , Текст_ОшибкаЗаписи);
				ВызватьИсключение Текст_ОшибкаЗаписи;
			КонецПопытки;
		КонецПопытки;
		
		Если ПТУ.Проведен Тогда
			
			//ЗаказПоставщику статус закрыт
			ЗаказПоставщику = СсылкаНаЗаказПоставщику.ПолучитьОбъект();
			ЗаказПоставщику.Статус_УТ11 = Перечисления.СтатусыЗаказовПоставщикам_УТ11.Закрыт; //Закроем заказ
			Попытка
				ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЗаказПоставщику,СсылкаНаЗаказПоставщику , "Не удалось записать документ ЗаказПоставщику EmeWmsНомер:"+ПТУ.EmeWmsНомер);
			КонецПопытки;
			
			//ЗакрытиеЗаказовПоставщикам
			ДокЗакрытиеЗаказовПоставщикам = Документы.ЗакрытиеЗаказовПоставщикам.СоздатьДокумент();
			ДокЗакрытиеЗаказовПоставщикам.Заполнить(СсылкаНаЗаказПоставщику);
			ДокЗакрытиеЗаказовПоставщикам.Дата = ТекущаяДата();
			Попытка
				ДокЗакрытиеЗаказовПоставщикам.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЗакрытиеЗаказовПоставщикам,СсылкаНаЗаказПоставщику , "Не удалось провести документ ЗакрытиеЗаказовПоставщикам EmeWmsНомер:"+ПТУ.EmeWmsНомер);
			КонецПопытки;
			
			//АктОРасхожденияхПослеПриемки_УТ11
			АктОРасхожденияхПослеПриемки_УТ11 = Документы.АктОРасхожденияхПослеПриемки_УТ11.СоздатьДокумент();
			АктОРасхожденияхПослеПриемки_УТ11.Заполнить(ПТУ.Ссылка);
			АктОРасхожденияхПослеПриемки_УТ11.Дата = ТекущаяДата();
			АктОРасхожденияхПослеПриемки_УТ11.ДатаС = ТекущаяДата();
			АктОРасхожденияхПослеПриемки_УТ11.ДатаПо = ТекущаяДата();
			АктОРасхожденияхПослеПриемки_УТ11.ОтражатьВУправленческомУчете = Истина;
			Попытка
				АктОРасхожденияхПослеПриемки_УТ11.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Попытка
					АктОРасхожденияхПослеПриемки_УТ11.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.АктОРасхожденияхПослеПриемки_УТ11, , "Не удалось записать документ АктОРасхожденияхПослеПриемки_УТ11 EmeWmsНомер:"+ПТУ.EmeWmsНомер);
				КонецПопытки;
			КонецПопытки;
			
		КонецЕсли;
		//НМА 14.12.16 <<
		
	КонецЕсли;
		
	EmeWmsERPEngine.Success(ERPData);
		
КонецПроцедуры
////НЕ ИСПОЛЬЗУЕТСЯ c 01.07.17 <<

////НЕ ИСПОЛЬЗУЕТСЯ c 14.08.17 >>
//	Процедура ИмпортироватьПоступленияТоваровУслуг импортирует одно поступление товаров и услуг.
Процедура ИмпортироватьПоступлениеТоваровУслугПоступления(ERPData, Трассировка = "", ТемаСообщения = "", ОшибкиОбработки = "")
	
	//*** Делаем проверки ***

	НомерПриходаEME  			= ERPData.header.id;                 //	Номер приходного документа EME
	ОснованиеПрихода			= ERPData.header.reason_code;		 //	Код основания прихода
	ДатаДокумента     			= ERPData.header.created_at;         //	Время создания документа
	СкладКод     	  			= ERPData.header.whs_to_code;        //	Код склада приёмки
	УИД_Организация   			= ERPData.header.vendor_to_code;     //	Организация, которой пренадлежит товар
	Партнер						= ERPData.header.supplier_name;      //	Полное наименование организации поставщика
	КонтрагентКод    			= ERPData.header.supplier_code;      //	Код организации поставщика
	ЭтоВозврат					= ERPData.header.is_return;          //	Если это возврат

	//	Проверим наличие поступления
	Если Не ЗначениеЗаполнено(ERPData.header.asn_id) Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "ASNNUL");
		Возврат;
	КонецЕсли;
	
	ЗапросПоНомеруЕМЕ = Новый Запрос();
	ЗапросПоНомеруЕМЕ.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.EmeWmsНомер = &НомерПриходаEME И
		|	НЕ ПоступлениеТоваровУслуг.ПометкаУдаления";
	ЗапросПоНомеруЕМЕ.УстановитьПараметр("НомерПриходаEME", НомерПриходаEME);
	ВыборкаПоНомеруЕМЕ = ЗапросПоНомеруЕМЕ.Выполнить().Выбрать();
	Если ВыборкаПоНомеруЕМЕ.Следующий() Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "IDEXST");
		Возврат;
	КонецЕсли;
	
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		СсылкаНаПТУ = EmeWmsУтилиты.ПолучитьПоступлениеТоваров(ERPData.asns.id);
		//НМА 16.06.17 Проверка на битую ссылку (<Объект не найден>) >>
		//Если СсылкаНаЗаказПоставщику.Пустая() Тогда
		Если СсылкаНаПТУ.Пустая() или СсылкаНаПТУ.ПолучитьОбъект()=Неопределено Тогда
	    //НМА 16.06.17 Проверка на битую ссылку (<Объект не найден>) <<
			EmeWmsERPEngine.ErrorChild(ERPData, "ASNBAD");
		//ИначеЕсли СсылкаНаЗаказПоставщику.Статус <> Перечисления.СтатусыЗаказовПоставщикам.КПоступлению Тогда
		//	EmeWmsERPEngine.ErrorChild(ERPData, "STATUS");
		Иначе
			Организация = СсылкаНаПТУ.Организация;
		КонецЕсли;	
	КонецЦикла;

	//НМА 13.12.16 >>	
	////	Соберем товары и количества в карту соответствий (ключ - ссылка на товар, значение - количество)
	//КоличестваТоваров = Новый Соответствие();
	//EmeWmsERPEngine.SelectChild(ERPData, "lines");
	//EmeWmsУтилиты.ПолучитьКоличестваТоваров(ERPData, КоличестваТоваров, "receipt_qty", Ложь);
	//НМА 13.12.16 <<
	
	//НМА 12.12.16 >>
	ТЗИзWMS = Новый ТаблицаЗначений;
	КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);  
	ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	ТЗИзWMS.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗИзWMS.Колонки.Добавить("КоличествоПринято",ОписаниеЧисла);
	//НМА 07.07.17
	ТЗИзWMS.Колонки.Добавить("КоличествоБрака",ОписаниеЧисла); 
	ТЗИзWMS.Колонки.Добавить("СрокГодности",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("ДатаПроизводства",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("Штрихкод",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	ТЗИзWMS.Колонки.Добавить("ТипШтрихкода",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ТипыШтрихкодов"));
	//ТЗИзWMS.Колонки.Добавить("НомерГТДПоставщика",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	//ТЗИзWMS.Колонки.Добавить("КодНоменклатурыПоставщика",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(20,0)));
	//НМА 07.07.17
	ТЗИзWMS.Колонки.Добавить("КачествоТовара",Новый ОписаниеТипов("Строка"),,150); //НМА 07.07.17
	ТЗИзWMS.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТолькоEMEСклад = Ложь;
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	EmeWmsУтилиты.ПолучитьТЗИзWMS(ERPData, ТЗИзWMS, ТолькоEMEСклад);
	//НМА 12.12.16 <<
	//НМА 31.07.17 >>
	ТЗИзWMS.Свернуть("Номенклатура,СрокГодности,ДатаПроизводства,Штрихкод,ТипШтрихкода,ЕдиницаИзмерения","КоличествоПринято,КоличествоБрака");
	//НМА 31.07.17 <<
	
	Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
		Возврат;
	КонецЕсли;
	
	////ОдноПТУНаЗаказ = Ложь; 
	//ОдноПТУНаЗаказ = ИСТИНА;
	//
	//ПТУ = Неопределено;
	
	//*** Проверки сделали, пишем в базу данных 1C ***
	
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		
		//СсылкаНаЗаказПоставщику = EmeWmsУтилиты.ПолучитьЗаказПоставщику(ERPData.asns.id);
		СсылкаНаПТУ = EmeWmsУтилиты.ПолучитьПоступлениеТоваров(ERPData.asns.id);
		
		Если СсылкаНаПТУ<>Неопределено и СсылкаНаПТУ<>Документы.ПоступлениеТоваровУслуг.ПустаяСсылка() Тогда
			
			//ПоступлениеТоваровУслуг
			ПТУ_ИзлишкиНедостача = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			ПТУ_ИзлишкиНедостача.Заполнить(СсылкаНаПТУ);
			ПТУ_ИзлишкиНедостача.Дата   = ТекущаяДата();
			ПТУ_ИзлишкиНедостача.ДатаС  = ТекущаяДата();
			ПТУ_ИзлишкиНедостача.ДатаПо = ТекущаяДата();
			ПТУ_ИзлишкиНедостача.ОтражатьВУправленческомУчете = Истина;
			ПТУ_ИзлишкиНедостача.СтатусПоступленияТоваров = Перечисления.СтатусыПоступленийТоваровИУслуг.НаСогласовании;
			ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !Создан на основании поступления №"+СсылкаНаПТУ.Номер+" от "+СсылкаНаПТУ.Дата+" при приемке из WMS!";
			
			ПТУ = СсылкаНаПТУ.ПолучитьОбъект();
			ПТУ.Дата = ТекущаяДата();
			ПТУ.ДатаС = ТекущаяДата();
			ПТУ.ДатаПо = ТекущаяДата();
			ПТУ.ОтражатьВУправленческомУчете = Истина;
			ПТУ.EmeWmsНомер	= НомерПриходаEME;
			
			ПТУ_ИзлишкиНедостача.СкладОрдер = ПТУ.СкладОрдер;
			
			// заполним оприходованные на склад позиции и проверим количества и единицы измерения
			//НМА 13.12.16 >>
			ПТУ_ТЧТовары = ПТУ.Товары.Выгрузить();
			ПТУ.Товары.Очистить();
			Для Каждого СтрокаТЗИзWMS Из ТЗИзWMS Цикл
				
				НайденнаяСтрока = ПТУ_ТЧТовары.Найти(СтрокаТЗИзWMS.Номенклатура, "Номенклатура");
				
				Если ЗначениеЗаполнено(СтрокаТЗИзWMS.Номенклатура) Тогда
					
					//Качество - новый
					Если СтрокаТЗИзWMS.КоличествоПринято>0 и СтрокаТЗИзWMS.КачествоТовара="N" Тогда  
						НоменклатураСтроки = СтрокаТЗИзWMS.Номенклатура;
						СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
						
						Если НайденнаяСтрока<>Неопределено Тогда  //Качество - новый, был в заказе
							ОтборСтрокГТД = Новый Структура();
							ОтборСтрокГТД.Вставить("Номенклатура",НайденнаяСтрока.Номенклатура);
							МассивСтрокГТД = ПТУ_ТЧТовары.НайтиСтроки(ОтборСтрокГТД);
							СтрокаПТУКоличествоОстатокГТД = СтрокаТЗИзWMS.КоличествоПринято;
							Для каждого НайденнаяСтрокаНоменклатурыГТД из МассивСтрокГТД Цикл 
								Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
									Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.СерииНоменклатуры) Тогда
										СерияГТД = НайденнаяСтрокаНоменклатурыГТД.СерияНоменклатуры.ПолучитьОбъект();
										СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
										СерияГТД.Записать();
										СерияНоменклатуры = СерияГТД.Ссылка; 
									Иначе
										СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy"),Истина,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
										Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
											СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
											СерияСрокГодности.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
											СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy");
											СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
											СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
											СерияСрокГодности.Записать();
											СерияНоменклатуры = СерияСрокГодности.Ссылка;
											ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
										КонецЕсли;
									КонецЕсли;
									////Штрихкод
									СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								КонецЕсли;
								
								СтрокаПТУ = ПТУ.Товары.Добавить();
								СтрокаПТУ.КачествоТовара    = Справочники.Качество.Новый;
								СтрокаПТУ.Номенклатура      = НоменклатураСтроки;
								СтрокаПТУ.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
								СтрокаПТУ.Коэффициент       = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
								
								СтрокаПТУ.Цена             = НайденнаяСтрокаНоменклатурыГТД.Цена;
								//СтрокаПТУ.Сумма            = НайденнаяСтрока.Сумма;
								СтрокаПТУ.СтавкаНДС        = НайденнаяСтрокаНоменклатурыГТД.СтавкаНДС; //НМА 19.06.17
								СтрокаПТУ.ЦенаИзДокумента  = НайденнаяСтрокаНоменклатурыГТД.ЦенаИзДокумента;
								СтрокаПТУ.СуммаИзДокумента = НайденнаяСтрокаНоменклатурыГТД.СуммаИзДокумента;
								//НМА 180717
								Если СтрокаТЗИзWMS.ЕдиницаИзмерения<>НайденнаяСтрокаНоменклатурыГТД.ЕдиницаИзмерения Тогда  
									Если СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент<>0 Тогда
										СтрокаПТУ.КоличествоПлан    = Окр(НайденнаяСтрокаНоменклатурыГТД.Количество*НайденнаяСтрокаНоменклатурыГТД.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент,3);
										СтрокаПТУ.Количество        = СтрокаПТУ.КоличествоПлан;
										СтрокаПТУ.Сумма             = СтрокаПТУ.Цена*СтрокаПТУ.Количество;
									Иначе
										СтрокаПТУ.КоличествоПлан    = 0;
										СтрокаПТУ.Количество        = 0;
										СтрокаПТУ.Сумма             = 0;
									КонецЕсли;
								Иначе
									СтрокаПТУ.КоличествоПлан    = НайденнаяСтрокаНоменклатурыГТД.Количество;
									СтрокаПТУ.Количество        = НайденнаяСтрокаНоменклатурыГТД.Количество;
									СтрокаПТУ.Сумма             = НайденнаяСтрокаНоменклатурыГТД.Сумма;
								КонецЕсли;
								//НМА 180717
								//НМА 270717
								Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.СерияНоменклатуры) Тогда
									СтрокаПТУ.СерияНоменклатуры = НайденнаяСтрокаНоменклатурыГТД.СерияНоменклатуры;
								Иначе 
									СтрокаПТУ.СерияНоменклатуры = СерияНоменклатуры;
								КонецЕсли;
								СтрокаПТУ.КодНоменклатурыПоставщика = НайденнаяСтрокаНоменклатурыГТД.КодНоменклатурыПоставщика;
								СтрокаПТУ.НаименованиеНоменклатурыПоставщика = НайденнаяСтрокаНоменклатурыГТД.НаименованиеНоменклатурыПоставщика;
								СтрокаПТУ.НомерГТДПоставщика = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
								Если СтрокаПТУКоличествоОстатокГТД - СтрокаПТУ.Количество < 0 Тогда
									СтрокаПТУ.КоличествоПринято = СтрокаПТУКоличествоОстатокГТД;
								ИначеЕсли СтрокаПТУКоличествоОстатокГТД=0 Тогда
									СтрокаПТУКоличествоОстатокГТД = СтрокаПТУКоличествоОстатокГТД - СтрокаПТУ.Количество;
									СтрокаПТУ.КоличествоПринято = СтрокаПТУ.Количество;
								ИначеЕсли СтрокаПТУКоличествоОстатокГТД>0 Тогда
									Если МассивСтрокГТД.Количество() > 1 Тогда 
										СтрокаПТУКоличествоОстатокГТД = СтрокаПТУКоличествоОстатокГТД - СтрокаПТУ.Количество;
										СтрокаПТУ.КоличествоПринято = СтрокаПТУ.Количество;
									Иначе
										СтрокаПТУ.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
									КонецЕсли;
								КонецЕсли;
								//НМА 270717
								
								ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ, ПТУ);
								ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ, ПТУ);
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ, ПТУ);
							КонецЦикла;
							
						Иначе //Качество - новый, не было в заказе
							
							Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
								СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy"),Истина,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
								Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
									СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
									СерияСрокГодности.Владелец     = СтрокаТЗИзWMS.Номенклатура;
									СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy");
									СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
									СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
									СерияСрокГодности.Записать();
									СерияНоменклатуры = СерияСрокГодности.Ссылка;
									ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
								КонецЕсли;
								////Штрихкод
								СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								
							КонецЕсли;
							
							СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
							СтрокаПТУ_ИзлишкиНедостача.КачествоТовара    = Справочники.Качество.Новый;
							СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = НоменклатураСтроки;
							СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
							СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
							
							СтрокаПТУ_ИзлишкиНедостача.Цена             = 0.01;
							СтрокаПТУ_ИзлишкиНедостача.Сумма            = 0;
							СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = 0;
							СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = 0;
							СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = СтрокаПТУ_ИзлишкиНедостача.Номенклатура.СтавкаНДС; //НМА 19.06.17
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
							СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаТЗИзWMS.КоличествоПринято;
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
							ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !В строке №"+СтрокаПТУ_ИзлишкиНедостача.НомерСтроки+" '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в заказе)!";
							
							ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						КонецЕсли;
						
					КонецЕсли;
					
					
					
					//Качество - брак
					Если СтрокаТЗИзWMS.КоличествоБрака>0 или СтрокаТЗИзWMS.КачествоТовара<>"N" Тогда
						
						//НоваяНоменклатураПоБраку = СтрокаТЗИзWMS.Номенклатура;
						НоменклатураПоБраку = СтрокаТЗИзWMS.Номенклатура;
						ЕдиницаИзмеренияНоменклатурыПоБраку = СтрокаТЗИзWMS.ЕдиницаИзмерения;
						
						Если Справочники.Склады.НайтиПоНаименованию("Брак",Истина)<>Справочники.Склады.ПустаяСсылка() Тогда
							ПТУ_ИзлишкиНедостача.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
							ПТУ_ИзлишкиНедостача.СкладОрдер = Справочники.Склады.НайтиПоНаименованию("Брак",Истина);
						КонецЕсли;
						
						СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
						//СтрокаПТУ_ИзлишкиНедостача.КачествоТовара = Справочники.Качество.НайтиПоНаименованию("Брак",Истина); //НМА 170717
						СтрокаПТУ_ИзлишкиНедостача.КачествоТовара = Справочники.Качество.Новый;   //НМА 170717
						
						ОтборСтрокГТД = Новый Структура();
						ОтборСтрокГТД.Вставить("Номенклатура",НайденнаяСтрока.Номенклатура);
						МассивСтрокГТД = ПТУ_ТЧТовары.НайтиСтроки(ОтборСтрокГТД);
						СтрокаПТУКоличествоОстатокГТД = СтрокаТЗИзWMS.КоличествоПринято;
						Для каждого НайденнаяСтрокаНоменклатурыГТД из МассивСтрокГТД Цикл
							Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
								Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.СерииНоменклатуры) Тогда
									СерияГТД = НайденнаяСтрокаНоменклатурыГТД.СерияНоменклатуры.ПолучитьОбъект();
									СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
									СерияГТД.Записать();
									СерияНоменклатуры = СерияГТД.Ссылка; 
								Иначе
									СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy"),Истина,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
									Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
										СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияСрокГодности.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
										СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy");
										СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
										СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияСрокГодности.Записать();
										СерияНоменклатуры = СерияСрокГодности.Ссылка;
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
									КонецЕсли;
								КонецЕсли;
								////Штрихкод
								СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
							КонецЕсли;
						КонецЦикла;
						
						СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = НоменклатураПоБраку;
						СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = ЕдиницаИзмеренияНоменклатурыПоБраку;
						СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = ЕдиницаИзмеренияНоменклатурыПоБраку.Коэффициент;
						
						Если НайденнаяСтрока<>Неопределено Тогда //Качество - брак, был в заказе
							СтрокаПТУ_ИзлишкиНедостача.Цена             = НайденнаяСтрока.Цена;
							//СтрокаПТУ_ИзлишкиНедостача.Сумма            = НайденнаяСтрока.Сумма;
							СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = НайденнаяСтрока.СтавкаНДС; //НМА 19.06.17
							СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = НайденнаяСтрока.ЦенаИзДокумента;
							СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = НайденнаяСтрока.СуммаИзДокумента;
							//НМА 180717
							Если СтрокаТЗИзWMS.ЕдиницаИзмерения<>НайденнаяСтрока.ЕдиницаИзмерения Тогда  
								Если СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент<>0 Тогда
									СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = Окр(НайденнаяСтрока.Количество*НайденнаяСтрока.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент,3);
									СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаПТУ.КоличествоПлан;
									СтрокаПТУ_ИзлишкиНедостача.Сумма             = СтрокаПТУ_ИзлишкиНедостача.Цена*СтрокаПТУ_ИзлишкиНедостача.Количество;
								Иначе
									СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
									СтрокаПТУ_ИзлишкиНедостача.Количество        = 0;
									СтрокаПТУ_ИзлишкиНедостача.Сумма             = 0;
								КонецЕсли;
							Иначе
								СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = НайденнаяСтрока.Количество;
								СтрокаПТУ_ИзлишкиНедостача.Количество        = НайденнаяСтрока.Количество;
								СтрокаПТУ_ИзлишкиНедостача.Сумма             = НайденнаяСтрока.Сумма;
							КонецЕсли;
							//НМА 180717
							//НМА 270717
							СтрокаПТУ_ИзлишкиНедостача.КодНоменклатурыПоставщика = НайденнаяСтрока.КодНоменклатурыПоставщика;
							СтрокаПТУ_ИзлишкиНедостача.НаименованиеНоменклатурыПоставщика = НайденнаяСтрока.НаименованиеНоменклатурыПоставщика;
							СтрокаПТУ_ИзлишкиНедостача.НомерГТДПоставщика = НайденнаяСтрока.НомерГТДПоставщика;
							//НМА 270717
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
							
						Иначе //Качество - брак, не было в заказе
							
							Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
								СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy"),Истина,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
								Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
									СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
									СерияСрокГодности.Владелец     = СтрокаТЗИзWMS.Номенклатура;
									СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy");
									СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
									СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
									СерияСрокГодности.Записать();
									СерияНоменклатуры = СерияСрокГодности.Ссылка;
									ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
								КонецЕсли;
								
								////Штрихкод
								СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
							КонецЕсли;
							
							СтрокаПТУ_ИзлишкиНедостача.Цена             = 0.01;
							СтрокаПТУ_ИзлишкиНедостача.Сумма            = 0;
							СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = 0;
							СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = 0;
							СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = СтрокаПТУ_ИзлишкиНедостача.Номенклатура.СтавкаНДС; //НМА 19.06.17
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
							СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаТЗИзWMS.КоличествоПринято;
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
							ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !В строке №"+СтрокаПТУ_ИзлишкиНедостача.НомерСтроки+" '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в заказе)!";
						КонецЕсли;
						
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						
					КонецЕсли;
					
					
					//Если СтрокаПТУ.КачествоТовара = Справочники.Качество.Новый Тогда
					//	СтрокаПТУ.Склад = ПТУ.СкладОрдер;
					//Иначе
					//	СтрокаПТУ.Склад = Справочники.Склады.НайтиПоНаименованию("Брак");
					//КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
	КонецЦикла;		
	
	//Если ОдноПТУНаЗаказ Тогда
		////ПТУ.УстановитьНовыйНомер();
		//НМА 14.12.16 >>
		//добавим строки из заказа, если их нет в поступлении
		Для Каждого СтрокаИзТЧТовары ИЗ ПТУ_ТЧТовары Цикл
			НедостающаяСтрока = ТЗИзWMS.Найти(СтрокаИзТЧТовары.Номенклатура, "Номенклатура");
			Если НедостающаяСтрока=Неопределено Тогда
				СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
				СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = СтрокаИзТЧТовары.Номенклатура;
				СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = СтрокаИзТЧТовары.ЕдиницаИзмерения;
				СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = СтрокаИзТЧТовары.Коэффициент;
				СтрокаПТУ_ИзлишкиНедостача.КачествоТовара    = Справочники.Качество.Новый;
				//СтрокаПТУ_ИзлишкиНедостача.Склад             = ПТУ.СкладОрдер;
				
				СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = СтрокаИзТЧТовары.Количество;
				СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаИзТЧТовары.Количество;
				СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = 0;
				СтрокаПТУ_ИзлишкиНедостача.Цена              = СтрокаИзТЧТовары.Цена;
				СтрокаПТУ_ИзлишкиНедостача.Сумма             = СтрокаИзТЧТовары.Сумма;
				СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента   = СтрокаИзТЧТовары.ЦенаИзДокумента;
				СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента  = СтрокаИзТЧТовары.СуммаИзДокумента;
				СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС         = СтрокаИзТЧТовары.Номенклатура.СтавкаНДС; //НМА 19.06.17
				//НМА 270717
				СтрокаПТУ_ИзлишкиНедостача.КодНоменклатурыПоставщика = СтрокаИзТЧТовары.КодНоменклатурыПоставщика;
				СтрокаПТУ_ИзлишкиНедостача.НаименованиеНоменклатурыПоставщика = СтрокаИзТЧТовары.НаименованиеНоменклатурыПоставщика;
				СтрокаПТУ_ИзлишкиНедостача.НомерГТДПоставщика = СтрокаИзТЧТовары.НомерГТДПоставщика;
				//НМА 270717
				ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !Товар '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' добавлен из заказа (т.к. позиции не было в приходе)!";
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
			КонецЕсли;
			
			////Заполним КоличествоПлан из заказа 
			//СтрокаПТУ = ПТУ.Товары.Найти(СтрокаИзТЧТовары.Номенклатура, "Номенклатура");
			//Если СтрокаПТУ<>Неопределено Тогда
			//	Если Не ЗначениеЗаполнено(СтрокаПТУ.КоличествоПлан) Тогда
			//		СтрокаПТУ.КоличествоПлан = СтрокаИзТЧТовары.Количество;
			//		Если СтрокаПТУ.КачествоТовара = Справочники.Качество.Новый Тогда
			//			Если СтрокаПТУ.КоличествоПринято>СтрокаПТУ.КоличествоПлан Тогда //Излишки
			//				//СтрокаПТУ.Склад = Справочники.Склады.НайтиПоНаименованию("Брак");
			//				СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПлан;
			//			КонецЕсли;
			//			//Иначе
			//			//	СтрокаПТУ.КоличествоПлан = 0;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЦикла;
		//ПТУ.СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ПТУ);
		////КурсДокументаБух = ПТУ.Товары.Итог("СуммаИзДокумента");
		
		Если ПТУ_ИзлишкиНедостача.Товары.Количество()>0 Тогда // или 
		//Если ПТУ.Товары.Итог("КоличествоПринято")<>ПТУ_ТЧТовары.Товары.Итог("Количество") Тогда
			ПТУ.СтатусПоступленияТоваров = Перечисления.СтатусыПоступленийТоваровИУслуг.ПринятНеПолностью;
		Иначе
			ПТУ.СтатусПоступленияТоваров = Перечисления.СтатусыПоступленийТоваровИУслуг.Принят;
		КонецЕсли;
				
		Попытка
			СоздатьИзлишкиИНедостачи_ПриПроведенииПоступленияОбработкаПроведения(ПТУ, Ложь);
			Если Не ПТУ.Проведен Тогда
				ПТУ.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
			//Попытка
			//	ПТУ.Записать(РежимЗаписиДокумента.Запись);
			//Исключение
			Текст_ОшибкаЗаписи = " (Не удалось провести ПТУ " + СсылкаНаПТУ + ")";
			ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПоступлениеТоваровУслуг, СсылкаНаПТУ, Текст_ОшибкаЗаписи);
			ВызватьИсключение Текст_ОшибкаЗаписи;
			///КонецПопытки;
		КонецПопытки;

		Если ПТУ_ИзлишкиНедостача.Товары.Количество()>0 Тогда
			Попытка
				ПТУ_ИзлишкиНедостача.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Текст_ОшибкаЗаписи = " (Не удалось записать ПТУ Излишки/Недостачи " + ")";
				ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПоступлениеТоваровУслуг, , Текст_ОшибкаЗаписи);
				ВызватьИсключение Текст_ОшибкаЗаписи;
			КонецПопытки;
		КонецЕсли;
		
		Если СсылкаНаПТУ.Проведен Тогда
			ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
			ЗаказПоставщику.Дата = СсылкаНаПТУ.Дата;
			//ЗаказПоставщику.ДокументОснование = СсылкаНаПТУ; 
			ЗаказПоставщику.Организация = СсылкаНаПТУ.Организация;   
			ЗаказПоставщику.Подразделение = СсылкаНаПТУ.Подразделение; 
			ЗаказПоставщику.Склад = СсылкаНаПТУ.СкладОрдер;  
			ЗаказПоставщику.ТипЦен = СсылкаНаПТУ.ТипЦен;
			ЗаказПоставщику.Ответственный = СсылкаНаПТУ.Ответственный;
			ЗаказПоставщику.Контрагент = СсылкаНаПТУ.Контрагент;  
			ЗаказПоставщику.ДоговорКонтрагента = СсылкаНаПТУ.ДоговорКонтрагента; 
			ЗаказПоставщику.ВалютаДокумента = СсылкаНаПТУ.ВалютаДокумента;
			ЗаказПоставщику.СуммаДокумента = СсылкаНаПТУ.СуммаДокумента;  
			ЗаказПоставщику.УчитыватьНДС = СсылкаНаПТУ.УчитыватьНДС;  
			ЗаказПоставщику.УсловиеПродаж = СсылкаНаПТУ.УсловиеПродаж;  
			ЗаказПоставщику.ДатаОплаты = СсылкаНаПТУ.ДатаОплаты;     
			ЗаказПоставщику.ДатаПоступления = СсылкаНаПТУ.ДатаПо;
			ЗаказПоставщику.Комментарий  = "EmeWmsНомер: "+НомерПриходаEME+". " + СсылкаНаПТУ.Комментарий;
			ЗаказПоставщику.Товары.Загрузить(ПТУ_ТЧТовары);
			ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
			ПТУ.Сделка = ЗаказПоставщику.Ссылка; 
			ПТУ.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		//Если ПТУ.Проведен Тогда
		//	
		//	//ЗаказПоставщику статус закрыт
		//	ЗаказПоставщику = СсылкаНаЗаказПоставщику.ПолучитьОбъект();
		//	ЗаказПоставщику.Статус_УТ11 = Перечисления.СтатусыЗаказовПоставщикам_УТ11.Закрыт; //Закроем заказ
		//	Попытка
		//		ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
		//	Исключение
		//		ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЗаказПоставщику,СсылкаНаЗаказПоставщику , "Не удалось записать документ ЗаказПоставщику EmeWmsНомер:"+ПТУ.EmeWmsНомер);
		//	КонецПопытки;
		//	
		//	//ЗакрытиеЗаказовПоставщикам
		//	ДокЗакрытиеЗаказовПоставщикам = Документы.ЗакрытиеЗаказовПоставщикам.СоздатьДокумент();
		//	ДокЗакрытиеЗаказовПоставщикам.Заполнить(СсылкаНаЗаказПоставщику);
		//	ДокЗакрытиеЗаказовПоставщикам.Дата = ТекущаяДата();
		//	Попытка
		//		ДокЗакрытиеЗаказовПоставщикам.Записать(РежимЗаписиДокумента.Проведение);
		//	Исключение
		//		ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЗакрытиеЗаказовПоставщикам,СсылкаНаЗаказПоставщику , "Не удалось провести документ ЗакрытиеЗаказовПоставщикам EmeWmsНомер:"+ПТУ.EmeWmsНомер);
		//	КонецПопытки;
		//	
		//	//АктОРасхожденияхПослеПриемки_УТ11
		//	АктОРасхожденияхПослеПриемки_УТ11 = Документы.АктОРасхожденияхПослеПриемки_УТ11.СоздатьДокумент();
		//	АктОРасхожденияхПослеПриемки_УТ11.Заполнить(ПТУ.Ссылка);
		//	АктОРасхожденияхПослеПриемки_УТ11.Дата = ТекущаяДата();
		//	АктОРасхожденияхПослеПриемки_УТ11.ДатаС = ТекущаяДата();
		//	АктОРасхожденияхПослеПриемки_УТ11.ДатаПо = ТекущаяДата();
		//	АктОРасхожденияхПослеПриемки_УТ11.ОтражатьВУправленческомУчете = Истина;
		//	Попытка
		//		АктОРасхожденияхПослеПриемки_УТ11.Записать(РежимЗаписиДокумента.Проведение);
		//	Исключение
		//		Попытка
		//			АктОРасхожденияхПослеПриемки_УТ11.Записать(РежимЗаписиДокумента.Запись);
		//		Исключение
		//			ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.АктОРасхожденияхПослеПриемки_УТ11, , "Не удалось записать документ АктОРасхожденияхПослеПриемки_УТ11 EmeWmsНомер:"+ПТУ.EmeWmsНомер);
		//		КонецПопытки;
		//	КонецПопытки;
		//	
		//КонецЕсли;
		//НМА 14.12.16 <<
		
	//КонецЕсли;

	EmeWmsERPEngine.Success(ERPData);
	
КонецПроцедуры
////НЕ ИСПОЛЬЗУЕТСЯ c 14.08.17 <<


//НМА 01.07.17 по поступлениям товаров
//	Процедура ИмпортироватьПоступленияТоваровУслуг импортирует поступления товаров и услуг.
Процедура ИмпортироватьПоступленияТоваровУслугПоступления(ERPData) Экспорт
	
	ЗаголовкиСообщений = Новый ТаблицаЗначений();
	EmeWmsERPEngine.GetHeaders(ERPData, "wms", "erp", "receipt", "NEW,WRN", ЗаголовкиСообщений);
	ОшибкиОбработки = "";
	Счетчик = 0;
	Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
		
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней	
		EmeWmsERPEngine.BeginImport(ERPData, "wms", "erp", "receipt", ЗаголовокСообщения.id);
		Попытка
			НовоеСообщение = (ЗаголовокСообщения.state = "NEW");
			Трассировка = "";
			ТемаСообщения = "";
			НачатьТранзакцию();
			Попытка
				
				Пока EmeWmsERPEngine.NextHeaderLine(ERPData) Цикл
					Если ERPData.header.asn_id <> "" И
						Не EmeWmsУтилиты.ЭтоТрансфер(ERPData.header.asn_reg_no) И
						Не EmeWmsУтилиты.ЭтоВозврат(ERPData.header.asn_reg_no) Тогда
						ИмпортироватьПоступлениеТоваровУслугИзЗаказовПоставщику(ERPData, Трассировка, ТемаСообщения, ОшибкиОбработки);
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
			EmeWmsERPEngine.CommitImport(ERPData);
			Если НовоеСообщение И ТемаСообщения <> "" Тогда
				ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " 
					+ ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Трассировка;
				EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
			КонецЕсли;
		Исключение
			EmeWmsERPEngine.RollbackImport(ERPData);
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Импорт сообщения RECEIPT: " + Ошибка);
			ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " + ЗаголовокСообщения.id 
				+ Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Ошибка;
			EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Критическая ошибка экспорта сообщения RECEIPT", ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;

	Если Счетчик <> 0 Тогда
		Сообщить("Проимпортировали сообщения RECEIPT (" + Счетчик + "шт)");
	КонецЕсли;
	
	Если ОшибкиОбработки <> "" Тогда
		ОшибкиОбработки = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + ОшибкиОбработки;
		EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Ошибки экспорта сообщений RECEIPT", ОшибкиОбработки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИмпортироватьПоступленияТоваровУслугПоступления_new(ERPData) Экспорт
	
	ЗаголовкиСообщений = Новый ТаблицаЗначений();
	EmeWmsERPEngine.GetHeaders(ERPData, "wms", "erp", "receipt", "NEW,WRN", ЗаголовкиСообщений);
	ОшибкиОбработки = "";
	Счетчик = 0;
	Для Каждого ЗаголовокСообщения Из ЗаголовкиСообщений Цикл
		
		//	ВАЖНО! Транзакция источника сообщения должна быть внешней	
		EmeWmsERPEngine.BeginImport(ERPData, "wms", "erp", "receipt", ЗаголовокСообщения.id);
		Попытка
			НовоеСообщение = (ЗаголовокСообщения.state = "NEW");
			Трассировка = "";
			ТемаСообщения = "";
			НачатьТранзакцию();
			Попытка
				
				Пока EmeWmsERPEngine.NextHeaderLine(ERPData) Цикл
					Если ERPData.header.asn_id <> "" И
						Не EmeWmsУтилиты.ЭтоТрансфер(ERPData.header.asn_reg_no) И
						Не EmeWmsУтилиты.ЭтоВозврат(ERPData.header.asn_reg_no) Тогда
						ИмпортироватьПоступлениеТоваровУслуг_new(ERPData, Трассировка, ТемаСообщения, ОшибкиОбработки);
						Счетчик = Счетчик + 1;
					КонецЕсли
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение(ОписаниеОшибки());
			КонецПопытки;
			EmeWmsERPEngine.CommitImport(ERPData);
			Если НовоеСообщение И ТемаСообщения <> "" Тогда
				ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " 
					+ ЗаголовокСообщения.id + Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Трассировка;
				EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте(ТемаСообщения, ТекстСообщения);
			КонецЕсли;
		Исключение
			EmeWmsERPEngine.RollbackImport(ERPData);
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Импорт из EME.WMS",,,,"Импорт сообщения RECEIPT: " + Ошибка);
			ТекстСообщения = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + "ID: " + ЗаголовокСообщения.id 
				+ Символы.ПС + "No: " + ЗаголовокСообщения.asn_reg_no + Символы.ПС + Ошибка;
			EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Критическая ошибка экспорта сообщения RECEIPT", ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;

	Если Счетчик <> 0 Тогда
		Сообщить("Проимпортировали сообщения RECEIPT (" + Счетчик + "шт)");
	КонецЕсли;
	
	Если ОшибкиОбработки <> "" Тогда
		ОшибкиОбработки = "ИБ: " +  СтрокаСоединенияИнформационнойБазы() + Символы.ПС + ОшибкиОбработки;
		EmeWmsУтилиты.ОтправитьСообщениеПоЭлектроннойПочте("Ошибки экспорта сообщений RECEIPT", ОшибкиОбработки);
	КонецЕсли; 
	
КонецПроцедуры


//НМА 14.08.17 ASN (приход WMS) был создан из заказа поставщику >> 
//	Процедура ИмпортироватьПоступленияТоваровУслуг импортирует одно поступление товаров и услуг.
Процедура ИмпортироватьПоступлениеТоваровУслугИзЗаказовПоставщику(ERPData, Трассировка = "", ТемаСообщения = "", ОшибкиОбработки = "")
	
	//*** Делаем проверки ***

	НомерПриходаEME  			= ERPData.header.id;                 //	Номер приходного документа EME
	ОснованиеПрихода			= ERPData.header.reason_code;		 //	Код основания прихода
	ДатаДокумента     			= ERPData.header.created_at;         //	Время создания документа
	СкладКод     	  			= ERPData.header.whs_to_code;        //	Код склада приёмки
	УИД_Организация   			= ERPData.header.vendor_to_code;     //	Организация, которой пренадлежит товар
	Партнер						= ERPData.header.supplier_name;      //	Полное наименование организации поставщика
	КонтрагентКод    			= ERPData.header.supplier_code;      //	Код организации поставщика
	ЭтоВозврат					= ERPData.header.is_return;          //	Если это возврат

	//	Проверим наличие поступления
	Если Не ЗначениеЗаполнено(ERPData.header.asn_id) Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "ASNNUL");
		Возврат;
	КонецЕсли;
	
	ЗапросПоНомеруЕМЕ = Новый Запрос();
	ЗапросПоНомеруЕМЕ.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.EmeWmsНомер = &НомерПриходаEME И
		|	НЕ ПоступлениеТоваровУслуг.ПометкаУдаления";
	ЗапросПоНомеруЕМЕ.УстановитьПараметр("НомерПриходаEME", НомерПриходаEME);
	ВыборкаПоНомеруЕМЕ = ЗапросПоНомеруЕМЕ.Выполнить().Выбрать();
	Если ВыборкаПоНомеруЕМЕ.Следующий() Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "IDEXST");
		Возврат;
	КонецЕсли;
	
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		//СсылкаНаПТУ = EmeWmsУтилиты.ПолучитьПоступлениеТоваров(ERPData.asns.id);        //НМА 14.08.17
		СсылкаНаЗаказПоставщику = EmeWmsУтилиты.ПолучитьЗаказПоставщику(ERPData.asns.id); //НМА 14.08.17
		//НМА 16.06.17 Проверка на битую ссылку (<Объект не найден>) >>
		//Если СсылкаНаЗаказПоставщику.Пустая() Тогда
		//Если СсылкаНаПТУ.Пустая() или СсылкаНаПТУ.ПолучитьОбъект()=Неопределено Тогда                       //НМА 14.08.17
		Если СсылкаНаЗаказПоставщику.Пустая() или СсылкаНаЗаказПоставщику.ПолучитьОбъект()=Неопределено Тогда //НМА 14.08.17
			//НМА 16.06.17 Проверка на битую ссылку (<Объект не найден>) <<
		    //EmeWmsERPEngine.ErrorChild(ERPData, "ASNBAD");
			Возврат;
			//ИначеЕсли СсылкаНаЗаказПоставщику.Статус <> Перечисления.СтатусыЗаказовПоставщикам.КПоступлению Тогда
			//	EmeWmsERPEngine.ErrorChild(ERPData, "STATUS");
		Иначе
			//Организация = СсылкаНаПТУ.Организация; //НМА 14.08.17
			Организация = СсылкаНаЗаказПоставщику.Организация; //НМА 14.08.17
		КонецЕсли;	
	КонецЦикла;

	//НМА 12.12.16 >>
	ТЗИзWMS = Новый ТаблицаЗначений;
	КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);  
	ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	ТЗИзWMS.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗИзWMS.Колонки.Добавить("КоличествоПринято",ОписаниеЧисла);
	//НМА 07.07.17
	ТЗИзWMS.Колонки.Добавить("КоличествоБрака",ОписаниеЧисла); 
	ТЗИзWMS.Колонки.Добавить("СрокГодности",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("ДатаПроизводства",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("Штрихкод",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	ТЗИзWMS.Колонки.Добавить("ТипШтрихкода",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ТипыШтрихкодов"));
	//ТЗИзWMS.Колонки.Добавить("НомерГТДПоставщика",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	//ТЗИзWMS.Колонки.Добавить("КодНоменклатурыПоставщика",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(20,0)));
	//НМА 07.07.17
	//ТЗИзWMS.Колонки.Добавить("КачествоТовара",Новый ОписаниеТипов("Строка"),,150); //НМА 07.07.17  //НМА 15.08.17
	ТЗИзWMS.Колонки.Добавить("ЭтоБрак",Новый ОписаниеТипов("Булево"));
	ТЗИзWMS.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТолькоEMEСклад = Ложь;
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	EmeWmsУтилиты.ПолучитьТЗИзWMS(ERPData, ТЗИзWMS, ТолькоEMEСклад);
	
	//лОтбор = Новый Структура;
	//лОтбор.Вставить("Штрихкод","");
	//СтрокиБезШК = ТЗИзWMS.НайтиСтроки(лОтбор);
	//Если СтрокиБезШК.Количество()>0 Тогда
	//	ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПоставщику, , "По заказу поставщику " + СсылкаНаЗаказПоставщику + " не все ШК заполнены");
	//	Возврат;
	//КонецЕсли;
	
	//НМА 12.12.16 <<
	//НМА 31.07.17 >>
	ТЗИзWMS.Свернуть("Номенклатура,СрокГодности,ДатаПроизводства,Штрихкод,ТипШтрихкода,ЕдиницаИзмерения,ЭтоБрак","КоличествоПринято,КоличествоБрака");
	ТЗИзWMS.Сортировать("КоличествоПринято Убыв, Номенклатура Возр, СрокГодности Возр"); //НМА  29.08.17
	//НМА 31.07.17 <<
	
	Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
		Возврат;
	КонецЕсли;
	
	//НМА 04.09.17
	//СрокиГодностиВСериях = Ложь; //Истина;
	СрокиГодностиВСериях = Константы.EmeWmsСрокиГодностиВСериях.Получить();
	//НМА 04.09.17
	
	////ОдноПТУНаЗаказ = Ложь; 
	//ОдноПТУНаЗаказ = ИСТИНА;
	//
	//ПТУ = Неопределено;
	
	//*** Проверки сделали, пишем в базу данных 1C ***
	
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		
		СсылкаНаЗаказПоставщику = EmeWmsУтилиты.ПолучитьЗаказПоставщику(ERPData.asns.id);  //НМА 14.08.17
		//СсылкаНаПТУ = EmeWmsУтилиты.ПолучитьПоступлениеТоваров(ERPData.asns.id); //НМА 14.08.17
		
		//Если СсылкаНаПТУ<>Неопределено и СсылкаНаПТУ<>Документы.ПоступлениеТоваровУслуг.ПустаяСсылка() Тогда  //14.08.17
		Если СсылкаНаЗаказПоставщику<>Неопределено и СсылкаНаЗаказПоставщику<>Документы.ЗаказПоставщику.ПустаяСсылка() Тогда //НМА 14.08.17
		
			//ПоступлениеТоваровУслуг
						
			//ПТУ = СсылкаНаПТУ.ПолучитьОбъект(); //НМА 14.08.17
			ПТУ = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			ПТУ.Заполнить(СсылкаНаЗаказПоставщику);  //НМА 16.08.17
			СсылкаНаПТУ = ПТУ.Ссылка; //НМА 14.08.17
			ПТУ.Дата = ТекущаяДата();
			ПТУ.ДатаС = ТекущаяДата();
			ПТУ.ДатаПо = ТекущаяДата();
			ПТУ.ОтражатьВУправленческомУчете = Истина;
			//ПТУ.УчитыватьНДС = Истина; //НМА 16.08.17
			ПТУ.Комментарий = ПТУ.Комментарий+"Создан на основании заказа поставщику №"+СсылкаНаЗаказПоставщику.Номер+" от "+СсылкаНаЗаказПоставщику.Дата+" при приемке из WMS!";  //НМА 25.09.17
			ПТУ.Комментарий = ПТУ.Комментарий+" "+СсылкаНаЗаказПоставщику.Комментарий;  //НМА 25.09.17
			
			ПТУ.Товары.Очистить(); //НМА 16.08.17
			ПТУ_ИзлишкиНедостача = ПТУ.Скопировать(); //НМА 14.08.17

			ПТУ.EmeWmsНомер	= НомерПриходаEME;

			//ПТУ_ИзлишкиНедостача = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент(); //НМА 16.08.17
			//ПТУ_ИзлишкиНедостача.Заполнить(СсылкаНаПТУ); //НМА 14.08.17
			ПТУ_ИзлишкиНедостача.Дата   = ТекущаяДата();
			ПТУ_ИзлишкиНедостача.ДатаС  = ТекущаяДата();
			ПТУ_ИзлишкиНедостача.ДатаПо = ТекущаяДата();
			ПТУ_ИзлишкиНедостача.ОтражатьВУправленческомУчете = Истина;
			//ПТУ_ИзлишкиНедостача.УчитыватьНДС = Истина;
			//ПТУ_ИзлишкиНедостача.Товары.Очистить();   //НМА 14.08.17
			 
			ПТУ_ИзлишкиНедостача.СтатусПоступленияТоваров = Перечисления.СтатусыПоступленийТоваровИУслуг.НаСогласовании;
			//ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !Создан на основании поступления №"+СсылкаНаПТУ.Номер+" от "+СсылкаНаПТУ.Дата+" при приемке из WMS!";  //НМА 14.08.17
			//ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !Создан на основании заказа поставщику №"+СсылкаНаЗаказПоставщику.Номер+" от "+СсылкаНаЗаказПоставщику.Дата+" при приемке из WMS!";  //НМА 14.08.17
			ПТУ_ИзлишкиНедостача.Комментарий = "! "+ПТУ_ИзлишкиНедостача.Комментарий;  //НМА 26.09.17 
			
			//ПТУ_ИзлишкиНедостача.СкладОрдер = ПТУ.СкладОрдер; //НМА 14.08.17
			ПТУ.СкладОрдер = СсылкаНаЗаказПоставщику.Склад; //НМА 14.08.17
			ПТУ_ИзлишкиНедостача.СкладОрдер = СсылкаНаЗаказПоставщику.Склад; //НМА 14.08.17

			// заполним оприходованные на склад позиции и проверим количества и единицы измерения
			//НМА 13.12.16 >>
			//ПТУ_ТЧТовары = ПТУ.Товары.Выгрузить(); //НМА 14.08.17
			ПТУ_ТЧТовары = СсылкаНаЗаказПоставщику.Товары.Выгрузить(); //НМА 14.08.17
			ПТУ_ТЧТовары.Сортировать("Количество Убыв, Номенклатура Возр");  //НМА  29.08.17
			
			Для Каждого СтрокаТЗИзWMS Из ТЗИзWMS Цикл
				
				НайденнаяСтрока = ПТУ_ТЧТовары.Найти(СтрокаТЗИзWMS.Номенклатура, "Номенклатура");
				
				Если ЗначениеЗаполнено(СтрокаТЗИзWMS.Номенклатура) Тогда
					
					//Качество - новый
					Если СтрокаТЗИзWMS.КоличествоПринято>0 и СтрокаТЗИзWMS.ЭтоБрак=Ложь Тогда  
						НоменклатураСтроки = СтрокаТЗИзWMS.Номенклатура;
						СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
						
						Если НайденнаяСтрока<>Неопределено Тогда  //Качество - новый, был в заказе
							ОтборСтрокГТД = Новый Структура();
							ОтборСтрокГТД.Вставить("Номенклатура",НайденнаяСтрока.Номенклатура);
							МассивСтрокГТД = ПТУ_ТЧТовары.НайтиСтроки(ОтборСтрокГТД);
							СтрокаПТУКоличествоОстатокГТД = СтрокаТЗИзWMS.КоличествоПринято;
							Для каждого НайденнаяСтрокаНоменклатурыГТД из МассивСтрокГТД Цикл 
								//Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
								//	Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.СерииНоменклатуры) Тогда
								//		СерияГТД = НайденнаяСтрокаНоменклатурыГТД.СерияНоменклатуры.ПолучитьОбъект();
								//		СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
								//		СерияГТД.Записать();
								//		СерияНоменклатуры = СерияГТД.Ссылка; 
								//	Иначе
								//		СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy"),Истина,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
								//		Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
								//			СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
								//			СерияСрокГодности.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
								//			СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy");
								//			СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
								//			СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
								//			СерияСрокГодности.Записать();
								//			СерияНоменклатуры = СерияСрокГодности.Ссылка;
								//			ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
								//		КонецЕсли;
								//	КонецЕсли;
								//	////Штрихкод
								//	СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								//КонецЕсли;
								
								//НМА 29.08.17
								//НайденнаяСтрокаНоменклатурыГТДНомерГТДПоставщика = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
								ОтборСтрокГТД_Повторно = Новый Структура();
								ОтборСтрокГТД_Повторно.Вставить("Номенклатура",НайденнаяСтрока.Номенклатура);
								ОтборСтрокГТД_Повторно.Вставить("НомерГТДПоставщика",НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика);
								МассивСтрокГТД_Повторно = ПТУ.Товары.НайтиСтроки(ОтборСтрокГТД_Повторно);
								Если МассивСтрокГТД_Повторно.Количество()>0 и МассивСтрокГТД.Количество()>1 Тогда
									Продолжить;
								//ИначеЕсли МассивСтрокГТД_Повторно.Количество()>0 и МассивСтрокГТД.Количество()=1 Тогда
								//	//не было в заказе с данным сроком годности
								//   	Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
								//		СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,СтрокаТЗИзWMS.Номенклатура);
								//		СерияНоменклатуры = СерияСрокГодности.Ссылка;
								//		Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
								//			СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
								//			СерияСрокГодности.Владелец     = СтрокаТЗИзWMS.Номенклатура;
								//			СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
								//			СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
								//			СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
								//			СерияСрокГодности.Записать();
								//			СерияНоменклатуры = СерияСрокГодности.Ссылка;
								//			ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
								//		КонецЕсли;
								//		////Штрихкод
								//		СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								//	КонецЕсли;
								//	
								//	СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
								//	СтрокаПТУ_ИзлишкиНедостача.КачествоТовара    = Справочники.Качество.Новый;
								//	СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = НоменклатураСтроки;
								//	СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
								//	СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
								//	
								//	СтрокаПТУ_ИзлишкиНедостача.Цена             = 0.01;
								//	СтрокаПТУ_ИзлишкиНедостача.Сумма            = 0;
								//	СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = 0;
								//	СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = 0;
								//	СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = СтрокаПТУ_ИзлишкиНедостача.Номенклатура.СтавкаНДС; //НМА 19.06.17
								//	СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
								//	СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаТЗИзWMS.КоличествоПринято;
								//	СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
								//	ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !В строке №"+СтрокаПТУ_ИзлишкиНедостача.НомерСтроки+" '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в заказе)!";
								//	
								//	СтрокаПТУ_ИзлишкиНедостача.СерияНоменклатуры = СерияНоменклатуры;
								//	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
								//	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
								//	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
								//	Продолжить;
								КонецЕсли;
								//НМА 29.08.17
								
								Если СрокиГодностиВСериях Тогда //НМА 04.09.17 >>
									Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика) Тогда
										НомерГТД = Справочники.НомераГТД.НайтиПоКоду(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика);
										Если НомерГТД <> Справочники.НомераГТД.ПустаяСсылка() Тогда
											СерияГТД = Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД",НомерГТД,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
											Если СерияГТД<>Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
												Если Не ЗначениеЗаполнено(СерияГТД.СрокГодности) Тогда
													СерияГТД = СерияГТД.ПолучитьОбъект();
													СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
													СерияГТД.Записать();
													СерияНоменклатуры = СерияГТД.Ссылка;
												ИначеЕсли СерияГТД.СрокГодности<>СтрокаТЗИзWMS.СрокГодности Тогда
													//не было в заказе с данным сроком годности
													Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
														СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,СтрокаТЗИзWMS.Номенклатура);
														СерияНоменклатуры = СерияСрокГодности.Ссылка;
														Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
															СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
															СерияСрокГодности.Владелец     = СтрокаТЗИзWMS.Номенклатура;
															СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
															СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
															СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
															СерияСрокГодности.Записать();
															СерияНоменклатуры = СерияСрокГодности.Ссылка;
															ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
														КонецЕсли;
														////Штрихкод
														СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
													КонецЕсли;
													
													СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
													СтрокаПТУ_ИзлишкиНедостача.КачествоТовара    = Справочники.Качество.Новый;
													СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = НоменклатураСтроки;
													СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
													СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
													
													СтрокаПТУ_ИзлишкиНедостача.Цена             = 0.01;
													СтрокаПТУ_ИзлишкиНедостача.Сумма            = 0;
													СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = 0;
													СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = 0;
													СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = СтрокаПТУ_ИзлишкиНедостача.Номенклатура.СтавкаНДС; //НМА 19.06.17
													СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
													СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаТЗИзWMS.КоличествоПринято;
													СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
													ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !В строке №"+СтрокаПТУ_ИзлишкиНедостача.НомерСтроки+" '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в заказе)!";
													
													СтрокаПТУ_ИзлишкиНедостача.СерияНоменклатуры = СерияНоменклатуры;
													ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
													ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
													ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
													Продолжить;
												Иначе
													СерияНоменклатуры = СерияГТД.Ссылка;
												КонецЕсли;
											Иначе
												СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
												СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
												//НМА 25.08.17 >>
												Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
													СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
												Иначе
													СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
												КонецЕсли;
												СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
												//НМА 25.08.17 <<
												СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
												СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
												СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
												СерияГТД.Записать();
												ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
												СерияНоменклатуры = СерияГТД.Ссылка;
											КонецЕсли;
										Иначе
											НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
											НомерГТД.Код = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
											НомерГТД.Комментарий = "Создан автоматически при обмене с WMS "+ТекущаяДата();
											НомерГТД.Записать();
											ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.НомераГТД, НомерГТД.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
											СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
											СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
											//НМА 25.08.17 >>
											Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
											Иначе
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
											КонецЕсли;
											СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
											//НМА 25.08.17 <<
											СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
											СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
											СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
											СерияГТД.Записать();
											ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
											СерияНоменклатуры = СерияГТД.Ссылка;
										КонецЕсли;
									ИначеЕсли Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда //НМА 15.08.17
										СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
										Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
											СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
											СерияСрокГодности.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
											СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
											СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
											СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
											СерияСрокГодности.Записать();
											ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияСрокГодности.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
										КонецЕсли;
										СерияНоменклатуры = СерияСрокГодности.Ссылка;
									КонецЕсли;
									////Штрихкод
									СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
									
								////НМА 04.09.17 СрокиГодности НЕ в сериях
								ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика) Тогда
									НомерГТД = Справочники.НомераГТД.НайтиПоКоду(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика);
									Если НомерГТД <> Справочники.НомераГТД.ПустаяСсылка() Тогда
										СерияГТД = Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД",НомерГТД,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
										Если СерияГТД<>Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
											СерияНоменклатуры = СерияГТД.Ссылка;
										Иначе
											СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
											СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
											//НМА 25.08.17 >>
											Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
											Иначе
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
											КонецЕсли;
											СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
											//НМА 25.08.17 <<
											СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
											//СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности; ////НМА 04.09.17 СрокиГодности НЕ в сериях
											СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
											СерияГТД.Записать();
											ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
											СерияНоменклатуры = СерияГТД.Ссылка;
										КонецЕсли;
										//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
									Иначе
										НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
										НомерГТД.Код = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
										НомерГТД.Комментарий = "Создан автоматически при обмене с WMS "+ТекущаяДата();
										НомерГТД.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.НомераГТД, НомерГТД.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
										СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
										//НМА 25.08.17 >>
										Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
										Иначе
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
										КонецЕсли;
										СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
										//НМА 25.08.17 <<
										СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
										//СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;  ////НМА 04.09.17 СрокиГодности НЕ в сериях
										СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияГТД.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
										СерияНоменклатуры = СерияГТД.Ссылка;
										//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
									КонецЕсли;
								КонецЕсли;////НМА 04.09.17 <<
								
								СтрокаПТУ = ПТУ.Товары.Добавить();
								СтрокаПТУ.КачествоТовара    = Справочники.Качество.Новый;
								СтрокаПТУ.Номенклатура      = НоменклатураСтроки;
								СтрокаПТУ.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
								СтрокаПТУ.Коэффициент       = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
								
								СтрокаПТУ.Цена             = НайденнаяСтрокаНоменклатурыГТД.Цена;
								//СтрокаПТУ.Сумма            = НайденнаяСтрока.Сумма;
								СтрокаПТУ.СтавкаНДС        = НайденнаяСтрокаНоменклатурыГТД.СтавкаНДС; //НМА 19.06.17
								//СтрокаПТУ.ЦенаИзДокумента  = НайденнаяСтрокаНоменклатурыГТД.ЦенаИзДокумента;
								//СтрокаПТУ.СуммаИзДокумента = НайденнаяСтрокаНоменклатурыГТД.СуммаИзДокумента;
								//НМА 18.07.17
								Если СтрокаТЗИзWMS.ЕдиницаИзмерения<>НайденнаяСтрокаНоменклатурыГТД.ЕдиницаИзмерения Тогда  
									Если СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент<>0 Тогда
										СтрокаПТУ.КоличествоПлан    = Окр(НайденнаяСтрокаНоменклатурыГТД.Количество*НайденнаяСтрокаНоменклатурыГТД.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент,3);
										СтрокаПТУ.Количество        = СтрокаПТУ.КоличествоПлан; //НМА 24.08.17
										СтрокаПТУ.Цена              = Окр(НайденнаяСтрокаНоменклатурыГТД.Цена*СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент/НайденнаяСтрокаНоменклатурыГТД.ЕдиницаИзмерения.Коэффициент,2);
										СтрокаПТУ.Сумма             = СтрокаПТУ.Цена*СтрокаПТУ.Количество;
									Иначе
										СтрокаПТУ.КоличествоПлан    = 0;
										СтрокаПТУ.Количество        = 0;
										СтрокаПТУ.Сумма             = 0;
									КонецЕсли;
								Иначе
									СтрокаПТУ.КоличествоПлан    = НайденнаяСтрокаНоменклатурыГТД.Количество;
									СтрокаПТУ.Количество        = НайденнаяСтрокаНоменклатурыГТД.Количество; //НМА 24.08.17
									СтрокаПТУ.Сумма             = НайденнаяСтрокаНоменклатурыГТД.Сумма;
								КонецЕсли;
								//НМА 18.07.17
								//НМА 15.08.17
								СтрокаПТУ.ЦенаИзДокумента  = СтрокаПТУ.Цена;
								СтрокаПТУ.СуммаИзДокумента = СтрокаПТУ.Сумма;
								//НМА 15.08.17
								
								//НМА 27.07.17
								//Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.СерияНоменклатуры) Тогда
								//	СтрокаПТУ.СерияНоменклатуры = НайденнаяСтрокаНоменклатурыГТД.СерияНоменклатуры;
								//Иначе 
								СтрокаПТУ.СерияНоменклатуры = СерияНоменклатуры;
								//КонецЕсли;
								СтрокаПТУ.КодНоменклатурыПоставщика = НайденнаяСтрокаНоменклатурыГТД.КодНоменклатурыПоставщика;
								СтрокаПТУ.НаименованиеНоменклатурыПоставщика = НайденнаяСтрокаНоменклатурыГТД.НаименованиеНоменклатурыПоставщика;
								СтрокаПТУ.НомерГТДПоставщика = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
								
								Если СтрокаПТУКоличествоОстатокГТД - СтрокаПТУ.Количество < 0 Тогда
									СтрокаПТУ.КоличествоПринято = СтрокаПТУКоличествоОстатокГТД;
									//СтрокаПТУ.Количество        = СтрокаПТУКоличествоОстатокГТД;
									//СтрокаПТУ.КоличествоПлан    = СтрокаПТУКоличествоОстатокГТД;
								ИначеЕсли СтрокаПТУКоличествоОстатокГТД=0 Тогда
									СтрокаПТУКоличествоОстатокГТД = СтрокаПТУКоличествоОстатокГТД - СтрокаПТУ.Количество;
									СтрокаПТУ.КоличествоПринято = СтрокаПТУ.Количество;
								ИначеЕсли СтрокаПТУКоличествоОстатокГТД>0 Тогда
									Если МассивСтрокГТД.Количество() > 1 Тогда 
										СтрокаПТУКоличествоОстатокГТД = СтрокаПТУКоличествоОстатокГТД - СтрокаПТУ.Количество;
										СтрокаПТУ.КоличествоПринято = СтрокаПТУ.Количество;
									Иначе
										СтрокаПТУ.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
									КонецЕсли;
								КонецЕсли;
								//НМА 27.07.17
								//НМА 30.08.17 >>
								ОтборСтрокНоменклатурыБрака = Новый Структура(); //НМА 25.09.17
								ОтборСтрокНоменклатурыБрака.Вставить("Номенклатура",НайденнаяСтрокаНоменклатурыГТД.Номенклатура); //НМА 25.09.17
								ОтборСтрокНоменклатурыБрака.Вставить("ЭтоБрак",Истина); //НМА 25.09.17
								ТЗИзWMS_ОбщееКоличествоНоменклатурыБрака = ТЗИзWMS.Скопировать(ОтборСтрокНоменклатурыБрака,"КоличествоПринято"); //НМА 25.09.17 
								ОбщееКоличествоНоменклатурыБракаИзWMS = ТЗИзWMS_ОбщееКоличествоНоменклатурыБрака.Итог("КоличествоПринято"); //НМА 25.09.17
								Если СтрокаТЗИзWMS.КоличествоБрака>0 Тогда //есть брак в таблице defect_lines
									//СтрокаПТУ.Количество        = СтрокаПТУ.КоличествоПлан - (СтрокаТЗИзWMS.КоличествоПринято - СтрокаТЗИзWMS.КоличествоБрака); //НМА 30.08.17
									//СтрокаПТУ.КоличествоПринято = СтрокаПТУ.Количество + СтрокаТЗИзWMS.КоличествоБрака; //НМА 30.08.17
									СтрокаПТУ.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято; //НМА 25.09.17
									Если СтрокаПТУ.КоличествоПлан = СтрокаТЗИзWMS.КоличествоПринято + СтрокаТЗИзWMS.КоличествоБрака Тогда //НМА 25.09.17
										СтрокаПТУ.Количество        = СтрокаТЗИзWMS.КоличествоПринято; //НМА 25.09.17
									ИначеЕсли СтрокаПТУ.КоличествоПлан > СтрокаТЗИзWMS.КоличествоПринято + СтрокаТЗИзWMS.КоличествоБрака Тогда //НМА 25.09.17
										СтрокаПТУ.Количество        = СтрокаПТУ.КоличествоПлан - СтрокаТЗИзWMS.КоличествоБрака; //НМА 25.09.17
									ИначеЕсли СтрокаПТУ.КоличествоПлан < СтрокаТЗИзWMS.КоличествоПринято + СтрокаТЗИзWMS.КоличествоБрака Тогда //НМА 25.09.17
										Если СтрокаТЗИзWMS.КоличествоПринято > СтрокаПТУ.КоличествоПлан Тогда //НМА 25.09.17
											СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПлан; //НМА 25.09.17
										Иначе //НМА 25.09.17
											СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПринято; //НМА 25.09.17
										Конецесли; //НМА 25.09.17
									КонецЕсли;
								ИначеЕсли ОбщееКоличествоНоменклатурыБракаИзWMS>0 Тогда //есть брак со статусом B
									СтрокаПТУ.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято; //НМА 25.09.17
									Если СтрокаПТУ.КоличествоПлан = СтрокаТЗИзWMS.КоличествоПринято + ОбщееКоличествоНоменклатурыБракаИзWMS Тогда //НМА 25.09.17
										СтрокаПТУ.Количество        = СтрокаТЗИзWMS.КоличествоПринято; //НМА 25.09.17
									ИначеЕсли СтрокаПТУ.КоличествоПлан > СтрокаТЗИзWMS.КоличествоПринято + ОбщееКоличествоНоменклатурыБракаИзWMS Тогда //НМА 25.09.17
										СтрокаПТУ.Количество        = СтрокаПТУ.КоличествоПлан - ОбщееКоличествоНоменклатурыБракаИзWMS; //НМА 25.09.17
									ИначеЕсли СтрокаПТУ.КоличествоПлан < СтрокаТЗИзWMS.КоличествоПринято + ОбщееКоличествоНоменклатурыБракаИзWMS Тогда //НМА 25.09.17
										Если СтрокаТЗИзWMS.КоличествоПринято > СтрокаПТУ.КоличествоПлан Тогда //НМА 25.09.17
											СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПлан; //НМА 25.09.17
										Иначе //НМА 25.09.17
											СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПринято; //НМА 25.09.17
										Конецесли; //НМА 25.09.17
									КонецЕсли;
								//Иначе
								//	ТЗИзWMS_ОбщееКоличествоНоменклатуры = ТЗИзWMS.Скопировать(ОтборСтрокГТД,"КоличествоПринято");
								//	ОбщееКоличествоНоменклатурыИзWMS = ТЗИзWMS_ОбщееКоличествоНоменклатуры.Итог("КоличествоПринято");
								//	Если ОбщееКоличествоНоменклатурыИзWMS>СтрокаПТУ.КоличествоПринято Тогда
								//		СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПринято;
								//	КонецЕсли;
								КонецЕсли;
								//НМА 30.08.17 <<
								ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ, ПТУ);
								ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ, ПТУ);
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ, ПТУ);
								Если СтрокаПТУ.КоличествоПринято = 0 тогда  //НМА 29.08.17
									ПТУ.Товары.Удалить(СтрокаПТУ);          //НМА 29.08.17
								КонецЕсли;                                  //НМА 29.08.17
							КонецЦикла;
							
						Иначе //Качество - новый, не было в заказе
							
							Если СрокиГодностиВСериях Тогда //НМА 04.09.17
								Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
									СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,СтрокаТЗИзWMS.Номенклатура);
									СерияНоменклатуры = СерияСрокГодности.Ссылка;
									Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
										СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияСрокГодности.Владелец     = СтрокаТЗИзWMS.Номенклатура;
										СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
										СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
										СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияСрокГодности.Записать();
										СерияНоменклатуры = СерияСрокГодности.Ссылка;
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
									КонецЕсли;
									////Штрихкод
									СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								КонецЕсли;
							Иначе //НМА 04.09.17
								//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
							КонецЕсли; //НМА 04.09.17
						
							СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
							СтрокаПТУ_ИзлишкиНедостача.КачествоТовара    = Справочники.Качество.Новый;
							СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = НоменклатураСтроки;
							СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
							СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
							
							СтрокаПТУ_ИзлишкиНедостача.Цена             = 0.01;
							СтрокаПТУ_ИзлишкиНедостача.Сумма            = 0;
							СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = 0;
							СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = 0;
							СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = СтрокаПТУ_ИзлишкиНедостача.Номенклатура.СтавкаНДС; //НМА 19.06.17
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
							СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаТЗИзWMS.КоличествоПринято;
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
							ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !В строке №"+СтрокаПТУ_ИзлишкиНедостача.НомерСтроки+" '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в заказе)!";
							
							СтрокаПТУ_ИзлишкиНедостача.СерияНоменклатуры = СерияНоменклатуры;
							ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						КонецЕсли;
						
					КонецЕсли;

					
					//Качество - брак
					//Если СтрокаТЗИзWMS.КоличествоБрака>0 или СтрокаТЗИзWMS.КачествоТовара<>"N" Тогда //НМА 15.08.17
					Если СтрокаТЗИзWMS.КоличествоБрака>0 или СтрокаТЗИзWMS.ЭтоБрак Тогда //НМА 15.08.17
						
						//НоваяНоменклатураПоБраку = СтрокаТЗИзWMS.Номенклатура;
						НоменклатураПоБраку = СтрокаТЗИзWMS.Номенклатура;
						ЕдиницаИзмеренияНоменклатурыПоБраку = СтрокаТЗИзWMS.ЕдиницаИзмерения;
						СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
						
						Если Справочники.Склады.НайтиПоНаименованию("Брак",Истина)<>Справочники.Склады.ПустаяСсылка() Тогда
							ПТУ_ИзлишкиНедостача.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
							ПТУ_ИзлишкиНедостача.СкладОрдер = Справочники.Склады.НайтиПоНаименованию("Брак",Истина);
						КонецЕсли;
						
						СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
						СтрокаПТУ_ИзлишкиНедостача.КачествоТовара = Справочники.Качество.НайтиПоНаименованию("Брак",Истина); //НМА 17.07.17
						//СтрокаПТУ_ИзлишкиНедостача.КачествоТовара = Справочники.Качество.Новый;   //НМА 17.07.17
						
						ОтборСтрокГТД = Новый Структура();
						ОтборСтрокГТД.Вставить("Номенклатура",НайденнаяСтрока.Номенклатура);
						МассивСтрокГТД = ПТУ_ТЧТовары.НайтиСтроки(ОтборСтрокГТД);
						СтрокаПТУКоличествоОстатокГТД = СтрокаТЗИзWMS.КоличествоПринято;
						Для каждого НайденнаяСтрокаНоменклатурыГТД из МассивСтрокГТД Цикл
							Если СрокиГодностиВСериях Тогда //НМА 04.09.17 >>
								Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика) Тогда
									НомерГТД = Справочники.НомераГТД.НайтиПоКоду(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика);
									Если НомерГТД <> Справочники.НомераГТД.ПустаяСсылка() Тогда
										СерияГТД = Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД",НомерГТД,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
										Если СерияГТД<>Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
											СерияГТД = СерияГТД.ПолучитьОбъект();
											СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
											СерияГТД.Записать();
											СерияНоменклатуры = СерияГТД.Ссылка; 
										Иначе
											СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
											СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
											//НМА 25.08.17 >>
											Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
											Иначе
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
											КонецЕсли;
											СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
											//НМА 25.08.17 <<
											СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
											СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
											СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
											СерияГТД.Записать();
											ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
											СерияНоменклатуры = СерияГТД.Ссылка;
										КонецЕсли;
									Иначе
										НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
										НомерГТД.Код = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
										НомерГТД.Комментарий = "Создан автоматически при обмене с WMS "+ТекущаяДата();
										НомерГТД.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.НомераГТД, НомерГТД.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
										СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
										//НМА 25.08.17 >>
										Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
										Иначе
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
										КонецЕсли;
										СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
										//НМА 25.08.17 <<
										СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
										СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
										СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияГТД.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
										СерияНоменклатуры = СерияГТД.Ссылка;
									КонецЕсли;
								ИначеЕсли Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда //НМА 15.08.17
									СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
									Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
										СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияСрокГодности.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
										СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
										СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
										СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияСрокГодности.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияСрокГодности.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
									КонецЕсли;
									СерияНоменклатуры = СерияСрокГодности.Ссылка;
								КонецЕсли;
								////Штрихкод
								СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								
							////НМА 04.09.17 СрокиГодности НЕ в сериях
							ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика) Тогда
								НомерГТД = Справочники.НомераГТД.НайтиПоКоду(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика);
								Если НомерГТД <> Справочники.НомераГТД.ПустаяСсылка() Тогда
									СерияГТД = Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД",НомерГТД,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
									Если СерияГТД<>Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
										СерияНоменклатуры = СерияГТД.Ссылка; 
									Иначе
										СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
										//НМА 25.08.17 >>
										Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
										Иначе
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
										КонецЕсли;
										СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
										//НМА 25.08.17 <<
										СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
										//СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности; ////НМА 04.09.17 СрокиГодности НЕ в сериях
										СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияГТД.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
										СерияНоменклатуры = СерияГТД.Ссылка;
									КонецЕсли;
									//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
								Иначе
									НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
									НомерГТД.Код = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
									НомерГТД.Комментарий = "Создан автоматически при обмене с WMS "+ТекущаяДата();
									НомерГТД.Записать();
									ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.НомераГТД, НомерГТД.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
									СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
									СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
									//НМА 25.08.17 >>
									Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
										СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
									Иначе
										СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
									КонецЕсли;
									СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
									//НМА 25.08.17 <<
									СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
									//СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности; ////НМА 04.09.17 СрокиГодности НЕ в сериях
									СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
									СерияГТД.Записать();
									ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
									СерияНоменклатуры = СерияГТД.Ссылка;
									//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
								КонецЕсли;
							КонецЕсли;//НМА 04.09.17 <<
						
						КонецЦикла;
						
						СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = НоменклатураПоБраку;
						СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = ЕдиницаИзмеренияНоменклатурыПоБраку;
						СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = ЕдиницаИзмеренияНоменклатурыПоБраку.Коэффициент;
						
						Если НайденнаяСтрока<>Неопределено Тогда //Качество - брак, был в заказе
							СтрокаПТУ_ИзлишкиНедостача.Цена             = НайденнаяСтрока.Цена;
							//СтрокаПТУ_ИзлишкиНедостача.Сумма            = НайденнаяСтрока.Сумма;
							СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = НайденнаяСтрока.СтавкаНДС; //НМА 19.06.17
							//СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = НайденнаяСтрока.ЦенаИзДокумента;
							//СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = НайденнаяСтрока.СуммаИзДокумента;
							//НМА 18.07.17
							Если СтрокаТЗИзWMS.ЕдиницаИзмерения<>НайденнаяСтрока.ЕдиницаИзмерения Тогда  
								Если СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент<>0 Тогда
									СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = Окр(НайденнаяСтрока.Количество*НайденнаяСтрока.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент,3);
									//НМА 24.08.17 >>
									Если СтрокаТЗИзWMS.КоличествоБрака>0 Тогда
										СтрокаПТУ_ИзлишкиНедостача.Количество    = СтрокаТЗИзWMS.КоличествоБрака; //НМА 24.08.17
										СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоБрака;
									Иначе	
										//СтрокаПТУ_ИзлишкиНедостача.Количество    = СтрокаПТУ.КоличествоПлан - СтрокаТЗИзWMS.КоличествоПринято; //НМА 24.08.17
										СтрокаПТУ_ИзлишкиНедостача.Количество    = СтрокаТЗИзWMS.КоличествоПринято; //НМА 26.09.17
										СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
									КонецЕсли;
									//НМА 24.08.17 <<
									СтрокаПТУ_ИзлишкиНедостача.Цена              = Окр(НайденнаяСтрока.Цена*СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент/НайденнаяСтрока.ЕдиницаИзмерения.Коэффициент,2);
									СтрокаПТУ_ИзлишкиНедостача.Сумма             = СтрокаПТУ_ИзлишкиНедостача.Цена*СтрокаПТУ_ИзлишкиНедостача.Количество;
								Иначе
									СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
									СтрокаПТУ_ИзлишкиНедостача.Количество        = 0;
									СтрокаПТУ_ИзлишкиНедостача.Сумма             = 0;
									СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
								КонецЕсли;
							Иначе
								СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = НайденнаяСтрока.Количество;
								//НМА 24.08.17 >>
								Если СтрокаТЗИзWMS.КоличествоБрака>0 Тогда
									СтрокаПТУ_ИзлишкиНедостача.Количество    = СтрокаТЗИзWMS.КоличествоБрака; //НМА 24.08.17
								Иначе
									//СтрокаПТУ_ИзлишкиНедостача.Количество    = НайденнаяСтрока.Количество; //НМА 24.08.17
									СтрокаПТУ_ИзлишкиНедостача.Количество    = СтрокаТЗИзWMS.КоличествоПринято; //НМА 26.09.17
								КонецЕсли;
								СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаПТУ_ИзлишкиНедостача.Количество;
								//НМА 24.08.17 <<
								СтрокаПТУ_ИзлишкиНедостача.Сумма             = НайденнаяСтрока.Сумма;
							КонецЕсли;
							//НМА 18.07.17
							//НМА 15.08.17
							СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = СтрокаПТУ_ИзлишкиНедостача.Цена;
							СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = СтрокаПТУ_ИзлишкиНедостача.Сумма;
							//НМА 15.08.17
							//НМА 27.07.17
							СтрокаПТУ_ИзлишкиНедостача.СерияНоменклатуры = СерияНоменклатуры;
							СтрокаПТУ_ИзлишкиНедостача.КодНоменклатурыПоставщика = НайденнаяСтрока.КодНоменклатурыПоставщика;
							СтрокаПТУ_ИзлишкиНедостача.НаименованиеНоменклатурыПоставщика = НайденнаяСтрока.НаименованиеНоменклатурыПоставщика;
							СтрокаПТУ_ИзлишкиНедостача.НомерГТДПоставщика = НайденнаяСтрока.НомерГТДПоставщика;
							//НМА 27.07.17
							//СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
							
						Иначе //Качество - брак, не было в заказе
							
							Если СрокиГодностиВСериях Тогда //НМА 04.09.17
								Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
									СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,СтрокаТЗИзWMS.Номенклатура);
									Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
										СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияСрокГодности.Владелец     = СтрокаТЗИзWMS.Номенклатура;
										СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
										СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
										СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияСрокГодности.Записать();
										СерияНоменклатуры = СерияСрокГодности.Ссылка;
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
										СтрокаПТУ_ИзлишкиНедостача.СерияНоменклатуры = СерияНоменклатуры;
									КонецЕсли;
									////Штрихкод
									СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								КонецЕсли;
							Иначе //НМА 04.09.17
								//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
							КонецЕсли; //НМА 04.09.17
							
							СтрокаПТУ_ИзлишкиНедостача.Цена             = 0.01;
							СтрокаПТУ_ИзлишкиНедостача.Сумма            = 0;
							СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = 0;
							СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = 0;
							СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = СтрокаПТУ_ИзлишкиНедостача.Номенклатура.СтавкаНДС; //НМА 19.06.17
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
							//НМА 24.08.17 >>
							Если СтрокаТЗИзWMS.КоличествоБрака>0 Тогда
								СтрокаПТУ_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоБрака;
							Иначе
								СтрокаПТУ_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоПринято;
							КонецЕсли;
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаПТУ_ИзлишкиНедостача.Количество;
							//СтрокаПТУ_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоПринято;
							//СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
							ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !В строке №"+СтрокаПТУ_ИзлишкиНедостача.НомерСтроки+" '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в заказе)!";
						КонецЕсли;
						
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						
					КонецЕсли;
					
					//Если СтрокаПТУ.КачествоТовара = Справочники.Качество.Новый Тогда
					//	СтрокаПТУ.Склад = ПТУ.СкладОрдер;
					//Иначе
					//	СтрокаПТУ.Склад = Справочники.Склады.НайтиПоНаименованию("Брак");
					//КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
	КонецЦикла;		
	
	//Если ОдноПТУНаЗаказ Тогда
		////ПТУ.УстановитьНовыйНомер();
		//НМА 14.12.16 >>
		//добавим строки из заказа, если их нет в поступлении
		Для Каждого СтрокаИзТЧТовары ИЗ ПТУ_ТЧТовары Цикл
			НедостающаяСтрока = ТЗИзWMS.Найти(СтрокаИзТЧТовары.Номенклатура, "Номенклатура");
			Если НедостающаяСтрока=Неопределено Тогда
				СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
				СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = СтрокаИзТЧТовары.Номенклатура;
				СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = СтрокаИзТЧТовары.ЕдиницаИзмерения;
				СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = СтрокаИзТЧТовары.Коэффициент;
				СтрокаПТУ_ИзлишкиНедостача.КачествоТовара    = Справочники.Качество.Новый;
				//СтрокаПТУ_ИзлишкиНедостача.Склад             = ПТУ.СкладОрдер;
				
				СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = СтрокаИзТЧТовары.Количество;
				СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаИзТЧТовары.Количество;
				СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = 0;
				СтрокаПТУ_ИзлишкиНедостача.Цена              = СтрокаИзТЧТовары.Цена;
				СтрокаПТУ_ИзлишкиНедостача.Сумма             = СтрокаИзТЧТовары.Сумма;
				//СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента   = СтрокаИзТЧТовары.ЦенаИзДокумента;
				//СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента  = СтрокаИзТЧТовары.СуммаИзДокумента;
				СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента   = СтрокаПТУ_ИзлишкиНедостача.Цена;
				СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента  = СтрокаПТУ_ИзлишкиНедостача.Сумма;
				СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС         = СтрокаИзТЧТовары.Номенклатура.СтавкаНДС; //НМА 19.06.17
				//НМА 270717
				СтрокаПТУ_ИзлишкиНедостача.КодНоменклатурыПоставщика = СтрокаИзТЧТовары.КодНоменклатурыПоставщика;
				СтрокаПТУ_ИзлишкиНедостача.НаименованиеНоменклатурыПоставщика = СтрокаИзТЧТовары.НаименованиеНоменклатурыПоставщика;
				СтрокаПТУ_ИзлишкиНедостача.НомерГТДПоставщика = СтрокаИзТЧТовары.НомерГТДПоставщика;
				//НМА 270717
				ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !Товар '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' добавлен из заказа (т.к. позиции не было в приходе)!";
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
			КонецЕсли;
			
			////Заполним КоличествоПлан из заказа 
			//СтрокаПТУ = ПТУ.Товары.Найти(СтрокаИзТЧТовары.Номенклатура, "Номенклатура");
			//Если СтрокаПТУ<>Неопределено Тогда
			//	Если Не ЗначениеЗаполнено(СтрокаПТУ.КоличествоПлан) Тогда
			//		СтрокаПТУ.КоличествоПлан = СтрокаИзТЧТовары.Количество;
			//		Если СтрокаПТУ.КачествоТовара = Справочники.Качество.Новый Тогда
			//			Если СтрокаПТУ.КоличествоПринято>СтрокаПТУ.КоличествоПлан Тогда //Излишки
			//				//СтрокаПТУ.Склад = Справочники.Склады.НайтиПоНаименованию("Брак");
			//				СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПлан;
			//			КонецЕсли;
			//			//Иначе
			//			//	СтрокаПТУ.КоличествоПлан = 0;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЦикла;
		//ПТУ.СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ПТУ); //НМА 15.08.17
		////КурсДокументаБух = ПТУ.Товары.Итог("СуммаИзДокумента");
		
		Если ПТУ_ИзлишкиНедостача.Товары.Количество()>0 Тогда // или 
		//Если ПТУ.Товары.Итог("КоличествоПринято")<>ПТУ_ТЧТовары.Товары.Итог("Количество") Тогда
			ПТУ.СтатусПоступленияТоваров = Перечисления.СтатусыПоступленийТоваровИУслуг.ПринятНеПолностью;
			ПТУ_ИзлишкиНедостача.Товары.Сортировать("НаименованиеНоменклатурыПоставщика Возр"); //НМА 25.09.17
		Иначе
			ПТУ.СтатусПоступленияТоваров = Перечисления.СтатусыПоступленийТоваровИУслуг.Принят;
		КонецЕсли;

		ПТУ.Товары.Сортировать("НаименованиеНоменклатурыПоставщика Возр"); //НМА 25.09.17
					
		Попытка
			ПТУ.Записать(РежимЗаписиДокумента.Запись); //НМА 14.09.17
			//ПТУ.Записать(РежимЗаписиДокумента.Проведение); //НМА 14.09.17
			//СоздатьИзлишкиИНедостачи_ПриПроведенииПоступленияОбработкаПроведения(ПТУ, Ложь); //НМА 14.09.17
			ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПоступлениеТоваровУслуг, ПТУ.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
			Если ПТУ_ИзлишкиНедостача.Товары.Количество()>0 Тогда
				Попытка
					ПТУ_ИзлишкиНедостача.Записать(РежимЗаписиДокумента.Запись);
					ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПоступлениеТоваровУслуг, ПТУ_ИзлишкиНедостача.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
				Исключение
					Текст_ОшибкаЗаписи = " (Не удалось записать ПТУ Излишки/Недостачи " + ")";
					ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПоступлениеТоваровУслуг, ПТУ_ИзлишкиНедостача.Ссылка, Текст_ОшибкаЗаписи);
					ВызватьИсключение Текст_ОшибкаЗаписи;
				КонецПопытки;
			КонецЕсли;
		Исключение
			//Попытка
			//	ПТУ.Записать(РежимЗаписиДокумента.Запись);
			//Исключение
			Текст_ОшибкаЗаписи = " (Не удалось провести ПТУ " + ПТУ.Ссылка + ")";
			ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПоступлениеТоваровУслуг, ПТУ.Ссылка, Текст_ОшибкаЗаписи);
			ВызватьИсключение Текст_ОшибкаЗаписи;
			///КонецПопытки;
		КонецПопытки;
				
		////НМА 14.08.17
		//Если СсылкаНаПТУ.Проведен Тогда
		//	ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
		//	ЗаказПоставщику.Дата = СсылкаНаПТУ.Дата;
		//	//ЗаказПоставщику.ДокументОснование = СсылкаНаПТУ; 
		//	ЗаказПоставщику.Организация = СсылкаНаПТУ.Организация;   
		//	ЗаказПоставщику.Подразделение = СсылкаНаПТУ.Подразделение; 
		//	ЗаказПоставщику.Склад = СсылкаНаПТУ.СкладОрдер;  
		//	ЗаказПоставщику.ТипЦен = СсылкаНаПТУ.ТипЦен;
		//	ЗаказПоставщику.Ответственный = СсылкаНаПТУ.Ответственный;
		//	ЗаказПоставщику.Контрагент = СсылкаНаПТУ.Контрагент;  
		//	ЗаказПоставщику.ДоговорКонтрагента = СсылкаНаПТУ.ДоговорКонтрагента; 
		//	ЗаказПоставщику.ВалютаДокумента = СсылкаНаПТУ.ВалютаДокумента;
		//	ЗаказПоставщику.СуммаДокумента = СсылкаНаПТУ.СуммаДокумента;  
		//	ЗаказПоставщику.УчитыватьНДС = СсылкаНаПТУ.УчитыватьНДС;  
		//	ЗаказПоставщику.УсловиеПродаж = СсылкаНаПТУ.УсловиеПродаж;  
		//	ЗаказПоставщику.ДатаОплаты = СсылкаНаПТУ.ДатаОплаты;     
		//	ЗаказПоставщику.ДатаПоступления = СсылкаНаПТУ.ДатаПо;
		//	ЗаказПоставщику.Комментарий  = "EmeWmsНомер: "+НомерПриходаEME+". " + СсылкаНаПТУ.Комментарий;
		//	ЗаказПоставщику.Товары.Загрузить(ПТУ_ТЧТовары);
		//	ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
		//	ПТУ.Сделка = ЗаказПоставщику.Ссылка; 
		//	ПТУ.Записать(РежимЗаписиДокумента.Запись);
		//КонецЕсли;
		////НМА 14.08.17

		//Если ПТУ.Проведен Тогда ////НМА 18.09.17  
			
			//ЗаказПоставщику статус закрыт
			ЗаказПоставщику = СсылкаНаЗаказПоставщику.ПолучитьОбъект();
			ЗаказПоставщику.Статус_УТ11 = Перечисления.СтатусыЗаказовПоставщикам_УТ11.Закрыт; //Закроем заказ
			Попытка
				ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЗаказПоставщику,СсылкаНаЗаказПоставщику , "Не удалось записать документ ЗаказПоставщику EmeWmsНомер:"+ПТУ.EmeWmsНомер);
			КонецПопытки;
			
			////НМА 06.09.17 
			////ЗакрытиеЗаказовПоставщикам
			//ДокЗакрытиеЗаказовПоставщикам = Документы.ЗакрытиеЗаказовПоставщикам.СоздатьДокумент();
			//ДокЗакрытиеЗаказовПоставщикам.Заполнить(СсылкаНаЗаказПоставщику);
			//ДокЗакрытиеЗаказовПоставщикам.Дата = ТекущаяДата();
			//Попытка
			//	ДокЗакрытиеЗаказовПоставщикам.Записать(РежимЗаписиДокумента.Проведение);
			//	ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ЗакрытиеЗаказовПоставщикам, ДокЗакрытиеЗаказовПоставщикам.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
			//Исключение
			//	ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЗакрытиеЗаказовПоставщикам,СсылкаНаЗаказПоставщику , "Не удалось провести документ ЗакрытиеЗаказовПоставщикам EmeWmsНомер:"+ПТУ.EmeWmsНомер);
			//КонецПопытки;
			////НМА 06.09.17 
			
			////АктОРасхожденияхПослеПриемки_УТ11
			//АктОРасхожденияхПослеПриемки_УТ11 = Документы.АктОРасхожденияхПослеПриемки_УТ11.СоздатьДокумент();
			//АктОРасхожденияхПослеПриемки_УТ11.Заполнить(ПТУ.Ссылка);
			//АктОРасхожденияхПослеПриемки_УТ11.Дата = ТекущаяДата();
			//АктОРасхожденияхПослеПриемки_УТ11.ДатаС = ТекущаяДата();
			//АктОРасхожденияхПослеПриемки_УТ11.ДатаПо = ТекущаяДата();
			//АктОРасхожденияхПослеПриемки_УТ11.ОтражатьВУправленческомУчете = Истина;
			//Попытка
			//	АктОРасхожденияхПослеПриемки_УТ11.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
			//	Попытка
			//		АктОРасхожденияхПослеПриемки_УТ11.Записать(РежимЗаписиДокумента.Запись);
			//	Исключение
			//		ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.АктОРасхожденияхПослеПриемки_УТ11, , "Не удалось записать документ АктОРасхожденияхПослеПриемки_УТ11 EmeWmsНомер:"+ПТУ.EmeWmsНомер);
			//	КонецПопытки;
			//КонецПопытки;
			
		//КонецЕсли; ////НМА 18.09.17
		//НМА 14.12.16 <<
		
	//КонецЕсли;

	EmeWmsERPEngine.Success(ERPData);
	
КонецПроцедуры
//НМА 14.08.17 ASN (приход WMS) был создан из заказа поставщику <<


//27062018 Теперь загружаем сразу в поступление, так как отправляем в ЕМЕ тоже сразу поступление:)
Процедура ИмпортироватьПоступлениеТоваровУслуг_new(ERPData, Трассировка = "", ТемаСообщения = "", ОшибкиОбработки = "")
	
	//*** Делаем проверки ***

	НомерПриходаEME  			= ERPData.header.id;                 //	Номер приходного документа EME
	ОснованиеПрихода			= ERPData.header.reason_code;		 //	Код основания прихода
	ДатаДокумента     			= ERPData.header.created_at;         //	Время создания документа
	СкладКод     	  			= ERPData.header.whs_to_code;        //	Код склада приёмки
	УИД_Организация   			= ERPData.header.vendor_to_code;     //	Организация, которой пренадлежит товар
	Партнер						= ERPData.header.supplier_name;      //	Полное наименование организации поставщика
	КонтрагентКод    			= ERPData.header.supplier_code;      //	Код организации поставщика
	ЭтоВозврат					= ERPData.header.is_return;          //	Если это возврат

	//	Проверим наличие поступления
	Если Не ЗначениеЗаполнено(ERPData.header.asn_id) Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "ASNNUL");
		Возврат;
	КонецЕсли;
	
	ЗапросПоНомеруЕМЕ = Новый Запрос();
	ЗапросПоНомеруЕМЕ.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.EmeWmsНомер = &НомерПриходаEME И
		|	НЕ ПоступлениеТоваровУслуг.ПометкаУдаления";
	ЗапросПоНомеруЕМЕ.УстановитьПараметр("НомерПриходаEME", НомерПриходаEME);
	ВыборкаПоНомеруЕМЕ = ЗапросПоНомеруЕМЕ.Выполнить().Выбрать();
	Если ВыборкаПоНомеруЕМЕ.Следующий() Тогда
		EmeWmsERPEngine.ErrorHeader(ERPData, "IDEXST");
		Возврат;
	КонецЕсли;
	
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		СсылкаНаПТУ = EmeWmsУтилиты.ПолучитьПоступлениеТоваров(ERPData.asns.id);        //НМА 14.08.17
		//СсылкаНаЗаказПоставщику = EmeWmsУтилиты.ПолучитьЗаказПоставщику(ERPData.asns.id); //НМА 14.08.17
		//НМА 16.06.17 Проверка на битую ссылку (<Объект не найден>) >>
		//Если СсылкаНаЗаказПоставщику.Пустая() Тогда
		Если СсылкаНаПТУ.Пустая() или СсылкаНаПТУ.ПолучитьОбъект()=Неопределено Тогда                       //НМА 14.08.17
		//Если СсылкаНаЗаказПоставщику.Пустая() или СсылкаНаЗаказПоставщику.ПолучитьОбъект()=Неопределено Тогда //НМА 14.08.17
			//НМА 16.06.17 Проверка на битую ссылку (<Объект не найден>) <<
			EmeWmsERPEngine.ErrorChild(ERPData, "ASNBAD");
			Возврат;
			//ИначеЕсли СсылкаНаЗаказПоставщику.Статус <> Перечисления.СтатусыЗаказовПоставщикам.КПоступлению Тогда
			//	EmeWmsERPEngine.ErrorChild(ERPData, "STATUS");
		Иначе
			Организация = СсылкаНаПТУ.Организация; //НМА 14.08.17
			//Организация = СсылкаНаЗаказПоставщику.Организация; //НМА 14.08.17
		КонецЕсли;	
	КонецЦикла;

	//НМА 12.12.16 >>
	ТЗИзWMS = Новый ТаблицаЗначений;
	КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);  
	ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	ТЗИзWMS.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗИзWMS.Колонки.Добавить("КоличествоПринято",ОписаниеЧисла);
	//НМА 07.07.17
	ТЗИзWMS.Колонки.Добавить("КоличествоБрака",ОписаниеЧисла); 
	ТЗИзWMS.Колонки.Добавить("СрокГодности",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("ДатаПроизводства",Новый ОписаниеТипов("Дата"));
	ТЗИзWMS.Колонки.Добавить("Штрихкод",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	ТЗИзWMS.Колонки.Добавить("ТипШтрихкода",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ТипыШтрихкодов"));
	//ТЗИзWMS.Колонки.Добавить("НомерГТДПоставщика",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200)));
	//ТЗИзWMS.Колонки.Добавить("КодНоменклатурыПоставщика",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(20,0)));
	//НМА 07.07.17
	//ТЗИзWMS.Колонки.Добавить("КачествоТовара",Новый ОписаниеТипов("Строка"),,150); //НМА 07.07.17  //НМА 15.08.17
	ТЗИзWMS.Колонки.Добавить("ЭтоБрак",Новый ОписаниеТипов("Булево"));
	ТЗИзWMS.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТолькоEMEСклад = Ложь;
	EmeWmsERPEngine.SelectChild(ERPData, "lines");
	EmeWmsУтилиты.ПолучитьТЗИзWMS(ERPData, ТЗИзWMS, ТолькоEMEСклад);
	//НМА 12.12.16 <<
	//НМА 31.07.17 >>
	//ТЗИзWMS.Свернуть("Номенклатура,СрокГодности,ДатаПроизводства,Штрихкод,ТипШтрихкода,ЕдиницаИзмерения,ЭтоБрак","КоличествоПринято,КоличествоБрака");
	//ТЗИзWMS.Сортировать("КоличествоПринято Убыв, Номенклатура Возр, СрокГодности Возр"); //НМА  29.08.17
	//НМА 31.07.17 <<
	
	ТЗИзWMS.Свернуть("Номенклатура,Штрихкод,ТипШтрихкода,ЕдиницаИзмерения,ЭтоБрак","КоличествоПринято,КоличествоБрака");
	ТЗИзWMS.Сортировать("КоличествоПринято Убыв, Номенклатура Возр");
	
	
	Если EmeWmsERPEngine.HasErrors(ERPData) Тогда
		Возврат;
	КонецЕсли;
	
	//НМА 04.09.17
	//СрокиГодностиВСериях = Ложь; //Истина;
	СрокиГодностиВСериях = Константы.EmeWmsСрокиГодностиВСериях.Получить();
	//НМА 04.09.17
	
	////ОдноПТУНаЗаказ = Ложь; 
	//ОдноПТУНаЗаказ = ИСТИНА;
	//
	//ПТУ = Неопределено;
	
	//*** Проверки сделали, пишем в базу данных 1C ***
	
	EmeWmsERPEngine.SelectChild(ERPData, "asns");
	Пока EmeWmsERPEngine.NextChildLine(ERPData) Цикл
		
		//СсылкаНаЗаказПоставщику = EmeWmsУтилиты.ПолучитьЗаказПоставщику(ERPData.asns.id);  //НМА 14.08.17
		СсылкаНаПТУ = EmeWmsУтилиты.ПолучитьПоступлениеТоваров(ERPData.asns.id); //НМА 14.08.17
		
		Если СсылкаНаПТУ<>Неопределено и СсылкаНаПТУ<>Документы.ПоступлениеТоваровУслуг.ПустаяСсылка() Тогда  //14.08.17
		//Если СсылкаНаЗаказПоставщику<>Неопределено и СсылкаНаЗаказПоставщику<>Документы.ЗаказПоставщику.ПустаяСсылка() Тогда //НМА 14.08.17
		
			//ПоступлениеТоваровУслуг
						
			ПТУ = СсылкаНаПТУ.ПолучитьОбъект(); //НМА 14.08.17
			//ПТУ = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			//ПТУ.Заполнить(СсылкаНаЗаказПоставщику);  //НМА 16.08.17
			//СсылкаНаПТУ = ПТУ.Ссылка; //НМА 14.08.17
			ПТУ.Дата = ТекущаяДата();
			//ПТУ.ДатаС = ТекущаяДата();
			//ПТУ.ДатаПо = ТекущаяДата();
			ПТУ.ОтражатьВУправленческомУчете = Истина;
			//ПТУ.УчитыватьНДС = Истина; //НМА 16.08.17
			//ПТУ.Комментарий = ПТУ.Комментарий+"Создан на основании заказа поставщику №"+СсылкаНаЗаказПоставщику.Номер+" от "+СсылкаНаЗаказПоставщику.Дата+" при приемке из WMS!";  //НМА 25.09.17
			//ПТУ.Комментарий = ПТУ.Комментарий+" "+СсылкаНаЗаказПоставщику.Комментарий;  //НМА 25.09.17
			
			ПТУ_ТЧТовары = ПТУ.Товары.Выгрузить();
			ПТУ_ТЧТовары.Сортировать("Количество Убыв, Номенклатура Возр");
			
			ПТУ.Товары.Очистить();
			ПТУ_ИзлишкиНедостача = ПТУ.Скопировать(); //НМА 14.08.17

			ПТУ.EmeWmsНомер	= НомерПриходаEME;

			//ПТУ_ИзлишкиНедостача = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент(); //НМА 16.08.17
			//ПТУ_ИзлишкиНедостача.Заполнить(СсылкаНаПТУ); //НМА 14.08.17
			ПТУ_ИзлишкиНедостача.Дата   = ТекущаяДата();
			ПТУ_ИзлишкиНедостача.ДатаС  = ТекущаяДата();
			ПТУ_ИзлишкиНедостача.ДатаПо = ТекущаяДата();
			ПТУ_ИзлишкиНедостача.ОтражатьВУправленческомУчете = Истина;
			//ПТУ_ИзлишкиНедостача.УчитыватьНДС = Истина;
			//ПТУ_ИзлишкиНедостача.Товары.Очистить();   //НМА 14.08.17
			 
			ПТУ_ИзлишкиНедостача.СтатусПоступленияТоваров = Перечисления.СтатусыПоступленийТоваровИУслуг.НаСогласовании;
			//ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !Создан на основании поступления №"+СсылкаНаПТУ.Номер+" от "+СсылкаНаПТУ.Дата+" при приемке из WMS!";  //НМА 14.08.17
			//ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !Создан на основании заказа поставщику №"+СсылкаНаЗаказПоставщику.Номер+" от "+СсылкаНаЗаказПоставщику.Дата+" при приемке из WMS!";  //НМА 14.08.17
			ПТУ_ИзлишкиНедостача.Комментарий = "!Создан на основании  "+ПТУ.Номер;  //НМА 26.09.17 
			
			ПТУ_ИзлишкиНедостача.СкладОрдер = ПТУ.СкладОрдер; //НМА 14.08.17
			//ПТУ.СкладОрдер = СсылкаНаЗаказПоставщику.Склад; //НМА 14.08.17
			//ПТУ_ИзлишкиНедостача.СкладОрдер = СсылкаНаЗаказПоставщику.Склад; //НМА 14.08.17
		
			Для Каждого СтрокаТЗИзWMS Из ТЗИзWMS Цикл
				
				НайденнаяСтрока = ПТУ_ТЧТовары.Найти(СтрокаТЗИзWMS.Номенклатура, "Номенклатура");
				
				Если ЗначениеЗаполнено(СтрокаТЗИзWMS.Номенклатура) Тогда
					
					//Качество - новый
					Если СтрокаТЗИзWMS.КоличествоПринято>0 и СтрокаТЗИзWMS.ЭтоБрак=Ложь Тогда  
						НоменклатураСтроки = СтрокаТЗИзWMS.Номенклатура;
						СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
						
						Если НайденнаяСтрока<>Неопределено Тогда  //Качество - новый, был в заказе
							ОтборСтрокГТД = Новый Структура();
							ОтборСтрокГТД.Вставить("Номенклатура",НайденнаяСтрока.Номенклатура);
							МассивСтрокГТД = ПТУ_ТЧТовары.НайтиСтроки(ОтборСтрокГТД);
							СтрокаПТУКоличествоОстатокГТД = СтрокаТЗИзWMS.КоличествоПринято;
							Для каждого НайденнаяСтрокаНоменклатурыГТД из МассивСтрокГТД Цикл 
								//Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
								//	Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.СерииНоменклатуры) Тогда
								//		СерияГТД = НайденнаяСтрокаНоменклатурыГТД.СерияНоменклатуры.ПолучитьОбъект();
								//		СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
								//		СерияГТД.Записать();
								//		СерияНоменклатуры = СерияГТД.Ссылка; 
								//	Иначе
								//		СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy"),Истина,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
								//		Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
								//			СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
								//			СерияСрокГодности.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
								//			СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=MM.yy");
								//			СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
								//			СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
								//			СерияСрокГодности.Записать();
								//			СерияНоменклатуры = СерияСрокГодности.Ссылка;
								//			ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
								//		КонецЕсли;
								//	КонецЕсли;
								//	////Штрихкод
								//	СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								//КонецЕсли;
								
								//НМА 29.08.17
								//НайденнаяСтрокаНоменклатурыГТДНомерГТДПоставщика = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
								ОтборСтрокГТД_Повторно = Новый Структура();
								ОтборСтрокГТД_Повторно.Вставить("Номенклатура",НайденнаяСтрока.Номенклатура);
								ОтборСтрокГТД_Повторно.Вставить("НомерГТДПоставщика",НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика);
								МассивСтрокГТД_Повторно = ПТУ.Товары.НайтиСтроки(ОтборСтрокГТД_Повторно);
								Если МассивСтрокГТД_Повторно.Количество()>0 и МассивСтрокГТД.Количество()>1 Тогда
									Продолжить;
								//ИначеЕсли МассивСтрокГТД_Повторно.Количество()>0 и МассивСтрокГТД.Количество()=1 Тогда
								//	//не было в заказе с данным сроком годности
								//   	Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
								//		СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,СтрокаТЗИзWMS.Номенклатура);
								//		СерияНоменклатуры = СерияСрокГодности.Ссылка;
								//		Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
								//			СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
								//			СерияСрокГодности.Владелец     = СтрокаТЗИзWMS.Номенклатура;
								//			СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
								//			СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
								//			СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
								//			СерияСрокГодности.Записать();
								//			СерияНоменклатуры = СерияСрокГодности.Ссылка;
								//			ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
								//		КонецЕсли;
								//		////Штрихкод
								//		СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								//	КонецЕсли;
								//	
								//	СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
								//	СтрокаПТУ_ИзлишкиНедостача.КачествоТовара    = Справочники.Качество.Новый;
								//	СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = НоменклатураСтроки;
								//	СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
								//	СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
								//	
								//	СтрокаПТУ_ИзлишкиНедостача.Цена             = 0.01;
								//	СтрокаПТУ_ИзлишкиНедостача.Сумма            = 0;
								//	СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = 0;
								//	СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = 0;
								//	СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = СтрокаПТУ_ИзлишкиНедостача.Номенклатура.СтавкаНДС; //НМА 19.06.17
								//	СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
								//	СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаТЗИзWMS.КоличествоПринято;
								//	СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
								//	ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !В строке №"+СтрокаПТУ_ИзлишкиНедостача.НомерСтроки+" '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в заказе)!";
								//	
								//	СтрокаПТУ_ИзлишкиНедостача.СерияНоменклатуры = СерияНоменклатуры;
								//	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
								//	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
								//	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
								//	Продолжить;
								КонецЕсли;
								//НМА 29.08.17
								
								Если СрокиГодностиВСериях Тогда //НМА 04.09.17 >>
									Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика) Тогда
										НомерГТД = Справочники.НомераГТД.НайтиПоКоду(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика);
										Если НомерГТД <> Справочники.НомераГТД.ПустаяСсылка() Тогда
											СерияГТД = Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД",НомерГТД,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
											Если СерияГТД<>Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
												Если Не ЗначениеЗаполнено(СерияГТД.СрокГодности) Тогда
													СерияГТД = СерияГТД.ПолучитьОбъект();
													СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
													СерияГТД.Записать();
													СерияНоменклатуры = СерияГТД.Ссылка;
												ИначеЕсли СерияГТД.СрокГодности<>СтрокаТЗИзWMS.СрокГодности Тогда
													//не было в заказе с данным сроком годности
													Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
														СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,СтрокаТЗИзWMS.Номенклатура);
														СерияНоменклатуры = СерияСрокГодности.Ссылка;
														Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
															СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
															СерияСрокГодности.Владелец     = СтрокаТЗИзWMS.Номенклатура;
															СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
															СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
															СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
															СерияСрокГодности.Записать();
															СерияНоменклатуры = СерияСрокГодности.Ссылка;
															ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
														КонецЕсли;
														////Штрихкод
														СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
													КонецЕсли;
													
													СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
													СтрокаПТУ_ИзлишкиНедостача.КачествоТовара    = Справочники.Качество.Новый;
													СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = НоменклатураСтроки;
													СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
													СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
													
													СтрокаПТУ_ИзлишкиНедостача.Цена             = 0.01;
													СтрокаПТУ_ИзлишкиНедостача.Сумма            = 0;
													СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = 0;
													СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = 0;
													СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = СтрокаПТУ_ИзлишкиНедостача.Номенклатура.СтавкаНДС; //НМА 19.06.17
													СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
													СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаТЗИзWMS.КоличествоПринято;
													СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
													ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !В строке №"+СтрокаПТУ_ИзлишкиНедостача.НомерСтроки+" '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в заказе)!";
													
													СтрокаПТУ_ИзлишкиНедостача.СерияНоменклатуры = СерияНоменклатуры;
													ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
													ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
													ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
													Продолжить;
												Иначе
													СерияНоменклатуры = СерияГТД.Ссылка;
												КонецЕсли;
											Иначе
												СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
												СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
												//НМА 25.08.17 >>
												Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
													СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
												Иначе
													СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
												КонецЕсли;
												СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
												//НМА 25.08.17 <<
												СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
												СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
												СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
												СерияГТД.Записать();
												ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
												СерияНоменклатуры = СерияГТД.Ссылка;
											КонецЕсли;
										Иначе
											НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
											НомерГТД.Код = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
											НомерГТД.Комментарий = "Создан автоматически при обмене с WMS "+ТекущаяДата();
											НомерГТД.Записать();
											ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.НомераГТД, НомерГТД.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
											СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
											СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
											//НМА 25.08.17 >>
											Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
											Иначе
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
											КонецЕсли;
											СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
											//НМА 25.08.17 <<
											СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
											СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
											СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
											СерияГТД.Записать();
											ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
											СерияНоменклатуры = СерияГТД.Ссылка;
										КонецЕсли;
									ИначеЕсли Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда //НМА 15.08.17
										СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
										Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
											СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
											СерияСрокГодности.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
											СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
											СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
											СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
											СерияСрокГодности.Записать();
											ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияСрокГодности.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
										КонецЕсли;
										СерияНоменклатуры = СерияСрокГодности.Ссылка;
									КонецЕсли;
									////Штрихкод
									СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
									
								////НМА 04.09.17 СрокиГодности НЕ в сериях
								ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика) Тогда
									НомерГТД = Справочники.НомераГТД.НайтиПоКоду(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика);
									Если НомерГТД <> Справочники.НомераГТД.ПустаяСсылка() Тогда
										СерияГТД = Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД",НомерГТД,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
										Если СерияГТД<>Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
											СерияНоменклатуры = СерияГТД.Ссылка;
										Иначе
											СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
											СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
											//НМА 25.08.17 >>
											Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
											Иначе
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
											КонецЕсли;
											СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
											//НМА 25.08.17 <<
											СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
											//СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности; ////НМА 04.09.17 СрокиГодности НЕ в сериях
											СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
											СерияГТД.Записать();
											ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
											СерияНоменклатуры = СерияГТД.Ссылка;
										КонецЕсли;
										//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
									Иначе
										НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
										НомерГТД.Код = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
										НомерГТД.Комментарий = "Создан автоматически при обмене с WMS "+ТекущаяДата();
										НомерГТД.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.НомераГТД, НомерГТД.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
										СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
										//НМА 25.08.17 >>
										Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
										Иначе
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
										КонецЕсли;
										СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
										//НМА 25.08.17 <<
										СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
										//СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;  ////НМА 04.09.17 СрокиГодности НЕ в сериях
										СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияГТД.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
										СерияНоменклатуры = СерияГТД.Ссылка;
										//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
									КонецЕсли;
								КонецЕсли;////НМА 04.09.17 <<
								
								СтрокаПТУ = ПТУ.Товары.Добавить();
								СтрокаПТУ.КачествоТовара    = Справочники.Качество.Новый;
								СтрокаПТУ.Номенклатура      = НоменклатураСтроки;
								СтрокаПТУ.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
								СтрокаПТУ.Коэффициент       = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
								
								СтрокаПТУ.Цена             = НайденнаяСтрокаНоменклатурыГТД.Цена;
								//СтрокаПТУ.Сумма            = НайденнаяСтрока.Сумма;
								СтрокаПТУ.СтавкаНДС        = НайденнаяСтрокаНоменклатурыГТД.СтавкаНДС; //НМА 19.06.17
								//СтрокаПТУ.ЦенаИзДокумента  = НайденнаяСтрокаНоменклатурыГТД.ЦенаИзДокумента;
								//СтрокаПТУ.СуммаИзДокумента = НайденнаяСтрокаНоменклатурыГТД.СуммаИзДокумента;
								//НМА 18.07.17
								Если СтрокаТЗИзWMS.ЕдиницаИзмерения<>НайденнаяСтрокаНоменклатурыГТД.ЕдиницаИзмерения Тогда  
									Если СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент<>0 Тогда
										СтрокаПТУ.КоличествоПлан    = Окр(НайденнаяСтрокаНоменклатурыГТД.Количество*НайденнаяСтрокаНоменклатурыГТД.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент,3);
										СтрокаПТУ.Количество        = СтрокаПТУ.КоличествоПлан; //НМА 24.08.17
										СтрокаПТУ.Цена              = Окр(НайденнаяСтрокаНоменклатурыГТД.Цена*СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент/НайденнаяСтрокаНоменклатурыГТД.ЕдиницаИзмерения.Коэффициент,2);
										СтрокаПТУ.Сумма             = СтрокаПТУ.Цена*СтрокаПТУ.Количество;
									Иначе
										СтрокаПТУ.КоличествоПлан    = 0;
										СтрокаПТУ.Количество        = 0;
										СтрокаПТУ.Сумма             = 0;
									КонецЕсли;
								Иначе
									СтрокаПТУ.КоличествоПлан    = НайденнаяСтрокаНоменклатурыГТД.Количество;
									СтрокаПТУ.Количество        = НайденнаяСтрокаНоменклатурыГТД.Количество; //НМА 24.08.17
									СтрокаПТУ.Сумма             = НайденнаяСтрокаНоменклатурыГТД.Сумма;
								КонецЕсли;
								//НМА 18.07.17
								//НМА 15.08.17
								СтрокаПТУ.ЦенаИзДокумента  = СтрокаПТУ.Цена;
								СтрокаПТУ.СуммаИзДокумента = СтрокаПТУ.Сумма;
								//НМА 15.08.17
								
								//НМА 27.07.17
								//Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.СерияНоменклатуры) Тогда
								//	СтрокаПТУ.СерияНоменклатуры = НайденнаяСтрокаНоменклатурыГТД.СерияНоменклатуры;
								//Иначе 
								СтрокаПТУ.СерияНоменклатуры = СерияНоменклатуры;
								//КонецЕсли;
								СтрокаПТУ.КодНоменклатурыПоставщика = НайденнаяСтрокаНоменклатурыГТД.КодНоменклатурыПоставщика;
								СтрокаПТУ.НаименованиеНоменклатурыПоставщика = НайденнаяСтрокаНоменклатурыГТД.НаименованиеНоменклатурыПоставщика;
								СтрокаПТУ.НомерГТДПоставщика = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
								
								Если СтрокаПТУКоличествоОстатокГТД - СтрокаПТУ.Количество < 0 Тогда
									СтрокаПТУ.КоличествоПринято = СтрокаПТУКоличествоОстатокГТД;
									//СтрокаПТУ.Количество        = СтрокаПТУКоличествоОстатокГТД;
									//СтрокаПТУ.КоличествоПлан    = СтрокаПТУКоличествоОстатокГТД;
								ИначеЕсли СтрокаПТУКоличествоОстатокГТД=0 Тогда
									СтрокаПТУКоличествоОстатокГТД = СтрокаПТУКоличествоОстатокГТД - СтрокаПТУ.Количество;
									СтрокаПТУ.КоличествоПринято = СтрокаПТУ.Количество;
								ИначеЕсли СтрокаПТУКоличествоОстатокГТД>0 Тогда
									Если МассивСтрокГТД.Количество() > 1 Тогда 
										СтрокаПТУКоличествоОстатокГТД = СтрокаПТУКоличествоОстатокГТД - СтрокаПТУ.Количество;
										СтрокаПТУ.КоличествоПринято = СтрокаПТУ.Количество;
									Иначе
										СтрокаПТУ.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
									КонецЕсли;
								КонецЕсли;
								//НМА 27.07.17
								//НМА 30.08.17 >>
								ОтборСтрокНоменклатурыБрака = Новый Структура(); //НМА 25.09.17
								ОтборСтрокНоменклатурыБрака.Вставить("Номенклатура",НайденнаяСтрокаНоменклатурыГТД.Номенклатура); //НМА 25.09.17
								ОтборСтрокНоменклатурыБрака.Вставить("ЭтоБрак",Истина); //НМА 25.09.17
								ТЗИзWMS_ОбщееКоличествоНоменклатурыБрака = ТЗИзWMS.Скопировать(ОтборСтрокНоменклатурыБрака,"КоличествоПринято"); //НМА 25.09.17 
								ОбщееКоличествоНоменклатурыБракаИзWMS = ТЗИзWMS_ОбщееКоличествоНоменклатурыБрака.Итог("КоличествоПринято"); //НМА 25.09.17
								Если СтрокаТЗИзWMS.КоличествоБрака>0 Тогда //есть брак в таблице defect_lines
									//СтрокаПТУ.Количество        = СтрокаПТУ.КоличествоПлан - (СтрокаТЗИзWMS.КоличествоПринято - СтрокаТЗИзWMS.КоличествоБрака); //НМА 30.08.17
									//СтрокаПТУ.КоличествоПринято = СтрокаПТУ.Количество + СтрокаТЗИзWMS.КоличествоБрака; //НМА 30.08.17
									СтрокаПТУ.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято; //НМА 25.09.17
									Если СтрокаПТУ.КоличествоПлан = СтрокаТЗИзWMS.КоличествоПринято + СтрокаТЗИзWMS.КоличествоБрака Тогда //НМА 25.09.17
										СтрокаПТУ.Количество        = СтрокаТЗИзWMS.КоличествоПринято; //НМА 25.09.17
									ИначеЕсли СтрокаПТУ.КоличествоПлан > СтрокаТЗИзWMS.КоличествоПринято + СтрокаТЗИзWMS.КоличествоБрака Тогда //НМА 25.09.17
										СтрокаПТУ.Количество        = СтрокаПТУ.КоличествоПлан - СтрокаТЗИзWMS.КоличествоБрака; //НМА 25.09.17
									ИначеЕсли СтрокаПТУ.КоличествоПлан < СтрокаТЗИзWMS.КоличествоПринято + СтрокаТЗИзWMS.КоличествоБрака Тогда //НМА 25.09.17
										Если СтрокаТЗИзWMS.КоличествоПринято > СтрокаПТУ.КоличествоПлан Тогда //НМА 25.09.17
											СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПлан; //НМА 25.09.17
										Иначе //НМА 25.09.17
											СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПринято; //НМА 25.09.17
										Конецесли; //НМА 25.09.17
									КонецЕсли;
								ИначеЕсли ОбщееКоличествоНоменклатурыБракаИзWMS>0 Тогда //есть брак со статусом B
									СтрокаПТУ.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято; //НМА 25.09.17
									Если СтрокаПТУ.КоличествоПлан = СтрокаТЗИзWMS.КоличествоПринято + ОбщееКоличествоНоменклатурыБракаИзWMS Тогда //НМА 25.09.17
										СтрокаПТУ.Количество        = СтрокаТЗИзWMS.КоличествоПринято; //НМА 25.09.17
									ИначеЕсли СтрокаПТУ.КоличествоПлан > СтрокаТЗИзWMS.КоличествоПринято + ОбщееКоличествоНоменклатурыБракаИзWMS Тогда //НМА 25.09.17
										СтрокаПТУ.Количество        = СтрокаПТУ.КоличествоПлан - ОбщееКоличествоНоменклатурыБракаИзWMS; //НМА 25.09.17
									ИначеЕсли СтрокаПТУ.КоличествоПлан < СтрокаТЗИзWMS.КоличествоПринято + ОбщееКоличествоНоменклатурыБракаИзWMS Тогда //НМА 25.09.17
										Если СтрокаТЗИзWMS.КоличествоПринято > СтрокаПТУ.КоличествоПлан Тогда //НМА 25.09.17
											СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПлан; //НМА 25.09.17
										Иначе //НМА 25.09.17
											СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПринято; //НМА 25.09.17
										Конецесли; //НМА 25.09.17
									КонецЕсли;
								//Иначе
								//	ТЗИзWMS_ОбщееКоличествоНоменклатуры = ТЗИзWMS.Скопировать(ОтборСтрокГТД,"КоличествоПринято");
								//	ОбщееКоличествоНоменклатурыИзWMS = ТЗИзWMS_ОбщееКоличествоНоменклатуры.Итог("КоличествоПринято");
								//	Если ОбщееКоличествоНоменклатурыИзWMS>СтрокаПТУ.КоличествоПринято Тогда
								//		СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПринято;
								//	КонецЕсли;
								КонецЕсли;
								//НМА 30.08.17 <<
								ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ, ПТУ);
								ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ, ПТУ);
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ, ПТУ);
								Если СтрокаПТУ.КоличествоПринято = 0 тогда  //НМА 29.08.17
									ПТУ.Товары.Удалить(СтрокаПТУ);          //НМА 29.08.17
								КонецЕсли;                                  //НМА 29.08.17
							КонецЦикла;
							
						Иначе //Качество - новый, не было в заказе
							
							Если СрокиГодностиВСериях Тогда //НМА 04.09.17
								Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
									СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,СтрокаТЗИзWMS.Номенклатура);
									СерияНоменклатуры = СерияСрокГодности.Ссылка;
									Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
										СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияСрокГодности.Владелец     = СтрокаТЗИзWMS.Номенклатура;
										СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
										СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
										СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияСрокГодности.Записать();
										СерияНоменклатуры = СерияСрокГодности.Ссылка;
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
									КонецЕсли;
									////Штрихкод
									СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								КонецЕсли;
							Иначе //НМА 04.09.17
								//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
							КонецЕсли; //НМА 04.09.17
						
							СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
							СтрокаПТУ_ИзлишкиНедостача.КачествоТовара    = Справочники.Качество.Новый;
							СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = НоменклатураСтроки;
							СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = СтрокаТЗИзWMS.ЕдиницаИзмерения;
							СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент;
							
							СтрокаПТУ_ИзлишкиНедостача.Цена             = 0.01;
							СтрокаПТУ_ИзлишкиНедостача.Сумма            = 0;
							СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = 0;
							СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = 0;
							СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = СтрокаПТУ_ИзлишкиНедостача.Номенклатура.СтавкаНДС; //НМА 19.06.17
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
							СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаТЗИзWMS.КоличествоПринято;
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
							ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !В строке №"+СтрокаПТУ_ИзлишкиНедостача.НомерСтроки+" '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в заказе)!";
							
							СтрокаПТУ_ИзлишкиНедостача.СерияНоменклатуры = СерияНоменклатуры;
							ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						КонецЕсли;
						
					КонецЕсли;

					
					//Качество - брак
					//Если СтрокаТЗИзWMS.КоличествоБрака>0 или СтрокаТЗИзWMS.КачествоТовара<>"N" Тогда //НМА 15.08.17
					Если СтрокаТЗИзWMS.КоличествоБрака>0 или СтрокаТЗИзWMS.ЭтоБрак Тогда //НМА 15.08.17
						
						//НоваяНоменклатураПоБраку = СтрокаТЗИзWMS.Номенклатура;
						НоменклатураПоБраку = СтрокаТЗИзWMS.Номенклатура;
						ЕдиницаИзмеренияНоменклатурыПоБраку = СтрокаТЗИзWMS.ЕдиницаИзмерения;
						СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
						
						Если Справочники.Склады.НайтиПоНаименованию("Брак",Истина)<>Справочники.Склады.ПустаяСсылка() Тогда
							ПТУ_ИзлишкиНедостача.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
							ПТУ_ИзлишкиНедостача.СкладОрдер = Справочники.Склады.НайтиПоНаименованию("Брак",Истина);
						КонецЕсли;
						
						СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
						СтрокаПТУ_ИзлишкиНедостача.КачествоТовара = Справочники.Качество.НайтиПоНаименованию("Брак",Истина); //НМА 17.07.17
						//СтрокаПТУ_ИзлишкиНедостача.КачествоТовара = Справочники.Качество.Новый;   //НМА 17.07.17
						
						ОтборСтрокГТД = Новый Структура();
						ОтборСтрокГТД.Вставить("Номенклатура",НайденнаяСтрока.Номенклатура);
						МассивСтрокГТД = ПТУ_ТЧТовары.НайтиСтроки(ОтборСтрокГТД);
						СтрокаПТУКоличествоОстатокГТД = СтрокаТЗИзWMS.КоличествоПринято;
						Для каждого НайденнаяСтрокаНоменклатурыГТД из МассивСтрокГТД Цикл
							Если СрокиГодностиВСериях Тогда //НМА 04.09.17 >>
								Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика) Тогда
									НомерГТД = Справочники.НомераГТД.НайтиПоКоду(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика);
									Если НомерГТД <> Справочники.НомераГТД.ПустаяСсылка() Тогда
										СерияГТД = Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД",НомерГТД,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
										Если СерияГТД<>Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
											СерияГТД = СерияГТД.ПолучитьОбъект();
											СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
											СерияГТД.Записать();
											СерияНоменклатуры = СерияГТД.Ссылка; 
										Иначе
											СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
											СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
											//НМА 25.08.17 >>
											Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
											Иначе
												СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
											КонецЕсли;
											СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
											//НМА 25.08.17 <<
											СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
											СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
											СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
											СерияГТД.Записать();
											ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
											СерияНоменклатуры = СерияГТД.Ссылка;
										КонецЕсли;
									Иначе
										НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
										НомерГТД.Код = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
										НомерГТД.Комментарий = "Создан автоматически при обмене с WMS "+ТекущаяДата();
										НомерГТД.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.НомераГТД, НомерГТД.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
										СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
										//НМА 25.08.17 >>
										Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
										Иначе
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
										КонецЕсли;
										СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
										//НМА 25.08.17 <<
										СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
										СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
										СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияГТД.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
										СерияНоменклатуры = СерияГТД.Ссылка;
									КонецЕсли;
								ИначеЕсли Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда //НМА 15.08.17
									СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
									Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
										СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияСрокГодности.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
										СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
										СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
										СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияСрокГодности.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияСрокГодности.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
									КонецЕсли;
									СерияНоменклатуры = СерияСрокГодности.Ссылка;
								КонецЕсли;
								////Штрихкод
								СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								
							////НМА 04.09.17 СрокиГодности НЕ в сериях
							ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика) Тогда
								НомерГТД = Справочники.НомераГТД.НайтиПоКоду(НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика);
								Если НомерГТД <> Справочники.НомераГТД.ПустаяСсылка() Тогда
									СерияГТД = Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД",НомерГТД,,НайденнаяСтрокаНоменклатурыГТД.Номенклатура);
									Если СерияГТД<>Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
										СерияНоменклатуры = СерияГТД.Ссылка; 
									Иначе
										СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
										//НМА 25.08.17 >>
										Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
										Иначе
											СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
										КонецЕсли;
										СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
										//НМА 25.08.17 <<
										СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
										//СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности; ////НМА 04.09.17 СрокиГодности НЕ в сериях
										СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияГТД.Записать();
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
										СерияНоменклатуры = СерияГТД.Ссылка;
									КонецЕсли;
									//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
								Иначе
									НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
									НомерГТД.Код = НайденнаяСтрокаНоменклатурыГТД.НомерГТДПоставщика;
									НомерГТД.Комментарий = "Создан автоматически при обмене с WMS "+ТекущаяДата();
									НомерГТД.Записать();
									ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.НомераГТД, НомерГТД.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
									СерияГТД = Справочники.СерииНоменклатуры.СоздатьЭлемент();
									СерияГТД.Владелец     = НайденнаяСтрокаНоменклатурыГТД.Номенклатура;
									//НМА 25.08.17 >>
									Если ЗначениеЗаполнено(НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения) Тогда
										СерияГТД.Наименование = СокрЛП(НомерГТД.Код)+", "+НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения.Наименование;
									Иначе
										СерияГТД.Наименование = СокрЛП(НомерГТД.Код);
									КонецЕсли;
									СерияГТД.СтранаПроисхождения = НайденнаяСтрокаНоменклатурыГТД.Номенклатура.СтранаПроисхождения;
									//НМА 25.08.17 <<
									СерияГТД.НомерГТД     = НомерГТД.Ссылка; 
									//СерияГТД.СрокГодности = СтрокаТЗИзWMS.СрокГодности; ////НМА 04.09.17 СрокиГодности НЕ в сериях
									СерияГТД.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
									СерияГТД.Записать();
									ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияГТД.Ссылка, "Создана автоматически при обмене с WMS "+ТекущаяДата());
									СерияНоменклатуры = СерияГТД.Ссылка;
									//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
								КонецЕсли;
							КонецЕсли;//НМА 04.09.17 <<
						
						КонецЦикла;
						
						СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = НоменклатураПоБраку;
						СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = ЕдиницаИзмеренияНоменклатурыПоБраку;
						СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = ЕдиницаИзмеренияНоменклатурыПоБраку.Коэффициент;
						
						Если НайденнаяСтрока<>Неопределено Тогда //Качество - брак, был в заказе
							СтрокаПТУ_ИзлишкиНедостача.Цена             = НайденнаяСтрока.Цена;
							//СтрокаПТУ_ИзлишкиНедостача.Сумма            = НайденнаяСтрока.Сумма;
							СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = НайденнаяСтрока.СтавкаНДС; //НМА 19.06.17
							//СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = НайденнаяСтрока.ЦенаИзДокумента;
							//СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = НайденнаяСтрока.СуммаИзДокумента;
							//НМА 18.07.17
							Если СтрокаТЗИзWMS.ЕдиницаИзмерения<>НайденнаяСтрока.ЕдиницаИзмерения Тогда  
								Если СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент<>0 Тогда
									СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = Окр(НайденнаяСтрока.Количество*НайденнаяСтрока.ЕдиницаИзмерения.Коэффициент/СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент,3);
									//НМА 24.08.17 >>
									Если СтрокаТЗИзWMS.КоличествоБрака>0 Тогда
										СтрокаПТУ_ИзлишкиНедостача.Количество    = СтрокаТЗИзWMS.КоличествоБрака; //НМА 24.08.17
										СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоБрака;
									Иначе	
										//СтрокаПТУ_ИзлишкиНедостача.Количество    = СтрокаПТУ.КоличествоПлан - СтрокаТЗИзWMS.КоличествоПринято; //НМА 24.08.17
										СтрокаПТУ_ИзлишкиНедостача.Количество    = СтрокаТЗИзWMS.КоличествоПринято; //НМА 26.09.17
										СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
									КонецЕсли;
									//НМА 24.08.17 <<
									СтрокаПТУ_ИзлишкиНедостача.Цена              = Окр(НайденнаяСтрока.Цена*СтрокаТЗИзWMS.ЕдиницаИзмерения.Коэффициент/НайденнаяСтрока.ЕдиницаИзмерения.Коэффициент,2);
									СтрокаПТУ_ИзлишкиНедостача.Сумма             = СтрокаПТУ_ИзлишкиНедостача.Цена*СтрокаПТУ_ИзлишкиНедостача.Количество;
								Иначе
									СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
									СтрокаПТУ_ИзлишкиНедостача.Количество        = 0;
									СтрокаПТУ_ИзлишкиНедостача.Сумма             = 0;
									СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
								КонецЕсли;
							Иначе
								СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = НайденнаяСтрока.Количество;
								//НМА 24.08.17 >>
								Если СтрокаТЗИзWMS.КоличествоБрака>0 Тогда
									СтрокаПТУ_ИзлишкиНедостача.Количество    = СтрокаТЗИзWMS.КоличествоБрака; //НМА 24.08.17
								Иначе
									//СтрокаПТУ_ИзлишкиНедостача.Количество    = НайденнаяСтрока.Количество; //НМА 24.08.17
									СтрокаПТУ_ИзлишкиНедостача.Количество    = СтрокаТЗИзWMS.КоличествоПринято; //НМА 26.09.17
								КонецЕсли;
								СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаПТУ_ИзлишкиНедостача.Количество;
								//НМА 24.08.17 <<
								СтрокаПТУ_ИзлишкиНедостача.Сумма             = НайденнаяСтрока.Сумма;
							КонецЕсли;
							//НМА 18.07.17
							//НМА 15.08.17
							СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = СтрокаПТУ_ИзлишкиНедостача.Цена;
							СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = СтрокаПТУ_ИзлишкиНедостача.Сумма;
							//НМА 15.08.17
							//НМА 27.07.17
							СтрокаПТУ_ИзлишкиНедостача.СерияНоменклатуры = СерияНоменклатуры;
							СтрокаПТУ_ИзлишкиНедостача.КодНоменклатурыПоставщика = НайденнаяСтрока.КодНоменклатурыПоставщика;
							СтрокаПТУ_ИзлишкиНедостача.НаименованиеНоменклатурыПоставщика = НайденнаяСтрока.НаименованиеНоменклатурыПоставщика;
							СтрокаПТУ_ИзлишкиНедостача.НомерГТДПоставщика = НайденнаяСтрока.НомерГТДПоставщика;
							//НМА 27.07.17
							//СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
							
						Иначе //Качество - брак, не было в заказе
							
							Если СрокиГодностиВСериях Тогда //НМА 04.09.17
								Если Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=yy")<>"50" Тогда
									СерияСрокГодности = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy"),Истина,,СтрокаТЗИзWMS.Номенклатура);
									Если СерияСрокГодности=Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
										СерияСрокГодности = Справочники.СерииНоменклатуры.СоздатьЭлемент();
										СерияСрокГодности.Владелец     = СтрокаТЗИзWMS.Номенклатура;
										СерияСрокГодности.Наименование = Формат(СтрокаТЗИзWMS.СрокГодности,"ДФ=dd.MM.yyyy");
										СерияСрокГодности.СрокГодности = СтрокаТЗИзWMS.СрокГодности;
										СерияСрокГодности.Комментарий = "Создана автоматически при обмене с WMS "+ТекущаяДата();
										СерияСрокГодности.Записать();
										СерияНоменклатуры = СерияСрокГодности.Ссылка;
										ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СерииНоменклатуры, СерияНоменклатуры, "Создана автоматически при обмене с WMS "+ТекущаяДата());
										СтрокаПТУ_ИзлишкиНедостача.СерияНоменклатуры = СерияНоменклатуры;
									КонецЕсли;
									////Штрихкод
									СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры);
								КонецЕсли;
							Иначе //НМА 04.09.17
								//СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры); //НМА 04.09.17
							КонецЕсли; //НМА 04.09.17
							
							СтрокаПТУ_ИзлишкиНедостача.Цена             = 0.01;
							СтрокаПТУ_ИзлишкиНедостача.Сумма            = 0;
							СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента  = 0;
							СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента = 0;
							СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС        = СтрокаПТУ_ИзлишкиНедостача.Номенклатура.СтавкаНДС; //НМА 19.06.17
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = 0;
							//НМА 24.08.17 >>
							Если СтрокаТЗИзWMS.КоличествоБрака>0 Тогда
								СтрокаПТУ_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоБрака;
							Иначе
								СтрокаПТУ_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоПринято;
							КонецЕсли;
							СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаПТУ_ИзлишкиНедостача.Количество;
							//СтрокаПТУ_ИзлишкиНедостача.Количество = СтрокаТЗИзWMS.КоличествоПринято;
							//СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = СтрокаТЗИзWMS.КоличествоПринято;
							ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !В строке №"+СтрокаПТУ_ИзлишкиНедостача.НомерСтроки+" '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' цена и сумма неизвестна (т.к. позиции не было в заказе)!";
						КонецЕсли;
						
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
						
					КонецЕсли;
					
					//Если СтрокаПТУ.КачествоТовара = Справочники.Качество.Новый Тогда
					//	СтрокаПТУ.Склад = ПТУ.СкладОрдер;
					//Иначе
					//	СтрокаПТУ.Склад = Справочники.Склады.НайтиПоНаименованию("Брак");
					//КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
	КонецЦикла;		
	
	//Если ОдноПТУНаЗаказ Тогда
		////ПТУ.УстановитьНовыйНомер();
		//НМА 14.12.16 >>
		//добавим строки из заказа, если их нет в поступлении
		Для Каждого СтрокаИзТЧТовары ИЗ ПТУ_ТЧТовары Цикл
			НедостающаяСтрока = ТЗИзWMS.Найти(СтрокаИзТЧТовары.Номенклатура, "Номенклатура");
			Если НедостающаяСтрока=Неопределено Тогда
				СтрокаПТУ_ИзлишкиНедостача = ПТУ_ИзлишкиНедостача.Товары.Добавить();
				СтрокаПТУ_ИзлишкиНедостача.Номенклатура      = СтрокаИзТЧТовары.Номенклатура;
				СтрокаПТУ_ИзлишкиНедостача.ЕдиницаИзмерения  = СтрокаИзТЧТовары.ЕдиницаИзмерения;
				СтрокаПТУ_ИзлишкиНедостача.Коэффициент       = СтрокаИзТЧТовары.Коэффициент;
				СтрокаПТУ_ИзлишкиНедостача.КачествоТовара    = Справочники.Качество.Новый;
				//СтрокаПТУ_ИзлишкиНедостача.Склад             = ПТУ.СкладОрдер;
				
				СтрокаПТУ_ИзлишкиНедостача.КоличествоПлан    = СтрокаИзТЧТовары.Количество;
				СтрокаПТУ_ИзлишкиНедостача.Количество        = СтрокаИзТЧТовары.Количество;
				СтрокаПТУ_ИзлишкиНедостача.КоличествоПринято = 0;
				СтрокаПТУ_ИзлишкиНедостача.Цена              = СтрокаИзТЧТовары.Цена;
				СтрокаПТУ_ИзлишкиНедостача.Сумма             = СтрокаИзТЧТовары.Сумма;
				//СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента   = СтрокаИзТЧТовары.ЦенаИзДокумента;
				//СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента  = СтрокаИзТЧТовары.СуммаИзДокумента;
				СтрокаПТУ_ИзлишкиНедостача.ЦенаИзДокумента   = СтрокаПТУ_ИзлишкиНедостача.Цена;
				СтрокаПТУ_ИзлишкиНедостача.СуммаИзДокумента  = СтрокаПТУ_ИзлишкиНедостача.Сумма;
				СтрокаПТУ_ИзлишкиНедостача.СтавкаНДС         = СтрокаИзТЧТовары.Номенклатура.СтавкаНДС; //НМА 19.06.17
				//НМА 270717
				СтрокаПТУ_ИзлишкиНедостача.КодНоменклатурыПоставщика = СтрокаИзТЧТовары.КодНоменклатурыПоставщика;
				СтрокаПТУ_ИзлишкиНедостача.НаименованиеНоменклатурыПоставщика = СтрокаИзТЧТовары.НаименованиеНоменклатурыПоставщика;
				СтрокаПТУ_ИзлишкиНедостача.НомерГТДПоставщика = СтрокаИзТЧТовары.НомерГТДПоставщика;
				//НМА 270717
				ПТУ_ИзлишкиНедостача.Комментарий = ПТУ_ИзлишкиНедостача.Комментарий+" !Товар '"+СтрокаПТУ_ИзлишкиНедостача.Номенклатура.Наименование+"' добавлен из заказа (т.к. позиции не было в приходе)!";
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПТУ_ИзлишкиНедостача, ПТУ_ИзлишкиНедостача);
			КонецЕсли;
			
			////Заполним КоличествоПлан из заказа 
			//СтрокаПТУ = ПТУ.Товары.Найти(СтрокаИзТЧТовары.Номенклатура, "Номенклатура");
			//Если СтрокаПТУ<>Неопределено Тогда
			//	Если Не ЗначениеЗаполнено(СтрокаПТУ.КоличествоПлан) Тогда
			//		СтрокаПТУ.КоличествоПлан = СтрокаИзТЧТовары.Количество;
			//		Если СтрокаПТУ.КачествоТовара = Справочники.Качество.Новый Тогда
			//			Если СтрокаПТУ.КоличествоПринято>СтрокаПТУ.КоличествоПлан Тогда //Излишки
			//				//СтрокаПТУ.Склад = Справочники.Склады.НайтиПоНаименованию("Брак");
			//				СтрокаПТУ.Количество = СтрокаПТУ.КоличествоПлан;
			//			КонецЕсли;
			//			//Иначе
			//			//	СтрокаПТУ.КоличествоПлан = 0;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЦикла;
		//ПТУ.СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ПТУ); //НМА 15.08.17
		////КурсДокументаБух = ПТУ.Товары.Итог("СуммаИзДокумента");
		
		Если ПТУ_ИзлишкиНедостача.Товары.Количество()>0 Тогда // или 
		//Если ПТУ.Товары.Итог("КоличествоПринято")<>ПТУ_ТЧТовары.Товары.Итог("Количество") Тогда
			ПТУ.СтатусПоступленияТоваров = Перечисления.СтатусыПоступленийТоваровИУслуг.ПринятНеПолностью;
			ПТУ_ИзлишкиНедостача.Товары.Сортировать("НаименованиеНоменклатурыПоставщика Возр"); //НМА 25.09.17
		Иначе
			ПТУ.СтатусПоступленияТоваров = Перечисления.СтатусыПоступленийТоваровИУслуг.Принят;
		КонецЕсли;

		ПТУ.Товары.Сортировать("НаименованиеНоменклатурыПоставщика Возр"); //НМА 25.09.17
					
		Попытка
			ПТУ.Записать(РежимЗаписиДокумента.Запись); //НМА 14.09.17
			//ПТУ.Записать(РежимЗаписиДокумента.Проведение); //НМА 14.09.17
			//СоздатьИзлишкиИНедостачи_ПриПроведенииПоступленияОбработкаПроведения(ПТУ, Ложь); //НМА 14.09.17
			ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПоступлениеТоваровУслуг, ПТУ.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
			Если ПТУ_ИзлишкиНедостача.Товары.Количество()>0 Тогда
				Попытка
					ПТУ_ИзлишкиНедостача.Записать(РежимЗаписиДокумента.Запись);
					ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПоступлениеТоваровУслуг, ПТУ_ИзлишкиНедостача.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
				Исключение
					Текст_ОшибкаЗаписи = " (Не удалось записать ПТУ Излишки/Недостачи " + ")";
					ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПоступлениеТоваровУслуг, ПТУ_ИзлишкиНедостача.Ссылка, Текст_ОшибкаЗаписи);
					ВызватьИсключение Текст_ОшибкаЗаписи;
				КонецПопытки;
			КонецЕсли;
		Исключение
			//Попытка
			//	ПТУ.Записать(РежимЗаписиДокумента.Запись);
			//Исключение
			Текст_ОшибкаЗаписи = " (Не удалось провести ПТУ " + ПТУ.Ссылка + ")";
			ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПоступлениеТоваровУслуг, ПТУ.Ссылка, Текст_ОшибкаЗаписи);
			ВызватьИсключение Текст_ОшибкаЗаписи;
			///КонецПопытки;
		КонецПопытки;
				
		////НМА 14.08.17
		//Если СсылкаНаПТУ.Проведен Тогда
		//	ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
		//	ЗаказПоставщику.Дата = СсылкаНаПТУ.Дата;
		//	//ЗаказПоставщику.ДокументОснование = СсылкаНаПТУ; 
		//	ЗаказПоставщику.Организация = СсылкаНаПТУ.Организация;   
		//	ЗаказПоставщику.Подразделение = СсылкаНаПТУ.Подразделение; 
		//	ЗаказПоставщику.Склад = СсылкаНаПТУ.СкладОрдер;  
		//	ЗаказПоставщику.ТипЦен = СсылкаНаПТУ.ТипЦен;
		//	ЗаказПоставщику.Ответственный = СсылкаНаПТУ.Ответственный;
		//	ЗаказПоставщику.Контрагент = СсылкаНаПТУ.Контрагент;  
		//	ЗаказПоставщику.ДоговорКонтрагента = СсылкаНаПТУ.ДоговорКонтрагента; 
		//	ЗаказПоставщику.ВалютаДокумента = СсылкаНаПТУ.ВалютаДокумента;
		//	ЗаказПоставщику.СуммаДокумента = СсылкаНаПТУ.СуммаДокумента;  
		//	ЗаказПоставщику.УчитыватьНДС = СсылкаНаПТУ.УчитыватьНДС;  
		//	ЗаказПоставщику.УсловиеПродаж = СсылкаНаПТУ.УсловиеПродаж;  
		//	ЗаказПоставщику.ДатаОплаты = СсылкаНаПТУ.ДатаОплаты;     
		//	ЗаказПоставщику.ДатаПоступления = СсылкаНаПТУ.ДатаПо;
		//	ЗаказПоставщику.Комментарий  = "EmeWmsНомер: "+НомерПриходаEME+". " + СсылкаНаПТУ.Комментарий;
		//	ЗаказПоставщику.Товары.Загрузить(ПТУ_ТЧТовары);
		//	ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
		//	ПТУ.Сделка = ЗаказПоставщику.Ссылка; 
		//	ПТУ.Записать(РежимЗаписиДокумента.Запись);
		//КонецЕсли;
		////НМА 14.08.17

		//Если ПТУ.Проведен Тогда ////НМА 18.09.17  
			
			//ЗаказПоставщику статус закрыт
			//ЗаказПоставщику = СсылкаНаЗаказПоставщику.ПолучитьОбъект();
			//ЗаказПоставщику.Статус_УТ11 = Перечисления.СтатусыЗаказовПоставщикам_УТ11.Закрыт; //Закроем заказ
			//Попытка
			//	ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
			//Исключение
			//	ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЗаказПоставщику,СсылкаНаЗаказПоставщику , "Не удалось записать документ ЗаказПоставщику EmeWmsНомер:"+ПТУ.EmeWmsНомер);
			//КонецПопытки;
			
			////НМА 06.09.17 
			////ЗакрытиеЗаказовПоставщикам
			//ДокЗакрытиеЗаказовПоставщикам = Документы.ЗакрытиеЗаказовПоставщикам.СоздатьДокумент();
			//ДокЗакрытиеЗаказовПоставщикам.Заполнить(СсылкаНаЗаказПоставщику);
			//ДокЗакрытиеЗаказовПоставщикам.Дата = ТекущаяДата();
			//Попытка
			//	ДокЗакрытиеЗаказовПоставщикам.Записать(РежимЗаписиДокумента.Проведение);
			//	ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ЗакрытиеЗаказовПоставщикам, ДокЗакрытиеЗаказовПоставщикам.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
			//Исключение
			//	ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЗакрытиеЗаказовПоставщикам,СсылкаНаЗаказПоставщику , "Не удалось провести документ ЗакрытиеЗаказовПоставщикам EmeWmsНомер:"+ПТУ.EmeWmsНомер);
			//КонецПопытки;
			////НМА 06.09.17 
			
			////АктОРасхожденияхПослеПриемки_УТ11
			//АктОРасхожденияхПослеПриемки_УТ11 = Документы.АктОРасхожденияхПослеПриемки_УТ11.СоздатьДокумент();
			//АктОРасхожденияхПослеПриемки_УТ11.Заполнить(ПТУ.Ссылка);
			//АктОРасхожденияхПослеПриемки_УТ11.Дата = ТекущаяДата();
			//АктОРасхожденияхПослеПриемки_УТ11.ДатаС = ТекущаяДата();
			//АктОРасхожденияхПослеПриемки_УТ11.ДатаПо = ТекущаяДата();
			//АктОРасхожденияхПослеПриемки_УТ11.ОтражатьВУправленческомУчете = Истина;
			//Попытка
			//	АктОРасхожденияхПослеПриемки_УТ11.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
			//	Попытка
			//		АктОРасхожденияхПослеПриемки_УТ11.Записать(РежимЗаписиДокумента.Запись);
			//	Исключение
			//		ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.АктОРасхожденияхПослеПриемки_УТ11, , "Не удалось записать документ АктОРасхожденияхПослеПриемки_УТ11 EmeWmsНомер:"+ПТУ.EmeWmsНомер);
			//	КонецПопытки;
			//КонецПопытки;
			
		//КонецЕсли; ////НМА 18.09.17
		//НМА 14.12.16 <<
		
	//КонецЕсли;

	EmeWmsERPEngine.Success(ERPData);
	
КонецПроцедуры

Процедура СоздатьИзлишкиИНедостачи_ПриПроведенииПоступленияОбработкаПроведения(Источник, Отказ) Экспорт
	//#Если Клиент Тогда
	//	Если Источник.СкладОрдер = Справочники.Склады.НайтиПоКоду("000000005") Тогда
	//		Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	//		Задача.Дата = ТекущаяДата();
	//		Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Fokin");
	//		Задача.Наименование = "Проведено поступление № "+Источник.Номер;
	//		Задача.Оповещение=Истина;
	//		Задача.СрокИсполнения = ТекущаяДата()+900;
	//		Задача.СрокОповещения = ТекущаяДата()+300;
	//		Для Каждого ст из Источник.Товары Цикл
	//		Задача.Описание = Задача.Описание+ст.Номенклатура.Артикул+"     "+ст.Номенклатура+"   Кол = "+ст.Количество+Символы.ПС;
	//		КонецЦикла;
	//		Задача.Записать();
	//	КонецЕсли;
	//	
	//	Если ((РольДоступна(Метаданные.Роли.Пользователь)) и (РежимПроведения <> РежимПроведенияДокумента.Неоперативный)) ИЛИ ((РольДоступна(Метаданные.Роли.Advanced)) и (РежимПроведения <> РежимПроведенияДокумента.Неоперативный)) Тогда
	//		//Если РежимПроведения <> РежимПроведенияДокумента.Неоперативный Тогда
	//		
			Если Источник.Товары.Количество() = 0 Тогда
				возврат;
			КонецЕсли;
			Расхождения=0;
			Для Каждого ст из Источник.Товары Цикл
				Если ст.Количество<>ст.КоличествоПринято Тогда
					//Ответ = Вопрос ("Уверены, что есть недостача или(и) излишки в поступлении?",РежимДиалогаВопрос.ДаНет,,,"ЙаВопросег");
					//Если Ответ = КодВозвратаДиалога.Нет Тогда
					//	Отказ = Истина;
					//	возврат;
					//КонецЕсли;
					
					Расхождения=1;
					
					НовПеремещ = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					НовПеремещ.Дата = ТекущаяДата();
					НовПеремещ.Организация = Источник.Организация;
					НовПеремещ.ВалютаДокумента = Источник.ВалютаДокумента;
					НовПеремещ.Контрагент = Источник.Контрагент;
					НовПеремещ.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
					НовПеремещ.КурсВзаиморасчетов=Источник.КурсВзаиморасчетов;
					НовПеремещ.КратностьВзаиморасчетов=Источник.КратностьВзаиморасчетов;
					НовПеремещ.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
					НовПеремещ.Комментарий = "Создан по факту недостачи по поступлению "+Источник.Номер;
					НовПеремещ.ОтражатьВУправленческомУчете=Истина;
					НовПеремещ.СкладОрдер = Источник.СкладОрдер;
					НовПеремещ.Ответственный = ПараметрыСеанса.ТекущийПользователь.Ссылка;
					НовПеремещ.УчитыватьНДС=Истина;
					НовПеремещ.СуммаВключаетНДС=Истина;
					НовПеремещ.ДатаВходящегоДокумента = Источник.ДатаВходящегоДокумента;
					НовПеремещ.НомерВходящегоДокумента = Источник.НомерВходящегоДокумента;
					НовПеремещ.ДатаВходящегоДокументаЭлектронногоОбмена = Источник.ДатаВходящегоДокументаЭлектронногоОбмена;
					НовПеремещ.НомерВходящегоДокументаЭлектронногоОбмена = Источник.НомерВходящегоДокументаЭлектронногоОбмена;
					НовПеремещ.Сделка = Источник.Сделка; //НМА 16.08.17
					НовПеремещ.ОтражатьВУправленческомУчете = Истина; //НМА 30.08.17

					НовПеремещ2 = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					НовПеремещ2.Дата = ТекущаяДата();
					НовПеремещ2.Организация = Источник.Организация;
					НовПеремещ2.ВалютаДокумента = Источник.ВалютаДокумента;
					НовПеремещ2.Контрагент = Источник.Контрагент;
					НовПеремещ2.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
					НовПеремещ2.КурсВзаиморасчетов=Источник.КурсВзаиморасчетов;;
					НовПеремещ2.КратностьВзаиморасчетов=Источник.КратностьВзаиморасчетов;
					НовПеремещ2.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
					НовПеремещ2.Комментарий = "Создан по факту излишек в поступлении "+Источник.Номер;
					НовПеремещ2.ОтражатьВУправленческомУчете=Истина;
					НовПеремещ2.СкладОрдер = Источник.СкладОрдер;
					НовПеремещ2.Ответственный = ПараметрыСеанса.ТекущийПользователь.Ссылка;
					НовПеремещ2.УчитыватьНДС=Истина;
					НовПеремещ2.СуммаВключаетНДС=Истина;
					НовПеремещ2.ОтражатьВУправленческомУчете = Истина; //НМА 30.08.17
					
					//++ Кузнецов С.А. - Задача в МегаПлане "3137" - 12.04.2016
					НовПеремещ2.ДатаВходящегоДокумента = Источник.ДатаВходящегоДокумента;
					НовПеремещ2.НомерВходящегоДокумента = Источник.НомерВходящегоДокумента;
					НовПеремещ2.ДатаВходящегоДокументаЭлектронногоОбмена = Источник.ДатаВходящегоДокументаЭлектронногоОбмена;
					НовПеремещ2.НомерВходящегоДокументаЭлектронногоОбмена = Источник.НомерВходящегоДокументаЭлектронногоОбмена;
					//-- Кузнецов С.А. - 12.04.2016
					НовПеремещ2.Сделка = Источник.Сделка; //НМА 16.08.17

					прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Расхождения=1 Тогда
				
				Для Каждого стр из Источник.Товары Цикл
					Если стр.КоличествоМест = 1 Тогда
						НовСтр2 = НовПеремещ2.Товары.Добавить();
						НовСтр2.Номенклатура = стр.Номенклатура;
						НовСтр2.СтавкаНДС=НовСтр2.Номенклатура.СтавкаНДС;
						НовСтр2.ЕдиницаИзмерения=стр.ЕдиницаИзмерения; //НМА 30.08.17
						НовСтр2.Коэффициент=стр.Коэффициент; //НМА 30.08.17
						//Если стр.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
						//	ВыбЕд = Справочники.ЕдиницыИзмерения.Выбрать(,стр.Номенклатура);
						//	Пока ВыбЕд.Следующий() Цикл
						//		Если ВыбЕд.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
						//			НовСтр2.ЕдиницаИзмерения = ВыбЕд.Ссылка;
						//			НовСтр2.Коэффициент = ВыбЕд.Коэффициент;
						//			прервать;
						//		КонецЕсли;
						//	КонецЦикла;
						//Иначе
						//	НовСтр2.ЕдиницаИзмерения = НовСтр2.Номенклатура.ЕдиницаХраненияОстатков;
						//	НовСтр2.Коэффициент = 1;
						//КонецЕсли;
						НовСтр2.Количество = стр.КоличествоПринято;
						НовСтр2.Цена = стр.Цена;
						НовСтр2.ЦенаИзДокумента = стр.ЦенаИзДокумента;
						НовСтр2.СуммаИзДокумента = НовСтр2.Количество*НовСтр2.ЦенаИзДокумента;
						//++ Кузнецов С.А. - 30.06.2016
						НовСтр2.КодНоменклатурыПоставщика = стр.КодНоменклатурыПоставщика;
						НовСтр2.НаименованиеНоменклатурыПоставщика = стр.НаименованиеНоменклатурыПоставщика;
						НовСтр2.НомерГТДПоставщика = стр.НомерГТДПоставщика;
						//-- Кузнецов С.А. - 30.06.2016						
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтр2, НовПеремещ2);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтр2, НовПеремещ2);
						продолжить;
					КонецЕсли;
					
					Если стр.Количество = стр.КоличествоПринято Тогда
						продолжить;
					КонецЕсли;
					
					Если стр.Количество>стр.КоличествоПринято Тогда
						НовСтр = НовПеремещ.Товары.Добавить();
						НовСтр.Номенклатура = стр.Номенклатура;
						НовСтр.СтавкаНДС=НовСтр.Номенклатура.СтавкаНДС;
						НовСтр.ЕдиницаИзмерения=стр.ЕдиницаИзмерения; //НМА 30.08.17
						НовСтр.Коэффициент=стр.Коэффициент; //НМА 30.08.17
						//Если стр.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
						//	ВыбЕд = Справочники.ЕдиницыИзмерения.Выбрать(,стр.Номенклатура);
						//	Пока ВыбЕд.Следующий() Цикл
						//		Если ВыбЕд.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
						//			НовСтр.ЕдиницаИзмерения = ВыбЕд.Ссылка;
						//			НовСтр.Коэффициент = ВыбЕд.Коэффициент;
						//			прервать;
						//		КонецЕсли;
						//	КонецЦикла;
						//Иначе
						//	НовСтр.ЕдиницаИзмерения = НовСтр.Номенклатура.ЕдиницаХраненияОстатков;
						//	НовСтр.Коэффициент = 1;
						//КонецЕсли;
						НовСтр.Количество = стр.Количество-стр.КоличествоПринято;
						//НовСтр.КоличествоПлан = стр.КоличествоПлан; //НМА 16.08.17
						НовСтр.Цена = стр.Цена;
						НовСтр.СерияНоменклатуры = стр.СерияНоменклатуры;
						НовСтр.ЦенаИзДокумента = стр.ЦенаИзДокумента;
						НовСтр.СуммаИзДокумента = НовСтр.Количество*НовСтр.ЦенаИзДокумента;
						//++ Кузнецов С.А. - 30.06.2016
						НовСтр.КодНоменклатурыПоставщика = стр.КодНоменклатурыПоставщика;
						НовСтр.НаименованиеНоменклатурыПоставщика = стр.НаименованиеНоменклатурыПоставщика;
						НовСтр.НомерГТДПоставщика = стр.НомерГТДПоставщика;
						//-- Кузнецов С.А. - 30.06.2016						
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтр, НовПеремещ);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтр, НовПеремещ);
					ИначеЕсли стр.Количество<стр.КоличествоПринято Тогда
						НовСтр2 = НовПеремещ2.Товары.Добавить();
						НовСтр2.Номенклатура = стр.Номенклатура;
						НовСтр2.СтавкаНДС=НовСтр2.Номенклатура.СтавкаНДС;
						НовСтр2.ЕдиницаИзмерения=стр.ЕдиницаИзмерения; //НМА 30.08.17
						НовСтр2.Коэффициент=стр.Коэффициент; //НМА 30.08.17
						//Если стр.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
						//	ВыбЕд = Справочники.ЕдиницыИзмерения.Выбрать(,стр.Номенклатура);
						//	Пока ВыбЕд.Следующий() Цикл
						//		Если ВыбЕд.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778") Тогда
						//			НовСтр2.ЕдиницаИзмерения = ВыбЕд.Ссылка;
						//			НовСтр2.Коэффициент = ВыбЕд.Коэффициент;
						//			прервать;
						//		КонецЕсли;
						//	КонецЦикла;
						//Иначе
						//	НовСтр2.ЕдиницаИзмерения = НовСтр2.Номенклатура.ЕдиницаХраненияОстатков;
						//	НовСтр2.Коэффициент = 1;
						//КонецЕсли;
						НовСтр2.Количество = стр.КоличествоПринято-стр.Количество;
						//НовСтр2.КоличествоПлан = стр.КоличествоПлан; //НМА 16.08.17
						НовСтр2.СерияНоменклатуры = стр.СерияНоменклатуры; //НМА 29.08.17
						НовСтр2.Цена = стр.Цена;
						НовСтр2.ЦенаИзДокумента = стр.ЦенаИзДокумента;
						НовСтр2.СуммаИзДокумента = НовСтр2.Количество*НовСтр2.ЦенаИзДокумента;
						//++ Кузнецов С.А. - 30.06.2016
						НовСтр2.КодНоменклатурыПоставщика = стр.КодНоменклатурыПоставщика;
						НовСтр2.НаименованиеНоменклатурыПоставщика = стр.НаименованиеНоменклатурыПоставщика;
						НовСтр2.НомерГТДПоставщика = стр.НомерГТДПоставщика;
						//-- Кузнецов С.А. - 30.06.2016						
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтр2, НовПеремещ2);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтр2, НовПеремещ2);
						
					КонецЕсли;
					
				КонецЦикла;
				
				к=0;
				Пока к<Источник.Товары.Количество() Цикл
					Если Источник.Товары[к].КоличествоМест = 1 Тогда
						Источник.Товары.Удалить(к);
						продолжить;
					КонецЕсли;
					
					Если Источник.Товары[к].Количество>Источник.Товары[к].КоличествоПринято Тогда
						Источник.Товары[к].Количество = Источник.Товары[к].КоличествоПринято;
						Если Источник.Товары[к].Количество = 0 Тогда
							Источник.Товары.Удалить(к);
							продолжить;
						КонецЕсли;
						Источник.Товары[к].СуммаИзДокумента = Источник.Товары[к].ЦенаИзДокумента*Источник.Товары[к].Количество;
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Источник.Товары[к], Источник);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Источник.Товары[к], Источник);

					КонецЕсли;
					к=к+1;
				КонецЦикла;
												
				Если НовПеремещ.Товары.Количество()>0 Тогда
					Попытка
						НовПеремещ.Записать(РежимЗаписиДокумента.Запись);
						ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПоступлениеТоваровУслуг, НовПеремещ.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
					Исключение
						Сообщить (ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
				
				Если НовПеремещ2.Товары.Количество()>0 Тогда
					Попытка
						НовПеремещ2.Записать(РежимЗаписиДокумента.Запись);
						ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПоступлениеТоваровУслуг, НовПеремещ2.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
						//НовПеремещ2.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
						//Источник.Комментарий = Источник.Комментарий+"iddqd";
					Исключение
						Сообщить (ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
				
				//НМА 16.08.17
				Если Источник.СтатусПоступленияТоваров <> Перечисления.СтатусыПоступленийТоваровИУслуг.ПринятНеПолностью Тогда
					Источник.СтатусПоступленияТоваров = Перечисления.СтатусыПоступленийТоваровИУслуг.ПринятНеПолностью;
				КонецЕсли;
				Источник.Записать(РежимЗаписиДокумента.Запись);
				ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ПоступлениеТоваровУслуг, Источник.Ссылка, "Создан автоматически при обмене с WMS "+ТекущаяДата());
				//НМА 16.08.17
				
			КонецЕсли;
			
	//	КонецЕсли;
	//#КонецЕсли
	
КонецПроцедуры
//НМА 01.07.17 по поступлениям товаров

//НМА 170717 Сгенерировать штрихкод из WMS
Функция СгенерироватьШтрихкод(Штрихкод,СрокГодности)
	ПрефиксШтрихкода1 = "02";
	Штрихкод14 = "";
	Если СтрДлина(Штрихкод)=0 Тогда
		Сообщить("Ошибка генерации штрихкода. Штрихкод равен 0 символов!");
		Возврат "";
	ИначеЕсли СтрДлина(Штрихкод)=14 Тогда
		Штрихкод14 = Штрихкод;
	ИначеЕсли СтрДлина(Штрихкод)<14 Тогда
		ДлинаШтрихкода=СтрДлина(Штрихкод);
		КоличествоТребуемыхНулей = 14-ДлинаШтрихкода;
		НулиКШтрихкоду = "";
		Для Ш=1 по КоличествоТребуемыхНулей Цикл
			НулиКШтрихкоду = НулиКШтрихкоду+"0";
		КонецЦикла;
		Штрихкод14 = НулиКШтрихкоду+Штрихкод;
	ИначеЕсли СтрДлина(Штрихкод)>14 Тогда
		Сообщить("Ошибка генерации штрихкода. Штрихкод больше 14 символов!");
		Возврат "";
	КонецЕсли;
	ПрефиксШтрихкода2 = "15";
	СрокГодностиГГММДД = Формат(СрокГодности,"ДФ=yyMMdd"); 
	СгенерированныйШтрихкод = ПрефиксШтрихкода1+Штрихкод14+ПрефиксШтрихкода2+СрокГодностиГГММДД;
	Возврат СгенерированныйШтрихкод;
КонецФункции
//НМА 170717 Сгенерировать штрихкод из WMS

//НМА 11.08.17 Создать новый Штрихкод EAN128 >>
Процедура СоздатьШтрихкодEAN128(СтрокаТЗИзWMS,СерияНоменклатуры)
	////Штрихкод
	Если ЗначениеЗаполнено(СтрокаТЗИзWMS.Штрихкод) и ЗначениеЗаполнено(СтрокаТЗИзWMS.Номенклатура) Тогда
		//Если Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796") = ЕдиницаИзмеренияНоменклатурыПоСрокуГодности Тогда //НМА 170717
		СгенерированныйШтрихкод = СгенерироватьШтрихкод(СтрокаТЗИзWMS.Штрихкод,СтрокаТЗИзWMS.СрокГодности);
		Если ЗначениеЗаполнено(СгенерированныйШтрихкод) Тогда
			ТипШтрихкодаПоСрокуГодности = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128;
			//Иначе
			//	СгенерированныйШтрихкод = СтрокаТЗИзWMS.Штрихкод;
			//	ТипШтрихкодаПоСрокуГодности = СтрокаТЗИзWMS.ТипШтрихкода;
			//КонецЕсли;
			НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Владелец.Установить(СтрокаТЗИзWMS.Номенклатура);
			НаборЗаписей.Отбор.Штрихкод.Установить(СгенерированныйШтрихкод); //НМА 170717
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 1 Тогда
				//Сообщить("Штрихкод: " + СтрокаТЗИзWMS.Штрихкод + " уже имеет владельца """ + СокрЛП(СтрокаТЗИзWMS.Номенклатура) + """.");
				Если НаборЗаписей[0].Владелец <> СтрокаТЗИзWMS.Номенклатура Тогда //НМА 18.08.17
					Сообщить("Штрихкод: " + СгенерированныйШтрихкод + " уже есть в базе. Укажите для владельца """ + СокрЛП(СтрокаТЗИзWMS.Номенклатура) + """ другой штрихкод.");
					ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.Штрихкоды, , "Штрихкод: " + СгенерированныйШтрихкод + " уже есть в базе. Укажите для владельца """ + СокрЛП(СтрокаТЗИзWMS.Номенклатура) + """ другой штрихкод.");
				КонецЕсли;
			Иначе
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Владелец                   = СтрокаТЗИзWMS.Номенклатура;
				НоваяСтрока.Штрихкод                   = СгенерированныйШтрихкод;     //НМА 170717  
				НоваяСтрока.ТипШтрихкода               = ТипШтрихкодаПоСрокуГодности; //НМА 170717
				НоваяСтрока.ЕдиницаИзмерения           = СтрокаТЗИзWMS.ЕдиницаИзмерения;
				НоваяСтрока.СерияНоменклатуры          = СерияНоменклатуры;
				//НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				НоваяСтрока.Качество                   = Справочники.Качество.Новый;
				НаборЗаписей.Записать();
				ЗаписьЖурналаРегистрации("Данные.Добавление", УровеньЖурналаРегистрации.Информация, Метаданные.РегистрыСведений.Штрихкоды, , "Штрихкод "+СгенерированныйШтрихкод+ " создан автоматически при обмене с WMS "+ТекущаяДата());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//НМА 11.08.17 Создать новый Штрихкод EAN128 <<


