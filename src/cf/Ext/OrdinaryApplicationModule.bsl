Перем глСерверТО;
Перем мКлиентOnline;

Перем глОбщиеЗначения Экспорт;

Перем глЗапрашиватьПодтверждениеПриЗакрытии Экспорт;
Перем АдресРесурсовОбозревателя Экспорт; // В переменной содержится значение 
										 // адреса ресурса данной конфигурации
Перем ФормаОповещенияЗадачОткрыта Экспорт;

Перем ECR Экспорт;

// ins SailPlay 08.02.2016 
Перем глКоличествоОтказовSailPlay Экспорт;
// ins SailPlay 08.02.2016 


// функция вызова формы редактирования настройки файла обновления конфигурации
Процедура ОткрытьФормуРедактированияНастройкиФайлаОбновления() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		Предупреждение("Нет прав на чтение данных константы ""Настройка файла обновления конфигурации""", 30, "Настройка файла обновления конфигурации");		
		Возврат;
		
	КонецЕсли;

	ФормаРедактирования = ПолучитьОбщуюФорму("НастройкаФайлаОбновленияКонфигурации");
	ФормаРедактирования.СтруктураПараметров = ПроцедурыОбменаДанными.ПолучитьНастройкиДляФайлаОбновленияКонфигурации(); 
	ФормаРедактирования.Открыть();
	
КонецПроцедуры

// Процедура осуществляпет проверку на необходимость обмена данными с заданным интервалом
Процедура ПроверкаОбменаДанными() Экспорт

	Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	
	// проводим обмен данными
	глЗначениеПеременной("глОбработкаАвтоОбменДанными").ПровестиОбменДанными(); 
		
	ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));

КонецПроцедуры

Процедура ПередНачаломРаботыСистемы(Отказ)	
	УправлениеПользователями.ПроверитьВозможностьРаботыПользователя(Отказ);	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	
	// 14.11.16 Вялов
	ИспользованиеРабочейДаты = РежимРабочейДаты.ИспользоватьТекущуюДату;
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	Если НЕ Пустаястрока(ЗаголовокСистемы) Тогда
		УстановитьЗаголовокСистемы(ЗаголовокСистемы);
	КонецЕсли; 
	
	ФормаОповещенияЗадачОткрыта = Ложь;
	
	мТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить() = "");
	
	Если ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы() Тогда
		возврат;
	КонецЕсли;
	
	// отработка параметров запуска системы
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеСоединениямиИБ.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
	
	СформироватьОтчеты();
	
	ГруппаПользователи = Справочники.Пользователи.НайтиПоНаименованию("Пользователи", Истина, Справочники.Пользователи.ПустаяСсылка());
	ГруппаМагазины = Справочники.Пользователи.НайтиПоНаименованию("Магазины", Истина, ГруппаПользователи);
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	//++ Кузнецов С.А. - Двойная аутентификация продавца - Задача в МегаПлане №3342 - 02.06.2016
	Если ЗначениеЗаполнено(ГруппаМагазины) Тогда
		Если ТекПользователь.ПринадлежитЭлементу(ГруппаМагазины) Тогда
			Если Константы.ИспользоватьДвойнуюАутентификациюПродавца.Получить() Тогда
				результатВхода = ОткрытьФормуМодально("ОбщаяФорма.ФормаДвойнойАутентификацииПродовцов");
				Если Не результатВхода Тогда
					//НМА 09.11.16
					ПараметрыСеанса.ТекущийПродавец = Справочники.Пользователи.ПустаяСсылка();
					ПараметрыСеанса.ДатаНачалаРаботыПродавца = Дата(1,1,1);
					//НМА 09.11.16
					ЗавершитьРаботуСистемы(Ложь);
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	//-- Кузнецов С.А. - 02.06.2016
	
	// Катков А. 30.05.2016 >>	
	Если ЗначениеЗаполнено(ГруппаМагазины) И ЗначениеЗаполнено(ТекПользователь) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка = &ТекПользователь
		|	И Пользователи.Ссылка В ИЕРАРХИИ(&ГруппаМагазины)";
		
		Запрос.УстановитьПараметр("ТекПользователь", ТекПользователь);
		
		Запрос.УстановитьПараметр("ГруппаМагазины", ГруппаМагазины);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Обработка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ПроверкаОзнакомленияСИнструкцией");
			
			Если Обработка <> Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда
				
				Попытка
					ДвоичныеДанные = Обработка.ХранилищеВнешнейОбработки.Получить();
					ИмяФайла = ПолучитьИмяВременногоФайла();
					ДвоичныеДанные.Записать(ИмяФайла);
					Обработка = ВнешниеОбработки.Создать(ИмяФайла);
					Обработка.ПолучитьФорму().Открыть();
				Исключение
					
				КонецПопытки; 
				
			КонецЕсли;	
			
		КонецЕсли; 
		
	КонецЕсли; 
	// Катков А. 30.05.2016 << 	
	
	//++ Вялов В.Ю. - Доп.проверка - распоряжение (устное) Артема к задаче в Мегаплане №3562 от 20.07.2016 
	// разрешено если пользователь : 1) Имеет статус "" 2) согласован СБ 3) согласован рук.розницы
	Если ЗначениеЗаполнено(ГруппаМагазины) Тогда
		Если ТекПользователь.ПринадлежитЭлементу(ГруппаМагазины) Тогда

			Если Константы.КадровыеПеремещенияИспользоватьСтатусИСогласованиеНаРаботуПродавца.Получить() Тогда
				
				Сотрудник = ПараметрыСеанса.ТекущийПродавец;
				
				ТекстОшибкиАутентификации = "";
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	КадроваяИсторияСрезПоследних.Сотрудник КАК Сотрудник,
				|	КадроваяИсторияСрезПоследних.СтатусПродавца КАК СтатусПродавца,				
				|	КадроваяИсторияСрезПоследних.Магазин КАК Магазин
				|ИЗ
				|	РегистрСведений.КадроваяИстория.СрезПоследних(, Сотрудник = &Сотрудник) КАК КадроваяИсторияСрезПоследних";	
				Запрос.УстановитьПараметр("Сотрудник", Сотрудник);	
				РезультатЗапроса = Запрос.Выполнить();	
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ТекстОшибкиАутентификацииДоп = "";
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.СтатусПродавца <> Перечисления.СтатусПродавца.Прикреплен Тогда
						ТекстОшибкиАутентификации = "- не прикреплен к магазину;" + Символы.ПС;
					Иначе			
						ЗнМагазин = ОбщегоНазначения5LB.ПолучитьПсевдоним(ТекПользователь, "Пользователь-Магазин", Справочники.Контрагенты.ПустаяСсылка()); 
						Если ЗначениеЗаполнено(ЗнМагазин) Тогда
						//	// не выполнять проверку
							стрМаг =  """" + Строка(ЗнМагазин) + """";
						Иначе
						   	стрМаг = "";
							ТекстОшибкиАутентификацииДоп = Символы.ПС
								+ "Проверьте в значениях соответствий (регистр ""Псевдонимы"")" + Символы.ПС
								+ "соответствие ""Пользователь-Магазин"" для """ + Строка(ТекПользователь) + """"; 
						КонецЕсли;	
						Если ВыборкаДетальныеЗаписи.Магазин <> ЗнМагазин Тогда
							ТекстОшибкиАутентификации = "- не прикреплен к магазину " + стрМаг + "!" + Символы.ПС
								+ ТекстОшибкиАутентификацииДоп;
						КонецЕсли;																	
					КонецЕсли;
					Прервать;
				КонецЦикла;
	
				Если Сотрудник.СогласованоРуководитель = Дата(1, 1, 1) Тогда
					ТекстОшибкиАутентификации = ТекстОшибкиАутентификации +
					"- не согласован (утвержден) руководителем;" + Символы.ПС;
				КонецЕсли;
				Если  Сотрудник.СогласованоСБ = Дата(1, 1, 1) Тогда
					ТекстОшибкиАутентификации = ТекстОшибкиАутентификации +
					"- не согласован (утвержден) службой безопасности;" + Символы.ПС;
				КонецЕсли;
				
				Если ТекстОшибкиАутентификации <> "" Тогда
					ТекстОшибкиАутентификации = "Текущему пользователю не разрешена работа в 1С"
						+ Символы.ПС + "в связи с имеющимися ошибками аутентификации : "
						+ Символы.ПС
						+ Символы.ПС + ТекстОшибкиАутентификации;
					Предупреждение(ТекстОшибкиАутентификации);
					ЗавершитьРаботуСистемы(Ложь);
				КонецЕсли;
	
				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли; 
	//-- Вялов В.Ю. - Доп.проверка - распоряжение (устное) Артема к задаче в Мегаплане №3562 от 20.07.2016 
	
	

	
	ПроверитьПодключениеОбработчикаОжидания();
	
	// Проверка заполнения констант валют учетов
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаРегламентированногоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты регламентированного учета!");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаУправленческогоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты управленческого учета!");
	КонецЕсли;
	
	// Открытие встроенного почтового клиента при запуске системы, если это задано в настройках
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "АвтооткрытиеЭлектроннойПочтыПриЗапускеПрограммы") = Истина
		И Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() 
		И (Не ПервыйЗапуск) Тогда
		Обработки.МенеджерКонтактов.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	// Проверка наличия комплекта обновления обработок обслуживания торгового оборудования
	ПроверятьООПриЗапуске = ВосстановитьЗначение("ПроверкаНаличияОбновленияОбработокОбслуживанияПриЗапуске");
	ПроверятьООПриЗапуске = ?(ПроверятьООПриЗапуске = Неопределено, Ложь, ПроверятьООПриЗапуске);
	
	Если ПроверятьООПриЗапуске
		И (Не ПервыйЗапуск) Тогда
		АдресИПараметрыСервера = Новый Структура;
		АдресИПараметрыСервера.Вставить("АдресОбработок", ПолучитьСерверТО().ПолучитьАдресОбновленияОбработокОбслуживания());
		
		Если РаботаСТорговымОборудованием.ПроверитьДоступностьНовыхОбработок(АдресИПараметрыСервера, Истина) Тогда
			Ответ = Вопрос("Доступны новые обработки обслуживания торгового оборудования.
			|Открыть форму проверки и обновления обработок обслуживания?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				РаботаСТорговымОборудованием.ОткрытьОбновлениеОбработокОбслуживания(АдресИПараметрыСервера);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВключенИнтерфейсКассира = Ложь;
	
	ЗапускИнтерфейсаКассира(мТекущийПользователь, ВключенИнтерфейсКассира);
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяИБ Тогда
		
		ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		
		Если мТекущийПользователь = ПользовательДляВыполненияРеглЗаданий Тогда
			
			// с интервалом секунд вызываем процедуру работы с регламентными заданиями
			ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
			
			ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// автообмен данными
	Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") <> Неопределено Тогда
		
		// подключим обработчик обменов данными
		ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));
		
	КонецЕсли;
	
	//Если интерфейс кассира включен - панель не нужна.
	Если НЕ ВключенИнтерфейсКассира Тогда
		ОткрытьПанельФункций = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОткрыватьПриЗапускеПанельФункций");
		
		Если ОткрытьПанельФункций 
			Или ПервыйЗапуск Тогда
			ФормаПанели = Обработки.ПанельФункций.ПолучитьФорму();
			ФормаПанели.ПервыйЗапуск = ПервыйЗапуск;
			ФормаПанели.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
	// Открытие Быстрого освоения
	ПоказыватьБыстроеОсвоение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ПоказыватьБыстроеОсвоениеПриНачалеРаботыСистемы");
	Если ПоказыватьБыстроеОсвоение 
		И (Не ПервыйЗапуск) Тогда
		Обработки.БыстроеОсвоение.ПолучитьФорму().Открыть();
	КонецЕсли;	
	
	// Открытие списка задач
	ПоказыватьСписокЗадач = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ПоказыватьСписокЗадачПриЗапуске");
	Если ПоказыватьСписокЗадач
		И (Не ПервыйЗапуск) Тогда
		РаботаСДиалогами.ОткрытьЗадачиТекущегоПользователя();
	КонецЕсли;
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "АвтооткрытиеФормыРабочегоМестаМенеджераПоПродажамПриЗапускеПрограммы") = Истина 
		И (Не ПервыйЗапуск) Тогда
		Обработки.РабочееМестоМенеджераПоПродажам.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	//++ Кузнецов С.А. - Закомментировал, инфа по конфигурации не нужна... - 15.02.2016
	//ПоказыватьФормуДополнительнойИнформации = ВосстановитьЗначение("ПоказСтартовойФормыДополнительнойИнформации");
	//ПоказыватьФормуДополнительнойИнформации = ?(ПоказыватьФормуДополнительнойИнформации = Неопределено, Истина, ПоказыватьФормуДополнительнойИнформации);
	//Если ПоказыватьФормуДополнительнойИнформации 
	//   И (Не ПервыйЗапуск) Тогда
	//	Форма = Обработки.ДополнительнаяИнформация.ПолучитьФорму("ФормаРабочийСтол");
	//	Форма.Открыть();
	//КонецЕсли;		
	//-- Кузнецов С.А. - 15.02.2016	
	
	
	//Уведомление селлеров о новых/изменённых ценах (открываем и заполняем обработку по распечатке ценников), а так же загружаем внешнюю компаненту фискальника + открываем смену
	Если мТекущийПользователь.Родитель = Справочники.Пользователи.НайтиПоКоду("Магазины") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ЗначениеНастроек.Значение 
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
		|ГДЕ
		|   ЗначениеНастроек.Пользователь = &Юзер
		|И  ЗначениеНастроек.Настройка = &Скл";
		Запрос.УстановитьПараметр("Юзер", Справочники.Пользователи.НайтиПоКоду(ПользователиИнформационнойБазы.ТекущийПользователь().Имя).Ссылка);
		Запрос.УстановитьПараметр("Скл", ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойСклад);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		// Вялов - борьба с маразмом
		//Складик = Выборка.Значение;
		СкладВыбран = Выборка.Значение;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Р.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК Р
		|ГДЕ
		|	Р.Объект = &Склад
		|	И Р.Свойство = &Свойство";
		
		// Вялов - борьба с маразмом
		//Запрос.УстановитьПараметр("Склад",Складик);
		Запрос.УстановитьПараметр("Склад", СкладВыбран);
		Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ФискальныйРегистратор"));
		
		Выб = Запрос.Выполнить().Выбрать();
		
		Если (Выб.Следующий()) И (Выб.Значение = Истина) Тогда
			
			Попытка
				ЗагрузитьВнешнююКомпоненту("FprnM1C.dll");
				ECR = Новый("AddIn.FprnM45");
			Исключение
				
				//++ Кузнецов С.А. - Для запуска без ФР - 01.06.2016
				ECR = Неопределено;
				//-- Кузнецов С.А. - 01.06.2016
				
				Предупреждение("Ошибка загрузки внешней компоненты для работы с фискальным регистратором!");												
				ЗавершитьРаботуСистемы();								
			КонецПопытки;
			
			//++ Кузнецов С.А. - Для запуска без ФР - 01.06.2016
			Если ECR <> Неопределено Тогда
				//Занимаем фискальник и открываем смену, если она закрыта
				ECR.DeviceEnabled = 1;
				Если ECR.ResultCode <> 0 Тогда
					Предупреждение ("Ошибка работы фискального регистратора!");
					ЗавершитьРаботуСистемы();
				КонецЕсли;
				
				// получаем состояние ККМ
				Если ECR.GetStatus() <> 0 тогда
					Возврат;
				КонецЕсли;
				
				
				Если ECR.SessionOpened = 0 Тогда
					ECR.Password = "30";
					ECR.Mode = 1;
					Если ECR.SetMode() <> 0 тогда
						Предупреждение ("Не удалось установить нужный режим");
						ЗавершитьРаботуСистемы();
					КонецЕсли;
					
					Если ECR.OpenSession () <> 0 Тогда
						Предупреждение ("Не смогли открыть смену!");
						ЗавершитьРаботуСистемы();
					КонецЕсли;
					Сообщить ("Торговая смена успешно открыта!");
					Если ECR.GetStatus() <> 0 тогда
						Возврат;
					КонецЕсли;
					
					Если ECR.ResetMode() <> 0 тогда
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
				ECR.Password = "30";
				ECR.Mode = 4;
				Если ECR.SetMode() <> 0 тогда
					Возврат;
				КонецЕсли;
				
				ECR.ValuePurpose = 66;
				ECR.Value = 11;
				ECR.SetValue();
				//
				ECR.ValuePurpose = 45;
				ECR.Value = 0;
				ECR.SetValue();			
				
				ECR.CaptionPurpose = 0;
				ECR.Caption ="";
				ECR.SetCaption();
				
				ECR.CaptionPurpose = 1;
				ECR.Caption ="";
				ECR.SetCaption();
				
				ECR.CaptionPurpose = 2;
				ECR.Caption ="";
				ECR.SetCaption();
				
				ECR.CaptionPurpose = 3;
				ECR.Caption ="";
				ECR.SetCaption();
				
				ECR.CaptionPurpose = 4;
				ECR.Caption ="";
				ECR.SetCaption();
				
				ECR.CaptionPurpose = 5;
				ECR.Caption ="";
				ECR.SetCaption();
				
				ECR.CaptionPurpose = 69;
				ECR.Caption =Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+" "+Символ(9)+"С"+Символ(9)+"П"+Символ(9)+"А"+Символ(9)+"С"+Символ(9)+"И"+Символ(9)+"Б"+Символ(9)+"О";//+Символ(9)+" З"+Символ(9)+"А"+Символ(9)+"П"+Символ(9)+"О"+Символ(9)+"К"+Символ(9)+"У"+Символ(9)+"П"+Символ(9)+"К"+Символ(9)+"У";//Символ(9)+"С"+Символ(9)+"П"+Символ(9)+"А"+Символ(9)+"С"+Символ(9)+"И"+Символ(9)+"Б"+Символ(9)+"О"+Символ(9)+" "+Символ(9)+"З"+Символ(9)+"А"+" "+Символ(9)+"П"+Символ(9)+"О"+Символ(9)+"К"+Символ(9)+"У"+Символ(9)+"П"+Символ(9)+"К"+Символ(9)+"У";
				ECR.SetCaption();
				
				ECR.CaptionPurpose = 70;
				ECR.Caption =Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+" "+Символ(9)+"З"+Символ(9)+"А";//Символ(9)+"С"+Символ(9)+"П"+Символ(9)+"А"+Символ(9)+"С"+Символ(9)+"И"+Символ(9)+"Б"+Символ(9)+"О"+Символ(9)+" "+Символ(9)+"З"+Символ(9)+"А"+" "+Символ(9)+"П"+Символ(9)+"О"+Символ(9)+"К"+Символ(9)+"У"+Символ(9)+"П"+Символ(9)+"К"+Символ(9)+"У";
				ECR.SetCaption();
				
				ECR.CaptionPurpose = 71;
				ECR.Caption =Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+" "+Символ(9)+"П"+Символ(9)+"О"+Символ(9)+"К"+Символ(9)+"У"+Символ(9)+"П"+Символ(9)+"К"+Символ(9)+"У"+Символ(9)+"!";
				ECR.SetCaption();
				
				// Женя 22.08.2018
				// Закомментировала печать строк в чеках с информацией "www.5lb.ru" .
				// ((
				
				//ECR.CaptionPurpose = 72;
				//ECR.Caption = "Если у Вас возникли вопросы либо";
				//ECR.SetCaption();
				//
				//ECR.CaptionPurpose = 73;
				//ECR.Caption = "замечания по качеству сервиса -";
				//ECR.SetCaption();
				//
				//ECR.CaptionPurpose = 74;
				//ECR.Caption = "просьба обращаться по адресу";
				//ECR.SetCaption();
				//
				//ECR.CaptionPurpose = 75;
				//ECR.Caption = "www.5lb.ru/fb";
				//ECR.SetCaption();
				
				// )) 22.08.2018 Женя
				
				//ECR.CaptionPurpose = 76;
				//ECR.Caption = "";//"      +7 (963) 712-77-77";
				//ECR.SetCaption();												
				
				Если ECR.ResetMode() <> 0 тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			//-- Кузнецов С.А. - 01.06.2016
			
		КонецЕсли;		
		

		// < 10.11.16 Вялов - Мегаплан № 3934 
		//Запрос = Новый Запрос("
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ИСТИНА КАК Печать,
		//|	Док.Номенклатура КАК Номенклатура,
		//|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		//|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		//|	0 КАК Цена,
		//|	1 КАК Количество
		//|ИЗ
		//|	Документ.УстановкаЦенНоменклатуры.Товары КАК Док
		//|ГДЕ
		//|   Док.Ссылка.Проведен = Истина
		//|И	Док.Ссылка.Дата Между &Дат1 И &Дат2
		//|И	Док.Ссылка.ТипыЦен.ТипЦен = &ТипЦен 
		//|");        										
		//Запрос.УстановитьПараметр("Дат1", НачалоДня(ТекущаяДата()-86400));
		//Запрос.УстановитьПараметр("Дат2", КонецДня(ТекущаяДата()));
		//Запрос.УстановитьПараметр("ТипЦен", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"));
		//
		ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
		//ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		ОбработкаПечатьЦенников.ДатаДока = ТекущаяДата();
		// 10.11.16 Вялов - Мегаплан № 3934 >
	
		
		Запрос2 = Новый Запрос;
		Запрос2.Текст="
		|ВЫБРАТЬ
		|	ЗначениеНастроек.Значение, 
		|	ЗначениеНастроек.Пользователь,
		|	ЗначениеНастроек.Настройка
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
		|ГДЕ
		|   ЗначениеНастроек.Пользователь = &Юзер
		|И  ЗначениеНастроек.Настройка = &Скл";
		Запрос2.УстановитьПараметр("Юзер", Справочники.Пользователи.НайтиПоКоду(ПользователиИнформационнойБазы.ТекущийПользователь().Имя).Ссылка);
		Запрос2.УстановитьПараметр("Скл", ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойСклад);
		
		Выборка = Запрос2.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбработкаПечатьЦенников.ТипЦен = Выборка.Значение.Ссылка.ТипЦенРозничнойТорговли;
			// Вялов - борьба с маразмом
			//Складик = Выборка.Значение;
			СкладВыбран = Выборка.Значение;
		КонецЦикла;
		
		Отбор = Новый Структура("Объект");
		// Вялов - борьба с маразмом
		Отбор.Объект = СкладВыбран; 
		ВыбРег = РегистрыСведений.ЗначенияСвойствОбъектов.Выбрать(Отбор);
		Пока ВыбРег.Следующий() Цикл
			// Вялов - борьба с маразмом
			//Если СокрЛП(ВыбРег.Свойство.Наименование) = СокрЛП(Складик.Наименование)	Тогда
			Если СокрЛП(ВыбРег.Свойство.Наименование) = СокрЛП(СкладВыбран.Наименование)	Тогда
				ОбработкаПечатьЦенников.Организация = ВыбРег.Значение.Ссылка;
			КонецЕсли;
		КонецЦикла;  
		
		// < 10.11.16 Вялов - Мегаплан № 3934 
		// (п.5 - обсудили с Игорем Лосевым = выбрать разные - по 1 ед каждого и только те, которые есть на складе!)				
		
		// Если печать ценников в магазине уже печатался - то не открывать
		ЗапросЦенник = Новый Запрос;
		ЗапросЦенник.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЦенникиНоменклатурыСрезПоследних.ДатаПечатиЦенника,
			|	ЦенникиНоменклатурыСрезПоследних.Склад,
			|	ЦенникиНоменклатурыСрезПоследних.Период
			|ИЗ
			|	РегистрСведений.ЦенникиНоменклатуры.СрезПоследних(&НаДату, Склад = &Склад) КАК ЦенникиНоменклатурыСрезПоследних
			|ГДЕ
			|	ЦенникиНоменклатурыСрезПоследних.Период = &Период
			//|	И ЦенникиНоменклатурыСрезПоследних.ДатаПечатиЦенника = ДАТАВРЕМЯ(1,1,1)
			|";	
	
		ЗапросЦенник.УстановитьПараметр("НаДату", 	КонецДня(ТекущаяДата()));
		ЗапросЦенник.УстановитьПараметр("Период", 	НачалоДня(ТекущаяДата()));
		ЗапросЦенник.УстановитьПараметр("Склад", 	СкладВыбран);
		
		РезультатЗапроса = ЗапросЦенник.Выполнить();
		бПоказатьЦенник = Ложь;
		Если РезультатЗапроса.Пустой() Тогда
			бПоказатьЦенник = Истина;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл 
				Если Выборка.ДатаПечатиЦенника = Дата(1,1,1) Тогда
					бПоказатьЦенник = Истина;			
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// если ценник не печатался сегодня
		Если бПоказатьЦенник Тогда
		
		//	Запрос = Новый Запрос;
		//
		//	Запрос.Текст = 
		//			"ВЫБРАТЬ 
		//			|	ТоварыНаСкладах.Номенклатура КАК Номенклатура
		//		//	|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток
		//			|ПОМЕСТИТЬ втОстатки
		//			|ИЗ
		//			|	РегистрНакопления.ТоварыНаСкладах.Остатки(&НаДату, 
		//			|		Склад = &Склад) КАК ТоварыНаСкладах
		//			|;
		//			|////////////////////////////////////		
		//			|ВЫБРАТЬ
		//			|	ЦеныНоменклатурыВчера.Номенклатура,
		//			|	ЦеныНоменклатурыВчера.Цена,
		//			|	ЦеныНоменклатурыВчера.ЕдиницаИзмерения
		//			|ПОМЕСТИТЬ втЦеныВчера
		//			|ИЗ
		//			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НаДату, ДЕНЬ), СЕКУНДА, -1),
		//			|		ТипЦен = &ТипЦен
		//			|		И Номенклатура В (ВЫБРАТЬ Т1.Номенклатура ИЗ втОстатки КАК Т1)
		//			|		) КАК ЦеныНоменклатурыВчера
		//			|;
		//			|////////////////////////////////////		
		//			|ВЫБРАТЬ
		//			|	ЦеныНоменклатурыСегодня.Номенклатура,
		//			|	ЦеныНоменклатурыСегодня.Цена,
		//			|	ЦеныНоменклатурыСегодня.ЕдиницаИзмерения
		//			|ПОМЕСТИТЬ втЦеныСегодня
		//			|ИЗ
		//			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ),
		//			|		ТипЦен = &ТипЦен
		//			|		И Номенклатура В (ВЫБРАТЬ Т2.Номенклатура ИЗ втОстатки КАК Т2)
		//			|		) КАК ЦеныНоменклатурыСегодня	
		//			|;
		//			|////////////////////////////////////		
		//			|ВЫБРАТЬ
		//			|	ИСТИНА КАК Печать,
		//			|	ЦеныСегодня.Номенклатура КАК Номенклатура,
		//			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
		//			//|	ЦеныСегодня.Цена,
		//			|	0 КАК Цена,
		//			|	ЦеныСегодня.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		//			|	1 КАК Количество                                  	
		//		//	|ПОМЕСТИТЬ втЦеныВчера
		//			|ИЗ
		//			|	втЦеныСегодня КАК ЦеныСегодня
		//			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЦеныВчера КАК ЦеныВчера
		//			|	ПО ЦеныСегодня.Номенклатура = ЦеныВчера.Номенклатура
		//			|		И ЦеныСегодня.Цена <> ЦеныВчера.Цена
		//			|";				
				
			//ТекДт = ТекущаяДата();
			////Запрос.УстановитьПараметр("ДатаВчера",		КонецДня(НачалоДня(ТекДт) - 1));		
			////Запрос.УстановитьПараметр("ДатаНачало", 	НачалоДня(ТекДт));
			////Запрос.УстановитьПараметр("ДатаОкончание", 	КонецДня(ТекДт));
			//Запрос.УстановитьПараметр("НаДату", 	ТекДт);
			//Запрос.УстановитьПараметр("Склад", 		СкладВыбран);
			//Запрос.УстановитьПараметр("ТипЦен", 	Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"));
			
			//ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());  
			//ОбработкаПечатьЦенников.ДатаДока 		= ТекДт;		
			//ОбработкаПечатьЦенников.Склад 			= СкладВыбран;
			//ОбработкаПечатьЦенников.ТипЦен			= СкладВыбран.ТипЦенРозничнойТорговли;
			//// 10.11.16 Вялов - Мегаплан № 3934 > 		
			//
			//СтруктураПараметров = Новый Структура;
			//СтруктураПараметров.Вставить("ЗаполнитьЦены", 			Истина);
			//СтруктураПараметров.Вставить("ЗаполнитьДляМагазина", 	Истина);
			//СтруктураПараметров.Вставить("ПечатьФиксировать", 		Истина);

			//ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
			//ФормаПечатьЦенников.Параметр = СтруктураПараметров;
			//ФормаПечатьЦенников.ЭлементыФормы.ПолеВвода1.Доступность = Истина;
			////ФормаПечатьЦенников.ЭлементыФормы.ПолеВвода1.Значение = Число (Ссылка.Номер);
			//ФормаПечатьЦенников.Открыть();
			
			ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
			ОбработкаПечатьЦенников.Склад = СкладВыбран;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЗаполнитьДляМагазина", Истина);       										
			ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("ФормаМагазин");
			ФормаПечатьЦенников.Параметр = СтруктураПараметров;
			ФормаПечатьЦенников.Открыть();

			
		КонецЕсли;
		// если ценник не печатался сегодня

	КонецЕсли;
	//Уведомление селлеров о новых/изменённых ценах (открываем и заполняем обработку по распечатке ценников), а так же загружаем внешнюю компаненту фискальника + открываем смену

	
	//Юзер Otgruzka печатает чеки на складе
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Имя="Otgruzka" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Р.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК Р
		|ГДЕ
		|	Р.Объект = &Склад
		|	И Р.Свойство = &Свойство";
		
		Запрос.УстановитьПараметр("Склад",		Справочники.Склады.НайтиПоКоду("000000005"));
		Запрос.УстановитьПараметр("Свойство",	ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ФискальныйРегистратор"));
		
		Выб = Запрос.Выполнить().Выбрать();
		
		Если (Выб.Следующий()) И (Выб.Значение = Истина) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Р.Значение
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК Р
			|ГДЕ
			|	Р.Объект = &Склад
			|	И Р.Свойство = &Свойство";
			
			Запрос.УстановитьПараметр("Склад",Справочники.Склады.НайтиПоКоду("000000005"));
			Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Адрес",Истина));
			
			ВыбАдр = Запрос.Выполнить().Выбрать();
			ВыбАдр.Следующий();
			
			Попытка
				ЗагрузитьВнешнююКомпоненту("FprnM1C.dll");
				ECR = Новый("AddIn.FprnM45");
			Исключение
				Предупреждение("Ошибка загрузки внешней компоненты!");
				ЗавершитьРаботуСистемы();
			КонецПопытки;
			
			//Занимаем фискальник и открываем смену, если она закрыта
			ECR.DeviceEnabled = 1;
			Если ECR.ResultCode <> 0 Тогда
				Предупреждение ("Ошибка работы фискального регистратора!");
				ЗавершитьРаботуСистемы();
			КонецЕсли;
			
			// получаем состояние ККМ
			Если ECR.GetStatus() <> 0 тогда
				Возврат;
			КонецЕсли;
			
			
			Если ECR.SessionOpened = 0 Тогда
				ECR.Password = "30";
				ECR.Mode = 1;
				Если ECR.SetMode() <> 0 тогда
					Предупреждение ("Не удалось установить нужный режим");
					ЗавершитьРаботуСистемы();
				КонецЕсли;
				
				Если ECR.OpenSession () <> 0 Тогда
					Предупреждение ("Не смогли открыть смену!");
					ЗавершитьРаботуСистемы();
				КонецЕсли;
				Сообщить ("Торговая смена успешно открыта!");
				Если ECR.GetStatus() <> 0 тогда
					Возврат;
				КонецЕсли;
				
				//Если ECR.ResetMode() <> 0 тогда
				//	Возврат;
				//КонецЕсли;
				
			КонецЕсли;
			
			ECR.Password = "30";
			ECR.Mode = 4;
			Если ECR.SetMode() <> 0 тогда
				Возврат;
			КонецЕсли;
			
			//ECR.CaptionPurpose = 3;
			//ECR.Caption = Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+" "+Символ(9)+"О"+Символ(9)+"О"+Символ(9)+"О"+Символ(9)+" "+Символ(9)+"5"+Символ(9)+"L"+Символ(9)+"B";
			//ECR.SetCaption();
			
			ECR.CaptionPurpose = 4;
			ECR.Caption = Строка(ВыбАдр.Значение);
			ECR.SetCaption();
			
			ECR.CaptionPurpose = 0;
			ECR.Caption = Символ(9)+"С"+Символ(9)+"П"+Символ(9)+"А"+Символ(9)+"С"+Символ(9)+"И"+Символ(9)+"Б"+Символ(9)+"О"+Символ(9)+"ЗА"+Символ(9)+"П"+Символ(9)+"О"+Символ(9)+"К"+Символ(9)+"У"+Символ(9)+"П"+Символ(9)+"К"+Символ(9)+"У";
			ECR.SetCaption();
			
			ECR.CaptionPurpose = 1;
			
			ECR.Caption = Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+Символ(9)+" www.5lb.ru";
			
			ECR.SetCaption();
		КонецЕсли;
	КонецЕсли;
	
	// ins SailPlay 23.11.2015
	Если ПараметрыСеанса.НеВыгружатьВSailPlay = Ложь Тогда
		SailPlay_Модуль.ПройтиАвторизациюSailPlay();
	КонецЕсли; 
	ПодключитьОбработчикВосстановитьСвязь();
	// ins SailPlay 23.11.2015
		
	//пользователю arrival открываем табло выдачи
	Если мТекущийПользователь.Наименование = "arrival" Тогда
		Об = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Табло выдачи");
		Если Об<>Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда
			
			ДвоичныеДанные = Об.ХранилищеВнешнейОбработки.Получить();
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные.Записать(ИмяФайла);
			
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Обработка.ПолучитьФорму().Открыть();
			УдалитьФайлы(ИмяФайла);
		КонецЕсли; 
		
	КонецЕсли;
	
	//пользователю Manager-logist открываем обработину logistic+Список заказов с номером для склада
	Если мТекущийПользователь.Наименование = "Manager-logist" Тогда
		ОткрытиеВнешнихОбработок.Logistic();
		Обработка = Обработки.СписокЗаказовСНомер4Склад.Создать();
		Форма = Обработка.ПолучитьФорму("Форма");
		Форма.Открыть();
	КонецЕсли;
	
	//пользвателю TSD открываем обработку TSD
	Если (мТекущийПользователь.Наименование = "TSD") ИЛИ (мТекущийПользователь.Наименование = "TSDCasio") Тогда
		ОткрытиеВнешнихОбработок.TSD();
	КонецЕсли;
	
	//пользвателю orders открываем обработку Печать заказов по времени
	Если мТекущийПользователь.Наименование = "orders" Тогда
		ОткрытиеВнешнихОбработок.ПечатьЗаказовПоВремени();
	КонецЕсли;
	
	//пользвателю СВХ открываем список перемещений, поступлений и номенклатуру
	Если мТекущийПользователь.Наименование = "СВХ" Тогда
		Документы.ПеремещениеТоваров.ПолучитьФормуСписка("ФормаСписка").Открыть();
		Документы.ПоступлениеТоваровУслуг.ПолучитьФорму("ФормаСписка").Открыть();
		Справочники.Номенклатура.ПолучитьФорму("ФормаСписка").Открыть();
	КонецЕсли;
	
	//пользвателю Spirina Olga открываем список поступлений
	Если мТекущийПользователь.Наименование = "Spirina Olga" Тогда
		Документы.ПоступлениеТоваровУслуг.ПолучитьФорму("ФормаСписка").Открыть();
	КонецЕсли;
	
	//пользвателю Efimov открываем номенклатуру
	Если мТекущийПользователь.Наименование = "Efimov" Тогда
		Справочники.Номенклатура.ПолучитьФорму("ФормаСписка").Открыть();
	КонецЕсли;
	
	
	
	//АвтоЗагрузка отчётов/обработок
	Если НЕ Справочники.АвтоЗагрузка.НайтиПоНаименованию(СокрЛП(мТекущийПользователь.Наименование)).Пустая() Тогда
		ТМП = Справочники.АвтоЗагрузка.НайтиПоНаименованию(СокрЛП(мТекущийПользователь.Наименование));
		Если НЕ ТМП.ПометкаУдаления Тогда
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|Р.Обработка
			|ИЗ РегистрСведений.АвтоЗагрузка КАК Р 
			|ГДЕ Р.ГруппаДоступности = &ТМП";
			Запрос.УстановитьПараметр("ТМП",ТМП.Пользователь);
			
			Рез = Запрос.Выполнить();
			Если НЕ Рез.Пустой() Тогда
				Выб = Рез.Выбрать();
				Пока Выб.Следующий() Цикл
					точка = Найти(Выб.Обработка,".");
					Преф = Лев(Выб.Обработка,точка-1);
					Имя = Сред(Выб.Обработка,точка+1);
					Если Преф = "Об" Тогда
						Попытка
							ОткрытьФорму("Обработка."+Имя+".Форма");
						Исключение
						КонецПопытки;
						//Метаданные["Обработки"].Найти(Имя).ПолноеИмя()
					ИначеЕсли Преф = "От" Тогда
						Попытка
							ОткрытьФорму("Отчет."+Имя+".Форма");
						Исключение
						КонецПопытки;
					ИначеЕсли (Преф = "ВОб") ИЛИ (Преф = "ВОт") Тогда
						Об = Справочники.ВнешниеОбработки.НайтиПоНаименованию(Имя);
						Если Об<>Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда
							
							ДвоичныеДанные = Об.ХранилищеВнешнейОбработки.Получить();
							ИмяФайла = ПолучитьИмяВременногоФайла();
							ДвоичныеДанные.Записать(ИмяФайла);
							
							Обработка = ?(Преф="ВОт",ВнешниеОтчеты.Создать(ИмяФайла),ВнешниеОбработки.Создать(ИмяФайла));
							Обработка.ПолучитьФорму().Открыть();
							УдалитьФайлы(ИмяФайла);
						КонецЕсли; 
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Начнем проверку динамического обновления конфигурации
	НачатьПроверкуДинамическогоОбновленияИБ();
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ЗагружатьАктуальныеКурсыВалютПриЗапускеСистемы") = Истина 
		И (Не ПервыйЗапуск) Тогда
		ОбработкаЗагрузкиКурсовВалют = Обработки.КурсыВалютРБК.Создать();
		ОбработкаЗагрузкиКурсовВалют.НачДата = ТекущаяДата();
		ОбработкаЗагрузкиКурсовВалют.КонДата = ТекущаяДата();
		ОбработкаЗагрузкиКурсовВалют.ЗаполнитьВалюты(Истина);
		ОбработкаЗагрузкиКурсовВалют.ЗагрузитьКурсыСРБК();
	КонецЕсли;
	
	Если ПолучитьСерверТО().ПолучитьСписокУстройств(
		Перечисления.ВидыТорговогоОборудования.ККМOnLine).Количество() > 0 Тогда
		мКлиентOnline = Обработки.ТОКлиентККМOnline.Создать();
		мКлиентOnline.НачатьРаботу();
	КонецЕсли;
	
	// Открытие формы помощника обновления конфигурации
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ОбработкаОбновлениеКонфигурации = Обработки.ОбновлениеКонфигурации.Создать();
		ОбработкаОбновлениеКонфигурации.ПроверитьНаличиеОбновлений();
	КонецЕсли;
	
	//Для обмена с сайтом
	Если СокрЛП(ПараметрЗапуска)="" Тогда   //параметра нет ничего не делаем 
		
	ИначеЕсли Лев(ПараметрЗапуска,3)="авт" тогда
		Попытка
			Дл=СтрДлина(ПараметрЗапуска);
			Строка=Прав(ПараметрЗапуска,Дл-3);
			Обработка = ВнешниеОбработки.Создать(Строка);
			Форма = Обработка.ПолучитьФорму(); 
			Форма.Открыть(); 
		Исключение
			Предупреждение("Обработка не найдена!",5); 
			ЗавершитьРаботуСистемы();
		КонецПопытки;
	КонецЕсли;
	
	// 16.01.17 Вялов - ИНТЕГРАЦИЯ 
	ПараметрыСеанса._Номенклатура_УТ11_Блокировать = Ложь;
	
	// Вялов 26.08.16 - Система сообщений
	ПодключитьОбработчикОжидания("ПроверкаСообщений", 60);	
	
	//06.09.2017, Юра
	//Первоначальное заполнение новых предопределенных элементов справочников
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыЦенНоменклатуры.Ссылка
	               |ИЗ
	               |	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	               |ГДЕ
	               |	ТипыЦенНоменклатуры.Предопределенный
	               |	И ТипыЦенНоменклатуры.Код ПОДОБНО ""0000%""";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекЭлемент = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТекЭлемент.Код = Прав(ТекЭлемент.Наименование,Метаданные.Справочники.ТипыЦенНоменклатуры.ДлинаКода);
		ТекЭлемент.ВалютаЦены = Константы.ВалютаРегламентированногоУчета.Получить();
		ТекЭлемент.ЦенаВключаетНДС = Истина;
		ТекЭлемент.Записать();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПриНачалеРаботыСистемы()

Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	Если глЗапрашиватьПодтверждениеПриЗакрытии <> Ложь Тогда
		ЗапрашиватьПотверждение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	    													  "ЗапрашиватьПодтверждениеПриЗакрытии");
		Если ЗапрашиватьПотверждение Тогда
			Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
		ПроцедурыОбменаДанными.ВыполнитьОбменПриЗавершенииРаботыПрограммы(глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
			
	КонецЕсли;

КонецПроцедуры

// процедура служит для поддержки работы регламентных заданий в файловой версии
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры

Процедура ПриЗавершенииРаботыСистемы()

	// Показ финальной дополнительной информации
	Форма = Обработки.ДополнительнаяИнформация.Создать();
	Форма.ВыполнитьДействие();
	//
	
	//++ Кузнецов С.А. - Фиксируем завершение работы системы продавцом - Задача в МегаПлане №3342 - 02.06.2016
	группаПользователи = Справочники.Пользователи.НайтиПоНаименованию("Пользователи", Истина, Справочники.Пользователи.ПустаяСсылка());
	группаМагазины = Справочники.Пользователи.НайтиПоНаименованию("Магазины", Истина, ГруппаПользователи);
	текПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ЗначениеЗаполнено(группаМагазины) Тогда
		Если текПользователь.ПринадлежитЭлементу(группаМагазины) Тогда
			Если Константы.ИспользоватьДвойнуюАутентификациюПродавца.Получить() Тогда					
				Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПродавец) И ЗначениеЗаполнено(ПараметрыСеанса.ДатаНачалаРаботыПродавца) Тогда
					записьИсторииРаботыПродавцов = РегистрыСведений.ИсторияРаботыПродавцов.СоздатьМенеджерЗаписи();
					записьИсторииРаботыПродавцов.Период = ПараметрыСеанса.ТекущийПользователь;
					записьИсторииРаботыПродавцов.Пользователь = ПараметрыСеанса.ТекущийПользователь;
					записьИсторииРаботыПродавцов.Продавец = ПараметрыСеанса.ТекущийПродавец;
					записьИсторииРаботыПродавцов.НомерСеанса = НомерСеансаИнформационнойБазы();
					записьИсторииРаботыПродавцов.Прочитать();
					Если записьИсторииРаботыПродавцов.Выбран() Тогда
						записьИсторииРаботыПродавцов.ДатаОкончания = ТекущаяДата();
						записьИсторииРаботыПродавцов.Продолжительность = записьИсторииРаботыПродавцов.ДатаОкончания -  записьИсторииРаботыПродавцов.ДатаНачала;
						записьИсторииРаботыПродавцов.Записать();							
					КонецЕсли;							
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	//-- Кузнецов С.А. - 02.06.2016

КонецПроцедуры

// Процедура выполняет запуск отчетов, у которых установлен
// признак "Формировать при входе в систему"
//
Процедура СформироватьОтчеты()

	ВыбраннаяНастройка = ВосстановитьЗначение( "ОбработкаРапортРуководителю_Настройки");
	Если Не ВыбраннаяНастройка = Неопределено Тогда

		Параметры = Неопределено;
		Если ВыбраннаяНастройка.Свойство("_ДанныеФормы", Параметры) Тогда
			АвтоЗапуск = Неопределено;
			Параметры.Свойство("ФормироватьПриСтартеСистемы", АвтоЗапуск);
			Если Не АвтоЗапуск = Неопределено И АвтоЗапуск Тогда
				НовыйОтчет = Отчеты.РапортРуководителю.Создать();
				НовыйОтчетФорма = НовыйОтчет.ПолучитьФорму("ФормаГлавная");
				НовыйОтчетФорма.НачальноеЗначениеВыбора = Истина;
				НовыйОтчетФорма.Открыть();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура проверяет и при необходимости подключает обработчик ожидания
// на запуск процедуры ПроверитьНапоминания()
//
// Параметры:
//  Нет.
//
Процедура ПроверитьПодключениеОбработчикаОжидания() Экспорт

	ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	
	Если глЗначениеПеременной("глТекущийПользователь") <> Неопределено
		 И ТипЗнч(глЗначениеПеременной("глТекущийПользователь")) = Тип("СправочникСсылка.Пользователи")
		 И НЕ глЗначениеПеременной("глТекущийПользователь").Пустая()
		 И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
		 
		ПодключитьОбработчикОжидания("ПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);

		УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));

	Иначе

		ОтключитьОбработчикОжидания("ПроверитьНапоминания");

	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет Напоминания
//
Процедура ПроверитьНапоминания() Экспорт

	УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));

КонецПроцедуры

// < Вялов 26.08.16 - Система сообщений
Процедура ПроверкаСообщений() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияИРассылка.Получатель,
		|	СообщенияИРассылка.Тема,
		|	СообщенияИРассылка.Содержание,
		|	СообщенияИРассылка.Период,
		|	СообщенияИРассылка.ДатаОтправлено,
		|	СообщенияИРассылка.ДатаПодтверждение
		|ИЗ
		|	РегистрСведений.СообщенияИРассылка КАК СообщенияИРассылка
		|ГДЕ
		|	СообщенияИРассылка.ДатаПодтверждение = ДАТАВРЕМЯ(1, 1, 1)
	//	|	И СообщенияИРассылка.Получатель = ТИП(Справочник.Пользователи)
		|	И СообщенияИРассылка.Получатель = &Пользователь		
		|";	
	Запрос.Параметры.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
			ТекстВопроса = ВыборкаДетальныеЗаписи.Содержание;  // + Символы.ПС
			Режим = РежимДиалогаВопрос.ОК; 
			//ТаймАут = 15;
			Заголовок = "Сообщение 1С!" + ?(ВыборкаДетальныеЗаписи.Тема = "", "", " Тема : " + ВыборкаДетальныеЗаписи.Тема);	 		
			Рез = Вопрос(ТекстВопроса, Режим, , , Заголовок);
			Если Рез = КодВозвратаДиалога.ОК Тогда									
				Попытка
					ЗаписьСообщения = РегистрыСведений.СообщенияИРассылка.СоздатьМенеджерЗаписи();
					ЗаписьСообщения.Получатель = ВыборкаДетальныеЗаписи.Получатель;	
					ЗаписьСообщения.Период = ВыборкаДетальныеЗаписи.Период;
					ЗаписьСообщения.Прочитать();
					
					ЗаписьСообщения.ДатаПодтверждение = ТекущаяДата();
					ЗаписьСообщения.Записать(Истина);					
				Исключение	
				КонецПопытки;
			КонецЕсли;	
			
		КонецЦикла;
	 		
	КонецЕсли;		
	
	УстановитьПривилегированныйРежим(Ложь);	

КонецПроцедуры	
// Вялов 26.08.16 - Система сообщений >

// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан текущий пользователь.");
	Иначе
		Форма = глЗначениеПеременной("глТекущийПользователь").ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуТекущегоПользователя()

// Функция возвращает объект для взаимодействия с торговым оборудованием.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <ОбработкаОбъект> - Объект для взаимодействия с торговым оборудованием.
//
Функция ПолучитьСерверТО() Экспорт

	Если глСерверТО = Неопределено Тогда
		глСерверТО = Обработки.ТОСервер.Создать();
	КонецЕсли;

	Возврат глСерверТО;

КонецФункции // ПолучитьСерверТО()

// Функция возвращает значение экспортных переменных модуля приложенийа
//
// Параметры
//  Имя - строка, содержит имя переменной целиком 
//
// Возвращаемое значение:
//   значение соответствующей экспортной переменной
Функция глЗначениеПеременной(Имя) Экспорт

	Возврат ОбщегоНазначения.ПолучитьЗначениеПеременной(Имя, глОбщиеЗначения);
	КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  Имя - строка, содержит имя переменной целиком
// 	Значение - значение переменной
//
Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	ОбщегоНазначения.УстановитьЗначениеПеременной(Имя, глОбщиеЗначения, Значение, ОбновлятьВоВсехКэшах);
	
КонецПроцедуры

// Проверяет необходимость открытия формы "РегистрацияПродаж" документа "ЧекККМ.
//
Процедура ЗапускИнтерфейсаКассира(мТекущийПользователь, ВключенИнтерфейсКассира)
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	Если ПользовательИБ <> Неопределено
	   И ПользовательИБ.ОсновнойИнтерфейс <> Неопределено
	   И ПользовательИБ.ОсновнойИнтерфейс.Имя = "ИнтерфейсКассира" Тогда //Задействуем интерфейс кассира

		ВключенИнтерфейсКассира = Истина;
		Администратор = Ложь;
		Кассир = Ложь;

		Для каждого ТекИнтерфейс Из ГлавныйИнтерфейс Цикл
			ТекИнтерфейс.Переключаемый = Ложь;
			ТекИнтерфейс.Видимость     = Ложь;
		КонецЦикла;
		ИнтерфейсКассира = ГлавныйИнтерфейс.ИнтерфейсКассира;
		ИнтерфейсКассира.Переключаемый = Истина;
		ИнтерфейсКассира.Видимость     = Истина;

		Если РольДоступна("АдминистраторККМ") Тогда //Администратор

			Администратор = Истина;

		ИначеЕсли РольДоступна("ОператорККМ") Тогда //Кассир

			Кассир = Истина;

		КонецЕсли;

		Отказ = Ложь;
		Причина = "";
		КассаККМ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнаяКассаККМ");
		Если КассаККМ = Справочники.КассыККМ.ПустаяСсылка() Тогда
			Предупреждение("Для пользователя """+ мТекущийПользователь +""" не выбрана касса по умолчанию!");
			Отказ = Истина;
			Причина = "Не выбрана касса по умолчанию";
		КонецЕсли;

		Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнойСклад");
		Если Склад = Неопределено
		 Или Склад = Справочники.Склады.ПустаяСсылка() Тогда
			Предупреждение("Для пользователя """+ мТекущийПользователь +""" не выбран склад по умолчанию!");
			Отказ = Истина;
			Причина = "Не выбран склад по умолчанию";
		КонецЕсли;
		ФР = Неопределено;

		Если Не Отказ Тогда
			МассивФР = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор, КассаККМ);

			Если МассивФР.Количество() <> 0 Тогда
				Если Склад.НомерСекции = 0 Тогда
					Предупреждение("У склада: """ + Склад + """не указан номер секции!");
					Отказ = Истина;
					Причина = "У склада не указан номер секции";
				КонецЕсли;
					
			Иначе
				Предупреждение("У кассы: """ + КассаККМ + """, для компьютера: """ + ПолучитьСерверТО().ПолучитьИмяКомпьютераТО() + """, фискальный регистратор не установлен!");
				Отказ = Истина;
				Причина = "У кассы не установлен ФР";
			КонецЕсли;
		КонецЕсли;

		Если Не Отказ Тогда

			Документы.ЧекККМ.СоздатьДокумент().ПолучитьФорму("ФормаРегистрацииПродаж",).Открыть();

		ИначеЕсли Администратор Тогда

			Предупреждение("Зайдите с правами администратора кассы.");
			Если Причина = "ФР не подключен" 
			 Или Причина = "ТО не подключено" 
			 Или Причина = "У кассы не установлен ФР" Тогда
				ФормаПодключенияОборудования = Обработки.ТОНастройка.ПолучитьФорму();
				ФормаПодключенияОборудования.Открыть();
			КонецЕсли;
			ЗавершитьРаботуСистемы();

		ИначеЕсли Кассир Тогда

			Если Причина = "ФР не подключен" 
			 Или Причина = "ТО не подключено" 
			 Или Причина = "У кассы не установлен ФР" Тогда
				Предупреждение("Зайдите с правами администратора кассы.");
			КонецЕсли;

			ЗавершитьРаботуСистемы();

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)

	Если мКлиентOnline <> Неопределено Тогда
		мКлиентOnline.ВнешнееСобытие(Источник, Событие, Данные);
	КонецЕсли;

	ПолучитьСерверТО().ЗавершитьОбработкуВнешнегоСобытия(Источник, Событие, Данные);

КонецПроцедуры // ОбработкаВнешнегоСобытия()

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  – Строка – параметр запуска, переданный в конфигурацию 
//								с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(Знач ПараметрЗапуска)

	// есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	Результат = УправлениеСоединениямиИБ.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	Возврат Результат;

КонецФункции

Процедура ОбщийДействие() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура SellerДействие() Экспорт
	
	Обработка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ПроверкаОзнакомленияСИнструкцией");
	Если Обработка <> Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда
		
		Попытка
			ДвоичныеДанные = Обработка.ХранилищеВнешнейОбработки.Получить();
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Обработка.ПолучитьФорму("ФормаЧтенияИнструкции").Открыть();
		Исключение
			
		КонецПопытки; 
		
	КонецЕсли;	
	
КонецПроцедуры

//SailPlay
Процедура ОбработчикОжиданияSailPlay() Экспорт
	
	Попытка
		SailPlay_Модуль.ВыгрузитьОтложенныеТранзакцииSailPlay();
	Исключение
		#Если Клиент Тогда
			Сообщить("[SailPlay] Ошибка запуска выгрузки отложенных транзакций "+ОписаниеОшибки()+". Продолжайте работать и сообщите об этом в службу поддержки.",СтатусСообщения.Важное);
		#КонецЕсли	
		SailPlay_Модуль.ЗаписатьЛог("Ошибка SailPlay.", "Ошибка запуска выгрузки отложенных транзакций "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// ins SailPlay 08.02.2016 
глКоличествоОтказовSailPlay = 0;
// ins SailPlay 08.02.2016 

// Не допускается изменять значение данной переменной
Если Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0 Тогда
	АдресРесурсовОбозревателя = "TradeBase";
Иначе
	АдресРесурсовОбозревателя = "Trade";
КонецЕсли;

