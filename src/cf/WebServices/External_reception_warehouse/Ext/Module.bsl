//***{+Добавления}*** Тасмаджиев 30/08/2018// ->>
Функция Request_balance(date_request, warehouse_code, product_code, ERROR)
	ERROR = "";
	
	СтруктураПараметров = Новый Структура;
	СписокПараметров = Новый Структура;
	
	Если НЕ Справочники.Склады.НайтиПоКоду(СокрЛП(warehouse_code)).Пустая() Тогда
		СписокПараметров.Вставить("warehouse_code",warehouse_code);
	Иначе
		СписокПараметров.Вставить("warehouse_code","");
		ERROR = ERROR + " ;warehouse_code IS NULL";
	КонецЕсли;
	
	Если ТипЗнч(date_request) = Тип("Дата") Тогда
		СписокПараметров.Вставить("date_request",date_request);
	Иначе
		СписокПараметров.Вставить("date_request",Дата(1,1,1));
		ERROR = ERROR + " ;date_request IS NULL";
	КонецЕсли;
	
	Если НЕ Справочники.Номенклатура.НайтиПоКоду(СокрЛП(product_code)).Пустая() Тогда
		СписокПараметров.Вставить("product_code",product_code);
	Иначе
		СписокПараметров.Вставить("product_code","");
		ERROR = ERROR + " ;product_code IS NULL";
	КонецЕсли;
	
	
	СтруктураПараметров.Вставить("Request_balance",СписокПараметров);
	РезультатЗапроса = ПолучитьДанные(СтруктураПараметров,ERROR);
	
	ArrayType = ФабрикаXDTO.Тип("http://www.external_reception_warehouse.out.org", "array_of_residues");
	element_array = ФабрикаXDTO.Тип("http://www.external_reception_warehouse.out.org", "element_array");
	Array_to_send = ФабрикаXDTO.Создать(element_array);
	
	Если  РезультатЗапроса <> Неопределено Тогда
		
		Если НЕ  РезультатЗапроса.Пустой()Тогда
			РезультатЗапроса = РезультатЗапроса.Выбрать();
			
			Пока РезультатЗапроса.Следующий() Цикл
				element_ = ФабрикаXDTO.Создать(ArrayType);
				element_.product_name    = Лев(РезультатЗапроса.product_name,Метаданные.Справочники.Номенклатура.ДлинаНаименования);
				element_.product_code    = Лев(РезультатЗапроса.product_code,Метаданные.Справочники.Номенклатура.ДлинаКода);
				element_.OKEI_code       = Лев(РезультатЗапроса.OKEI_code,Метаданные.Справочники.Номенклатура.ДлинаКода);
				element_.quantity        = РезультатЗапроса.quantity;
				Array_to_send.element.Добавить(element_);
				
			КонецЦикла;
			
		Иначе
			Array_to_send = ВернутьПустуюСтроку(ArrayType, element_array);	
			
		КонецЕсли;
	Иначе
		Array_to_send = ВернутьПустуюСтроку(ArrayType, element_array);
		
	КонецЕсли;
	
	Возврат Array_to_send;
	
КонецФункции //***{-Добавления}*** Тасмаджиев 30/08/2018// <<-

Функция Request_price(date_request, price_code, product_code, ERROR)
	
	ERROR = "";
	СтруктураПараметров = Новый Структура;
	СписокПараметров = Новый Структура; 
	
	Если ТипЗнч(date_request) = Тип("Дата") Тогда
		СписокПараметров.Вставить("date_request",date_request);
	Иначе
		СписокПараметров.Вставить("date_request",Дата(1,1,1));
		ERROR = ERROR + " ;date_request IS NULL";
	КонецЕсли;
	
	Если НЕ Справочники.ТипыЦенНоменклатуры.НайтиПоКоду(СокрЛП(price_code)).Пустая() Тогда
		СписокПараметров.Вставить("price_code",price_code);
	Иначе
		СписокПараметров.Вставить("price_code","");
		ERROR = ERROR + " ;price_code IS NULL";
	КонецЕсли;
	
	Если НЕ Справочники.Номенклатура.НайтиПоКоду(СокрЛП(product_code)).Пустая() Тогда
		СписокПараметров.Вставить("product_code",product_code);
	Иначе
		СписокПараметров.Вставить("product_code","");
		ERROR = ERROR + " ;product_code IS NULL";
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Request_price",СписокПараметров);
	РезультатЗапроса = ПолучитьДанные(СтруктураПараметров,ERROR);
	
	ArrayType = ФабрикаXDTO.Тип("http://www.external_reception_price.out.org", "array_of_residues");
	element_array = ФабрикаXDTO.Тип("http://www.external_reception_price.out.org", "element_array");
	Array_to_send = ФабрикаXDTO.Создать(element_array);
	
	Если  РезультатЗапроса <> Неопределено Тогда
		
		Если НЕ  РезультатЗапроса.Пустой()Тогда
			РезультатЗапроса = РезультатЗапроса.Выбрать();
			
			Пока РезультатЗапроса.Следующий() Цикл
				element_ = ФабрикаXDTO.Создать(ArrayType);
				element_.product_name    = Лев(РезультатЗапроса.product_name,Метаданные.Справочники.Номенклатура.ДлинаНаименования);
				element_.product_code    = Лев(РезультатЗапроса.product_code,Метаданные.Справочники.Номенклатура.ДлинаКода);
				element_.produсt_barcode = СокрЛП(РезультатЗапроса.produсt_barcode);
				element_.OKEI_code       = Лев(РезультатЗапроса.OKEI_code,Метаданные.Справочники.Номенклатура.ДлинаКода);
				element_.price           = РезультатЗапроса.price;
				Array_to_send.element.Добавить(element_);
				
			КонецЦикла;
			
		Иначе
			Array_to_send = ВернутьПустуюСтроку(ArrayType, element_array);	
			
		КонецЕсли;
	Иначе
		Array_to_send = ВернутьПустуюСтроку(ArrayType, element_array);
		
	КонецЕсли;
	
	Возврат Array_to_send;
	
	
КонецФункции

Функция Request_VGH( product_code, ERROR)
	ERROR = "";
	СтруктураПараметров = Новый Структура;
	СписокПараметров = Новый Структура;
	
	Если НЕ Справочники.Номенклатура.НайтиПоКоду(СокрЛП(product_code)).Пустая() Тогда
		СписокПараметров.Вставить("product_code",product_code);
	Иначе
		СписокПараметров.Вставить("product_code","");
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Request_VGH",СписокПараметров);
	РезультатЗапроса = ПолучитьДанные(СтруктураПараметров,ERROR);
	
	ArrayType = ФабрикаXDTO.Тип("http://www.external_reception_VGH.out.org", "array_of_residues");
	element_array = ФабрикаXDTO.Тип("http://www.external_reception_VGH.out.org", "element_array");
	//ArrayType = ФабрикаXDTO.Тип("http://www.external_reception_information.out.org", "array_of_residues");
	//element_array = ФабрикаXDTO.Тип("http://www.external_reception_information.out.org", "element_array");
	
	Array_to_send = ФабрикаXDTO.Создать(element_array);
	
	Если  РезультатЗапроса <> Неопределено Тогда
		
		Если НЕ  РезультатЗапроса.Пустой()Тогда
			РезультатЗапроса = РезультатЗапроса.Выбрать();
			
			Пока РезультатЗапроса.Следующий() Цикл
				element_ = ФабрикаXDTO.Создать(ArrayType);
				element_.product_name    = Лев(РезультатЗапроса.product_name,Метаданные.Справочники.Номенклатура.ДлинаНаименования);
				element_.product_code    = Лев(РезультатЗапроса.product_code,Метаданные.Справочники.Номенклатура.ДлинаКода);
				GYUID = строка(РезультатЗапроса.product.уникальныйИдентификатор());
				element_.product_guid    = GYUID;
				element_.OKEI_code       = Лев(РезультатЗапроса.OKEI_code,Метаданные.Справочники.Номенклатура.ДлинаКода);
				element_.produсt_barcode = СокрЛП(РезультатЗапроса.produсt_barcode);
				element_.weight          = РезультатЗапроса.weight;
				element_.width           = РезультатЗапроса.width;
				element_.height          = РезультатЗапроса.height;
				element_.depth           = РезультатЗапроса.depth;
				Array_to_send.element.Добавить(element_);
				
			КонецЦикла;
			
		Иначе
			Array_to_send = ВернутьПустуюСтроку(ArrayType, element_array);	
			
		КонецЕсли;
	Иначе
		Array_to_send = ВернутьПустуюСтроку(ArrayType, element_array);
		
	КонецЕсли;
	
	Возврат Array_to_send;
	
КонецФункции

Функция Request_Product_information(date_request, warehouse_code, product_code, price_code, ERROR)
	ERROR = "";
	СтруктураПараметров = Новый Структура;
	СписокПараметров = Новый Структура;
	
	Если ТипЗнч(date_request) = Тип("Дата") Тогда
		СписокПараметров.Вставить("date_request",date_request);
	Иначе
		СписокПараметров.Вставить("date_request",Дата(1,1,1));
		ERROR = ERROR + " ;date_request IS NULL";
	КонецЕсли;
	
	Если НЕ Справочники.Склады.НайтиПоКоду(СокрЛП(warehouse_code)).Пустая() Тогда
		СписокПараметров.Вставить("warehouse_code",warehouse_code);
	Иначе
		СписокПараметров.Вставить("warehouse_code","");
		ERROR = ERROR + " ;warehouse_code IS NULL";
	КонецЕсли;
	
	Если НЕ Справочники.Номенклатура.НайтиПоКоду(СокрЛП(product_code)).Пустая() Тогда
		СписокПараметров.Вставить("product_code",product_code);
	Иначе
		СписокПараметров.Вставить("product_code","");
		ERROR = ERROR + " ;product_code IS NULL";
	КонецЕсли;
	
	Если НЕ Справочники.ТипыЦенНоменклатуры.НайтиПоКоду(СокрЛП(price_code)).Пустая() Тогда
		СписокПараметров.Вставить("price_code",price_code);
	Иначе
		СписокПараметров.Вставить("price_code","");
		ERROR = ERROR + " ;price_code IS NULL";
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Request_Product_information",СписокПараметров);
	РезультатЗапроса = ПолучитьДанные(СтруктураПараметров,ERROR);
	
	ArrayType = ФабрикаXDTO.Тип("http://www.external_reception_information.out.org", "array_of_residues");
	element_array = ФабрикаXDTO.Тип("http://www.external_reception_information.out.org", "element_array");
	Array_to_send = ФабрикаXDTO.Создать(element_array);
	
	Если  РезультатЗапроса <> Неопределено Тогда
		
		Если НЕ  РезультатЗапроса.Пустой()Тогда
			РезультатЗапроса = РезультатЗапроса.Выбрать();
			
			Пока РезультатЗапроса.Следующий() Цикл
				element_ = ФабрикаXDTO.Создать(ArrayType);
				element_.product_name    = Лев(РезультатЗапроса.product_name,Метаданные.Справочники.Номенклатура.ДлинаНаименования);
				element_.product_code    = Лев(РезультатЗапроса.product_code,Метаданные.Справочники.Номенклатура.ДлинаКода);
				GYUID = строка(РезультатЗапроса.product.уникальныйИдентификатор());
				element_.product_guid    = GYUID;
				element_.produсt_barcode = РезультатЗапроса.produсt_barcode;
				element_.OKEI_code       = Лев(РезультатЗапроса.OKEI_code,Метаданные.Справочники.Номенклатура.ДлинаКода);
				element_.quantity        = РезультатЗапроса.quantity;
				element_.price           = РезультатЗапроса.price;
				Array_to_send.element.Добавить(element_);
			КонецЦикла;
			
		Иначе
			Array_to_send = ВернутьПустуюСтроку(ArrayType, element_array);	
		КонецЕсли;
	Иначе
		Array_to_send = ВернутьПустуюСтроку(ArrayType, element_array);
	КонецЕсли;
	
	Возврат Array_to_send;
КонецФункции

Функция ПолучитьДанные(СтруктураПараметров,ERROR)
	
	Если СтруктураПараметров.Свойство("Request_price") Тогда
		Эл = СтруктураПараметров.Request_price;
		
		Если Эл.Свойство("date_request") Тогда
			
			Если   ЗначениеЗаполнено(Эл.date_request)Тогда
				ДатаСреза = Эл.date_request;	
			Иначе
				ДатаСреза = ТекущаяДата();	
			КонецЕсли;
			
		КонецЕсли;
		
		Если Эл.Свойство("price_code") Тогда
			КодЦены = Эл.price_code;
		КонецЕсли;
		
		Если Эл.Свойство("product_code") Тогда
			КодТовара = Эл.product_code;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Товар
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		Если  ЗначениеЗаполнено(КодТовара) Тогда
			Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.НайтиПоКоду(КодТовара));
		Иначе
			ERROR = "Не указан код товара (product_code)";
			Возврат Неопределено;//<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--
		КонецЕсли;			
		
		МассивНоменклатураОтбор = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Товар");
		
		Если ЗначениеЗаполнено(КодЦены)  Тогда
			Запрос.Текст =  
			"ВЫБРАТЬ
			|	Штрихкоды.Штрихкод КАК produсt_barcode,
			|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК price,
			|	Штрихкоды.Владелец.Код КАК product_code,
			|	Штрихкоды.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК OKEI_code,
			|	Штрихкоды.Владелец.Наименование КАК product_name
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&ДатаСреза,
			|				ТипЦен = &ТипЦен
			|					И Номенклатура В (&МассивНоменклатураОтбор)) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО Штрихкоды.Владелец = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|			И Штрихкоды.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
			|ГДЕ
			|	Штрихкоды.Владелец В(&МассивНоменклатураОтбор)
			|	И Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура";
			
			Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
			Запрос.УстановитьПараметр("ТипЦен", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду(КодЦены));
			Запрос.УстановитьПараметр("МассивНоменклатураОтбор", МассивНоменклатураОтбор);
		Иначе
			ERROR = ERROR+ "Не указан тип цен (price_code)";
			Возврат Неопределено; //<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--
		КонецЕсли;	
		
		
	ИначеЕсли СтруктураПараметров.Свойство("Request_VGH") Тогда
		
		Эл = СтруктураПараметров.Request_VGH; 
		
		Если Эл.Свойство("product_code")Тогда
			КодТовара = Эл.product_code;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Товар
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		Если  ЗначениеЗаполнено(КодТовара) Тогда
			Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.НайтиПоКоду(КодТовара));
		Иначе
			ERROR = "Не указан код товара (product_code)";
			Возврат Неопределено;//<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--
		КонецЕсли;			
		
		МассивНоменклатураОтбор = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Товар");
		
		Запрос.Текст =  
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец.Наименование КАК product_name,
		|	Штрихкоды.Владелец.Код КАК product_code,
		|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Код КАК OKEI_code,
		|	Штрихкоды.Владелец КАК product,
		|	Штрихкоды.Штрихкод КАК produсt_barcode,
		|	ЕдиницыИзмерения.Вес КАК weight,
		|	ЕдиницыИзмерения.Ширина КАК width,
		|	ЕдиницыИзмерения.Высота КАК height,
		|	ЕдиницыИзмерения.Глубина КАК depth
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО Штрихкоды.Владелец = ЕдиницыИзмерения.Владелец
		|			И Штрихкоды.Владелец.ЕдиницаХраненияОстатков = ЕдиницыИзмерения.Ссылка
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец ССЫЛКА Справочник.Номенклатура
		|	И ЕдиницыИзмерения.Владелец В(&МассивНоменклатураОтбор)
		|	И Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
		|	И Штрихкоды.Владелец В(&МассивНоменклатураОтбор)";
		
		Запрос.УстановитьПараметр("МассивНоменклатураОтбор",МассивНоменклатураОтбор);
		
	ИначеЕсли СтруктураПараметров.Свойство("Request_balance") Тогда
		Эл = СтруктураПараметров.Request_balance;
		
		Если Эл.Свойство("date_request") Тогда
			Если   ЗначениеЗаполнено(Эл.date_request)Тогда
				ДатаСреза = Эл.date_request;
			Иначе
				ДатаСреза = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;	
		
		Если Эл.Свойство("warehouse_code") Тогда
			КодСклада = Эл.warehouse_code;
		КонецЕсли;
		
		Если Эл.Свойство("product_code")Тогда
			КодТовара = Эл.product_code;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Товар
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаСреза, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0";
		
		Если  ЗначениеЗаполнено(КодТовара) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаСреза, Склад = &Склад) КАК ТоварыНаСкладахОстатки","	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаСреза,  Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки");	
			Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
			Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.НайтиПоКоду(КодТовара));
		ИначеЕсли  ЗначениеЗаполнено(КодСклада) Тогда
			Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
			Запрос.УстановитьПараметр("Склад",Справочники.Склады.НайтиПоКоду(СокрЛП(КодСклада)));
		Иначе
			ERROR = "Не указан код склада (warehouse_code) или код товара (product_code)";
			Возврат Неопределено;//<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--
		КонецЕсли;			
		
		МассивНоменклатураОтбор = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Товар");
		
		Запрос = Новый Запрос;
		Запрос.Текст =  
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура.Наименование КАК product_name,
		|	ТоварыНаСкладахОстатки.Номенклатура.Код КАК product_code,
		|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК OKEI_code,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК quantity
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаСреза, Номенклатура В (&МассивНоменклатураОтбор)) КАК ТоварыНаСкладахОстатки";
		
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
		Запрос.УстановитьПараметр("МассивНоменклатураОтбор", МассивНоменклатураОтбор);
		
		
	ИначеЕсли СтруктураПараметров.Свойство("Request_Product_information") Тогда
		Эл = СтруктураПараметров.Request_Product_information;
		
		Если Эл.Свойство("date_request") Тогда
			Если   ЗначениеЗаполнено(Эл.date_request)Тогда
				ДатаСреза = Эл.date_request;
			Иначе
				ДатаСреза = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;	
		
		Если Эл.Свойство("warehouse_code") Тогда
			КодСклада = Эл.warehouse_code;
		КонецЕсли;
		
		Если Эл.Свойство("product_code")Тогда
			КодТовара = Эл.product_code;
		КонецЕсли;
		
		Если Эл.Свойство("price_code") Тогда
			КодЦены = Эл.price_code;
		КонецЕсли;
		
		
		Если  ЗначениеЗаполнено(КодТовара) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Товар
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка = &Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.НайтиПоКоду(КодТовара));
		ИначеЕсли  ЗначениеЗаполнено(КодСклада) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТоварыНаСкладахОстатки.Номенклатура КАК Товар
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаСреза, Склад = &Склад) КАК ТоварыНаСкладахОстатки
			|ГДЕ
			|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0";
			
			Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
			Запрос.УстановитьПараметр("Склад",Справочники.Склады.НайтиПоКоду(СокрЛП(КодСклада)));
		Иначе
			ERROR = "Не указан код склада (warehouse_code) или код товара (product_code)";
			Возврат Неопределено;//<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--RETURN!<--<--<--
		КонецЕсли;			
		
		МассивНоменклатураОтбор = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Товар");
		
		Запрос = Новый Запрос;
		Запрос.Текст =  
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец.Наименование КАК product_name,
		|	Штрихкоды.Владелец.Код КАК product_code,
		|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Код КАК OKEI_code,
		|	Штрихкоды.Владелец КАК product,
		|	Штрихкоды.Штрихкод КАК produсt_barcode,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК quantity,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК price
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО Штрихкоды.Владелец = ЕдиницыИзмерения.Владелец
		|			И Штрихкоды.Владелец.ЕдиницаХраненияОстатков = ЕдиницыИзмерения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаСреза, Номенклатура В (&МассивНоменклатураОтбор)) КАК ТоварыНаСкладахОстатки
		|		ПО Штрихкоды.Владелец = ТоварыНаСкладахОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ДатаСреза,
		|				ТипЦен = &ТипЦен
		|					И Номенклатура В (&МассивНоменклатураОтбор)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО Штрихкоды.Владелец = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И Штрихкоды.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец ССЫЛКА Справочник.Номенклатура
		|	И ЕдиницыИзмерения.Владелец В(&МассивНоменклатураОтбор)
		|	И Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
		|	И Штрихкоды.Владелец В(&МассивНоменклатураОтбор)";
		
		Запрос.УстановитьПараметр("МассивНоменклатураОтбор",МассивНоменклатураОтбор);
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
		Запрос.УстановитьПараметр("ТипЦен", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду(КодЦены));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
КонецФункции

Функция  КоллекцияXDTO(Элемент)
	Если ТипЗнч(Элемент)=Тип("ОбъектXDTO") Тогда
		МассивXDTO=Новый Массив;
		МассивXDTO.Добавить(Элемент);
		Возврат МассивXDTO;
	КонецЕсли;
	Возврат Элемент;
КонецФункции

//***{+Добавления}*** Тасмаджиев 31/08/2018// ->>
Функция ВернутьПустуюСтроку(ArrayType, element_array)
	
	Array_to_send = ФабрикаXDTO.Создать(element_array);	
	element_ = ФабрикаXDTO.Создать(ArrayType);
	
	Попытка	
		element_.product_guid    = "";
	Исключение
	КонецПопытки;
	Попытка
		element_.product_code    = "";
	Исключение
	КонецПопытки;
	Попытка
		element_.product_name    = "";
	Исключение
	КонецПопытки;
	Попытка
		element_.OKEI_code       = "";
	Исключение
	КонецПопытки;
	Попытка
		element_.produсt_barcode = "";
	Исключение
	КонецПопытки;
	Попытка
		element_.quantity        = 0;
	Исключение
	КонецПопытки;
	Попытка
		element_.price           = 0;
	Исключение
	КонецПопытки;
	Попытка
		element_.product_barcode = "";
	Исключение
	КонецПопытки;
	Попытка
		element_.weight          = 0;
	Исключение
	КонецПопытки;
	Попытка
		element_.width           = 0;
	Исключение
	КонецПопытки;
	Попытка
		element_.height          = 0;
	Исключение
	КонецПопытки;
	
	Попытка
		element_.depth           = 0;
	Исключение
	КонецПопытки;
	
	Array_to_send.element.Добавить(element_);
	Возврат  Array_to_send;
КонецФункции //***{-Добавления}*** Тасмаджиев 31/08/2018// <<-

