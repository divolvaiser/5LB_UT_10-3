Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мРазрешитьНулевыеЦеныВРознице Экспорт;

Перем мОтражатьВРегламентированномУчете Экспорт;

Перем Упаковка;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьПеремещениеТоваров и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечатиПеремещенияТоваров() Экспорт
	
	ПараметрыПечати = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	СкладОтправитель,
	|	СкладОтправитель.Представление КАК Поставщик,
	|	СкладПолучатель,
	|	СкладПолучатель.Представление  КАК Покупатель,
	|	Товары.(
	|		Номенклатура,
	//|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Наименование КАК Товар,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            Как Артикул,
	|		КоличествоМест,
	|		Количество,
	|       КоличествоПринято,
	|		ЕдиницаИзмерения.Представление     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|		Цена,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	|		0 КАК КоличествоМест,
	|		Количество,
	|		0 КАК Цена,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		NULL                                               КАК ЕдиницаИзмеренияМест
	|	)
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	// Выводим шапку накладной
	Если Подразделение = Справочники.Подразделения.НайтиПоНаименованию("ИнтернетМагазин",истина) Тогда
		ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "ДЛЯ ИНТЕРНЕТ МАГАЗИНА! Накладная на перемещение"));	
	Иначе
		ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Накладная на перемещение"));
	КонецЕсли;

	ПараметрыПечати.Вставить("ПредставлениеПоставщика", Шапка.Поставщик);
	ПараметрыПечати.Вставить("Поставщик", Шапка.СкладОтправитель);

	ПараметрыПечати.Вставить("ПредставлениеПолучателя", Шапка.Покупатель);
	ПараметрыПечати.Вставить("Получатель", Шапка.СкладПолучатель);

	// Вывести табличную часть
	//Если РольДоступна(Метаданные.Роли.КладOFFщик) Тогда
	//	ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код;
	//Иначе
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	//КонецЕсли;

	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Артикул");
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Код");
	Иначе
		ПараметрыПечати.Вставить("ВыводитьКоды", Ложь);
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ВыводитьЦены", СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ ИЛИ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПараметрыПечати.Вставить("ФлагПечатиМест", (Товары.Итог("КоличествоМест") > 0));
	
	Позиции = Новый Массив;
	
	Ном = 0;

	// Выборка товаров
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);		
		
		Ном = Ном + 1;

		ПараметрыПозиции.Вставить("НомерСтроки", Ном);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			Если ПараметрыПечати.ИмяКолонкиКодов = "Артикул" Тогда
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТовары.Артикул);
			Иначе
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТовары.Код);
			КонецЕсли;
		КонецЕсли;

		ПараметрыПозиции.Вставить("Товар", ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары));

		Если ПараметрыПечати.ФлагПечатиМест Тогда
			ПараметрыПозиции.Вставить("КоличествоМест", ВыборкаСтрокТовары.КоличествоМест);
			ПараметрыПозиции.Вставить("ЕдиницаИзмеренияМест", ВыборкаСтрокТовары.ЕдиницаИзмеренияМест);
		КонецЕсли;

		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("КоличествоПринято", ВыборкаСтрокТовары.КоличествоПринято);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТовары.Цена);
		
		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли

		ПараметрыПозиции.Вставить("Вес", ВыборкаСтрокТовары.Номенклатура.Вес * ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("Объем", ВыборкаСтрокТовары.Номенклатура.Объем * ВыборкаСтрокТовары.Количество);
		
		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;

	// Выборка возвратная тара
	Пока ВыборкаСтрокТара.Следующий() Цикл
		
		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);		

		Ном = Ном + 1;

		ПараметрыПозиции.Вставить("НомерСтроки", Ном);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			Если ПараметрыПечати.ИмяКолонкиКодов = "Артикул" Тогда
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТара.Артикул);
			Иначе
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТара.Код);
			КонецЕсли;
		КонецЕсли;

		ПараметрыПозиции.Вставить("Товар", ВыборкаСтрокТара.Товар);

		Если ПараметрыПечати.ФлагПечатиМест Тогда
			ПараметрыПозиции.Вставить("КоличествоМест", ВыборкаСтрокТара.КоличествоМест);
			ПараметрыПозиции.Вставить("ЕдиницаИзмеренияМест", ВыборкаСтрокТара.ЕдиницаИзмеренияМест);
		КонецЕсли;
		
		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТара.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТара.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТара.Цена);

		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли

		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	#Если ВнешнееСоединение Тогда
	WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПечати);
	#КонецЕсли
	
	Возврат ПараметрыПечати;
	
КонецФункции //ПолучитьДанныеДляПечатиПеремещенияТоваров()

#Если Клиент Тогда

// Функция осуществляет запись в RFID метки.
//
// Параметры
//  Нет
//
Процедура ЗаписатьВRFIDМетки()

	ЗаполнениеДокументов.ЗаписатьRFIDМеткиИзДокумента(Ссылка);

КонецПроцедуры // ЗаписатьВRFIDМетки()

// Функция осуществляет печать этикеток для позиций ТЧ
//
// Параметры
//  Нет
//
Процедура ПечататьЭтикетки()

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 Или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка, "Цена");
	Иначе
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка);
	КонецЕсли;

КонецПроцедуры // ПечататьЭтикетки()

// Функция печатает ценники.
//
Функция ПечатьЦенников()

	Запрос = Новый Запрос("ВЫБРАТЬ 
						  |РАЗЛИЧНЫЕ
					      |	ИСТИНА КАК Печать,
	                      |	Док.Номенклатура КАК Номенклатура,
	                      |	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
						  |	Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
						  |	0 КАК Цена,
						  // 10.11.16 Вялов - Мегаплан № 3934 (п.5 - обсудили с Игорем Лосевым)
   				          // |	Док.Количество КАК Количество
						  | 1 КАК Количество
					      |ИЗ
	                      |	Документ.ПеремещениеТоваров.Товары КАК Док
	                      |ГДЕ
	                      |	Док.Ссылка = &Док
						  |");

	Запрос.УстановитьПараметр("Док", Ссылка);
	
	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
	ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	ОбработкаПечатьЦенников.ДатаДока = Ссылка.Дата;
	ОбработкаПечатьЦенников.ТипЦен = ЭтотОбъект.СкладПолучатель.ТипЦенРозничнойТорговли;
	
	Отбор = Новый Структура("Объект");
	Отбор.Объект = ЭтотОбъект.СкладПолучатель.Ссылка; 
	ВыбРег = РегистрыСведений.ЗначенияСвойствОбъектов.Выбрать(Отбор);
	Пока ВыбРег.Следующий() Цикл
		Если СокрЛП(ВыбРег.Свойство.Наименование) = СокрЛП(ЭтотОбъект.СкладПолучатель.Наименование)	Тогда
			ОбработкаПечатьЦенников.Организация = ВыбРег.Значение.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);
	
	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.ЭлементыФормы.ПолеВвода1.Доступность = Истина;
	ФормаПечатьЦенников.ЭлементыФормы.ПолеВвода1.Значение = Ссылка.Номер;
	ФормаПечатьЦенников.Открыть();
	
	Отбор = Новый Структура ("Документ",ЭтотОбъект.Ссылка);
	Рег = РегистрыСведений.ВремяСборки.Выбрать(Отбор);
	Пока Рег.Следующий() Цикл
		Если (Рег.Статус = Перечисления.СтатусыСборкиЗаказа.Собирается) И (Рег.Статус2 = Перечисления.СтатусыСборкиЗаказа.Собирается) Тогда
			Запись = Рег.ПолучитьМенеджерЗаписи();
			Запись.Статус2 = Перечисления.СтатусыСборкиЗаказа.Собран;
			Запись.ДатаВремя2 = ТекущаяДата();
			Попытка
				Запись.Записать(Истина);
			Исключение
			КонецПопытки;
		ИначеЕсли Рег.Статус = Перечисления.СтатусыСборкиЗаказа.Собирается Тогда
			Запись = Рег.ПолучитьМенеджерЗаписи();
			Запись.Статус2 = Перечисления.СтатусыСборкиЗаказа.Планируется;
			Запись.ДатаВремя2 = ТекущаяДата();
			Попытка
				Запись.Записать(Истина);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;			


КонецФункции // ПечатьЦенников()

Функция ПечатьОписания()

	//НМА 14.12.17 Печать русификаций из перемещений >>
	//НМА 14.12.17 Стало↓ 
	Об = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Печать русификаций номенклатуры");
	Если Об <> Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда		
		ДвоичныеДанные = Об.ХранилищеВнешнейОбработки.Получить();
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.ДокументДляПечати = Ссылка;
		Обработка.ДокументДляПечатиПриИзмененииВМодулеОбъекта();
		ФормаОбработки = Обработка.ПолучитьФорму();
		ФормаОбработки.ЭлементыФормы.ДокументДляПечати.Доступность = Ложь;
        ФормаОбработки.Открыть(); 
		УдалитьФайлы(ИмяФайла);
	КонецЕсли; 
	 
	//НМА 14.12.17 Было↓ 
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ИСТИНА КАК Печать,
	//|	Док.Номенклатура КАК Номенклатура,
	//|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	//|	0 КАК Цена,
	//|	Док.Количество КАК Количество
	//|ИЗ
	//|	Документ.ПеремещениеТоваров.Товары КАК Док
	//|ГДЕ
	//|	Док.Ссылка = &Док
	//|");
	//
	//Запрос.УстановитьПараметр("Док", Ссылка);
	//
	//ОбработкаПечатьЦенников = Обработки.ПечатьОписания.Создать();
	//ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	////ОбработкаПечатьЦенников.ДатаДока = Ссылка.Дата;
	//ОбработкаПечатьЦенников.ТипЦен = ЭтотОбъект.СкладПолучатель.ТипЦенРозничнойТорговли;
	//
	//Отбор = Новый Структура("Объект");
	//Отбор.Объект = ЭтотОбъект.СкладПолучатель.Ссылка; 
	//ВыбРег = РегистрыСведений.ЗначенияСвойствОбъектов.Выбрать(Отбор);
	//Пока ВыбРег.Следующий() Цикл
	//	Если СокрЛП(ВыбРег.Свойство.Наименование) = СокрЛП(ЭтотОбъект.СкладПолучатель.Наименование)	Тогда
	//		ОбработкаПечатьЦенников.Организация = ВыбРег.Значение.Ссылка;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//
	////СтруктураПараметров = Новый Структура;
	////СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);
	//
	//ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	////ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	////ФормаПечатьЦенников.ЭлементыФормы.ПолеВвода1.Доступность = Истина;
	////ФормаПечатьЦенников.ЭлементыФормы.ПолеВвода1.Значение = Число (Ссылка.Номер);
	//ФормаПечатьЦенников.Открыть();
	//НМА 14.12.17 Печать русификаций из перемещений <<
	
	Отбор = Новый Структура ("Документ",ЭтотОбъект.Ссылка);
	Рег = РегистрыСведений.ВремяСборки.Выбрать(Отбор);
	Пока Рег.Следующий() Цикл
		Если (Рег.Статус = Перечисления.СтатусыСборкиЗаказа.Собирается) И (Рег.Статус2 = Перечисления.СтатусыСборкиЗаказа.Планируется) Тогда
			Запись = Рег.ПолучитьМенеджерЗаписи();
			Запись.Статус2 = Перечисления.СтатусыСборкиЗаказа.Собран;
			Запись.ДатаВремя2 = ТекущаяДата();
			Попытка
				Запись.Записать(Истина);
			Исключение
			КонецПопытки;
		ИначеЕсли Рег.Статус = Перечисления.СтатусыСборкиЗаказа.Собирается Тогда
			Запись = Рег.ПолучитьМенеджерЗаписи();
			Запись.Статус2 = Перечисления.СтатусыСборкиЗаказа.Собирается;
			Запись.ДатаВремя2 = ТекущаяДата();
			Попытка
				Запись.Записать(Истина);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;			


КонецФункции // ПечатьОписания()


// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  ИмяМакета - Имя макета для печати.
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(ИмяМакета, НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, ИмяМакета, , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Возвращает таблицу стоимости по товарам
//
Функция ПолучитьТаблицуСтоимостиТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидДвижения",     ВидДвиженияНакопления.Расход);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|
	|ГДЕ
	|	ПартииТоваровНаСкладах.Регистратор   = &ТекущийДокумент
	|	И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Возвращает стоимость товара
//
Функция ПолучитьСтоимостьТовара(Таблица, Номенклатура, Характеристика = Неопределено, Серия = Неопределено, ПартионныйУчетПоСериям = Ложь, Количество)

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   Номенклатура);
	Если ЗначениеЗаполнено(Характеристика) Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	КонецЕсли;

	Если ПартионныйУчетПоСериям
	   И ЗначениеЗаполнено(Серия) Тогда
		СтруктураПоиска.Вставить("СерияНоменклатуры",          Серия);
	КонецЕсли;

	Строки = Таблица.НайтиСтроки(СтруктураПоиска);

	Если Строки.Количество() > 0 Тогда
		Стоимость  = Строки[0].Стоимость;
		Количество = Строки[0].Количество;
	Иначе
		Стоимость  = 0;
		Количество = 0;
	КонецЕсли;

	Возврат Стоимость;

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеТоваров()

	ПараметрыПечати = ПолучитьДанныеДляПечатиПеремещенияТоваров();	

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть

	Если ПараметрыПечати.ВыводитьЦены Тогда
		ИмяШапки  = "ШапкаТаблицыСЦенами";
		ИмяСтроки = "СтрокаСЦенами";
	Иначе
		ИмяШапки  = "ШапкаТаблицы";
		ИмяСтроки = "Строка";
	КонецЕсли;

	ОбластьНомера  = Макет.ПолучитьОбласть(ИмяШапки + "|НомерСтроки");
	ОбластьКодов   = Макет.ПолучитьОбласть(ИмяШапки + "|КолонкаКодов");
	ОбластьКода   = Макет.ПолучитьОбласть(ИмяШапки + "|Код");
	ОбластьТовар   = Макет.ПолучитьОбласть(ИмяШапки + "|Товар");
	ОбластьМест    = Макет.ПолучитьОбласть(ИмяШапки + "|Мест");
	ОбластьДанных  = Макет.ПолучитьОбласть(ИмяШапки + "|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = ПараметрыПечати.ИмяКолонкиКодов;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьКода);
	//ОбластьКолонкаКод = Макет.Область("Код");
	//ОбластьКолонкаКод.ШиринаКолонки = Макет.Область("R14C3").ШиринаКолонки;
	ТабДокумент.Присоединить(ОбластьТовар);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	//Если ПараметрыПечати.ВыводитьКоды Тогда
	//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
	//										+ ?(ПараметрыПечати.ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	//Иначе
	//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
	//										+ Макет.Область("КолонкаКодов").ШиринаКолонки
	//										+ ?(ПараметрыПечати.ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	//КонецЕсли;
	Если ПараметрыПечати.ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьНомера = Макет.ПолучитьОбласть(ИмяСтроки + "|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть(ИмяСтроки + "|КолонкаКодов");
	ОбластьКода  = Макет.ПолучитьОбласть(ИмяСтроки + "|Код");
	ОбластьТовар  = Макет.ПолучитьОбласть(ИмяСтроки + "|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть(ИмяСтроки + "|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть(ИмяСтроки + "|Данные");

	ИтогоВес = 0;
	ИтогоОбъем = 0;
	// Выборка товаров
	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл

		Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьКода.Параметры.Код = ПараметрыПозиции.Номенклатура.Код;
		ТабДокумент.Присоединить(ОбластьКода);
		
		ОбластьТовар.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьТовар);

		Если ПараметрыПечати.ФлагПечатиМест Тогда
			ОбластьМест.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьДанных);

		ИтогоВес = ИтогоВес + ПараметрыПозиции.Вес;
		ИтогоОбъем = ИтогоОбъем + ПараметрыПозиции.Объем; 
	КонецЦикла;
    	
	// Вывести подвал
	ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	ОбластьКода  = Макет.ПолучитьОбласть("Подвал|Код");
	ОбластьТовар  = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("Подвал|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьКода);
	ОбластьТовар.Параметры.ИтогоВес = ИтогоВес;
	ОбластьТовар.Параметры.ИтогоОбъем = ИтогоОбъем;
	ТабДокумент.Присоединить(ОбластьТовар);
	Если ПараметрыПечати.ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Телега
	Если НЕ СкладПолучатель.Телега Тогда
	ОбластьМакета = Макет.ПолучитьОбласть("Телега");
	ТабДокумент.Вывести(ОбластьМакета);
    КонецЕсли;

	//Коммент
	ОбластьМакета = Макет.ПолучитьОбласть("Коммент");
	ОбластьМакета.Параметры.Комментарий = ЭтотОбъект.Комментарий;
	ТабДокумент.Вывести(ОбластьМакета);


	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

Функция ПечатьПеремещениеТоваровПриёмка()

	ПараметрыПечати = ПолучитьДанныеДляПечатиПеремещенияТоваров();	

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_НакладнаяПриёмки";
	Макет       = ПолучитьМакет("НакладнаяПриёмки");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть

	Если ПараметрыПечати.ВыводитьЦены Тогда
		ИмяШапки  = "ШапкаТаблицыСЦенами";
		ИмяСтроки = "СтрокаСЦенами";
	Иначе
		ИмяШапки  = "ШапкаТаблицы";
		ИмяСтроки = "Строка";
	КонецЕсли;

	ОбластьНомера  = Макет.ПолучитьОбласть(ИмяШапки + "|НомерСтроки");
	ОбластьКодов   = Макет.ПолучитьОбласть(ИмяШапки + "|КолонкаКодов");
	ОбластьКода   = Макет.ПолучитьОбласть(ИмяШапки + "|Код");
	ОбластьТовар   = Макет.ПолучитьОбласть(ИмяШапки + "|Товар");
	ОбластьМест    = Макет.ПолучитьОбласть(ИмяШапки + "|Мест");
	ОбластьДанных  = Макет.ПолучитьОбласть(ИмяШапки + "|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = ПараметрыПечати.ИмяКолонкиКодов;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьКода);
	ТабДокумент.Присоединить(ОбластьТовар);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	//Если ПараметрыПечати.ВыводитьКоды Тогда
	//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
	//										+ ?(ПараметрыПечати.ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	//Иначе
	//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
	//										+ Макет.Область("КолонкаКодов").ШиринаКолонки
	//										+ ?(ПараметрыПечати.ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	//КонецЕсли;
	Если ПараметрыПечати.ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьНомера = Макет.ПолучитьОбласть(ИмяСтроки + "|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть(ИмяСтроки + "|КолонкаКодов");
	ОбластьКода  = Макет.ПолучитьОбласть(ИмяСтроки + "|Код");
	ОбластьТовар  = Макет.ПолучитьОбласть(ИмяСтроки + "|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть(ИмяСтроки + "|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть(ИмяСтроки + "|Данные");

	// Выборка товаров
	ИтогоВес = 0;
	ИтогоОбъем = 0;
	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл

		Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьКода.Параметры.Код = ПараметрыПозиции.Номенклатура.Код;
		ТабДокумент.Присоединить(ОбластьКода);
		ОбластьТовар.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьТовар);

		Если ПараметрыПечати.ФлагПечатиМест Тогда
			ОбластьМест.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьДанных);

		ИтогоВес = ИтогоВес + ПараметрыПозиции.Вес;
		ИтогоОбъем = ИтогоОбъем + ПараметрыПозиции.Объем; 
	КонецЦикла;
    	
	// Вывести подвал
	ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	ОбластьКода  = Макет.ПолучитьОбласть("Подвал|Код");
	ОбластьТовар  = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("Подвал|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьКода);
	ОбластьТовар.Параметры.ИтогоВес = ИтогоВес;
	ОбластьТовар.Параметры.ИтогоОбъем = ИтогоОбъем;
	ТабДокумент.Присоединить(ОбластьТовар);
	Если ПараметрыПечати.ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Телега
	Если НЕ СкладПолучатель.Телега Тогда
	ОбластьМакета = Макет.ПолучитьОбласть("Телега");
	ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()


// Формирует табличный документ по унифицированной форме ТОРГ-13
// 
// Возвращаемое значение
//  Табличный документ - унифицированная форма ТОРГ-13
//
Функция ПечатьТОРГ13()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	ВалютаПечати = мВалютаРегламентированногоУчета;
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК НомерДокумента,
	|	Дата  КАК ДатаДокумента,
	|	Организация,
	|	СкладОтправитель КАК ОтправительПодразделение,
	|	СкладПолучатель  КАК ПолучательПодразделение,
	|	СкладОтправитель.ВидСклада КАК ОтправительВидСклада,
	|	СкладПолучатель.ВидСклада  КАК ПолучательВидСклада,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		Цена,
	|		Количество,
	|		КоличествоМест,
	|		Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|		ЕдиницаИзмерения.Коэффициент КАК ДокЕдиницаКоэффициент,
	|		ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		ЕдиницаИзмеренияМест.Представление           КАК ЕдиницаИзмеренияМестНаименование,
	|		ВЫБОР
	|			КОГДА КоличествоМест > 0 ТОГДА ЕдиницаИзмеренияМест.Коэффициент / Коэффициент
	|			ИНАЧЕ NULL
	|		КОНЕЦ                                        КАК КоличествоВОдномМесте,
	|		ХарактеристикаНоменклатуры                   КАК Характеристика,
	|		СерияНоменклатуры                            КАК Серия,
	|		Номенклатура.ВестиПартионныйУчетПоСериям     КАК ПартионныйУчетПоСериям
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		0 КАК Цена,
	|		0 КАК Сумма,
	|		0 КАК КоличествоВОдномМесте,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
	|	)
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ЭтоСкладНТТ = (Шапка.ОтправительВидСклада = Перечисления.ВидыСкладов.НТТ
	              ИЛИ Шапка.ПолучательВидСклада = Перечисления.ВидыСкладов.НТТ);

	Если НЕ ЭтоСкладНТТ Тогда
		ТаблицаСтоимости        = ПолучитьТаблицуСтоимостиТоваров();
		ТаблицаСтоимости.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");
		ВалютаУпрУчета          = глЗначениеПеременной("ВалютаУправленческогоУчета");
		Параметры               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
		КурсВалютыУпрУчета      = Параметры.Курс;
		КратностьВалютыУпрУчета = Параметры.Кратность;
	КонецЕсли;
	
	ТаблицаТовары = Товары.Выгрузить();
	ТаблицаТовары.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры", "Количество");
	ТаблицаТовары.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");
	СтруктураПоискаПоТоварам = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");

	Макет = ПолучитьОбщийМакет("ТОРГ13");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13";

	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	//++ Кузнецов С.А. - Раскомментировал (в макете "ТОРГ13" - сделал два параметра "ОтправительПодразделение" и "ПредставлениеОрганизации") - 26.02.2016	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента));	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = Шапка.Организация.НаименованиеПлательщикаПриПеречисленииНалогов;
	//-- Кузнецов С.А. - 26.02.2016
	
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	//ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогКоличествоМестПоСтранице = 0;
	ИтогМассаБруттоПоСтранице    = 0;
	ИтогМассыНеттоПоСтранице     = 0;
	ИтогСуммыПоСтранице          = 0;

	// инициализация итогов по документу
	ИтогоКоличество  = 0;
	ИтогоМассаБрутто = 0;
	ИтогоМассаНетто  = 0;
	ИтогоСумма       = 0;

	Ном = 0;

	// Выводим многострочную часть докмента
	ВыборкаСтрокТовары      = Шапка.Товары.Выбрать();
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");

	// Выборка товаров
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			ИтогМассаБруттоПоСтранице    = 0;
			ИтогМассаНеттоПоСтранице     = 0;
			ИтогСуммыПоСтранице          = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		КоличествоМест = Формат(ВыборкаСтрокТовары.Количество, "ЧЦ=15; ЧДЦ=3");

		Если ВыборкаСтрокТовары.КоличествоМест <> 0 И ЗначениеЗаполнено(ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование) Тогда
			КоличествоМест = КоличествоМест 
			                 + Символы.ПС
			                 + " (" + Формат(ВыборкаСтрокТовары.КоличествоМест,"ЧЦ=15; ЧДЦ=0")
			                 + " "
			                 + ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование
			                 + ")";
		КонецЕсли;

		ОбластьМакета.Параметры.КоличествоМест    = КоличествоМест;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ЭтоСкладНТТ Тогда
			Сумма = ВыборкаСтрокТовары.Количество * ВыборкаСтрокТовары.Цена;
		Иначе
			Если ВыборкаСтрокТовары.Количество = 0 Тогда
				Сумма = 0;
				Цена  = 0;
			Иначе
				Количество = 0;
				Сумма = ПолучитьСтоимостьТовара(ТаблицаСтоимости,
				                                ВыборкаСтрокТовары.Номенклатура,
				                                ВыборкаСтрокТовары.Характеристика,
				                                ВыборкаСтрокТовары.Серия,
				                                ВыборкаСтрокТовары.ПартионныйУчетПоСериям,
				                                Количество);
				Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, ВалютаУпрУчета, ВалютаПечати, КурсВалютыУпрУчета, 1, КратностьВалютыУпрУчета, 1);
				
				Если ВыборкаСтрокТовары.ДокЕдиницаКоэффициент <> 0 Тогда
					Количество = Количество * ВыборкаСтрокТовары.ЕдиницаХраненияОстатковКоэффициент / ВыборкаСтрокТовары.ДокЕдиницаКоэффициент;
				КонецЕсли;
				
				СтруктураПоискаПоТоварам.Номенклатура = ВыборкаСтрокТовары.Номенклатура;
				СтруктураПоискаПоТоварам.ХарактеристикаНоменклатуры = ВыборкаСтрокТовары.Характеристика;
				СтруктураПоискаПоТоварам.СерияНоменклатуры = ВыборкаСтрокТовары.Серия;
				СтрокиТаблицыТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоискаПоТоварам);
				Цена = ВыборкаСтрокТовары.Цена;//Окр(?(Количество > 0, Сумма / Количество, 0), 2);
				Сумма = Цена * ВыборкаСтрокТовары.Количество;
			КонецЕсли;

			ОбластьМакета.Параметры.Цена = Цена;
		КонецЕсли;

		ОбластьМакета.Параметры.Сумма = Сумма;

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
		ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
		ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
		ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;

		// Обновим итогов по документу
		ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТовары.Количество;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСумма       = ИтогоСумма       + Сумма;

	КонецЦикла;

	// Выборка возвратная тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			ИтогМассаБруттоПоСтранице    = 0;
			ИтогМассаНеттоПоСтранице     = 0;
			ИтогСуммыПоСтранице          = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);

		ОбластьМакета.Параметры.КоличествоМест    = Формат(ВыборкаСтрокТара.Количество, "ЧЦ=15; ЧДЦ=3");
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТара.Количество;
		ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
		ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
		ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + 0;

		// Обновим итогов по документу
		ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТара.Количество;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСумма       = ИтогоСумма       + 0;

	КонецЦикла;

	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
	ОбластьМакета.Параметры.ИтогоСумма          = ИтогоСумма;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ПараметрыПрописиНаРусском = ВалютаПечати.ПараметрыПрописиНаРусском;
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "1", "0");
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "2", "0");
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "3", "0");
	ОбластьМакета.Параметры.ИтогоСуммаПрописью = ЧислоПрописью(Цел(ИтогоСумма), "L=ru_RU; НП=Ложь; НД=Ложь", ПараметрыПрописиНаРусском);
	ОбластьМакета.Параметры.ИтогоСуммаКоп      = Формат(Цел((ИтогоСумма-Цел(ИтогоСумма))*100), "ЧЦ=2; ЧН=00");
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ13()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()

	ОбработкаПечати          = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	ОбработкаПечати.Документ = ЭтотОбъект.Ссылка;

	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Функция формирует табличный документ унифицированной формы М-4
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",     Ссылка);
	Запрос.УстановитьПараметр("ВидПоступленияОрдер", Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номер КАК Номер,
	|	Дата  КАК ДатаСоставления,
	|	Организация,
	|	Организация             КАК ЮрФизЛицо,
	|	СкладПолучатель         КАК МестоПриемки,
	|	СкладПолучатель.Представление КАК СкладНаименование,
	|	Подразделение,
	|	Подразделение  КАК ПредставлениеПодразделения
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КоличествоПринято,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка       КАК Метка
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		СУММА(Количество)                    КАК КоличествоПринято,
	|		ХарактеристикаНоменклатуры           КАК Характеристика,
	|		СерияНоменклатуры                    КАК Серия,
	|		МИНИМУМ(НомерСтроки)                 КАК НомерСтроки,
	|		0                                    КАК Метка
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО 
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	Номенклатура.Код,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление  КАК ЕдиницаИзмеренияНаименование,
	|	Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	Количество КАК Количество,
	|	NULL,
	|	NULL,
	|	НомерСтроки КАК НомерСтроки,
	|	2           КАК Метка
	|ИЗ
	|(ВЫБРАТЬ
	|	Номенклатура,
	|	СУММА(Количество) КАК Количество,
	|	МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|) КАК ПеремещениеТоваров
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("М4");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_М4";

	// Выводим общие реквизиты шапки
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок докмента
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаСоставления), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	НомерСтраницы   = 1;

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	Ном = 0;

	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;	

	// Выводим многострочную часть докмента
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтрок");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		КоличествоПринято = ВыборкаСтрокТовары.КоличествоПринято;

		ОбластьМакета.Параметры.КоличествоПринято = КоличествоПринято;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)
		                                          + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
		                                          + ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");
												  
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
		Если Ном = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;

		Если НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда

			НомерСтраницы = НомерСтраницы + 1;
			ПодвалСтрок   = Макет.ПолучитьОбласть("ПодвалСтрок");
			ТабДокумент.Вывести(ПодвалСтрок);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;												  
												  
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;

	КонецЦикла;

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");

	ОбластьМакета.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьМ4()

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	КАК НомерДокумента,
	|	Дата	КАК ДатаДокумента,
	|	Дата	КАК ДатаСоставления,
	|	Организация,
	|	СкладОтправитель КАК Склад,
	|	СкладПолучатель КАК Подразделение
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК МатериалНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК НоменклатурныйНомер,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	|	ВложенныйЗапрос.Серия                КАК Серия,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки
	|ИЗ 
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры	КАК Характеристика,
	|		СерияНоменклатуры           КАК Серия,
	|		СУММА(Количество)           КАК Количество,
	|		МИНИМУМ(НомерСтроки) 		КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
	|";

	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_М11";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("М11");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заголовок     = "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + Строка(Шапка.НомерДокумента);
	Область.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Область.Параметры.КодОКПО = СведенияОбОрганизации.КодПоОКПО;
	Область.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
	
	ТабДокумент.Вывести(Область);
	
	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		
		ТабДокумент.Вывести(Область);

	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ11()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	ПолучитьНомерРТУизБазы1СБухгалтерия5ЛБ(); //12.07.2017, Юра
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда

		ТабДокумент = ПечатьПеремещениеТоваров();
	ИначеЕсли ИмяМакета = "ВедомостьПриём" Тогда
		ТабДокумент = ПечатьПеремещениеТоваровПриёмка();
	ИначеЕсли ИмяМакета = "ТОРГ13" тогда
		// Унифицированная форма ТОРГ-13 (накладаня на внутрнее перемещение)
		ТабДокумент = ПечатьТОРГ13();
	ИначеЕсли ИмяМакета = "1Т"
		  ИЛИ ИмяМакета = "_1Т" Тогда
		ТабДокумент = ПечатьТТН();
	ИначеЕсли ИмяМакета = "М4" тогда
		// Унифицированная форма М-4 (приходный ордер)
		ТабДокумент = ПечатьМ4();
	ИначеЕсли ИмяМакета = "М11" Тогда
		ТабДокумент = ПечатьМ11();
	ИначеЕсли ИмяМакета = "БланкОтправитель" Или ИмяМакета = "БланкПолучатель" Тогда
		ТабДокумент = ПечатьБланк(ИмяМакета, НаПринтер);
	ИначеЕсли ИмяМакета = "Ценники" Тогда
		ТабДокумент = ПечатьЦенников();
	ИначеЕсли ИмяМакета = "Описание" Тогда
		ТабДокумент = ПечатьОписания();
	ИначеЕсли ИмяМакета = "Этикетки" Тогда
		ПечататьЭтикетки();
		Возврат;
	ИначеЕсли ИмяМакета = "ПриходНаРозничныеСкладыВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Истина);
	ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
	ИначеЕсли ИмяМакета = "ЗаписьВRFIDМетки" Тогда
		ЗаписатьВRFIDМетки();
		Возврат;
	ИначеЕсли ИмяМакета = "ТОРГ12" Тогда//16.06.2017, Юра
		ТабДокумент = ПечатьТОРГ12();
	ИначеЕсли ИмяМакета = "ТранспортнаяНакладная" Тогда//20.07.2017, Юра
		ТабДокумент = ПечатьТранспортнаяНакладная();
	КонецЕсли;

// < 23.08.17 Вялов - задача № 3926 (Иванова) - необходимо передавать еще ссылку в качестве параметра (для идентификации вида документа)
//	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
// 23.08.17 Вялов - задача № 3926 (Иванова) >


КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Ведомость", "Перемещение товаров");
	СтруктураМакетов.Вставить("ВедомостьПриём", "Приём товара");
	СтруктураМакетов.Вставить("ТОРГ13",             "ТОРГ-13 (Накладная на внутреннее перемещение)");
	СтруктураМакетов.Вставить("_1Т",                "1-Т (Товарно-транспортная накладная)");
	СтруктураМакетов.Вставить("М4",                 "М-4 (Приходный ордер)");
	СтруктураМакетов.Вставить("М11",                "M-11 (Требование-накладная)");
	СтруктураМакетов.Вставить("БланкОтправитель",   "Бланк товарного наполнения, склад отправитель");
	СтруктураМакетов.Вставить("БланкПолучатель",    "Бланк товарного наполнения, склад получатель");
	СтруктураМакетов.Вставить("Ценники",            "Ценники на товары");
	СтруктураМакетов.Вставить("Описание",            "Описание/Русификация товара");
	СтруктураМакетов.Вставить("Этикетки",           "Этикетки");
	СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ", "Расход с розничных складов в ценах АТТ");
	СтруктураМакетов.Вставить("ПриходНаРозничныеСкладыВЦенахАТТ", "Приход на розничные склады в ценах АТТ");
	СтруктураМакетов.Вставить("ЗаписьВRFIDМетки", "Запись в RFID метки");
	
	//16.06.2017, Юра
	Если ЗначениеЗаполнено(_5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладПолучатель)) ИЛИ
		ЗначениеЗаполнено(_5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладОтправитель)) Тогда
		СтруктураМакетов.Вставить("ТОРГ12","ТОРГ-12 (Товарная накладная)");
		СтруктураМакетов.Вставить("ТранспортнаяНакладная","Транспортная накладная");//20.07.2017, Юра
	КонецЕсли;

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаРезервовПоСериям = Новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(СкладОтправитель, Организация, МассивНоменклатуры, , СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ,ТаблицаРезервовПоСериям);
	ТаблицаСерий.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,Качество");

	ТоварыТабличнойЧасти=Товары.Выгрузить();

	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтруктураПоиска   = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);

		Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтруктураПоиска.Вставить("Цена",                   ИсходнаяСтрока.Цена);
		КонецЕсли;
		
		ЗаполнятьИзРезервов = Ложь;
		Если ТипЗнч(ИсходнаяСтрока.ДокументРезерва) = Тип("ДокументСсылка.ЗаказПокупателя") 
		   И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании
		   И СкладОтправитель.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда

			Если ИсходнаяСтрока.ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтруктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ДокументРезерва);
				ЗаполнятьИзРезервов = Истина;
			КонецЕсли;

		КонецЕсли;

		Если ЗаполнятьИзРезервов Тогда
			НайденныеСтроки = ТаблицаРезервовПоСериям.НайтиСтроки(СтруктураПоиска);
		Иначе
			НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;

		СтрокаСПустойСерией = Неопределено;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			// 18.04.17 Вялов - исключение при ошибке (обмен данными) "деление на 0"!
			Попытка
				ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			Исключение
				//СообщениеПользователю(ИсходнаяСтрока.Номенклатура); 
				Продолжить;
			КонецПопытки;
			
			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			Если СписанноеКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест         = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры            = Строка.СерияНоменклатуры;
			НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;
			НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
			НоваяСтрока.ВнутреннийЗаказ              = ИсходнаяСтрока.ВнутреннийЗаказ;
			НоваяСтрока.Количество                   = СписанноеКоличество; 
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество* ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;            

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.ЕдиницаИзмеренияМест         = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
				НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры            = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;
				НоваяСтрока.ВнутреннийЗаказ              = ИсходнаяСтрока.ВнутреннийЗаказ;
				НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
				НоваяСтрока.Количество                   = КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Производит заполнение поля "Цена" табличной части "Товары".
//
Процедура ЗаполнитьРозничнуюЦену() Экспорт

	ОтправительНТТ   = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ    = (СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательТипЦен = ?((НЕ ОтправительНТТ) И ПолучательНТТ, СкладПолучатель.ТипЦенРозничнойТорговли, Неопределено);

	Для Каждого Строка Из Товары Цикл

		Если НЕ (ОтправительНТТ ИЛИ ПолучательНТТ) Тогда
			Строка.Цена = 0;
		ИначеЕсли (НЕ ОтправительНТТ) И ПолучательНТТ Тогда
			Строка.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры,
			              ПолучательТипЦен, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		ИначеЕсли ОтправительНТТ Тогда
			Строка.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, СкладОтправитель,
			              мВалютаРегламентированногоУчета, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Производит заполнение поля "Цена" строки табличной части "Товары".
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части "Товары"
//
Процедура ЗаполнитьРозничнуюЦенуВСтроке(СтрокаТабличнойЧасти) Экспорт

	ОтправительНТТ   = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ    = (СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательТипЦен = ?((НЕ ОтправительНТТ) И ПолучательНТТ, СкладПолучатель.ТипЦенРозничнойТорговли, Неопределено);

	Если НЕ (ОтправительНТТ ИЛИ ПолучательНТТ) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли (НЕ ОтправительНТТ) И ПолучательНТТ Тогда
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		              ПолучательТипЦен, Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
	ИначеЕсли ОтправительНТТ Тогда
		СтрокаТабличнойЧасти.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СкладОтправитель,
		              мВалютаРегламентированногоУчета, Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
	КонецЕсли;

КонецПроцедуры

// Выполняет необходимые действия при изменении реквизита ОтражатьВБухгалтерскомУчете
//
Процедура ПриИзмененииОтражатьВБухгалтерскомУчете() Экспорт

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;

КонецПроцедуры // ПриИзмененииОрганизации()

// Выполняет необходимые действия при изменении реквизита ВнутреннийЗаказ
//
Процедура ПриИзмененииЗаказа() Экспорт

	СкладПолучатель = ВнутреннийЗаказ.Заказчик;

КонецПроцедуры // ПриИзмененииОрганизации()

// Выполняет необходимые действия при изменении реквизита Организация
//
Процедура ПриИзмененииОрганизации(ПодменюДействияФормы = Неопределено, ЭлементыФормыНомер = Неопределено) Экспорт

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ПодменюДействияФормы, ЭлементыФормыНомер);
	КонецЕсли;

	ОбщегоНазначения.ОбработатьПризнакОтраженияВреглУчете(ЭтотОбъект, ,,мОтражатьВРегламентированномУчете,истина);

КонецПроцедуры // ПриИзмененииОрганизации()

// Заполняет реквизиты значениями по умолчанию
//
// Параметры: 
//  ПараметрОбъектКопирования	- содержкит ссылку на документ копирования в случае, 
//								  если новый документ создается копированием
//  ПараметрОснование			- содержкит ссылку на документ-основание в случае, 
//								  если новый документ создается на основании другого
//
Процедура ИнициализироватьНовыйДокумент(ПараметрОбъектКопирования, ПараметрОснование) Экспорт
	
	#Если Клиент Или ВнешнееСоединение Тогда
		
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);
	
	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
		СкладОтправитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		СкладПолучатель  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	КонецЕсли;
	
	#КонецЕсли

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации      = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НДСвСтоимостиТоваров) Тогда
		НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;
	
//pryan@inbox.ru 18/01/2014
	Попытка
		//Рабочая дата только на толстом клиенте. 13.03.2017, Юра
		#Если Клиент Тогда
		ДатаСоздания = РабочаяДата;
		#КонецЕсли
	Исключение
		ДатаСоздания = ТекущаяДата();
	КонецПопытки;
	
КонецПроцедуры // ИнициализироватьНовыйДокумент()

//pryan@onbox.ru 29/12/2013
Процедура КонтрольЕдиницыИзмерения(СтрокаТабличнойЧасти) Экспорт
	если СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения = Упаковка тогда
		РаботаСЗаказами.УстановитьЕдиницуКоэффициентПоБазовойЕдинице(СтрокаТабличнойЧасти);	
	конецесли;
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	 Или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, СкладОтправитель, СкладПолучатель");

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		И СтруктураШапкиДокумента.СложныйУчетНДС
		И Не СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда
		СтруктураОбязательныхПолей.Вставить("НДСвСтоимостиТоваров");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ 
	   И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Перемещение с НТТ по ордерам не осуществляется!", Отказ, Заголовок);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ВнутреннийЗаказ)
	   И Не СтруктураШапкиДокумента.ВидВнутреннегоЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Перемещение можно осуществлять только по внутреннему заказу с видом заказа на склад!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения");
	СтруктураОбязательныхПолей.Вставить("Качество");

	Если (    СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	      Или СтруктураШапкиДокумента.ВидСкладаПолучателя  = Перечисления.ВидыСкладов.НТТ)
	   И (Не мРазрешитьНулевыеЦеныВРознице) Тогда
		СтруктураОбязательныхПолей.Вставить("Цена");
	КонецЕсли;

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

		
	ПроверитьСтрокиТабличнойЧасти("Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Вызовем общую процедуру для проверки проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

		
	ПроверитьСтрокиТабличнойЧасти("Возвратная тара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

//Проверяет заполнение реквизитов табличных частей, которые зависят от указания реквизита ВнутреннийЗаказ
Процедура  ПроверитьСтрокиТабличнойЧасти(ИмяТЧ, ТЧ, Отказ, Заголовок)
	Для каждого Строка из ТЧ цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
			                               """ табличной части """ + ИмяТЧ + """: ";

		Если не ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДокументРезерва) Тогда
			Если Строка.ДокументРезерва<>Строка.ВнутреннийЗаказ Тогда
				//неправильный документ резерва
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан документ резерва, отличающийся от значения реквизита ""Внутренний заказ""" , Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если Строка.ВнутреннийЗаказ.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			//неправильный внутренний заказ
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан Внутренний заказ с видом заказа """+Строка.ВнутреннийЗаказ.ВидЗаказа+""". Может быть указан только заказ с видом ""На склад"" " , Отказ, Заголовок);

		КонецЕсли;
		
		Если Строка.СкладВнутреннегоЗаказа <> СкладПолучатель Тогда
			// неправильный склад
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан Внутренний заказ, в котором склад-заказчик отличается от склада-получателя, указанного в шапке документа" , Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);

	// Отражение в партионном учете
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
		
		ТаблицаДвиженийПоСписаннымТоварам = Движения.СписанныеТовары.Выгрузить();
		Если ТаблицаДвиженийПоСписаннымТоварам.Количество()>0 Тогда
			
			// Зарегистрируем в пследовательности
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период = Дата;

			// Проводить по партиям сразу нужно если установлен параметр
			// учетной политики СписыватьПартииПриПроведенииДокументов
			ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;

			Если ПроводитьПоПартиям Тогда
				
				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, ТаблицаДвиженийПоСписаннымТоварам);

			Иначе
				
				// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
				Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
					УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
			
			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов
			Если НЕ Отказ Тогда
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",            СкладОтправитель);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
						
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
			// Если мы перемещаем в НТТ, то надо сделать приход по специальному регистру
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ И НЕ Отказ Тогда
				
				// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПеремещениюВНТТ
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПеремещениюВНТТ, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",               СкладПолучатель);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПеремещения", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",           Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",           Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
						
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПеремещениюВНТТ, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТаблицаПоТоварам);
			ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
				
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда

					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
				КонецЕсли;
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        СкладОтправитель);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
		 			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
					
			КонецЕсли;
			
		Иначе // не по ордерам

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Расход.
			Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ Тогда
				НаборДвижений = Движения.ТоварыВНТТ;
			ИначеЕсли СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.Розничный Тогда
				НаборДвижений = Движения.ТоварыВРознице;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
			КонецЕсли;

			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
												
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
											
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
				
				Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ Тогда
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
				Иначе
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",  Справочники.Качество.Новый,  "ТаблицаПоТаре");
					Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.Розничный Тогда
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладОтправитель, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладОтправитель, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);
					КонецЕсли;
				КонецЕсли;
													
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Приход.
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
				НаборДвижений = Движения.ТоварыВНТТ;
			ИначеЕсли СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.Розничный Тогда
				НаборДвижений = Движения.ТоварыВРознице;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
			КонецЕсли;

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
												
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
											
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
				
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
			Иначе
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",  Справочники.Качество.Новый,  "ТаблицаПоТаре");
				Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.Розничный Тогда
					// ТОВАР
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладПолучатель, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
						
					// Проверка наличия продажных цен на приходуемый товар.
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицыДанныхДокумента["ТаблицаПоТоварам"], Отказ, Заголовок);
						
					// ТАРА
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладПолучатель, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);

					// Проверка наличия продажных цен на приходуемый товар.
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "ВозвратнаяТара", ТаблицыДанныхДокумента["ТаблицаПоТаре"], Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
													
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеСнятияСРезерва(ТаблицаПоТоварам);
			ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеСнятияСРезерва(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
			
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
					//приход резерва на склад-получатель
					ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеРезервирования(ТаблицаПоТоварам);
					ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеРезервирования(ТаблицаПоТаре);
                    Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
						СтруктТаблицДокумента = Новый Структура;
						СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
						СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
						
						ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);

						ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
						ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				    КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			// Для резервов по ордеру надо поменять склад в регистре "Товары к получению на склады"
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        СкладОтправитель);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
					// То же в приход на новый склад.
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяТабЧасти",       "Товары");
		ДопПараметры.Вставить("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
		ДопПараметры.Вставить("РежимПроведения",   РежимПроведения);
		ДопПараметры.Вставить("ИмяРеквизитаЗаказ",  "ВнутреннийЗаказ");
		ДопПараметры.Вставить("ЗаказВШапке",        Ложь);
		ТабИсходная = ТаблицаПоТоварам.Скопировать();
		
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);
		Если ТабИсходная.Количество() > 0 Тогда
			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
		
		ДопПараметры.Вставить("ИмяТабЧасти", "ВозвратнаяТара");
		ДопПараметры.Вставить("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		ТабИсходная = ТаблицаПоТаре.Скопировать();
		
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Если ТабИсходная.Количество() > 0 Тогда
			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры


Процедура  ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, знач СтатусПартии)
	Сч = 0;

	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ)  // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ВнутреннийЗаказ.Заказчик = СкладПолучатель Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ВнутреннийЗаказ, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   ?(СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,неопределено,СтрокаТаблицы.ХарактеристикаНоменклатуры),
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры



Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамИсходная, ТаблицаПоТареИсходная,Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	
	ТаблицаПоТоварам = ТаблицаПоТоварамИсходная.Скопировать();

	// Удалим строки с документами резерва по ордерам
	Инд=0;
	Пока Инд<ТаблицаПоТоварам.Количество() Цикл
		Если ТаблицаПоТоварам[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТоварам.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		
		Движение = ТаблицаДвижений[ТаблицаПоТоварам.Индекс(Строка)];
		
		Если Строка.ОбособленныйУчетТоваровПоЗаказамПокупателей=Истина Тогда
			Движение.ЗаказПартии = Строка.ДокументРезерва;
			Движение.ЗаказСписания = Строка.ДокументРезерва;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "СписыватьТолькоПоЗаказу");
	
	// Недостающие поля.
	НомерСтрокиРегистра = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		НомерСтрокиРегистра = НомерСтрокиРегистра+1;
		Строка.НомерСтрокиДокумента = НомерСтрокиРегистра;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция Тогда 
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус2");
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");

	// Если Партионный учет по складам  в упр учете
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,    "ОтражатьВНалоговомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,    "Организация");

	// Если перемещение по ордерам, то партии не списываются документом перемещения
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	ТаблицаПоТаре = ТаблицаПоТареИсходная.Скопировать();
	Пока Инд<ТаблицаПоТаре.Количество() Цикл
		Если ТаблицаПоТаре[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТаре.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл

		НомерСтрокиРегистра = НомерСтрокиРегистра+1;
		Строка.НомерСтрокиДокумента = НомерСтрокиРегистра;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");

	// Если Партионный учет по складам  в упр учете
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,    "ОтражатьВНалоговомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	// Если перемещение по ордерам, то партии не списываются документом перемещения
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
	    Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете
	 ИЛИ НЕ СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов 
	 ИЛИ    СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка остатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизаций.
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
		
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       СкладОтправитель);
				
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	// А теперь приход на склад-получатель
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
				
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда

		Если Не УправлениеЗаказами.ИспользоватьВнутренниеЗаказы() Тогда
			Возврат;
		КонецЕсли;

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		ОтражатьВНалоговомУчете      = Ложь;
		СкладПолучатель    = Основание.Заказчик;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		ВнутреннийЗаказ    = Основание.Ссылка;
		Комментарий        = Основание.Комментарий;

		Склад = Неопределено;
		#Если Клиент Тогда
		Если НЕ ВвестиЗначение(Склад, "Выберите склад отправитель", Тип("СправочникСсылка.Склады")) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#КонецЕсли
		СкладОтправитель = Склад;

		УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, Товары,         Склад, Дата);
		УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, ВозвратнаяТара, Склад, Дата, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		ЗаполнитьРозничнуюЦену();

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете      = Основание.ОтражатьВНалоговомУчете;
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		Подразделение                = Основание.Подразделение;
		Комментарий                  = Основание.Комментарий;

		#Если Клиент Тогда
		Если НЕ ВвестиЗначение(СкладПолучатель, "Выберите склад получатель", Тип("СправочникСсылка.Склады")) Тогда
			СкладПолучатель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#КонецЕсли

		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			СкладОтправитель = Основание.СкладОрдер.Склад;
		Иначе
			СкладОтправитель = Основание.СкладОрдер;
		КонецЕсли;

		// Заполнение таб.части
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Качество                   = Справочники.Качество.Новый;
            НоваяСтрока.ДокументРезерва = ТекСтрокаТовары.Заказ;

		КонецЦикла;

		Для Каждого ТекСтрокаТара Из Основание.ВозвратнаяТара Цикл

			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Номенклатура    = ТекСтрокаТара.Номенклатура;
			НоваяСтрока.Количество      = ТекСтрокаТара.Количество;
			НоваяСтрока.ДокументРезерва = ТекСтрокаТара.Заказ;
			
		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаКачестваТоваров") Тогда
		 // Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВНалоговомУчете = Истина;
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		Комментарий                  = Основание.Комментарий + ". Создано на основании  "+Основание;
		
		#Если Клиент Тогда
		Если НЕ ВвестиЗначение(СкладПолучатель, "Выберите склад получатель", Тип("СправочникСсылка.Склады")) Тогда
			СкладПолучатель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#КонецЕсли

		СкладОтправитель = Основание.Склад;
		

		// Заполнение таб.части
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Качество                   = ТекСтрокаТовары.КачествоНовое;
            
		КонецЦикла;
		
		//***{+Добавления}*** Тасмаджиев 03/08/2018// ->>
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки_УТ11") Тогда
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Решение",Перечисления._5LB_РешенияПоПретензионнымТоварам.Перемещение);
		
		Если Основание.Товары.НайтиСтроки(СтруктураПоиска).Количество()<> 0 Тогда
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
			ЭтотОбъект.СкладОтправитель = ПолучитьПретензионныйСклад(Основание.СкладОрдер);
			ЭтотОбъект.СкладПолучатель =  Основание.СкладОрдер;
			ЭтотОбъект.ВнутреннийЗаказ = Основание.Ссылка;
			ЭтотОбъект.Дата = ТекущаяДата();
			ЗаполнитьТоварыПоАктуОрасхождениях(Основание, Ложь);
			
		Иначе 
			
			Возврат;
			
		КонецЕсли;
		//***{-Добавления}*** Тасмаджиев 03/08/2018// <<-
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	// Катков А. 18.08.2016 >>
	Если ЭтоНовый() Тогда
		СоздательДокумента 			= ПараметрыСеанса.ТекущийПользователь;
		ПоследнийРедактировавший 	= ПараметрыСеанса.ТекущийПользователь;
	Иначе
		ПоследнийРедактировавший 	= ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли; 
	// Катков А. 18.08.2016 <<   

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	//++ Кузнецов С.А. - Если пользователю ограничено выбирать товар, имеющий упаковку не даем записать документ - 22.03.2016
	Если НЕ УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.НеКонтролироватьЕдиницуИзмерения, Ложь)[0].Значение Тогда
		// Перемещения из магазина и в магазин , тогда проверяем ед. измерения на упаковку
		Если НЕ РаботаСПеремещениями.ЭтоМагазин(СкладОтправитель) И РаботаСПеремещениями.ЭтоМагазин(СкладПолучатель) Тогда
			Для Каждого стрТовара Из Товары Цикл
				// Ошибка, если единица по классификатору не совпадает с базовой единицей измерения по классификатору 
				Если стрТовара.ЕдиницаИзмерения.ЕдиницаПоКлассификатору <> стрТовара.Номенклатура.БазоваяЕдиницаИзмерения Тогда
					Сообщить("В строке № " + стрТовара.НомерСтроки + " указана неверная единица измерения!");
					Отказ = Истина; 
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	//-- Кузнецов С.А. - 22.03.2016
	
	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
		Или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда // В этом случае ДокументРезерва должен быть пуст.
		
		УстановитьКачество = Ложь;
		
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			
			Если УстановитьКачество 
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Качество) Тогда
				СтрокаТаблицы.Качество = Справочники.Качество.Новый;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	КонецЕсли;
	
					
		//-- Кузнецов С.А. - 22.03.2016
	//#КонецЕсли //Нам надо чтобы всегда ветка работала, даже для внешнего соедиения 26.04.2017, Юра
	
	
	//// < Вялов 19.09.16 - задача 3730 п.3 - ограничение перезатаренности складов (магазинов)
	//Если Константы.ПерезатаренностьВключитьКонтроль.Получить() Тогда  // 1 - если контролиравать перезатаренность
	//	Если НЕ ЭтотОбъект.Проведен Тогда
	//		бТоварПерезатарен = ЕстьПерезатаренностьПоДокументу();
	//		Если НЕ Отказ Тогда
	//			Отказ = бТоварПерезатарен;
	//		КонецЕсли;				
	//		Если бТоварПерезатарен Тогда
	//			Сообщить("Документ не может быть проведен, так как по товарам имеется перезатаренность (хранение на остатке больше чем нужно)!", СтатусСообщения.Важное);	
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЕсли;
	
	//19.06.2017, Юра
	Если Не Отказ Тогда
		УстановитьЦеныПриПеремещенииДругомуЮрЛицу();
	КонецЕсли;
		
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если Товары.Количество()=0 Тогда
		Сообщить ("Перемещать нечего");
		Отказ=Истина;
	КонецЕсли;
	
	//{+НАЧАЛО+Добавления} Автор: Тасмаджиев 30/03/2018//==============================================================================================
	Если  НЕ ЭтотОбъект.ЭтоНовый() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваров._5LB_Дата КАК _5LB_Дата,
		|	ПеремещениеТоваров.Ссылка,
		|	МАКСИМУМ(РегистрацияСкладскихДействий.Дата) КАК Дата
		|ИЗ
		|	РегистрСведений.РегистрацияСкладскихДействий КАК РегистрацияСкладскихДействий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ПО РегистрацияСкладскихДействий.Документ = ПеремещениеТоваров.Ссылка
		|ГДЕ
		|	ПеремещениеТоваров.СтатусСборки = &СтатусСборки
		|	И ПеремещениеТоваров.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеТоваров._5LB_Дата,
		|	ПеремещениеТоваров.Ссылка";
		
		Запрос.УстановитьПараметр("СтатусСборки",Перечисления.СтатусыСборкиЗаказа.Собран);
		Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка );
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий()  Цикл
				Если  Выборка._5LB_Дата <> Выборка.Дата Тогда
					ЭтотОбъект._5LB_Дата = Выборка.Дата;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//{-КОНЕЦ-Добавления} Автор: Тасмаджиев 30/03/2018//==============================================================================================
	Иначе
		
		Если ЭтотОбъект._5LB_Дата = Дата(1, 1, 1) Тогда
			ЭтотОбъект._5LB_Дата = ЭтотОбъект.Дата;
		КонецЕсли;
	КонецЕсли;
	
	// Вялов 08.06.17
	Если СокрЛП(ЭтотОбъект._5LB_ИдентификаторИБ) = "" Тогда
		ЭтотОбъект._5LB_ИдентификаторИБ = Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	//////////////////////////
	// Женя 21.08.2018
	// ID заявки : 567 в http://servicedesk
	// Добавить фиксацию статуса доставки перемещения в РС "История статусов документов"
	// ((
	Если ЗначениеЗаполнено(ЭтотОбъект.СтатусДоставки) Тогда
		
		Попытка
			//ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
			РаботаСПеремещениями.ЗафиксироватьСтатусДоставки(ЭтотОбъект.Ссылка,ЭтотОбъект.СтатусДоставки);
		Исключение
			Сообщить("Ошибка установки статуса доставки. Попробуйте ещё раз.");
		КонецПопытки;	
		
	КонецЕсли; 
	// )) 21.08.2018 Женя
	/////////////////////////
	
	ОбщегоНазначения5LB.ЗаписатьИзменениеОбъекта(ЭтотОбъект);			                        	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если Найти (Комментарий,"iddqd")>0  Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		Комментарий = Лев(Комментарий,Найти(Комментарий,"iddqd")-1);
		ОбменДанными.Загрузка=Истина;
		ЭтотОбъект.Записать(РежимЗАписиДокумента.Запись);
		ОбменДанными.Загрузка=Ложь;
	КонецЕсли;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("Склад", СкладОтправитель);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,  "ВалютаУправленческогоУчета",                 "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,  "КурсВалютыУправленческогоУчета",             "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОтправитель", "ВидСклада",                                  "ВидСкладаОтправителя");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладПолучатель",  "ВидСклада",                                  "ВидСкладаПолучателя");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВнутреннийЗаказ",  "ВидЗаказа",                                  "ВидВнутреннегоЗаказа");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",      "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, Дата, , Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"            , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Коэффициент"                 , "Коэффициент");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                    , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Качество"                    , "Качество");
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("ДокументРезерва"             , "ДокументРезерва");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"             , "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("СкладВнутреннегоЗаказа"       , "ВнутреннийЗаказ.Заказчик");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"       , "ДокументРезерва.СкладГруппа");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"       ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ВидОперации"                 ,  "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	 Или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
		СтруктураПолей.Вставить("Цена", "Цена * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / Коэффициент");
	Иначе
		СтруктураПолей.Вставить("Цена", "Цена");
	КонецЕсли;

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"       , "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"           , "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("СкладВнутреннегоЗаказа"    , "ВнутреннийЗаказ.Заказчик");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"     , "ДокументРезерва.СкладГруппа");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"     ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	//// < Вялов 19.09.16 - задача 3730 п.3 - ограничение перезатаренности складов (магазинов)
	//Если Константы.ПерезатаренностьВключитьКонтроль.Получить() Тогда  // 1 - если контролиравать перезатаренность
	//	бТоварПерезатарен = ЕстьПерезатаренностьПоДокументу();
	//	Если НЕ Отказ Тогда
	//		Отказ = бТоварПерезатарен;
	//		//Сообщить("Документ не может быть проведен, так как по товарам имеется перезатаренность (хранение на остатке больше чем нужно)!", СтатусСообщения.Важное);
	//	КонецЕсли;	
	//КонецЕсли;	
	//// Вялов 19.09.16  - задача 3730 п.3 - ограничение перезатаренности складов (магазинов) >
	//
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;
	
	
	//	// < ##### ЛОГ #####
	//Попытка
	//ПутьЛог = "\\vyalov\Exchange";
	//ИмяЛог = Строка(ПараметрыСеанса.ТекущийПользователь) + ".log";
	//стрЗапись = Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'") + " (" + Строка(ПараметрыСеанса.ТекущийПользователь) 
	//	+ ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПродавец), " | " + Строка(ПараметрыСеанса.ТекущийПродавец), "") + ") "		
	//	+ " " + ?(ЗначениеЗаполнено(ЭтотОбъект.ССылка), Строка(ЭтотОбъект.ССылка), "*NEW " + Строка(ЭтотОбъект)) + " " 
	//	+ " вид операции = " + Строка(ЭтотОбъект.ВидОперации)
	//	+ " # ОБРАБОТКА ПРОВЕДЕНИЯ";
	//ОбщегоНазначения5LB.ОтладкаЛогированиеЗаписатьСтроку(ПутьЛог, ИмяЛог, стрЗапись);
	//Исключение
	//КонецПопытки;	
	//// ##### ЛОГ ##### >


КонецПроцедуры // ОбработкаПроведения()

// < Вялов 19.09.16 - задача 3730 п.3 - ограничение перезатаренности складов (магазинов)
Функция ЕстьПерезатаренностьПоДокументу()
	
	РезПроверки = Ложь;
	
	
	// < 31.01.17 Вялов - исключение пользователя
	бЗапрещатьПользователю = ОбщегоНазначения5LB.ПравилоСсылкаУчаствует(
							Перечисления.Правила.Перезатаренность, 
							ПараметрыСеанса.ТекущийПользователь 
					//		//ЭтотОбъект.Дата
							);
	Если бЗапрещатьПользователю <> Неопределено Тогда
		Если НЕ бЗапрещатьПользователю Тогда					
			РезПроверки = Ложь;
		    Возврат РезПроверки;
		КонецЕсли;	
	КонецЕсли;
	// 31.01.17 Вялов - исключение пользователя >
	
	
	Если Константы.ПерезатаренностьВключитьКонтроль.Получить() Тогда  				// 1 - если контролиравать перезатаренность
	Если ЭтотОбъект.СтатусСборки <> Перечисления.СтатусыСборкиЗаказа.Собран Тогда   // 2 - только не для собранных (уже)
	Если ЗначениеЗаполнено(ЭтотОбъект.СкладПолучатель) Тогда    					// 3 - если выбран склад		
		
		// < 17.10.16 - ввод механизма правил и ограничение по магазинам и пользователям
		РазрешитьПроверкуСклад = ОбщегоНазначения5LB.ПравилоСсылкаУчаствует(
			Перечисления.Правила.Перезатаренность, ЭтотОбъект.СкладПолучатель, 
			//ЭтотОбъект.Дата
			);
		Если РазрешитьПроверкуСклад = Неопределено Тогда
			РазрешитьПроверкуСклад = Ложь;		
		//	Если РазрешитьПроверкуСклад	= Истина Тогда		// 4 - если нет исключения (правило разрешено) для склада			
		КонецЕсли;		
			//	РазрешитьПроверкуПользователь = ОбщегоНазначения5LB.ПравилоСсылкаУчаствует(
			//	Перечисления.Правила.Перезатаренность, 
			//	ПараметрыСеанса.ТекущийПользователь 
			//	//ЭтотОбъект.Дата
			//	);
			//	Если РазрешитьПроверкуПользователь Тогда										
		// 17.10.16 - ввод механизма правил и ограничение по магазинам и пользователям >		
		
		Если РазрешитьПроверкуСклад	= Истина Тогда		
		
			Обр = Обработки.Анализ_Остатков_Складов.Создать();
			ТаблПерезатаренности = Обр.ПолучитьТаблицуПерезатаренностиТоваров(ЭтотОбъект.СкладПолучатель);
			Если ТаблПерезатаренности.Количество() > 0 Тогда	   	// 5 - если перезатаренность по складу
				
				ТаблТовары = ЭтотОбъект.Товары.Выгрузить();
				ТаблТовары.Свернуть("Номенклатура", "Количество");
				
				МенеждерВТ = Новый МенеджерВременныхТаблиц;
				
				Запрос1 = Новый Запрос("ВЫБРАТЬ * ПОМЕСТИТЬ втТовары ИЗ &ТаблТовары КАК Т1");
				Запрос1.МенеджерВременныхТаблиц = МенеждерВТ;
				Запрос1.УстановитьПараметр("ТаблТовары", ТаблТовары);	
				Запрос1.Выполнить();
				
				Запрос2 = Новый Запрос("ВЫБРАТЬ * ПОМЕСТИТЬ втПроверка Из &ТаблПроверка КАК Т2");
				Запрос2.МенеджерВременныхТаблиц = МенеждерВТ;
				Запрос2.УстановитьПараметр("ТаблПроверка", ТаблПерезатаренности);
				Запрос2.Выполнить();    		
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = МенеждерВТ;
				Запрос.Текст = "
					|ВЫБРАТЬ
		//			|	Товары.НомерСтроки КАК НомерСтроки,
					|	Товары.Номенклатура КАК Номенклатура,
					|	Товары.Количество КАК Количество,			
					|	Проверка.ПродажиЗа2Месяца КАК ПродажиЗа2Месяца,
					|	Проверка.Перезатаренность КАК Перезатаренность,
					|	Проверка.Остаток КАК Остаток
					|ИЗ
					|	втТовары КАК Товары		
					|			
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
					|	втПроверка КАК Проверка 
					|	ПО Проверка.Номенклатура = Товары.Номенклатура	
					//|ГДЕ
					//|	Проверка.Перезатаренность > 0					
					//|УПОРЯДОЧИТЬ ПО
					//|	НомерСтроки	
					|";
					

				тзРезультат = Запрос.Выполнить().Выгрузить();

			  	ЗапросУДАЛЕНИЕ = Новый Запрос;
				ЗапросУДАЛЕНИЕ.МенеджерВременныхТаблиц = МенеждерВТ;
				ЗапросУДАЛЕНИЕ.Текст = "УНИЧТОЖИТЬ втТовары";
				ЗапросУДАЛЕНИЕ.Выполнить();	
				ЗапросУДАЛЕНИЕ.Текст = "УНИЧТОЖИТЬ втПроверка";
				ЗапросУДАЛЕНИЕ.Выполнить();	
				
				// удалить "лишние", оставить где выполняется 
				// 1) Количество > Перезатаренность или  2) Количество > (Продажи - Остаток)
				ТекИндекс = тзРезультат.Количество() - 1; 
				Пока ТекИндекс >= 0 Цикл 			
					
					ТекСтрока = тзРезультат.Получить(ТекИндекс);
					
					бУдалить = Истина;
					
					Если ТекСтрока.Перезатаренность > 0 Тогда
						 бУдалить = Ложь;
						 ТекСтрока.Перезатаренность = -ТекСтрока.Перезатаренность;
						 
					 ИначеЕсли ТекСтрока.Перезатаренность = 0 Тогда		
						 
						// разспоряжение Артема - для нового товара можно 1
						Если ТекСтрока.ПродажиЗа2Месяца = 0 Тогда
							
							Если ТекСтрока.Количество > 1 Тогда
								бУдалить = Ложь;
								ТекСтрока.Перезатаренность = ТекСтрока.Количество - 1;	
							Иначе
							//	ТекСтрока.Перезатаренность = 1;	 
							КонецЕсли;
	
						ИначеЕсли ТекСтрока.Количество > (ТекСтрока.ПродажиЗа2Месяца - ТекСтрока.Остаток) Тогда 
							бУдалить = Ложь;
							Разница = ТекСтрока.ПродажиЗа2Месяца - ТекСтрока.Остаток; 
							Если Разница < 0 Тогда	// если продали меньше чем остаток
								Разница = 0;
							КонецЕсли;
							ТекСтрока.Перезатаренность = ТекСтрока.Количество - Разница; 
			        	КонецЕсли; 
					КонецЕсли; 	
					
					Если бУдалить Тогда
						тзРезультат.Удалить(ТекИндекс); 
				    КонецЕсли;
					ТекИндекс = ТекИндекс - 1; 
				КонецЦикла; 
				
				
				// 5 - если есть в т.ч. Товары позиции входящие в табл.Перезатаренность по складу	
				Если тзРезультат.Количество() > 0 Тогда  
					
					РезПроверки = Истина;
					
					//бНеЗапрещатьПеремещения = Константы.ПерезатаренностьНеЗапрещатьПеремещения.Получить();
					////Если НЕ бНеЗапрещатьПеремещения Тогда 						
					////	Отказ=Истина;
					////Иначе            						
					//	НеЗапрещатьПользователю = ОбщегоНазначения5LB.ПравилоСсылкаУчаствует(
					//		Перечисления.Правила.Перезатаренность, 
					//		ПараметрыСеанса.ТекущийПользователь 
					//		//ЭтотОбъект.Дата
					//		);
					//	Если НеЗапрещатьПользователю = Ложь Тогда
					//		РезПроверки=Ложь;		// не препятствовать для польз.исключаемых из правила
					//		// т.е. только тех у кого ЛОЖЬ!
					//	Иначе
					//		РезПроверки=Истина;
					//	КонецЕсли;	
						//	Если РазрешитьПроверкуПользователь Тогда			
				//КонецЕсли;
					
					стрСообщ = "На складе """ + Строка(ЭтотОбъект.СкладПолучатель) + """ имеется перезатеренность товара!" + Символы.ПС
					//	+ "(ИЗБ - избыточный остаток, превышающий продажи за последние 2 мес.)" + Символы.ПС
						+ "по следующим товарным позициям :" + Символы.ПС;
						
					// < 25.11.16 Вялов - добавлено исключение категорий н-ры
					ТаблСписокКатегорий = ОбщегоНазначения5LB.ПравилаПолучитьСписок(Перечисления.Правила.Перезатаренность, , 
						"Тип=КатегорииОбъектов");  						
					Если ТаблСписокКатегорий.Количество() > 0 Тогда
						ТекИндекс = тзРезультат.Количество() - 1; 
						Пока ТекИндекс >= 0 Цикл 			
							ТекСтрока = тзРезультат.Получить(ТекИндекс);
							Категория = ОбщегоНазначения5LB.КатегорияОбъекта(ТекСтрока.Номенклатура);
							НайденнаяСтрока = ТаблСписокКатегорий.Найти(Категория); 
							Если НайденнаяСтрока <> Неопределено Тогда
								Если НЕ НайденнаяСтрока.Использовать Тогда
									тзРезультат.Удалить(ТекИндекс); 	
								КонецЕсли;				
							КонецЕсли;   
							ТекИндекс = ТекИндекс - 1; 
						КонецЦикла; 					
					КонецЕсли;  							
					
					Если тзРезультат.Количество() = 0 Тогда
						РезПроверки = Ложь;		//  не препятствовать если нет запрещенных товаров
					Иначе
				    // 25.11.16 Вялов - добавлено исключение категорий н-ры >
					
					
						// < 29.11.16 Вялов - добавлено исключение групп и номенклатуры
						ТаблСписокИсклНоменклатуры = ОбщегоНазначения5LB.ПравилаПолучитьСписок(Перечисления.Правила.Перезатаренность, , 
							"Тип=Номенклатура");  						
						Если ТаблСписокКатегорий.Количество() > 0 Тогда
							ТекИндекс = тзРезультат.Количество() - 1; 
							Пока ТекИндекс >= 0 Цикл 			
								ТекСтрока = тзРезультат.Получить(ТекИндекс);
								бИсключить = Ложь;
								Для Каждого ТекИсклНом Из ТаблСписокИсклНоменклатуры Цикл
									Если НЕ ТекИсклНом.Ссылка.ЭтоГруппа Тогда
										Если ТекИсклНом.ССылка = ТекСтрока.Номенклатура Тогда
											бИсключить = Истина;
											Прервать;
										КонецЕсли;	
									Иначе
										Если (ТекСтрока.Номенклатура.Родитель = ТекИсклНом.Ссылка 
											ИЛИ ТекСтрока.Номенклатура.Родитель.Родитель = ТекИсклНом.Ссылка) Тогда
											бИсключить = Истина;
											Прервать;
										КонецЕсли;	
									КонецЕсли; 
								КонецЦикла;
								Если бИсключить Тогда
									тзРезультат.Удалить(ТекИндекс); 									
								КонецЕсли;   
								ТекИндекс = ТекИндекс - 1; 
							КонецЦикла; 					
						КонецЕсли;  							
					
						Если тзРезультат.Количество() = 0 Тогда
							РезПроверки = Ложь;		//  не препятствовать если нет запрещенных товаров
						Иначе
						// 29.11.16 Вялов - добавлено исключение групп и номенклатуры >
		
						
							Для Каждого ТекСтр Из тзРезультат Цикл
								//Сообщить(Строка(ТекСтр.Номенклатура) 
								//	+ ", кол-во " + Формат(ТекСтр.Количество, "ЧЦ=12; ЧДЦ=2; ЧГ=0")
								//	+ ", перезатаренность склада (лишний остаток) " + Формат(ТекСтр.Перезатаренность, "ЧЦ=12; ЧДЦ=2; ЧГ=0")
								//	);
								стрСообщ = стрСообщ + Символы.ПС + Строка(ТекСтр.Номенклатура) 
									+ " (К-во в док.=" + Формат(ТекСтр.Количество, "ЧЦ=12; ЧДЦ=2; ЧГ=0") + ") ";
		//							+ ", ИЗБ= " + Формат(ТекСтр.Перезатаренность, "ЧЦ=12; ЧДЦ=2; ЧГ=0");
								Если ТекСтр.Перезатаренность < 0 Тогда
			                        стрСообщ = стрСообщ + " - товар в избытке!";
								Иначе
									стрСообщ = стрСообщ + " - изб.к-во в док.=" + Формат(ТекСтр.Перезатаренность, "ЧЦ=12; ЧДЦ=2; ЧГ=0");
								КонецЕсли;

							КонецЦикла;	 
							
							стрСообщ1 = стрСообщ;
							МаксСтрСообщ = 16;
							Если СтрЧислоСтрок(стрСообщ) > МаксСтрСообщ Тогда
								стрСообщ1 = "";
								Для Индекс = 1 по МаксСтрСообщ Цикл
									стрСообщ1 = стрСообщ1 + + Символы.ПС + СтрПолучитьСтроку(стрСообщ, Индекс);
								КонецЦикла;  
								стрСообщ1 = стрСообщ1 + Символы.ПС + "...";
							КонецЕсли;
							
							Сообщить(стрСообщ);
							
							//только на клиенте. 13.03.2017, Юра
							#Если Клиент Тогда
							Предупреждение(стрСообщ1);
							#КонецЕсли
						КонецЕсли;      // 29.11.16 Вялов - добавлено исключение групп и номенклатуры

					// < 25.11.16 Вялов - добавлено исключение категорий н-ры	
					КонецЕсли;
					// 25.11.16 Вялов - добавлено исключение категорий н-ры >

				//Иначе
				//	РезПроверки = Истина;
				КонецЕсли;	     				
				// 5 - если есть в т.ч. Товары позиции входящие в табл.Перезатаренность по складу			
				
			КонецЕсли;		//  5 - если перезатаренность по складу
		КонецЕсли;		    //  4 - если перезатаренность по складу
		
	КонецЕсли;				// 3 - если выбран склад
	КонецЕсли;				// 2 - только не для собранных (уже)
	КонецЕсли;				// 1 - если контролиравать перезатаренность	
	
	Возврат РезПроверки;
	
КонецФункции
// Вялов 19.09.16  - задача 3730 п.3 - ограничение перезатаренности складов (магазинов) >

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеСнятияСРезерва(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()

// Функция удаляет из исходной таблицы строки не требующие резервирования.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервирования(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) 
		   ИЛИ (ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) И СтрокаТаблицы.СкладВнутреннегоЗаказа = СкладПолучатель)
		   Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция ПодготовитьТаблицуТоваровКПолучению(ТабТовары)

	ТаблицаПоТоварамКПолучению = ТабТовары.Скопировать();
	ТаблицаПоТоварамКПолучению.Колонки.Добавить("ДокументПолучения");
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамКПолучению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамКПолучению.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТаблицаПоТоварамКПолучению.Удалить(СтрокаТаблицы);
		Иначе 
			СтрокаТаблицы.ДокументПолучения = СтрокаТаблицы.ДокументРезерва;
			Если не СтрокаТаблицы.ДокументРезерва.БезПраваПРодажи Тогда
				СтрокаТаблицы.ДокументРезерва = неопределено;
			КонецЕсли;
			
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамКПолучению;
	
КонецФункции // ПодготовитьТаблицуТоваровКПолучению()

// Функция удаляет из исходной таблицы строки не требующие резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеРезервПоЗаказ()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

// Функция проверяет, есть ли НТТ среди склада-отправителя или склад-получателя.
//
// Возвращаемое значение:
//  Булево. Истина, если отправитель или получатель - НТТ.
//
Функция ЕстьНТТ() Экспорт

	ВидНТТ = Перечисления.ВидыСкладов.НТТ;

	Возврат (СкладОтправитель.ВидСклада = ВидНТТ Или СкладПолучатель.ВидСклада = ВидНТТ);

КонецФункции // ЕстьНТТ()

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.ВнутреннийЗаказ=Неопределено;
	ЭтотОбъект.СтатусСборки = Неопределено;
	ЭтотОбъект.ДатаПлан=Неопределено;
	ЭтотОбъект.ДатаФакт = Неопределено;
	ЭтотОбъект.ДатаСоздания=Неопределено;
	Для Каждого стр из Товары Цикл
		стр.КоличествоСобрано=0;
		стр.КоличествоПринято=0;
	КонецЦикла;
	
	// Вялов 10.06.17
	ЭтотОбъект._5LB_ИдентификаторИБ = "";
	ЭтотОбъект._5LB_Дата = Дата(1,1,1);
	
КонецПроцедуры

Процедура РассчитатьСуммуДокумента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(Тов.Количество * Тов.ЕдиницаИзмерения.Коэффициент * (Цены.Цена / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))) КАК СуммаДока
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК Тов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &Тип5Лб) КАК Цены
	               |		ПО Тов.Номенклатура = Цены.Номенклатура
	               |ГДЕ
	               |	Тов.Ссылка = &ЭтотДок";
	
	Запрос.УстановитьПараметр("Тип5Лб",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"));
	Запрос.УстановитьПараметр("ЭтотДок",ЭтотОбъект.Ссылка);
	
	Выб = Запрос.Выполнить().Выбрать();
	Выб.Следующий();
	ЭтотОбъект.СуммаДокумента = Выб.СуммаДока;
	
	// < 16.08.17 Вялов - по согласованию с Д.Грухом - исключить из проверки закрытого периода
	//Если ЭтотОбъект.СуммаДокумента <> ЭтотОбъект.Ссылка.СуммаДокумента Тогда
	//	//ОбщийМодуль5ЛБ.ПроверитьПравоНаРедактированиеДокументовТовародвижения(Источник, Отказ);
	//	ЭтотОбъект.ОбменДанными.Загрузка = Истина;
	// КонецЕсли;
	////ПерваяПопыткаЗаписи = Ложь;
	Попытка
	// 16.08.17 Вялов - по согласованию с Д.Грухом - исключить из проверки закрытого периода >
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);	
	// < 16.08.17 Вялов - по согласованию с Д.Грухом - исключить из проверки закрытого периода
	Исключение
		Если ЭтотОбъект.СуммаДокумента <> ЭтотОбъект.Ссылка.СуммаДокумента Тогда
	//		//ОбщийМодуль5ЛБ.ПроверитьПравоНаРедактированиеДокументовТовародвижения(Источник, Отказ);
			ЭтотОбъект.ОбменДанными.Загрузка = Истина;
			ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецПопытки;
	//ЭтотОбъект.ОбменДанными.Загрузка = Истина;
	// 16.08.17 Вялов - по согласованию с Д.Грухом - исключить из проверки закрытого периода >


КонецПроцедуры

#Область Работа_с_нашими_новыми_ЮрЛицами
//19.06.2017, Юра
Процедура УстановитьЦеныПриПеремещенииДругомуЮрЛицу()
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(_5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладПолучатель)) Тогда //Это проверка а надо ли вообще
		//Это как бы продажа от ООО "5ЛБ" другому контрагенту
		//Делаем цену "СредняяЦенаЗакупки" + 5%
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Тов.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(Цены.Цена,0) * 105 / 100 / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент,1) КАК Цена
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК Тов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипЦены) КАК Цены
		|		ПО Тов.Номенклатура = Цены.Номенклатура
		|ГДЕ
		|	Тов.Ссылка = &ЭтотДок";
		Запрос.УстановитьПараметр("ТипЦены",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000015")); //СредняяЦенаЗакупки
		Запрос.УстановитьПараметр("ЭтотДок",Ссылка);
		ТЗ = Запрос.Выполнить().Выгрузить();//.Выбрать();
		
		ТекСуммаДокумента = 0;
		Для Каждого Строка из Товары Цикл
			НайденнаяСтрока = ТЗ.Найти(Строка.Номенклатура, "Номенклатура");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				ОпределилиЦену = НайденнаяСтрока.Цена;
				Если НайденнаяСтрока.Цена > 0 Тогда
					Строка.Цена = ?(Строка.ЕдиницаИзмерения.Коэффициент=0,1,Строка.ЕдиницаИзмерения.Коэффициент) *  НайденнаяСтрока.Цена;
				КонецЕсли;		
			КонецЕсли;
			ТекСуммаДокумента = ТекСуммаДокумента + ОКР(Строка.Цена * ?(Строка.Количество = 0, 1,Строка.Количество),15,2)
		КонецЦикла;
		СуммаДокумента = ТекСуммаДокумента;
	Иначе
		//Закомментировал по требованию Иванова Ивана. С его слов, "функционал требует согласования". //01.08.2017, Юра
		ТекКонтрагент = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладОтправитель);
		Если ЗначениеЗаполнено(ТекКонтрагент) Тогда //Это проверка а надо ли вообще
			//А это как бы возврат от другого контрагента в ООО "5ЛБ" 
			//Тут надо по FIFO определить цену.
			//Дело осложняется тем, что нигде в регистрах нет сумм продаж, они есть только в табличных частях документов "Перемещение товаров"
			//Поэтому сначала определим все проведенные документы продаж (тут это "Перемещение товаров") этому контрагенту, выдернем их табличные части и будем смотреть что получилось по FIFO
			
			//{+НАЧАЛО+Изменения} Автор: Тасмаджиев 29/03/2018//=============================================================================================
		    //================================================!{деление на 0 (коэффициэнт),закрутил кастылик}!===============================================
			//Запрос = Новый Запрос;
			//Запрос.Текст = "ВЫБРАТЬ
			//               |	_5LB_СоответствиеСкладаИКонтрагента.Период,
			//               |	_5LB_СоответствиеСкладаИКонтрагента.Склад
			//               |ПОМЕСТИТЬ СкладыИДатыНачалаРаботЭтогоКонтрагента
			//               |ИЗ
			//               |	РегистрСведений._5LB_СоответствиеСкладаИКонтрагента КАК _5LB_СоответствиеСкладаИКонтрагента
			//               |ГДЕ
			//               |	_5LB_СоответствиеСкладаИКонтрагента.Контрагент = &Контрагент
			//               |;
			//               |
			//               |////////////////////////////////////////////////////////////////////////////////
			//               |ВЫБРАТЬ
			//               |	ЕСТЬNULL(ПеремещениеТоваровТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
			//               |	ВЫРАЗИТЬ(ЕСТЬNULL(ПеремещениеТоваровТовары.Количество, 0) * ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1) КАК ЧИСЛО) КАК Количество,
			//               |	ВЫРАЗИТЬ(ЕСТЬNULL(ПеремещениеТоваровТовары.Цена,0) / ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1) КАК ЧИСЛО) КАК Цена,
			//               |	ПеремещениеТоваровТовары.Ссылка.Дата КАК ДатаОперации,
			//               |	ЛОЖЬ КАК ЭтоВозврат,
			//               |	ПеремещениеТоваровТовары.Ссылка КАК Док
			//               |ИЗ
			//               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыИДатыНачалаРаботЭтогоКонтрагента КАК СкладыИДатыНачалаРаботЭтогоКонтрагента
			//               |		ПО ПеремещениеТоваровТовары.Ссылка.Дата >= СкладыИДатыНачалаРаботЭтогоКонтрагента.Период
			//               |			И ПеремещениеТоваровТовары.Ссылка.СкладПолучатель = СкладыИДатыНачалаРаботЭтогоКонтрагента.Склад
			//               |ГДЕ
			//               |	ПеремещениеТоваровТовары.Ссылка.Проведен
			//               |	И ПеремещениеТоваровТовары.Ссылка.Дата < &ДатаТекДок
			//               |	И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.Код = ""000000005""
			//               |	И ПеремещениеТоваровТовары.Номенклатура В(&НоменклатураТекДокумента)
			//               |
			//               |ОБЪЕДИНИТЬ ВСЕ
			//               |
			//               |ВЫБРАТЬ
			//               |	ЕСТЬNULL(ПеремещениеТоваровТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
			//               |	ВЫРАЗИТЬ(-ЕСТЬNULL(ПеремещениеТоваровТовары.Количество, 0) * ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1) КАК ЧИСЛО),
			//               |	ВЫРАЗИТЬ(ЕСТЬNULL(ПеремещениеТоваровТовары.Цена,0) / ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1) КАК ЧИСЛО),
			//               |	ПеремещениеТоваровТовары.Ссылка.Дата,
			//               |	ИСТИНА,
			//               |	ПеремещениеТоваровТовары.Ссылка
			//               |ИЗ
			//               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыИДатыНачалаРаботЭтогоКонтрагента КАК СкладыИДатыНачалаРаботЭтогоКонтрагента
			//               |		ПО ПеремещениеТоваровТовары.Ссылка.Дата >= СкладыИДатыНачалаРаботЭтогоКонтрагента.Период
			//               |			И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель = СкладыИДатыНачалаРаботЭтогоКонтрагента.Склад
			//               |ГДЕ
			//               |	ПеремещениеТоваровТовары.Ссылка.Проведен
			//               |	И ПеремещениеТоваровТовары.Ссылка.Дата < &ДатаТекДок
			//               |	И ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.Код = ""000000005""
			//               |	И ПеремещениеТоваровТовары.Номенклатура В(&НоменклатураТекДокумента)";
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	_5LB_СоответствиеСкладаИКонтрагента.Период,
			|	_5LB_СоответствиеСкладаИКонтрагента.Склад
			|ПОМЕСТИТЬ СкладыИДатыНачалаРаботЭтогоКонтрагента
			|ИЗ
			|	РегистрСведений._5LB_СоответствиеСкладаИКонтрагента КАК _5LB_СоответствиеСкладаИКонтрагента
			|ГДЕ
			|	_5LB_СоответствиеСкладаИКонтрагента.Контрагент = &Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ПеремещениеТоваровТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
			|	ЕСТЬNULL(ПеремещениеТоваровТовары.Количество, 0) * ВЫБОР
			|		КОГДА ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1) <> 0
			|			ТОГДА ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1)
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Количество,
			|	ЕСТЬNULL(ПеремещениеТоваровТовары.Цена, 0) / ВЫБОР
			|		КОГДА ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1) <> 0
			|			ТОГДА ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1)
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Цена,
			|	ПеремещениеТоваровТовары.Ссылка.Дата КАК ДатаОперации,
			|	ЛОЖЬ КАК ЭтоВозврат,
			|	ПеремещениеТоваровТовары.Ссылка КАК Док
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыИДатыНачалаРаботЭтогоКонтрагента КАК СкладыИДатыНачалаРаботЭтогоКонтрагента
			|		ПО ПеремещениеТоваровТовары.Ссылка.Дата >= СкладыИДатыНачалаРаботЭтогоКонтрагента.Период
			|			И ПеремещениеТоваровТовары.Ссылка.СкладПолучатель = СкладыИДатыНачалаРаботЭтогоКонтрагента.Склад
			|ГДЕ
			|	ПеремещениеТоваровТовары.Ссылка.Проведен
			|	И ПеремещениеТоваровТовары.Ссылка.Дата < &ДатаТекДок
			|	И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.Код = ""000000005""
			|	И ПеремещениеТоваровТовары.Номенклатура В(&НоменклатураТекДокумента)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ПеремещениеТоваровТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
			|	-ЕСТЬNULL(ПеремещениеТоваровТовары.Количество, 0) * ВЫБОР
			|		КОГДА ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1) <> 0
			|			ТОГДА ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1)
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ЕСТЬNULL(ПеремещениеТоваровТовары.Цена, 0) / ВЫБОР
			|		КОГДА ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1) <> 0
			|			ТОГДА ЕСТЬNULL(ПеремещениеТоваровТовары.Коэффициент, 1)
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ПеремещениеТоваровТовары.Ссылка.Дата,
			|	ИСТИНА,
			|	ПеремещениеТоваровТовары.Ссылка
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыИДатыНачалаРаботЭтогоКонтрагента КАК СкладыИДатыНачалаРаботЭтогоКонтрагента
			|		ПО ПеремещениеТоваровТовары.Ссылка.Дата >= СкладыИДатыНачалаРаботЭтогоКонтрагента.Период
			|			И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель = СкладыИДатыНачалаРаботЭтогоКонтрагента.Склад
			|ГДЕ
			|	ПеремещениеТоваровТовары.Ссылка.Проведен
			|	И ПеремещениеТоваровТовары.Ссылка.Дата < &ДатаТекДок
			|	И ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.Код = ""000000005""
			|	И ПеремещениеТоваровТовары.Номенклатура В(&НоменклатураТекДокумента)";

			//{-КОНЕЦ-Изменения} Автор: Тасмаджиев 29/03/2018//==============================================================================================

			НоменклатураТекДокумента = Новый СписокЗначений;
			Для Каждого ТекСтрока ИЗ Товары Цикл
				Если НоменклатураТекДокумента.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
					НоменклатураТекДокумента.Добавить(ТекСтрока.Номенклатура);
				КонецЕсли;
			КонецЦикла;
			Запрос.УстановитьПараметр("НоменклатураТекДокумента", НоменклатураТекДокумента);
			Запрос.УстановитьПараметр("Контрагент", ТекКонтрагент);
			//Запрос.УстановитьПараметр("ТекДок", Ссылка);
			Запрос.УстановитьПараметр("ДатаТекДок", Дата);
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			//Добавим ещё остатки, которые сформированы на даты перехода складов в новые юр.лица:
			ДополнитьТЗОстаткамиНаДатуПерехода(ТЗ,ТекКонтрагент,НоменклатураТекДокумента);
			
			ТЗ.Сортировать("Номенклатура,ЭтоВозврат Убыв,ДатаОперации,Количество"); //это табличка с возвратами и продажами от ООО "5ЛБ" другому Юр.лицу (ТекКонтрагент)
			ТекНоменклатура = "***";
			СтрокаТЧ = Неопределено;
			ЗапомнилиКоличество = "***";
			ЗапомнилиСумма = "***";
			НадоВозвратитьСейчас = 0;
			Для Каждого Строка из ТЗ Цикл
				Если ТекНоменклатура = Строка.Номенклатура Тогда
					Если НадоВозвратитьСейчас = 0 Тогда
						//То есть мы уже набрали партии для возврата, просто переходим к другой строке
						Продолжить;
					КонецЕсли;
					
				Иначе
					Если НЕ СтрокаТЧ = Неопределено Тогда
						СтрокаТЧ.Цена = ?(ЗапомнилиКоличество = 0 или ЗапомнилиКоличество = "***",0,ОКР(ЗапомнилиСумма / (ЗапомнилиКоличество+НадоВозвратитьСейчас),2)); //цена предыдущей номенклатуры
						//Мы тут делим на +НадоВозвратитьСейчас для тех ситуаций, когда товар не принимался, но уже возвращается (в УТ10 так часто делают)
					КонецЕсли;
					ТекНоменклатура = Строка.Номенклатура;
					СтрокаТЧ = Товары.Найти(ТекНоменклатура,"Номенклатура");
					Если СтрокаТЧ = Неопределено Тогда
						НадоВозвратитьСейчас = 0;
					Иначе
						СтрокаТЧ.Цена = 0;
						НадоВозвратитьСейчас = СтрокаТЧ.Количество * ?(СтрокаТЧ.Коэффициент = 0,1,СтрокаТЧ.Коэффициент);
					КонецЕсли;
					КоличествоВозвращеноРанее = 0;
					ЗапомнилиКоличество = 0;
					ЗапомнилиСумма = 0;
				КонецЕсли;
				
				Если Строка.Количество < 0 Тогда
					КоличествоВозвращеноРанее = КоличествоВозвращеноРанее - Строка.Количество;
				Иначе
					Если КоличествоВозвращеноРанее > 0 Тогда
						Если КоличествоВозвращеноРанее > Строка.Количество Тогда
							КоличествоВозвращеноРанее = КоличествоВозвращеноРанее - Строка.Количество;
							Продолжить; //перейдем к след.строке ТЗ
						Иначе
							Строка.Количество = Строка.Количество - КоличествоВозвращеноРанее;
							КоличествоВозвращеноРанее = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если НадоВозвратитьСейчас > Строка.Количество Тогда
						ЗапомнилиКоличество = ЗапомнилиКоличество + Строка.Количество;
						
						//Когда пытаются сделать перемещение товара, для которого не было проступлений (у нас и не такое бывает), тут возникает ошибка, поэтому доп. проверка //01.09.2017, Юра
						//ЗапомнилиСумма = ЗапомнилиСумма + Строка.Количество * Строка.Цена;
						ЗапомнилиСумма = ?(ЗапомнилиСумма="***",0,ЗапомнилиСумма) + Строка.Количество * ?(ЗначениеЗаполнено(Строка.Цена),Строка.Цена,0);
						
						НадоВозвратитьСейчас = НадоВозвратитьСейчас - Строка.Количество;
					Иначе
						ЗапомнилиКоличество = ЗапомнилиКоличество + НадоВозвратитьСейчас;
						
						//Когда пытаются сделать перемещение товара, для которого не было проступлений (у нас и не такое бывает), тут возникает ошибка, поэтому доп. проверка //01.09.2017, Юра
						//ЗапомнилиСумма = ЗапомнилиСумма + НадоВозвратитьСейчас * Строка.Цена;
						ЗапомнилиСумма = ?(ЗапомнилиСумма="***",0,ЗапомнилиСумма) + НадоВозвратитьСейчас * ?(ЗначениеЗаполнено(Строка.Цена),Строка.Цена,0);
						
						НадоВозвратитьСейчас = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//Для последней строки:
			Если НЕ СтрокаТЧ = Неопределено Тогда
				СтрокаТЧ.Цена = ?(ЗапомнилиКоличество = 0 или ЗапомнилиКоличество = "***",0,ОКР(ЗапомнилиСумма / (ЗапомнилиКоличество+НадоВозвратитьСейчас),2)); //цена предыдущей номенклатуры
				//Мы тут делим на +НадоВозвратитьСейчас для тех ситуаций, когда товар не принимался, но уже возвращается (в УТ10 так часто делают)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//01.08.2017, Юра
Процедура ДополнитьТЗОстаткамиНаДатуПерехода(ТЗ,ТекКонтрагент,НоменклатураТекДокумента)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СоответствиеСкладаИКонтрагента.Склад,
	               |	СоответствиеСкладаИКонтрагента.Период КАК ДатаОстатков
	               |ИЗ
	               |	РегистрСведений._5LB_СоответствиеСкладаИКонтрагента.СрезПоследних(&ТекущаяДата, Контрагент = &ТекКонтрагент) КАК СоответствиеСкладаИКонтрагента";
	Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	Запрос.УстановитьПараметр("ТекКонтрагент", ТекКонтрагент);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДатаОперации = ВыборкаДетальныеЗаписи.ДатаОстатков - 1;//остатки вводили концом предыдущего дня от даты перехода
		ЗапросОстатки = Новый Запрос;
		ЗапросОстатки.Текст = "ВЫБРАТЬ
		                      |	ТоварыНаСкладахОстатки.Номенклатура,
		                      |	ТоварыНаСкладахОстатки.КоличествоОстаток,
		                      |	1.05 * ЦеныНоменклатурыСрезПоследних.Цена / ВЫБОР
		                      |		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
		                      |				ИЛИ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент = 0
		                      |			ТОГДА 1
		                      |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
		                      |	КОНЕЦ КАК Цена
		                      |ИЗ
		                      |	РегистрНакопления.ТоварыНаСкладах.Остатки(
		                      |			&ДатаСреза,
		                      |			Склад = &Склад
		                      |				И Номенклатура В (&НоменклатураТекДокумента)) КАК ТоварыНаСкладахОстатки
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		                      |				&ДатаСреза,
		                      |				ТипЦен = &ТипЦен
		                      |					И Номенклатура В (&НоменклатураТекДокумента)) КАК ЦеныНоменклатурыСрезПоследних
		                      |		ПО ТоварыНаСкладахОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		                      |ГДЕ
		                      |	ТоварыНаСкладахОстатки.КоличествоОстаток > 0";
		ЗапросОстатки.УстановитьПараметр("ДатаСреза", ДатаОперации); 
		ЗапросОстатки.УстановитьПараметр("Склад", ВыборкаДетальныеЗаписи.Склад);
		ЗапросОстатки.УстановитьПараметр("ТипЦен", Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("СредняяЦенаЗакупки"));
		ЗапросОстатки.УстановитьПараметр("НоменклатураТекДокумента",НоменклатураТекДокумента);
		//ТЗ = Запрос.Выполнить().Выгрузить();
		РезультатЗапросОстаткиа = ЗапросОстатки.Выполнить();
		ВыборкаДетальныеЗаписиОстатки = РезультатЗапросОстаткиа.Выбрать();
		Пока ВыборкаДетальныеЗаписиОстатки.Следующий() Цикл
			НС = ТЗ.Добавить();
			НС.Номенклатура 	= ВыборкаДетальныеЗаписиОстатки.Номенклатура;
			НС.Количество		= ВыборкаДетальныеЗаписиОстатки.КоличествоОстаток;
			НС.Цена				= ВыборкаДетальныеЗаписиОстатки.Цена;
			НС.ДатаОперации		= ДатаОперации;
			НС.ЭтоВозврат		= Ложь;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//13.07.2017, Юра
Функция ПечатьТОРГ12(БезУслуг = Ложь)
	УстановитьПривилегированныйРежим(Истина);
	//ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();//по-другому ведь перемещения не делаются 16.06.2017, Юра
	
	//Было до 21.09.2017, Юра
	//Покупатель = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладПолучатель);
	//Если ЗначениеЗаполнено(Покупатель) Тогда
	//	Поставщик = Организация;
	//	НомерДокумента = _5LB_РаботаСНесколькимиЮрЛицами.НомерДокументаДляПечатиТОРГ12_1Т(_5LB_НомерДокументаРеализацияТоваровУслугВБазе1СБухгалтерия5ЛБ);
	//Иначе
	//	Поставщик = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладОтправитель);
	//	Покупатель = Организация;
	//	НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);//01.08.2017, Юра
	//КонецЕсли;
	
	//Стало после 21.09.2017, Юра
	//Теперь 5ЛБ это может быть не ООО "5ЛБ", а что-то другое. И теперь у нас нет магазинов в 5ЛБ.
	КонтрагентОсновногоСклада = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,Справочники.Склады.НайтиПоНаименованию("Основной"));
	Если ЗначениеЗаполнено(КонтрагентОсновногоСклада) Тогда
		ТекОрганизация = КонтрагентОсновногоСклада;
	Иначе
		ТекОрганизация = Организация;
	КонецЕсли;
	НомерДокумента = _5LB_РаботаСНесколькимиЮрЛицами.НомерДокументаДляПечатиТОРГ12_1Т(_5LB_НомерДокументаРеализацияТоваровУслугВБазе1СБухгалтерия5ЛБ);
	
	Поставщик = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладОтправитель);
	Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
		Поставщик = ТекОрганизация;
	КонецЕсли;
	
	Покупатель = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладПолучатель);
	Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
		Покупатель = ТекОрганизация;
	КонецЕсли;
	//>> 21.09.2017, Юра
	
	//Небольшая проверка 19.06.2017, Юра
	Если НЕ ЗначениеЗаполнено(Поставщик) И НЕ ЗначениеЗаполнено(Покупатель) Тогда
		Сообщить("Не определен контрагент (не ООО ""5ЛБ""). Проверьте заполение регистра ""Соответствие склада (магазина) и контрагента (владельца склада)""");
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	// Документ оформлен в валюте регламентированного учета
	Запрос.УстановитьПараметр("Курс",      1);
	Запрос.УстановитьПараметр("Кратность", 1);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	
	//Посчитаем вес в кг. 13.07.2017, Юра:
	//|	ВЫБОР
	//|		КОГДА ВложенныйЗапрос.КоличествоМест > 0 ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	//|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	//|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Номенклатура.Вес * ВложенныйЗапрос.Количество/1000 КАК МассаБрутто,
	//		Объем = Товары[н].Номенклатура.Объем*Товары[н].Количество;
	
	|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	|	ВложенныйЗапрос.Серия                КАК Серия,
	//|	ВложенныйЗапрос.СтавкаНДС            КАК СтавкаНДС,
	|	ВложенныйЗапрос.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                 КАК Цена,
	//|	ВЫБОР
	//|		КОГДА((ВложенныйЗапрос.ПроцентСкидкиНаценки = 0) И 
	//|		      (ВложенныйЗапрос.ПроцентАвтоматическихСкидок = 0))
	//|	ТОГДА ЛОЖЬ
	//|	ИНАЧЕ Истина
	//|	КОНЕЦ                                КАК ЕстьСкидкиПоСтроке,
	|	ЛОЖЬ КАК ЕстьСкидкиПоСтроке,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест       КАК КоличествоМест,
	//|	ВложенныйЗапрос.Сумма                КАК Сумма,
	//|	ВложенныйЗапрос.СуммаНДС             КАК СуммаНДС,
	|	ВложенныйЗапрос.Цена * ВложенныйЗапрос.Количество               КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Номенклатура.СтавкаНДС есть NULL Тогда 0
	|		КОГДА ВложенныйЗапрос.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС18) Тогда 18
	|		КОГДА ВложенныйЗапрос.Номенклатура.СтавкаНДС = Значение(Перечисление.СтавкиНДС.НДС18_118) Тогда 18
	|	ИНАЧЕ 0
	|	КОНЕЦ                                КАК ПроцентНДС,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Коэффициент     КАК КоэффициентМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры           КАК Характеристика,
	|		РеализацияТоваровУслуг.СерияНоменклатуры                    КАК Серия,
	//|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность            КАК Цена,
	//|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	//|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|		СУММА(РеализацияТоваровУслуг.Количество)                    КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест)                КАК КоличествоМест,
	//|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность) КАК Сумма,
	//|		СУММА(РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                 КАК НомерСтроки,
	|		0                                                           КАК Метка
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры,
	//|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена
	//|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	//|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок
	|	) КАК ВложенныйЗапрос
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;//.Ландшафт;//13.07.2017, Юра
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
	
	Макет = ПолучитьОбщийМакет("ТОРГ12");
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Поставщик,Дата,,?(ТипЗнч(Поставщик)=Тип("СправочникСсылка.Организации"),Поставщик.ОсновнойБанковскийСчет,Неопределено));
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Поставщик,Дата);
	
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Покупатель,Дата,,?(ТипЗнч(Поставщик)=Тип("СправочникСсылка.Организации"),Поставщик.ОсновнойБанковскийСчет,Неопределено));
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Покупатель,Дата);
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Новый Структура("Организация,Контрагент,Дата",ТекОрганизация,Поставщик,Дата));
		
	//ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);//06.07.2017, Юра
	ОбластьМакета.Параметры.НомерДокумента = НомерДокумента;//01.08.2017, Юра
	
	ОбластьМакета.Параметры.ДатаДокумента  = Дата;
	
	Если Поставщик = ТекОрганизация Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПодразделения = "";
	//***{+Добавления}*** Тасмаджиев 08/11/2018// ->>
	//К СНПРО
	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = СкладПолучатель.Ссылка;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() <> 0 Тогда
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = Строка(СрезПоследних[0].ФизическоеЛицо);	
	Иначе
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли; 
	//***{-Добавления}*** Тасмаджиев 08/11/2018// <<-
	
	ОбластьМакета.Параметры.АдресДоставки = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	
	//Если Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	//	И Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
	//	ОбластьМакета.Параметры.Основание = Шапка.Основание;
	//Иначе
	//	Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
	//		ОбластьМакета.Параметры.Основание = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.Сделка, Строка(Шапка.Сделка.Метаданные().Синоним));
	//	КонецЕсли;
	//КонецЕсли;
	ОбластьМакета.Параметры.Основание = ?(ЗначениеЗаполнено(ВнутреннийЗаказ),"Внутренний заказ","Договор");//13.07.2017, Юра
	
	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОГрузоотправитель.КодПоОКПО;
	ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
	ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПоставщикПоОКПО       = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО      = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ОснованиеНомер        = ?(ЗначениеЗаполнено(ВнутреннийЗаказ),ОбщегоНазначения.ПолучитьНомерНаПечать(ВнутреннийЗаказ),"");
	ОбластьМакета.Параметры.ОснованиеДата         = ?(ЗначениеЗаполнено(ВнутреннийЗаказ),ВнутреннийЗаказ.Дата,"");
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = НомерДокумента;//01.08.2017, Юра
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = Дата; //13.07.2017, Юра
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	НомерСтраницы   = 1;
	
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;
	
	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСуммаСНДС   = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	Ном              = 0;
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Ном           = Ном + 1;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.Номер             = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование)
		+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрок)
		+ ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "");
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			МассаБрутто = 0;
		Иначе
			МассаБрутто = ВыборкаСтрок.МассаБрутто;
			МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
		КонецЕсли;
		
		Мест        = ВыборкаСтрок.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр(ВыборкаСтрок.Сумма, 2);
		СуммаБезНДС = СуммаСНДС;
		СуммаНДС    = Окр(ВыборкаСтрок.Сумма * (1 - 1/(1+ВыборкаСтрок.ПроцентНДС/100)), 2);// ВыборкаСтрок.СтавкаНДС;
		
		ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
		ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;
		
		ОбластьМакета.Параметры.Цена = ВыборкаСтрок.Цена;
		
		Если Ном = 1 Тогда // первая срока
			
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если Ном = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;		
			
			Если Ном <> 1 И НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
				
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// очистим итоги по странице
				ИтогоМассаБруттоНаСтранице = 0;
				ИтогоМестНаСтранице        = 0;
				ИтогоКоличествоНаСтранице  = 0;
				ИтогоСуммаНаСтранице       = 0;
				ИтогоНДСНаСтранице         = 0;
				ИтогоСуммаСНДСНаСтранице   = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;		
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
		ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
		ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;
		
		// увеличим итоги по дукументу
		ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;
		
	КонецЦикла;
	
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
	
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогМест        = КоличествоМест; //ИтогоМест; //13.07.2017, Юра
	ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогСуммы       = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогНДС         = ИтогоНДС;
	ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ПолнаяДатаДокумента = Формат(Дата, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки-ПервыйРазделитель)," ")+ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень     = """"+Лев(ПолнаяДатаДокумента,ПервыйРазделитель-1)+"""";
	ОбластьМакета.Параметры.ДатаДокументаМесяц    = Сред(ПолнаяДатаДокумента,ПервыйРазделитель+1,ВторойРазделитель-ПервыйРазделитель-1);
	ОбластьМакета.Параметры.ДатаДокументаГод      = Прав(ПолнаяДатаДокумента,ДлинаСтроки-ВторойРазделитель);	
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Организация, Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	
	// Главный бухгалтер
	ОбластьМакета.Параметры.ФИОГлавБухгалтера = Бухгалтер;
	
	// Отпуск товара разрешил
	//Если НЕ ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
	Если НЕ ЗначениеЗаполнено(ОтпускРазрешил) Тогда//13.07.2017, Юра
		ФИООтпускРазрешил       = Руководитель;
		ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	Иначе
	//	ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента);
	//	ПодразделениеДолжностьФизЛица    = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Ответственный, Шапка.ДатаДокумента, Организация);
	//	ФамилияИмяОтчествоОтпускРазрешил = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	//	ФИООтпускРазрешил                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускРазрешил);
	//	ДолжностьОтпускРазрешил          = ПодразделениеДолжностьФизЛица.Должность;
	//13.07.2017, Юра
		ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФорм.ФамилияИмяОтчество(ОтпускРазрешил, Дата);
		ПодразделениеДолжностьФизЛица    = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(ОтпускРазрешил, Дата, Организация);
		ФамилияИмяОтчествоОтпускРазрешил = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускРазрешил                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускРазрешил);
		ДолжностьОтпускРазрешил          = ПодразделениеДолжностьФизЛица.Должность;
	КонецЕсли;
	ОбластьМакета.Параметры.ФИОРуководителя       = ФИООтпускРазрешил;
	ОбластьМакета.Параметры.ДолжностьРуководителя = ДолжностьОтпускРазрешил;
	
	// Отпуск товара произвел
	Если НЕ ЗначениеЗаполнено(ОтпускПроизвел) Тогда //13.07.2017, Юра
		ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Ответственный, Дата);
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Ответственный, Дата, Организация);
		ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
		ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;
	Иначе
		ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(ОтпускПроизвел, Дата);
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(ОтпускПроизвел, Дата, Организация);
		ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
		ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;
	КонецЕсли;
	ОбластьМакета.Параметры.ФИОКладовщика       = ФИООтпускПроизвел;
	ОбластьМакета.Параметры.ДолжностьКладовщика = ДолжностьОтпускПроизвел;
	
	// Доверенность
	//25.07.2017, Юра
	ПараметрыТС = _5LB_РаботаСНесколькимиЮрЛицами.ПолучитьПараметрыТС_ИДоверенностиВодителя(Водитель);
	ОбластьМакета.Параметры.ДоверенностьНомер     = ?(ПараметрыТС.Свойство("ДоверенностьНомер"),ПараметрыТС.ДоверенностьНомер,"");
	ОбластьМакета.Параметры.ДоверенностьДата      = ?(ПараметрыТС.Свойство("ДоверенностьДата"),Формат(ПараметрыТС.ДоверенностьДата, "ДФ='дд ММММ гггг'"),"");
	ОбластьМакета.Параметры.ДоверенностьВыдана    = ?(ПараметрыТС.Свойство("ДоверенностьВыдана"),ПараметрыТС.ДоверенностьВыдана,"");
	ОбластьМакета.Параметры.ДоверенностьЧерезКого = ?(ПараметрыТС.Свойство("ДоверенностьЧерезКого"),ПараметрыТС.ДоверенностьЧерезКого,"");
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
		ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
	КонецЕсли;
	
	//13.07.2017, Юра
	//Если ИтогоМест > 0 Тогда
	//	ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	//КонецЕсли;
	Если КоличествоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(КоличествоМест, ,",,,,,,,,0");
	КонецЕсли;
	
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТОРГ12()

//20.07.2017, Юра
Функция ПечатьТранспортнаяНакладная()
	УстановитьПривилегированныйРежим(Истина);
	
	//Было до 21.09.2017, Юра	
	//Покупатель = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладПолучатель);
	//Если ЗначениеЗаполнено(Покупатель) Тогда
	//	Поставщик = Организация;
	//	НомерДокумента = _5LB_РаботаСНесколькимиЮрЛицами.НомерДокументаДляПечатиТОРГ12_1Т(_5LB_НомерДокументаРеализацияТоваровУслугВБазе1СБухгалтерия5ЛБ);
	//Иначе
	//	Поставщик = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладОтправитель);
	//	Покупатель = Организация;
	//	НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);//01.08.2017, Юра
	//КонецЕсли;
	
	//Стало после 21.09.2017, Юра
	//Теперь 5ЛБ это может быть не ООО "5ЛБ", а что-то другое. И теперь у нас нет магазинов в 5ЛБ.
	КонтрагентОсновногоСклада = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,Справочники.Склады.НайтиПоНаименованию("Основной"));
	Если ЗначениеЗаполнено(КонтрагентОсновногоСклада) Тогда
		ТекОрганизация = КонтрагентОсновногоСклада;
	Иначе
		ТекОрганизация = Организация;
	КонецЕсли;
	НомерДокумента = _5LB_РаботаСНесколькимиЮрЛицами.НомерДокументаДляПечатиТОРГ12_1Т(_5LB_НомерДокументаРеализацияТоваровУслугВБазе1СБухгалтерия5ЛБ);
	
	Поставщик = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладОтправитель);
	Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
		Поставщик = ТекОрганизация;
	КонецЕсли;
	
	Покупатель = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладПолучатель);
	Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
		Покупатель = ТекОрганизация;
	КонецЕсли;
	//>> 21.09.2017, Юра
	
	//Небольшая проверка 19.06.2017, Юра
	Если НЕ ЗначениеЗаполнено(Поставщик) И НЕ ЗначениеЗаполнено(Покупатель) Тогда
		Сообщить("Не определен контрагент (не ООО ""5ЛБ""). Проверьте заполение регистра ""Соответствие склада (магазина) и контрагента (владельца склада)""");
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(ПеремещениеТоваровУслуг.Номенклатура.Вес, 1) * ЕСТЬNULL(ПеремещениеТоваровУслуг.Количество, 1) / 1000) КАК ВесБрутто,
	               |	СУММА(ЕСТЬNULL(ПеремещениеТоваровУслуг.Номенклатура.Объем, 1) * ЕСТЬNULL(ПеремещениеТоваровУслуг.Количество, 1)) КАК Объем
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровУслуг
	               |ГДЕ
	               |	ПеремещениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ИтогоМассаБрутто = ЗапросТовары.Итог("ВесБрутто");
	ИтогоОбъем = ЗапросТовары.Итог("Объем");
	
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТранспортнаяНакладная";
	
	Макет = ПолучитьОбщийМакет("_5LB_ТранспортнаяНакладная");
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПерваяСтраница");
	ОбластьМакета.Параметры.НомерДокумента = НомерДокумента;
	ОбластьМакета.Параметры.ДатаДокумента  = Дата;
	//ОбластьМакета.Параметры.НомерЗаказа = ?(ЗначениеЗаполнено(ВнутреннийЗаказ),ВнутреннийЗаказ.Номер,"");
	//ОбластьМакета.Параметры.ДатаЗаказа = ?(ЗначениеЗаполнено(ВнутреннийЗаказ),ВнутреннийЗаказ.Дата,"");
	
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Покупатель,  Дата);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Поставщик,Дата);
	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ОтгрузочноеНаименованиеГруза = "Спортивное питание, витаминно-минеральные комплексы, жиросжигатели, высокобелковые смеси, энергетики, одежда и аксессуары для занятия спортом ("+ЗапросТовары.Количество()+" наименований).";
	
	ОбластьМакета.Параметры.ОписаниеГрузовыхМест = ""+КоличествоМест + " ("+СокрЛП(ЧислоПрописью(КоличествоМест, ,",,,,,,,,0"))+") грузовых мест, укаковка - картонная коробка";
	ОбластьМакета.Параметры.ОписаниеВесаИОбъема =  "Масса брутто "+ИтогоМассаБрутто + "("+СокрЛП(ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0"))+") "+СокрЛП(ЕдиницаИзмеренияВеса)+", объем: "+ИтогоОбъем +" м3";
	ОбластьМакета.Параметры.СопроводительныеДокументы =  "Товарная накладная № "+НомерДокумента+" от "+Дата;
	ПараметрыТС = _5LB_РаботаСНесколькимиЮрЛицами.ПолучитьПараметрыТС_ИДоверенностиВодителя(Водитель);
	ОбластьМакета.Параметры.ПараметрыТС = "Водитель: "+СокрЛП(Водитель)+", водительское удостоверение: "+?(ПараметрыТС.Свойство("ВУ"),ПараметрыТС.ВУ,"")+" , марка автомобиля: "+?(ПараметрыТС.Свойство("МаркаАвто"),ПараметрыТС.МаркаАвто,"")+", номер автомобиля: "+?(ПараметрыТС.Свойство("НомерАвто"),ПараметрыТС.НомерАвто,"");
	ОбластьМакета.Параметры.АдресМестаПогрузки = "Склад "+СкладОтправитель+", адрес: "+ПолучитьАдресСклада(СкладОтправитель);
	ОбластьМакета.Параметры.АдресМестаВыгрузки = "Склад "+СкладПолучатель+", адрес: "+ПолучитьАдресСклада(СкладПолучатель);	
	
	ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Водитель, Дата);
	ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Ответственный, Дата, Организация);
	ФИОВодитель = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество);
	ПодписьВодителя = ""+?(ПодразделениеДолжностьФизЛица.Должность=Неопределено,"",ПодразделениеДолжностьФизЛица.Должность) + " " +ФИОВодитель;
	ОбластьМакета.Параметры.ПодписьВодителя = ПодписьВодителя;
	
	ОбластьМакета.Параметры.ДатаПринятияЗаказаКИсполнению = Дата;
	
	ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Ответственный.ФизЛицо, Дата);
	ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Ответственный, Дата, Организация);
	ФИООтветственного = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество);
	ОбластьМакета.Параметры.ФИО_должностьПринявшегоКИсполнению = ""+?(ПодразделениеДолжностьФизЛица.Должность=Неопределено,"",ПодразделениеДолжностьФизЛица.Должность) + " " +ФИООтветственного;
	
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	ОбластьМакета = Макет.ПолучитьОбласть("ВтораяСтраница");
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	//ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Водитель.ФизЛицо, Дата);
	//ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Ответственный, Дата, Организация);
	//ФИОВодитель = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество);
	ОбластьМакета.Параметры.ФИОВодителя_СредстваСвязи = ФИОВодитель + " "+?(ПараметрыТС.Свойство("ТелефонВодителя"),ПараметрыТС.ТелефонВодителя,"");
	ОбластьМакета.Параметры.МаркаАвтомобиля = ?(ПараметрыТС.Свойство("МаркаАвто"),ПараметрыТС.МаркаАвто,"");
	ОбластьМакета.Параметры.НомерАвтомобиля = ?(ПараметрыТС.Свойство("НомерАвто"),ПараметрыТС.НомерАвто,"");
	ОбластьМакета.Параметры.ФИОВодитель = ФИОВодитель;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции

//20.07.2017, Юра
Функция ПолучитьАдресСклада(ТекСклад)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗначенияСвойствОбъектов.Значение КАК Адрес
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Склад
		|	И ЗначенияСвойствОбъектов.Свойство.Наименование = ""Адрес""";
	Запрос.УстановитьПараметр("Склад", ТекСклад);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Адрес;
	КонецЦикла;
	Возврат "";
КонецФункции 

//12.07.2017, Юра
Процедура ПолучитьНомерРТУизБазы1СБухгалтерия5ЛБ()
	ОсновнойСклад = Справочники.Склады.НайтиПоНаименованию("Основной");//25.10.2017, Юра
	Если СкладОтправитель = ОсновнойСклад Тогда
		//11.07.2017, Юра
		//Создадим в базе 1С:Бухгалтерия ООО "5ЛБ" документ РТУ. Пока пустой, сейчас нам нужен только его номер.
		//Заполнять этот документ будем только если товар доставлен и документ проведён.
		Контрагент = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,СкладПолучатель);//24.07.2017, Юра
		
		Если НЕ ЗначениеЗаполнено(_5LB_НомерДокументаРеализацияТоваровУслугВБазе1СБухгалтерия5ЛБ) И СтатусСборки = Перечисления.СтатусыСборкиЗаказа.Собран И НЕ ПометкаУдаления И ЗначениеЗаполнено(Контрагент)  Тогда
			
			//Было до 25.10.2017, Юра
			////21.09.2017, Юра
			////Теперь 5ЛБ это может быть не ООО "5ЛБ", а ООО "5ЛБ Логистик". И теперь у нас нет магазинов в 5ЛБ.
			//КонтрагентОсновногоСклада = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,Справочники.Склады.НайтиПоНаименованию("Основной"));
			//Если ЗначениеЗаполнено(КонтрагентОсновногоСклада) Тогда
			//	ТекОрганизация = КонтрагентОсновногоСклада;
			//	
			//	Бух = _5LB_ОбменСДругимиБазами.ПодключитьсяПоCOM("1cserv","BUH_5LB_Logistic");
			//	Если Бух = Неопределено Тогда
			//		Сообщить ("Не удалось подключиться к базе 1С:Бухгалтерия "+КонтрагентОсновногоСклада+". Попробуйте позже.");
			//		Отказ = Истина;
			//		Возврат;
			//	КонецЕсли;
			//Иначе
			//	ТекОрганизация = Организация;
			//	
			//	//Было до 21.09.2017, Юра
			//	Бух = _5LB_ОбменСДругимиБазами.ПодключитьсяПоCOM("1cserv","C8_BUH_30");
			//	Если Бух = Неопределено Тогда
			//		Сообщить ("Не удалось подключиться к базе 1С:Бухгалтерия ООО ""5ЛБ"". Попробуйте позже.");
			//		Отказ = Истина;
			//		Возврат;
			//	КонецЕсли;
			//КонецЕсли;
			
			//25.10.2017, Юра
			//Теперь новая вводная. В УТ10 указывается 5ЛБ, но надо понимать как ООО "САППЛЕМЕНТС ЛОГИСТИК". При этом обмен будет по-прежнему с базой 5ЛБ
			КонтрагентОсновногоСклада = _5LB_РаботаСНесколькимиЮрЛицами.ОпределитьЮрЛицоПоСкладу(Дата,ОсновнойСклад);
			Если ЗначениеЗаполнено(КонтрагентОсновногоСклада) Тогда
				ТекОрганизация = КонтрагентОсновногоСклада;
			Иначе
				ТекОрганизация = Организация;	
			КонецЕсли;
			Бух = _5LB_ОбменСДругимиБазами.ПодключитьсяПоCOM("1cserv","C8_BUH_30");
			Если Бух = Неопределено Тогда
				Сообщить ("Не удалось подключиться к базе 1С:Бухгалтерия ООО ""5ЛБ"". Попробуйте позже.");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			//21.08.2017, Юра
			//ДокументРТУ = НайтиИлиСоздатьДокументРТУвБазе1СБухгалтерияИЗаполнитьШапкуДокумента(Бух,Ссылка,Контрагент);
			ПараметрыДляДокумента = Новый Структура;
			ПараметрыДляДокумента.Вставить("ИННорганизации",ТекОрганизация.ИНН);//Организация.ИНН);21.09.2017, Юра
			ПараметрыДляДокумента.Вставить("КППорганизации",ТекОрганизация.КПП);//Организация.КПП);21.09.2017, Юра
			ПараметрыДляДокумента.Вставить("ИННКонтрагента",Контрагент.ИНН);
			ПараметрыДляДокумента.Вставить("КППКонтрагента",Контрагент.КПП);
			ПараметрыДляДокумента.Вставить("ТекДок",Ссылка);
			ПараметрыДляДокумента.Вставить("ВидДокумента","РеализацияТоваровУслуг");
			ПараметрыДляДокумента.Вставить("КодСклада",СкладОтправитель.Код);
			ПараметрыДляДокумента.Вставить("НаименованиеПодразделения","");//Возьмем в 1С:Бухгалтерии из Склада
			ПараметрыДляДокумента.Вставить("ЗаполнятьТовары",Ложь);//22.08.2017, Юра
			ДокументРТУ = _5LB_ОбменСДругимиБазами.НайтиИлиСоздатьДокументвБазе1СБухгалтерия(Бух,ПараметрыДляДокумента);
			
			Попытка
				ДокументРТУ.Записать();
				//Отделим запись документа в 1С:Бухгалтерии от записи в УТ10 21.08.2017, Юра
				//_5LB_НомерДокументаРеализацияТоваровУслугВБазе1СБухгалтерия5ЛБ = ДокументРТУ.Номер; //это собственно то, ради чего мы так заморачивались
				////_5LB_ДокументПереданВУчетныеБазыДанных = Ложь; //21.08.2017, Юра
				//ОбменДанными.Загрузка = Истина;//27.07.2017, Юра
				//Записать();
			Исключение
				Сообщить ("В базе 1С:Бухгалтерия ООО ""5ЛБ"" не смогли сохранить документ (документ УТ10 "+Ссылка+")",СтатусСообщения.Важное);
			КонецПопытки;
			
			//Отделим запись документа в 1С:Бухгалтерии от записи в УТ10 21.08.2017, Юра
			Попытка
				_5LB_НомерДокументаРеализацияТоваровУслугВБазе1СБухгалтерия5ЛБ = ДокументРТУ.Номер; //это собственно то, ради чего мы так заморачивались
				//_5LB_ДокументПереданВУчетныеБазыДанных = Ложь; //21.08.2017, Юра
				ОбменДанными.Загрузка = Истина;//27.07.2017, Юра
				Записать();
			Исключение
				Сообщить ("Не смогли записать документ УТ10 "+Ссылка+". "+ОписаниеОшибки(),СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

//***{+Добавления}*** Тасмаджиев 03/08/2018// ->>
Процедура ЗаполнитьТоварыПоАктуОрасхождениях(ДокументОснование, ПодтверждатьОчисткуСтрок) Экспорт
	Если Товары.Количество() > 0 Тогда
		Если ПодтверждатьОчисткуСтрок Тогда			
			#Если Клиент Тогда			
				ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
			#КонецЕсли		
		КонецЕсли;
		
		Товары.Очистить();
	КонецЕсли;
	
	Для каждого Строка ИЗ ДокументОснование.Товары Цикл 
		
		Если Строка.Решение = Перечисления._5LB_РешенияПоПретензионнымТоварам.Перемещение Тогда
			СтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Строка);
			СтрокаТабличнойЧасти.КоличествоСобрано = Строка.Количество;
			СтрокаТабличнойЧасти.КоличествоПринято = Строка.Количество; 
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры  //***{-Добавления}*** Тасмаджиев 03/08/2018// <<-

//***{+Добавления}*** Тасмаджиев 03/08/2018// ->>
Функция ПолучитьПретензионныйСклад(Склад)
	
	    ПретензионныйСклад = Неопределено;
		//=!{Получаем список дополнительных свойств склада}!= ->>
		ОбработкаОбъектЗначенияСвойств = Обработки.ЗначенияСвойствОбъекта.Создать();
		ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений =Склад;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Склад; 
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
		//=!{Получаем список дополнительных свойств склада}!= <<-
		Если ОбработкаОбъектЗначенияСвойств.ЭтотОбъект.СвойстваИЗначения.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Переведен на розницу")).Значение Тогда
			
			ПретензионныйСклад = ОбработкаОбъектЗначенияСвойств.ЭтотОбъект.СвойстваИЗначения.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Претензионный склад")).Значение;
			
			Если НЕ ЗначениеЗаполнено(ПретензионныйСклад) Тогда
				
				Сообщить("Для склада "+Склад.Наименование+ 
				"дополнительной свойство ""Претензионный склад"" не заполнено, заполните значение дополнительного свойства ""Претензионный склад"" для склада "+ 
				Склад.Наименование,
				СтатусСообщения.Важное);
				
								
			КонецЕсли;
			
		Иначе
			
			Сообщить("Для склада "+Склад.Наименование+ "дополнительной свойство Переведен на розницу установлено значение:ЛОЖЬ",СтатусСообщения.Важное)
			
		КонецЕсли;
		
		Возврат ПретензионныйСклад;
КонецФункции //***{-Добавления}*** Тасмаджиев 03/08/2018// <<-


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();

Упаковка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("778");
