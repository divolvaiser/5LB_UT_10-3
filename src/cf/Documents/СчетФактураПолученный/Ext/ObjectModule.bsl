Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мОбновлятьРеквизитыПриЗаписи Экспорт;

Перем мДокументЗаполнен Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Финкция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("СуммаВключаетНДС");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("СтавкаНП");
	Товары.Колонки.Добавить("Сумма");

	Возврат Товары;

КонецФункции

#Если Клиент Тогда

// Функция собирает данные по документу основанию ОтчетКомиссионераОПродажах и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетОПродажахКомиссионера(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",  ДокОснование);
	Запрос.УстановитьПараметр("Курс",      ДокОснование.КурсВзаиморасчетов);
	Запрос.УстановитьПараметр("Кратность", ДокОснование.КратностьВзаиморасчетов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Покупатель,
	|	Подразделение КАК Подразделение,
	|	Контрагент    КАК Поставщик,
	|	СуммаДокумента          КАК Сумма,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ВалютаДокумента         КАК Валюта,
	|	СуммаВключаетНДС,
	|	УчитыватьНДС,
	|	Товары.(
	|		СУММА(СуммаВознаграждения) КАК Сумма
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &Документ";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Комиссионное вознаграждение";
		Строчка.ТоварНаименование   = "Комиссионное вознаграждение";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 1;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СтавкаНДС           = Шапка.СтавкаНДС;
		Строчка.СуммаВключаетНДС	= Истина;
		СуммаНДС                    = УчетНДС.РассчитатьСуммуНДС(ВыборкаСтрокТовары.Сумма, Шапка.УчитыватьНДС, Шапка.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Шапка.СтавкаНДС));
		Строчка.СуммаНДС            = СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		Строчка.Цена                = ВыборкаСтрокТовары.Сумма - СуммаНДС;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетОПродажахКомиссионера()

// Функция собирает данные по документу основанию Поступление и 
// структуру с данными
// 
Функция СобратьДанныеПоПоступлениюТоваров(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Организация 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	Подразделение,
	|	Контрагент            КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс", ДокОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность", ДокОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ДокОснование.Ссылка);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
							|	ВложенныйЗапрос.НомерСтроки,
							|	ВложенныйЗапрос.Товар,
							|	ВложенныйЗапрос.Товар.НаименованиеПолное КАК ТоварНаименование,
							|	NULL КАК ОбъектСтроительства,
							|	NULL КАК ОбъектСтроительстваНаименование, 
							|	ВложенныйЗапрос.СтранаПроисхождения,
							|	ВложенныйЗапрос.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
							|	ВложенныйЗапрос.НомерГТД,
							|	ВложенныйЗапрос.НомерГТД.Представление КАК ПредставлениеГТД,
							|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
							|	ВложенныйЗапрос.Количество,
							|	ВложенныйЗапрос.Цена,
							|	ВложенныйЗапрос.Сумма,
							|	ВложенныйЗапрос.СуммаНДС,
							|	ВложенныйЗапрос.СтавкаНДС,
							|	ВложенныйЗапрос.Характеристика,
							|	ВложенныйЗапрос.Серия,
							|   1 КАК ID
							|ИЗ
							|	(ВЫБРАТЬ
							|		ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
							|		ТаблицаПоТоварам.Номенклатура КАК Товар,
							|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
							|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
							|		ТаблицаПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
							|		СУММА(ТаблицаПоТоварам.Количество) КАК Количество,
							|		ТаблицаПоТоварам.Цена КАК Цена,
							|		ТаблицаПоТоварам.Сумма КАК Сумма,
							|		ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
							|		ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС,
							|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
							|		ТаблицаПоТоварам.СерияНоменклатуры КАК Серия
							|	ИЗ
							|		Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаПоТоварам
							|	
							|	ГДЕ
							|		ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
							|	
							|	СГРУППИРОВАТЬ ПО
							|		ТаблицаПоТоварам.НомерСтроки,
							|		ТаблицаПоТоварам.Номенклатура,
							|		ТаблицаПоТоварам.ЕдиницаИзмерения,
							|		ТаблицаПоТоварам.СтавкаНДС,
							|		ТаблицаПоТоварам.Цена,
							|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения,
							|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД,
							|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры,
							|		ТаблицаПоТоварам.СерияНоменклатуры,
							|		ТаблицаПоТоварам.Сумма,
							|		ТаблицаПоТоварам.СуммаНДС) КАК ВложенныйЗапрос

							|ОБЪЕДИНИТЬ ВСЕ

							|ВЫБРАТЬ
							|	ТаблицаПоУслугам.НомерСтроки,
							|	ТаблицаПоУслугам.Номенклатура,
							|	ТаблицаПоУслугам.Содержание,
							|	NULL,
							|	NULL,
							|	ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка),
							|	""--"",
							|	""--"",
							|	""--"",
							|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.Представление,
							|	ТаблицаПоУслугам.Количество,
							|	ТаблицаПоУслугам.Цена,
							|	ТаблицаПоУслугам.Сумма,
							|	ТаблицаПоУслугам.СуммаНДС,
							|	ТаблицаПоУслугам.СтавкаНДС,
							|	NULL,
							|	NULL,
							|	2
							|ИЗ
							|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ТаблицаПоУслугам

							|ГДЕ
							|	ТаблицаПоУслугам.Ссылка = &ТекущийДокумент
							|";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары = Ложь;
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Если ВыборкаСтрокТовары.ID = 1 
			ИЛИ ВыборкаСтрокТовары.ID = 3 
			ИЛИ ВыборкаСтрокТовары.ID = 4 Тогда
			ЕстьТовары = Истина;                            
		КонецЕсли;
		
		Строчка = Товары.Добавить();
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар) Тогда
			Строчка.Товар               = ВыборкаСтрокТовары.Товар;
			Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ТоварНаименование  + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ИначеЕсли ЗначениеЗаполнено(ВыборкаСтрокТовары.ОбъектСтроительства) Тогда
			Строчка.Товар               = ВыборкаСтрокТовары.ОбъектСтроительства;
			Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ОбъектСтроительстваНаименование;
		КонецЕсли;
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена      = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС  = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма     = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;
	
	Если Не ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваров()

// Функция собирает данные по документу основанию ВозвратТоваровПоставщику и 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваров(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Организация 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	Подразделение,
	|	Контрагент            КАК Поставщик,
	|	""он же""             КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Документ.ВозвратТоваровПоставщику","Документ.ВозвратТоваровПоставщикуИзНТТ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Грузоотправитель","НеИспользуется, 
		|	ВЫБОР 
		|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
		|			ТОГДА ""он же"" 
		|		ИНАЧЕ Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель");
	КонецЕсли; 
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс", ДокОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность", ДокОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ДокОснование.Ссылка);
	ЗапросПоТоварам.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Товар,
		|	ВложенныйЗапрос.Товар.НаименованиеПолное КАК ТоварНаименование,
		|	ВложенныйЗапрос.СтранаПроисхождения,
		|	ВложенныйЗапрос.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
		|	ВложенныйЗапрос.НомерГТД,
		|	ВложенныйЗапрос.НомерГТД.Представление КАК ПредставлениеГТД,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Сумма,
		|	ВложенныйЗапрос.СуммаНДС,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Серия,
		|	ВложенныйЗапрос.ДокументПоступления
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
		|		ТаблицаПоТоварам.Номенклатура КАК Товар,
		|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
		|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
		|		ТаблицаПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СУММА(ТаблицаПоТоварам.Количество) КАК Количество,
		|		-ТаблицаПоТоварам.Цена КАК Цена,
		|		-ТаблицаПоТоварам.Сумма КАК Сумма,
		|		-ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
		|		ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС,
		|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
		|		ТаблицаПоТоварам.СерияНоменклатуры КАК Серия,
		|		ТаблицаПоТоварам.ДокументПоступления КАК ДокументПоступления
		|	ИЗ
		|		Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаПоТоварам
		|	ГДЕ
		|		ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
		//|		И ТаблицаПоТоварам.ДокументПоступления <> НЕОПРЕДЕЛЕНО
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаПоТоварам.НомерСтроки,
		|		ТаблицаПоТоварам.Номенклатура,
		|		ТаблицаПоТоварам.ЕдиницаИзмерения,
		|		ТаблицаПоТоварам.СтавкаНДС,
		|		ТаблицаПоТоварам.Цена,
		|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения,
		|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД,
		|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры,
		|		ТаблицаПоТоварам.СерияНоменклатуры,
		|		ТаблицаПоТоварам.Сумма,
		|		ТаблицаПоТоварам.СуммаНДС,
		|		ТаблицаПоТоварам.ДокументПоступления) КАК ВложенныйЗапрос";

	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ЗапросПоТоварам.Текст = СтрЗаменить(ЗапросПоТоварам.Текст,"Документ.ВозвратТоваровПоставщику","Документ.ВозвратТоваровПоставщикуИзНТТ");
	КонецЕсли;
	
	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ДокументПоступления) Тогда

			Строчка = Товары.Добавить();
			Строчка.Товар               = ВыборкаСтрокТовары.Товар;
			Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ТоварНаименование  + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
			Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
			Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
			Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
			Строчка.Количество          = ВыборкаСтрокТовары.Количество;
			Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
			Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
			Строчка.Цена      = ВыборкаСтрокТовары.Цена;
			Строчка.СтавкаНДС = ВыборкаСтрокТовары.СтавкаНДС;
			Строчка.СуммаНДС  = ВыборкаСтрокТовары.СуммаНДС;
			Строчка.Сумма     = ВыборкаСтрокТовары.Сумма;
			
		КонецЕсли;

	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваров()

// Функция собирает данные по документу основанию ВозвратТоваровОтПокупателя и 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровОтПокупателя(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	Организация КАК Грузополучатель,
	|	Подразделение,
	|	Контрагент            КАК Поставщик,
	|	""он же"" КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс", ДокОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность", ДокОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ДокОснование.Ссылка);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтроки,
	                        |	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Товар,
	                        |	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	                        |	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК СТРОКА(1000)) КАК ПредставлениеСтраны,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	                        |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                        |	СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК Количество,
	                        |	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
	                        |	ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
	                        |	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
	                        |	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	                        |	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры КАК Серия
	                        |ИЗ
	                        |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	                        |ГДЕ
	                        |	ВозвратТоваровОтПокупателяТовары.Ссылка = &ТекущийДокумент
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	                        |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	                        |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения,
	                        |	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	                        |	ВозвратТоваровОтПокупателяТовары.Цена,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.СтранаПроисхождения,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.НомерГТД,
	                        |	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры,
	                        |	ВозвратТоваровОтПокупателяТовары.Сумма,
	                        |	ВозвратТоваровОтПокупателяТовары.СуммаНДС,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.НомерГТД.Представление,
	                        |	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	                        |	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК СТРОКА(1000))";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.Товар.НаименованиеПолное) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(НЕ ЗначениеЗаполнено(СокрЛП(ВыборкаСтрокТовары.ПредставлениеСтраны)), ВыборкаСтрокТовары.СтранаПроисхождения, СокрЛП(ВыборкаСтрокТовары.ПредставлениеСтраны));
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = СокрЛП(ВыборкаСтрокТовары.ПредставлениеГТД);
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена      = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС  = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма     = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваров()

// Функция собирает данные по документу основанию Поступление товаров и услуг в НТТ 
// и возвращает структуру с данными
// 
Функция СобратьДанныеПоПоступлениюТоваровУслугВНТТ(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	Организация           КАК Грузополучатель,
	|	Контрагент            КАК Поставщик,
	|	Контрагент            КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНТТ КАК ПоступлениеТоваровУслугВНТТ
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугВНТТ.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс",            ДокОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       ДокОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ДокОснование.Ссылка);
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Товар,
	|	ВложенныйЗапрос.Товар.НаименованиеПолное       КАК ТоварНаименование,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.СтранаПроисхождения,
	|	ВложенныйЗапрос.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ВложенныйЗапрос.НомерГТД,
	|	ВложенныйЗапрос.НомерГТД.Представление         КАК ПредставлениеГТД,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.СтавкаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПоТоварам.НомерСтроки							КАК НомерСтроки,
	|		ТаблицаПоТоварам.Номенклатура							КАК Товар,
	|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры             КАК Характеристика,
	|		ТаблицаПоТоварам.СерияНоменклатуры                      КАК Серия,
	|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения  КАК СтранаПроисхождения,
	|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД             КАК НомерГТД,
	|		ТаблицаПоТоварам.ЕдиницаИзмерения						КАК ЕдиницаИзмерения,
	|		СУММА(ТаблицаПоТоварам.Количество)   					КАК Количество,
	|		ТаблицаПоТоварам.Цена                КАК Цена,
	|		ТаблицаПоТоварам.Сумма               КАК Сумма,
	|		ТаблицаПоТоварам.СуммаНДС            КАК СуммаНДС,
	|		ТаблицаПоТоварам.СтавкаНДС           КАК СтавкаНДС
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслугВНТТ.Товары КАК ТаблицаПоТоварам
	|	
	|	ГДЕ
	|		ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПоТоварам.НомерСтроки,
	|		ТаблицаПоТоварам.Номенклатура,
	|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры,
	|		ТаблицаПоТоварам.СерияНоменклатуры,
	|		ТаблицаПоТоварам.ЕдиницаИзмерения,
	|		ТаблицаПоТоварам.СтавкаНДС,
	|		ТаблицаПоТоварам.Цена,
	|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения,
	|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД,
	|		ТаблицаПоТоварам.Сумма,
	|		ТаблицаПоТоварам.СуммаНДС) КАК ВложенныйЗапрос

	|ОБЪЕДИНИТЬ ВСЕ

	|ВЫБРАТЬ
	|	ТаблицаПоУслугам.НомерСтроки,
	|	ТаблицаПоУслугам.Номенклатура,
	|	ТаблицаПоУслугам.Содержание,
	|	"""",
	|	"""",
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка),
	|	""--"",
	|	""--"",
	|	""--"",
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	ТаблицаПоУслугам.Количество,
	|	ТаблицаПоУслугам.Цена,
	|	ТаблицаПоУслугам.Сумма,
	|	ТаблицаПоУслугам.СуммаНДС,
	|	ТаблицаПоУслугам.СтавкаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНТТ.Услуги КАК ТаблицаПоУслугам

	|ГДЕ
	|	ТаблицаПоУслугам.Ссылка = &ТекущийДокумент";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар) Тогда
			Строчка.Товар               = ВыборкаСтрокТовары.Товар;
			Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		КонецЕсли;

		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваровУслугВНТТ()

// Функция собирает данные по документу основанию Поступление Доп. расходов и
// структуру с данными
// 
Функция СобратьДанныеДопРасходам(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст ="
	|	ВЫБРАТЬ
	|	Организация,
	|	Организация КАК Покупатель,
	|	Подразделение,
	|	Контрагент  КАК Поставщик,
	|	Содержание            КАК СтатьяЗатрат,
	|	ВалютаДокумента       КАК Валюта,
	|	СуммаДокумента        КАК СуммаДокумента,
	|	(ВложенныйЗапрос.СуммаНДС + ПоступлениеДопРасходов.СуммаНДС) КАК СуммаНДС,
	|	СтавкаНДС,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	ВложенныйЗапрос.СуммаДенег
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ПоступлениеДопРасходовТовары.Сумма)    КАК СуммаДенег,
	|		СУММА(ПоступлениеДопРасходовТовары.СуммаНДС) КАК СуммаНДС
	|
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|
	|	ГДЕ
	|		Ссылка = &ДокументОснование) КАК ВложенныйЗапрос,
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &ДокументОснование
	|";

	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Строчка = Товары.Добавить();
	Строчка.Товар               = Шапка.СтатьяЗатрат;
	Строчка.ТоварНаименование   = Шапка.СтатьяЗатрат;
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = 1;
	Строчка.ЕдиницаИзмерения    = "";
	Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
	СуммаДока         = Шапка.СуммаДокумента + 
	                    ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	Строчка.СтавкаНДС = Шапка.СтавкаНДС;
	Строчка.СуммаНДС  = Шапка.СуммаНДС;
	Строчка.Сумма     = Шапка.СуммаДокумента - ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	Строчка.Цена      = Строчка.Сумма;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеДопРасходам()

// Функция собирает данные по документу основанию ОтражениеПоступленияТоваровИУслугНДС и 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениеПоступленияТоваровУслугНДС(ДокОснование)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	Организация           КАК Грузополучатель,
	|	Контрагент            КАК Поставщик,
	|	Контрагент            КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	ИСТИНА		          КАК УчитыватьНДС,
	|	ЛОЖЬ			      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеПоступленияТоваровИУслугНДС КАК ОтражениеПоступленияТоваровИУслугНДС
	|
	|ГДЕ
	|	ОтражениеПоступленияТоваровИУслугНДС.Ссылка = &ДокументОснование";
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.ДокументОснование.Ссылка);
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтроки,
	|	Номенклатура					КАК Товар,
	|	Номенклатура.НаименованиеПолное	КАК ТоварНаименование,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	0           					КАК Количество,
	|	Сумма       					КАК Цена,
	|	Сумма       					КАК Сумма,
	|	СуммаНДС    					КАК СуммаНДС,
	|	СтавкаНДС   					КАК СтавкаНДС,
	|	СтранаПроисхождения,
	|	НомерГТД
	|ИЗ
	|	Документ.ОтражениеПоступленияТоваровИУслугНДС.ТоварыИУслуги КАК ТаблицаПоТоварамИУслугам
	|
	|ГДЕ
	|	ТаблицаПоТоварамИУслугам.Ссылка = &ТекущийДокумент";
	
	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;
	
КонецФункции

// Функция собирает данные по документу основанию АвансовыйОтчет и 
// структуру с данными
// 
Функция СобратьДанныеПоАвансовыйОтчет(ДокОснование)
	
	Если НаАванс Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АвансовыйОтчет.Организация,
	|	АвансовыйОтчет.Организация КАК Покупатель,
	|	АвансовыйОтчет.Организация КАК Грузополучатель,
	|	ВложенныйЗапрос.Контрагент КАК Поставщик,
	|	ВложенныйЗапрос.Контрагент КАК Грузоотправитель,
	|	АвансовыйОтчет.ВалютаДокумента КАК Валюта,
	|	АвансовыйОтчет.УчитыватьНДС КАК УчитыватьНДС,
	|	АвансовыйОтчет.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет,
	|	(ВЫБРАТЬ
	|		Товары.Поставщик КАК Контрагент
	|	ИЗ
	|		Документ.АвансовыйОтчет.Товары КАК Товары
	|	ГДЕ
	|		Товары.СчетФактура = &Ссылка
	|		И Товары.Ссылка = &ДокументОснование
	|		И Товары.ПредъявленСФ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.Поставщик
	|	ИЗ
	|		Документ.АвансовыйОтчет.Прочее КАК Товары
	|	ГДЕ
	|		Товары.СчетФактура = &Ссылка
	|		И Товары.Ссылка = &ДокументОснование) КАК ВложенныйЗапрос
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ДокументОснование";
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ДокументОснование", ДокОснование);
	ЗапросПоТоварам.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоТоварам.НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура КАК Товар,
	|	ТаблицаПоТоварам.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ТаблицаПоТоварам.Количество,
	|	ТаблицаПоТоварам.Цена,
	|	ТаблицаПоТоварам.Сумма,
	|	ТаблицаПоТоварам.СуммаНДС,
	|	ТаблицаПоТоварам.СтавкаНДС,
	|	1 КАК ID
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК ТаблицаПоТоварам
	|ГДЕ
	|	ТаблицаПоТоварам.Ссылка = &ДокументОснование
	|	И ТаблицаПоТоварам.СчетФактура = &Ссылка
	|	И ТаблицаПоТоварам.ПредъявленСФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоПрочее.НомерСтроки,
	|	ТаблицаПоПрочее.Номенклатура,
	|	ТаблицаПоПрочее.Содержание,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка),
	|	""--"",
	|	""--"",
	|	""--"",
	|	""--"",
	|	0,
	|	0,
	|	ТаблицаПоПрочее.Сумма,
	|	ТаблицаПоПрочее.СуммаНДС,
	|	ТаблицаПоПрочее.СтавкаНДС,
	|	2
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК ТаблицаПоПрочее
	|ГДЕ
	|	ТаблицаПоПрочее.Ссылка = &ДокументОснование
	|	И ТаблицаПоПрочее.СчетФактура = &Ссылка
	|	И ТаблицаПоПрочее.ПредъявленСФ";
	
	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );
	
	Товары = ИнициализацияТаблицыСтрок();
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);

	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли Не ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСчетаФактуры(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;

	Если Дата < '20040216' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_СчетФактура575";
		Макет = ПолучитьОбщийМакет("СчетФактура575");
	ИначеЕсли Дата < '20060530' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_СчетФактура84";
		Макет = ПолучитьОбщийМакет("СчетФактура84");
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_СчетФактура283";
		Макет = ПолучитьОбщийМакет("СчетФактура283");
	КонецЕсли;

	Если ДанныеДляПечати.Покупатель = Null Тогда
		Сообщить("В документе основании не указано юр./физ. лицо у организации.");
		Возврат Неопределено;
	КонецЕсли;
	Если ДанныеДляПечати.Поставщик = Неопределено Тогда
		Сообщить("В документе основании не указано юр./физ. лицо контрагента.");
		Возврат Неопределено;
	КонецЕсли;

	СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.Номер = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	Если Дата < '20040216' Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: "                                 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                                    + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ИННпоставщика                 = "Идентификационный номер продавца (ИНН): "   + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ИНН,", Ложь); 
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "             + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), "", ?(ДанныеДляПечати.Грузоотправитель = "он же", ДанныеДляПечати.Грузоотправитель, ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")));
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "              + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), "", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,"));
		ОбластьМакета.Параметры.ПоДокументу                   = "К платежно-расчетному документу №  от: ";
		ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                               + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                                    + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ИННПокупателя                 = "Идентификационный номер покупателя (ИНН): " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: "                               + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                                  + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ЮридическийАдрес,");
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика                 = "ИНН/КПП продавца: "                       + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ИНН,", Ложь) + КПП;
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "           + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), "", ?(ДанныеДляПечати.Грузоотправитель = "он же", ДанныеДляПечати.Грузоотправитель, ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")));
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "            + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), "", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,"));
		ОбластьМакета.Параметры.ПоДокументу                   = "К платежно-расчетному документу №  от: ";
		ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                             + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                                  + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННПокупателя                 = "ИНН/КПП покупателя: "                     + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
	КонецЕсли;
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");
	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		Если (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
		 Или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
		 Или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
		Иначе
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, ПредставлениеСтраны, НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.Россия Тогда
			ОбластьМакета.Параметры.ПредставлениеСтраны  = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД = "--";
		КонецЕсли;


		Количество  = Строчка.Количество;
		СуммаНДС    = Строчка.СуммаНДС;
		СуммаСНДС 	= Строчка.СуммаСНДС;
		СуммаБезНДС = Строчка.СуммаБезНДС;

		ОбластьМакета.Параметры.Количество = Количество;
		ОбластьМакета.Параметры.Цена       = ?(Количество = 0, 0, СуммаБезНДС / Количество);
		ОбластьМакета.Параметры.Стоимость  = СуммаБезНДС;
		ОбластьМакета.Параметры.СуммаНДС   = СуммаНДС;
		ОбластьМакета.Параметры.Всего      = СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС  = Строчка.СтавкаНДС;

		ИтогоСуммаНДС = ИтогоСуммаНДС + СуммаНДС;
		ИтогоВсего    = ИтогоВсего    + СуммаСНДС;
		
		Если ОбластьМакета.Параметры.ЕдиницаИзмерения = "--" 
			Или НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
			ОбластьМакета.Параметры.Количество = 0;
		КонецЕсли;
		
		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.ИтогоВсего    = ИтогоВСего;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если Найти(ИмяМакета, "СчетФактура") <> 0 Тогда
		ДанныеДляПечати = Неопределено;
		
		Для Каждого СтрДокОснования Из ДокументыОснования Цикл
			// Получить экземпляр документа на печать
			Если Не ЗначениеЗаполнено(СтрДокОснования.ДокументОснование) Тогда
				Продолжить;
			ИначеЕсли Не СтрДокОснования.ДокументОснование.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			ТипОснования = ТипЗнч(СтрДокОснования.ДокументОснование);

			Если ТипОснования      = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоПоступлениюТоваров(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ВозвратТоваровПоставщику") 
				или ТипОснования      = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") 
				Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваров(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровОтПокупателя(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
				ДанныеДляПечати    = СобратьДанныеПоПоступлениюТоваровУслугВНТТ(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетОПродажахКомиссионера(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеДопРасходам(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоОтражениеПоступленияТоваровУслугНДС(СтрДокОснования.ДокументОснование)
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоАвансовыйОтчет(СтрДокОснования.ДокументОснование)
			КонецЕсли;

			Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
				Если ДанныеДляПечати = Неопределено Тогда
					ДанныеДляПечати = ЭкземплярДанныхДляПечати;
				Иначе
					Для Каждого СтрДанных Из ЭкземплярДанныхДляПечати Цикл
						
						Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
							СтараяТабЧасть = ДанныеДляПечати.ТабличнаяЧасть;
							НоваяТабЧасть = СтрДанных.Значение;
							
							Для Каждого НоваяСтрокаТабЧасти Из НоваяТабЧасть Цикл
								СтрокаТабЧасти = СтараяТабЧасть.Добавить();
								
								Для Каждого ТекКол Из НоваяТабЧасть.Колонки Цикл
									Если СтараяТабЧасть.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
										СтрокаТабЧасти[ТекКол.Имя] = НоваяСтрокаТабЧасти[ТекКол.Имя];
									КонецЕсли;
								КонецЦикла;
								
							КонецЦикла;
							
						Иначе
							Если Не ДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
								// Если данный параметр для печати шапки документа еще не  определен - то определяем его
								ДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
			
		Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
			Возврат;
		ИначеЕсли ДанныеДляПечати = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ТабДокумент = ПечатьСчетаФактуры(ДанныеДляПечати);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	Если Дата < '20040216' Тогда
		СтруктураМакетов.Вставить("СчетФактура575", "Счет-фактура");
	ИначеЕсли Дата < '20060530' Тогда
		СтруктураМакетов.Вставить("СчетФактура84", "Счет-фактура");
	Иначе
		СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура");
	КонецЕсли;
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли


// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры() Экспорт
	
	Если НаАванс Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСФ = Неопределено;
	
	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, ПараметрыСФ);
	
	Если не ПараметрыСФ.Организация = Неопределено 
		и не ПараметрыСФ.Организация = Организация 
		Тогда
		Номер = "";
		Организация		  = ПараметрыСФ.Организация;
	КонецЕсли; 			
	Если не ПараметрыСФ.Контрагент = Неопределено 
		и не ПараметрыСФ.Контрагент = Контрагент 
		Тогда
		Контрагент		  = ПараметрыСФ.Контрагент;
	КонецЕсли; 			
	Если не ПараметрыСФ.Договор = Неопределено 
		и не ПараметрыСФ.Договор = ДоговорКонтрагента 
		Тогда
		ДоговорКонтрагента		  = ПараметрыСФ.Договор;
	КонецЕсли; 			
	Если не СуммаДокумента = ПараметрыСФ.СуммаДокумента Тогда
		СуммаДокумента    = ПараметрыСФ.СуммаДокумента;
	КонецЕсли; 			
	Если не ПараметрыСФ.ВалютаДокумента = Неопределено 
		и не ВалютаДокумента = ПараметрыСФ.ВалютаДокумента 
		Тогда
		ВалютаДокумента   = ПараметрыСФ.ВалютаДокумента;
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли; 
	
КонецПроцедуры // ОпределениеПараметровСчетаФактуры()

Процедура ЗаполнитьСчетФактуруНаАванс(ДокументЗаполнен) Экспорт
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументЗаполнен = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСРасчетыСПоставщиками.Поставщик КАК Контрагент,
	               |	НДСРасчетыСПоставщиками.ДоговорКонтрагента,
	               |	НДСРасчетыСПоставщиками.ВалютаРасчетов,
	               |	СУММА(НДСРасчетыСПоставщиками.Сумма) КАК СуммаДокумента,
	               |	СУММА(НДСРасчетыСПоставщиками.ВалютнаяСумма) КАК ВалютнаяСумма
	               |ИЗ
	               |	РегистрНакопления.НДСРасчетыСПоставщиками КАК НДСРасчетыСПоставщиками
	               |ГДЕ
	               |	НДСРасчетыСПоставщиками.Регистратор = &ДокументОснование
	               |	И НДСРасчетыСПоставщиками.Документ = &ДокументОснование
	               |	И НДСРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |	И НДСРасчетыСПоставщиками.РасчетыСБюджетом = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСРасчетыСПоставщиками.Поставщик,
	               |	НДСРасчетыСПоставщиками.ДоговорКонтрагента,
	               |	НДСРасчетыСПоставщиками.ВалютаРасчетов";
					   
	Результат = Запрос.Выполнить().Выгрузить();
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.НДС18_118);
	
	ОшибкаПриЗаполнении = Ложь;
	СтрокаСообщения = "";
	СуммаДокумента = 0;
	ДокументЗаполнен = Ложь;
	Для Каждого СтрокаТаблицы Из Результат Цикл
		
		Если ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			
			ТаблицаПоСтавкам = Новый ТаблицаЗначений();
			ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			
			Для Каждого СтрПлатежа Из ДокументыОснования[0].ДокументОснование.РасшифровкаПлатежа Цикл
				Если СтрПлатежа.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента Тогда
					ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
					Если ТекСтавкаНДС = Неопределено Тогда
						ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
					КонецЕсли; 
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
					СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаПоСтавкам.Свернуть("СтавкаНДС", "Сумма");
			
			//Распределение суммы рег учета
			МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТаблицы.СуммаДокумента, ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
			Если Не МассивСумм = Неопределено Тогда
				ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
			Иначе
				МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
			КонецЕсли; 
			
			Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
				Если СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					Или СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				КонецЕсли;
				
				Контрагент = СтрокаТаблицы.Контрагент;
				ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
				СуммаДокумента		= СуммаДокумента + СтрокаПоСтавке.Сумма;
				НовыйАванс = Авансы.Добавить();
				НовыйАванс.Сумма = СтрокаПоСтавке.Сумма;
				НовыйАванс.СтавкаНДС	  = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);;
				НовыйАванс.СуммаНДС		  = УчетНДС.РассчитатьСуммуНДС(НовыйАванс.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(НовыйАванс.СтавкаНДС));
				ОшибкаПриЗаполнении = Ложь;
				ДокументЗаполнен = Истина;
			КонецЦикла;
			
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Авансы.Очистить();
				СуммаДокумента = 0;
				ДокументЗаполнен = Ложь;
			Иначе
				Прервать;
			КонецЕсли;

		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаТаблицы);
			СтрокаАванса = Авансы.Добавить();
			СтрокаАванса.Сумма = СтрокаТаблицы.СуммаДокумента;
			СтрокаАванса.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
			СтрокаАванса.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаАванса.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаАванса.СтавкаНДС));
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			ДокументЗаполнен = Истина;
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Авансы.Очистить();
				СуммаДокумента = 0;
				ДокументЗаполнен = Ложь;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда 
		ДокументОснование = Неопределено;
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
	КонецЕсли;		
	
	Если ОшибкаПриЗаполнении Тогда
		ДокументЗаполнен = Ложь;
		ДокументОснование = Неопределено;
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПроверитьВозможностьЗаписиСФ(Отказ = Ложь, УдалятьЛишниеСтроки = Ложь) Экспорт
	
	Отказ = Ложь;
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("НаАванс, ПометкаУдаления", НаАванс, Ложь);
	Если НаАванс Тогда
		//Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
		СтруктураОтбора.Вставить("ДоговорКонтрагента"	, ДоговорКонтрагента);
		СтруктураОтбора.Вставить("СтавкиНДС"			, Авансы.ВыгрузитьКолонку("СтавкаНДС"));
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Ссылка);
		
		Если Не СуществующийСФ = Неопределено Тогда
			СтавкиНДС = "";
			СтрокиКУдалению = Новый Массив;
			Для Каждого СтрокаТаблицы Из СуществующийСФ.Авансы Цикл
				СтавкиНДС = СтавкиНДС + ?(СтавкиНДС = "", "", ", ") + СтрокаТаблицы.СтавкаНДС;
				Если УдалятьЛишниеСтроки Тогда
					СтрокиОтбора = Авансы.НайтиСтроки(Новый Структура("СтавкаНДС", СтрокаТаблицы.СтавкаНДС));
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокиКУдалению.Добавить(СтрокаОтбора);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			СтрокаСообщения = "Для указанного документа-основания уже зарегистрирован счет-фактура на аванс 
			|по договору «"+ДоговорКонтрагента+"» со ставками НДС "+СтавкиНДС+":"+Символы.ПС
			+ " - «"+ Строка(СуществующийСФ)+"»";
			
			Если УдалятьЛишниеСтроки Тогда
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					Авансы.Удалить(СтрокаКУдалению);
				КонецЦикла;
				Сумма = Авансы.Итог("Сумма");
				СуммаДокумента = Сумма;
			КонецЕсли;
			
			Отказ = Не (УдалятьЛишниеСтроки И Авансы.Количество() <> 0);
		КонецЕсли;
	Иначе
		Для каждого ТекущееОснование Из ДокументыОснования Цикл
			Если ТипЗнч(ТекущееОснование.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") тогда
				//Может быть много СФ, проверка затруднительна. СФ отрабатываются при записи документа АО.
				Продолжить;
			КонецЕсли;

			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Ссылка);
			
			Если не СуществующийСФ = неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже зарегистрирован счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения +Символы.ПС+" - "+?(ДокументыОснования.Количество()>1," строка № "+ТекущееОснование.НомерСтроки+": для «"+ТекущееОснование.ДокументОснование+"» зарегистрирован счет-фактура ","");
				#Если Клиент Тогда
					СтрокаСообщения = СтрокаСообщения +" «"+РаботаСДиалогами.ПолучитьТекстСчетаФактуры(СуществующийСФ)+"»";
				#Иначе
					СтрокаСообщения = СтрокаСообщения +" «"+Строка(СуществующийСФ)+"»";
				#КонецЕсли
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если не ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Регистрация еще одного счета-фактуры не допускается."
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции // ПроверитьВозможностьЗаписиСФ()

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(НаАванс) Экспорт
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеПолученное"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
	СписокТипов.Добавить(Тип("ДокументСсылка.АккредитивПереданный"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное"));
	
	Если Не НаАванс Тогда
		СписокТипов = Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);//.Типы();
		СписокТипов = СписокТипов.Типы();
	КонецЕсли;
	
	СписокТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	
	Возврат СписокТипов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ДокументыОснования";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) 
			и НЕ СтрокаТЧ.ДокументОснование.Проведен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Счет-фактуру можно вводить только на основании проведенного документа (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
		КонецЕсли;	
		Если СтрокаТЧ.ДокументОснование.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено
			И Не СтрокаТЧ.ДокументОснование.ОтражатьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Счет-фактуру можно вводить только на основании документа, отражаемого в бухгалтерском учете (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Авансы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАвансам(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СтавкаНДС, Сумма");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      	, "ДокументОснование");
	СтруктураПолей.Вставить("ДокументОснованиеПроведен" , "ДокументОснование.Проведен");
	СтруктураПолей.Вставить("УчитыватьНДС"				, "ДокументОснование.УчитыватьНДС");
	СтруктураПолей.Вставить("НДСВключенВСтоимость"		, "ДокументОснование.НДСВключенВСтоимость");
	СтруктураПолей.Вставить("СуммаВключаетНДС"			, "ДокументОснование.СуммаВключаетНДС");
	СтруктураПолей.Вставить("СуммаВключаетНДС"			, "ДокументОснование.СуммаВключаетНДС");
	
	РезультатЗапросаПоДокументамОснованиям = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
	
	Если СтруктураШапкиДокумента.НаАванс Тогда
		
		ТаблицаПоДокументамОснованиям.Колонки.Добавить("ТаблицаДанных");
		
		Для Каждого СтрокаОснования Из ТаблицаПоДокументамОснованиям Цикл
			
			СтрокаОснования.УчитыватьНДС = Истина;
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Сумма",		"Сумма");
			СтруктураПолей.Вставить("НДС",			"СуммаНДС");
			СтруктураПолей.Вставить("СтавкаНДС",	"СтавкаНДС");
			
			РезультатЗапросаПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураПолей);
			
			СтрокаОснования.ТаблицаДанных = РезультатЗапросаПоАвансам.Выгрузить();
			ТаблицаПоАвансам = СтрокаОснования.ТаблицаДанных; 
			
			ТаблицаПоАвансам.Колонки.Добавить("СчетФактура", ТаблицаПоДокументамОснованиям.Колонки.ДокументОснование.ТипЗначения);
			
			ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные, "ВидЦенности");
			ТаблицаПоАвансам.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Поставщик");
			ТаблицаПоАвансам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
			ТаблицаПоАвансам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаПоАвансам.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "СуммаБезНДС");
			ТаблицаПоАвансам.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПокупки"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком, "Событие");
			
			Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
				
				СтрокаТаблицы.СчетФактура = СтрокаОснования.ДокументОснование;
				СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
			
			КонецЦикла;
			
		КонецЦикла; 
	КонецЕсли;
		
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДокумента, Отказ, Заголовок)

	ДвижениеПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаДокумента, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвижениеПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.НаАванс Тогда
		
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ТаблицаДвижений_НДССАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Для Каждого СтрокаДанных Из СтрокаТаблицы.ТаблицаДанных Цикл
				
				НоваяЗапись = ТаблицаДвижений_НДСПредъявленный.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
				НоваяЗапись.Организация = СтруктураШапкиДокумента.Организация;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				НоваяЗапись = ТаблицаДвижений_НДССАвансов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
				НоваяЗапись.Организация = СтруктураШапкиДокумента.Организация;
				НоваяЗапись.Покупатель = СтрокаДанных.Контрагент;
				НоваяЗапись.ДатаСобытия = СтруктураШапкиДокумента.Дата;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				
			КонецЦикла;
		КонецЦикла;
			
		Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

			Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
			Движения.НДСПредъявленный.ДобавитьДвижение();
			
		КонецЕсли;
		
		Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

			Движения.НДСсАвансов.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДССАвансов;
			Движения.НДСсАвансов.ДобавитьДвижение();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Дата = Основание.Дата;
	
	СтрДокОснования = ДокументыОснования.Добавить();
	СтрДокОснования.ДокументОснование = Основание.Ссылка;
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойОтветственный");
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Истина);
	Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		НаАванс = Истина;
		мДокументЗаполнен = Ложь;
		
		ЗаполнитьСчетФактуруНаАванс(мДокументЗаполнен);
		
		Если Не мДокументЗаполнен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.");
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоАвансам(Отказ, Заголовок);
	
	Если Не Отказ 
		И Не СформированПриВводеНачальныхОстатковНДС Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка Или Не мОбновлятьРеквизитыПриЗаписи Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОснование) И ДокументыОснования.Найти(ДокументОснование) = Неопределено Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;
	
	Если ДокументОснование = Неопределено И ДокументыОснования.Количество() > 0 Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если Не НаАванс И Не СформированПриВводеНачальныхОстатковНДС Тогда
		ОпределениеПараметровСчетаФактуры();
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мОбновлятьРеквизитыПриЗаписи = ИСТИНА;
мДокументЗаполнен = Ложь;