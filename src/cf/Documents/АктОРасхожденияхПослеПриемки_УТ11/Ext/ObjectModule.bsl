Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПорядокСписанияПартий; // (Общ)
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

Перем мУдалятьДвижения;

Перем мУказаниеСкладовВТЧ Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ

// Функция формирует табличный документ унифицированной формы ТОРГ-2
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме ТОРГ-2 (Акт об установленном расхождении по количеству и качеству при приемке товарно-материальных ценностей)
//
Функция ПечатьТОРГ2()

	Макет = ПолучитьМакет("ТОРГ2");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОРГ2";
	
	//ШапкаПервойСтраницы
	ОбластьМакетаШапкаПервойСтраницы = Макет.ПолучитьОбласть("ШапкаПервойСтраницы");
	ОбластьМакетаШапкаПервойСтраницы.Параметры.ПредставлениеОрганизации = Организация.НаименованиеПлательщикаПриПеречисленииНалогов;
	ОбластьМакетаШапкаПервойСтраницы.Параметры.ОснованиеДляСоставленияАкта = "Приказ";
	ОбластьМакетаШапкаПервойСтраницы.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакетаШапкаПервойСтраницы.Параметры.ДатаДокумента  = Формат(Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакетаШапкаПервойСтраницы.Параметры.ВызваемыйПредставительПартнера = "грузоотправителя, поставщика, производителя";
	ОбластьМакетаШапкаПервойСтраницы.Параметры.ВидДокументаОВызовеПредставителяПартнера = "телеграмма, факс, телефонограмма, радиограмма";
	ОбластьМакетаШапкаПервойСтраницы.Параметры.Поставщик = Контрагент.НаименованиеПолное;																																												
	ОбластьМакетаШапкаПервойСтраницы.Параметры.СпособДоставки = "автомобильным транспортом за счет поставщика";
	ТабДокумент.Вывести(ОбластьМакетаШапкаПервойСтраницы);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровШапка");
	ТабДокумент.Вывести(ОбластьМакета);	
	ОбластьМакета = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровПодвал");
	ТабДокумент.Вывести(ОбластьМакета);	
	
	//---------------------------------------------------
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 
	
	//ШапкаВторойСтраницы
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаВторойСтраницы");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("СостояниеТранспортаПоДокументам");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);

	ОбластьМакета = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамШапка");
	ТабДокумент.Вывести(ОбластьМакета);
	
	//ТаблицаТоваровПоДокументамСтрока
	ОбластьМакетаТаблицаТоваровПоДокументамСтрока = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамСтрока");
	Если ТипЗнч(Основание)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ДокПоступления = Основание;
		ТЗтоварыДокПоступления = ДокПоступления.Товары.Выгрузить();
		ТЗтоварыДокПоступления.Свернуть("Номенклатура,ЕдиницаИзмерения");
		
		Для каждого СтрТоварПост из ТЗтоварыДокПоступления Цикл
			ОбластьМакетаТаблицаТоваровПоДокументамСтрока.Параметры.Упаковка         = СтрТоварПост.ЕдиницаИзмерения.Наименование+"("+СтрТоварПост.ЕдиницаИзмерения.Коэффициент+" шт)";
			ОбластьМакетаТаблицаТоваровПоДокументамСтрока.Параметры.Товар            = СтрТоварПост.Номенклатура.Наименование;
			ОбластьМакетаТаблицаТоваровПоДокументамСтрока.Параметры.ЕдиницаИзмерения = СтрТоварПост.ЕдиницаИзмерения.Наименование; 
			ТабДокумент.Вывести(ОбластьМакетаТаблицаТоваровПоДокументамСтрока);
		КонецЦикла;
	КонецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамПодвал");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СостояниеТранспортаПоФакту");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ТаблицаИтогов");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ТаблицаТоваров1Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	//ТаблицаТоваров1Строка (по документам поставщика)
	ОбластьМакетаТаблицаТоваров1Строка = Макет.ПолучитьОбласть("ТаблицаТоваров1Строка");
	Для каждого СтрТовар из Товары Цикл
		ОбластьМакетаТаблицаТоваров1Строка.Параметры.Товар                  = СтрТовар.Номенклатура.Наименование;
		ОбластьМакетаТаблицаТоваров1Строка.Параметры.ЕдиницаИзмерения       = СтрТовар.ЕдиницаИзмерения.Наименование;
		ОбластьМакетаТаблицаТоваров1Строка.Параметры.КодПоОКЕИ              = СтрТовар.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
		ОбластьМакетаТаблицаТоваров1Строка.Параметры.ЗначениеКода           = СтрТовар.Номенклатура.Артикул; //Артикул
		ОбластьМакетаТаблицаТоваров1Строка.Параметры.КоличествоПоДокументам = СтрТовар.КоличествоПлан;
		//ОбластьМакетаТаблицаТоваров1Строка.Параметры.ЦенаПоДокументам
		//ОбластьМакетаТаблицаТоваров1Строка.Параметры.СуммаПоДокументам
		ТабДокумент.Вывести(ОбластьМакетаТаблицаТоваров1Строка);
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("ТаблицаТоваров1Подвал");
	ТабДокумент.Вывести(ОбластьМакета);
	
	//---------------------------------------------------
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 

	//ШапкаТретьейСтраницы
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТретьейСтраницы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("УсловияХраненияТовараДоВскрытия");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ТемператураПриРазгрузке");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("СостояниеТарыИУпаковки");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СодержаниеНаружнойМаркировки");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДатаВскрытияТары");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ОрганизацияВзвесившаяИОпломбировавшаяТовар");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПорядокОтбораТовараДляВыборочнойПроверки");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	//ТаблицаТоваров2Шапка
	ОбластьМакета = Макет.ПолучитьОбласть("ТаблицаТоваров2Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	//ТаблицаТоваров2Строка (фактически оказалось)
	ОбластьМакетаТаблицаТоваров2Строка = Макет.ПолучитьОбласть("ТаблицаТоваров2Строка");
	//ТаблицаТоваров2Строка = Товары.Выгрузить();
	//ТаблицаТоваров2Строка.Свернуть("","");
	Для каждого СтрТовар из Товары Цикл
		ОбластьМакетаТаблицаТоваров2Строка.Параметры.ЗначениеКода        = СтрТовар.Номенклатура.Наименование; //Артикул
		ОбластьМакетаТаблицаТоваров2Строка.Параметры.КоличествоПоФакту   = СтрТовар.КоличествоПринято; 
		//ЦенаПоФакту
		//СуммаПоФакту
		ОбластьМакетаТаблицаТоваров2Строка.Параметры.КоличествоБрак      = 0;
		ОбластьМакетаТаблицаТоваров2Строка.Параметры.КоличествоИзлишек   = 0;
		ОбластьМакетаТаблицаТоваров2Строка.Параметры.КоличествоНедостача = 0;
		Если СтрТовар.КоличествоРасхождения > 0 Тогда //Излишки 
			ОбластьМакетаТаблицаТоваров2Строка.Параметры.КоличествоИзлишек = СтрТовар.КоличествоРасхождения;
			//ОбластьМакетаТаблицаТоваров2Строка.Параметры.СуммаИзлишек        = 
		ИначеЕсли СтрТовар.КоличествоРасхождения < 0 Тогда //Недостача
			ОбластьМакетаТаблицаТоваров2Строка.Параметры.КоличествоНедостача = СтрТовар.КоличествоРасхождения*(-1); 
			//ОбластьМакетаТаблицаТоваров2Строка.Параметры.СуммаНедостача      = 
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаТаблицаТоваров2Строка);
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("ТаблицаТоваров2Подвал");
	ТабДокумент.Вывести(ОбластьМакета);
	
	//---------------------------------------------------
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 

	//ШапкаЧетвертойСтраницы	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаЧетвертойСтраницы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СпособОпределенияКоличества");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("МестоОпределенияКоличества");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОбИсправностиВесоизмерительныхПриборов");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеДанные");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодробноеОписаниеДефектов");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаключениеКомиссии");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Приложение");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЧленыКомиссии");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("РешениеРуководителя");
	ТабДокумент.Вывести(ОбластьМакета);
	ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Кладовщик");
	ТабДокумент.Вывести(ОбластьМакета);
	
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ-2()

Процедура ВывестиСтрокиРучногоЗаполнения_ТОРГ2(Макет,ТабДокумент)
	ОбластьМакетаСтрокаРучногоЗаполнения = Макет.ПолучитьОбласть("СтрокаРучногоЗаполнения");
	Для ЧетыреСтроки=1 по 4 Цикл	 //4 строки
		ТабДокумент.Вывести(ОбластьМакетаСтрокаРучногоЗаполнения);
	КонецЦикла;
	ОбластьМакетаСтрокаПробела = Макет.ПолучитьОбласть("СтрокаПробела");
	ТабДокумент.Вывести(ОбластьМакетаСтрокаПробела);
КонецПроцедуры
//НМА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		//{+НАЧАЛО+Изменения} Автор: Тасмаджиев 23/05/2018//=============================================================================================
		//================================================!{Ругалось на Предупреждение,в оладке не отлавливалось}!=======================================
		//Предупреждение("Документ можно распечатать только после его проведения");
	    СообщениеП = Новый СообщениеПользователю;
		СообщениеП.Текст = "Документ можно распечатать только после его проведения";
		СообщениеП.Сообщить();
		//{+НАЧАЛО+Изменения} Автор: Тасмаджиев 23/05/2018//=============================================================================================
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		//{+НАЧАЛО+Изменения} Автор: Тасмаджиев 23/05/2018//=============================================================================================
		//================================================!{Ругалось на Предупреждение,в оладке не отлавливалось}!=======================================
		//Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		СообщениеП = Новый СообщениеПользователю;
		СообщениеП.Текст = "Документ можно распечатать только после его проведения";
		СообщениеП.Сообщить();
		//{+НАЧАЛО+Изменения} Автор: Тасмаджиев 23/05/2018//=============================================================================================
		Возврат;
	КонецЕсли;

	//Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ТОРГ2" тогда

		// Унифицированная форма ТОРГ-2 (Акт об установленном расхождении по количеству и качеству при приемке товарно-материальных ценностей)
		ТабДокумент = ПечатьТОРГ2();

	//ИначеЕсли ИмяМакета = "ТОРГ12" тогда

	//	// Унифицированная форма ТОРГ-12 (за поставщика с услугами)
	//	ТабДокумент = ПечатьТОРГ12ЗаПоставщика();

	//ИначеЕсли ИмяМакета = "ТОРГ4" тогда

	//	// Унифицированная форма ТОРГ-4 (акт приемки товара без счета поставщика)
	//	ТабДокумент = ПечатьТОРГ4();

	//ИначеЕсли ИмяМакета = "М4" тогда

	//	// Унифицированная форма М-4 (приходный ордер)
	//	ТабДокумент = ПечатьМ4();
	//ИначеЕсли ИмяМакета = "Ценники" Тогда
	//	ТабДокумент = ПечатьЦенников();
	//ИначеЕсли ИмяМакета = "Этикетки" Тогда
	//	ПечататьЭтикетки();
	//	Возврат;
	//ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	//	ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");		
	//ИначеЕсли ИмяМакета = "Штрихи" Тогда
	//	ТабДокумент = ПечатаемНашиШтрихиИПустые();
	//ИначеЕсли ИмяМакета = "АктПриёмки" Тогда
	//	ТабДокумент = АктПриёмки();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидПоступления)));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("ТОРГ2",       "Акт о расхождениях после приемки");
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента) 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
	Иначе
		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	КонецЕсли;

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПриходаУпр()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, СтруктураШапкиДокумента)

	ТаблицаТЧ.Индексы.Добавить("НомерСтроки");
	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		
		Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
			Если СтруктураШапкиДокумента["СкладВТабличнойЧасти"]
			И НЕ ТаблицаТЧ.Колонки.Найти("Склад") = Неопределено Тогда
				Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
					СтрокаДвижений.Склад = СтрокаТЧ.Склад;
				ИначеЕсли ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
					Если СтрокаТЧ.БезПраваПродажи Тогда
						СтрокаДвижений.Склад = СтрокаТЧ.Склад;
					Иначе	
						СтрокаДвижений.Склад = СтрокаТЧ.ПриходныйОрдерСклад;
					КонецЕсли;	
				КонецЕсли;
			Иначе
				Если ТипЗнч(СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
					СтрокаДвижений.Склад = СкладОрдер;
				ИначеЕсли ТипЗнч(СкладОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
					Если НЕ ЗначениеЗаполнено(СкладОрдер) Тогда
						СтрокаДвижений.Склад = СтрокаТЧ.ПриходныйОрдерСклад;
					Иначе
						Если СтрокаТЧ.БезПраваПродажи Тогда
							СтрокаДвижений.Склад = СтрокаТЧ.Склад;
						Иначе	
							СтрокаДвижений.Склад = СкладОрдер.Склад;
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаДвижений.Склад = Неопределено;
		КонецЕсли;

		Если Не мПорядокСписанияПартий.Упр = Перечисления.СпособыОценки.ПоСредней 
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаДвижений.ДокументОприходования = Ссылка;
		КонецЕсли;
		
		СтрокаДвижений.СтатусПартии          = СтатусПартии;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		ОбособленныйУчет = СтрокаТЧ.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		СтрокаДвижений.Заказ = ?(ОбособленныйУчет <> NULL И ОбособленныйУчет 
		    И Не (НЕ ЗначениеЗаполнено(СтрокаТЧ.Заказ)), СтрокаТЧ.Заказ, Неопределено);

		// Если партионный учет по сериям не ведется, то надо очистить серию
		Если  СтатусПартии <> Перечисления.СтатусыПартийТоваров.ВозвратнаяТара И НЕ СтрокаТЧ.ВестиПартионныйУчетПоСериям Тогда
			СтрокаДвижений.СерияНоменклатуры = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладах()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТары.Колонки.Сумма.Имя = "Стоимость";
	ТаблицаТары.Колонки.Добавить("ВестиПартионныйУчетПоСериям", Новый ОписаниеТипов("Булево"));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры",  Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",           Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСкладаРазмещения");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
	                     ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСкладаРазмещения");
	КонецЕсли;

	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаУпр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		// Счиатем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, 
			                                  КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
			                             СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
			                             СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                             ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                             СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)


КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТара();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	Иначе
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, , СтруктураОбязательныхПолей);
	КонецЕсли;

	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидПоступления, ДоговорКонтрагента, "Поступление") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику");
	КонецЕсли;

	// Вызовем общую процедуру для проверки проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Если документ не является поступлением по ордеру, то НТТ быть не должно.
	// Поступление по ордеру может оформляться в НТТ (если товар сначала поступил на обычный склад,
	// а затем был перемещен в НТТ до поступления финансовых документов).
	Если СтруктураШапкиДокумента.ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "ВозвратнаяТара", "ЗаказПоставщику", Отказ, Заголовок);

	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ,
	                                                       Заголовок, "ВидСкладаРазмещения");
														   
	// Нельзя резервировать возвратную тару под заказ покупателя с обособленным учетом
	УправлениеЗаказами.ПроверитьРезервированиеТарыПодЗаказСОбособленнымУчетом(ЭтотОбъект,"Заказ", ложь, ,Отказ, Заголовок);													   
													   
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	Иначе // По ордеру

		// По ордеру нужно сторнировать движения по товарам организаций,
		// если в ордере была указана не та организация.
		// Удалим строки, по которым не нужно делать движений (организации совпадают).
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КолвоЭлементовКоллекции = КопияТаблицыТоваров.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = КопияТаблицыТоваров[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ОрганизацияДокументаПолучения = СтруктураШапкиДокумента.Организация Тогда
				КопияТаблицыТоваров.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		Если КопияТаблицыТоваров.Количество() > 0 Тогда // Есть что проводить.

			// Вначале сторнируем
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("ОрганизацияДокументаПолучения"), "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
			КонецЕсли;

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьРасход();
			КонецЕсли;

			// Теперь сделаем движения с правильной организацией.
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок, СтруктураШапкиДокумента)

	// ТОВАРЫ, ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	//Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		
		ОтборСкладПоступления    = Новый Структура("ВидСкладаРазмещения",);
		ОтборСкладСписания  = Новый Структура("ВидСкладаРазмещения", Перечисления.ВидыСкладов.Розничный);
			
		ТаблицаТоварыПоступление = ТаблицаПоТоварам.Скопировать();
		ТаблицаДляЗаменыСклада = ТаблицаПоТоварам.Скопировать();
		
		Для каждого Строка Из  ТаблицаДляЗаменыСклада Цикл
			
			Если Строка.Статус = Перечисления._5LB_СтатусыПретензионныхТоваров.Излишек Тогда
				
				Строка.Склад = СкладОрдер;
				
			Иначе
				
				ТаблицаДляЗаменыСклада.Удалить(Строка)
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаТоварыСписания = ТаблицаДляЗаменыСклада;
	    
			
		СтруктТаблицДокументаПриход = Новый Структура;
		СтруктТаблицДокументаПриход.Вставить("ТаблицаПоТоварам",      ТаблицаТоварыПоступление);
		СтруктТаблицДокументаПриход.Вставить("ТаблицаПоТаре",         Неопределено);
				
		СтруктТаблицДокументаРасход = Новый Структура;
		СтруктТаблицДокументаРасход.Вставить("ТаблицаПоТоварам", ТаблицаТоварыСписания);
		СтруктТаблицДокументаРасход.Вставить("ТаблицаПоТаре",    Неопределено);
			
		ТаблицыДанныхДокументаПриход = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыНаСкладах, СтруктТаблицДокументаПриход);
		ТаблицыДанныхДокументаРасход = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыНаСкладах, СтруктТаблицДокументаРасход);
				
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаПриход,  "Качество", Справочники.Качество.Новый);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаРасход, "Качество", Справочники.Качество.Новый);
			
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаПриход, Дата);
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаРасход, Дата);
			
	//Иначе // Приход по ордеру

	//	// Проверка остатков при оперативном проведении.
	//	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
	//		
	//		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
	//		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
	//		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
	//	КонецЕсли;
	//		
	//	Если НЕ Отказ Тогда
	//			
	//		// Подготовка таблицы товаров к получению
	//		ТаблицаТоварыКПолучению = ТаблицаПоТоварам.Скопировать();
	//		ТаблицаТоварыКПолучению.Колонки.Добавить("ДокументРезерва");
	//			
	//		// Документ резерва - приходный ордрер без права продажи.
	//		Для каждого СтрокаТаблицы из ТаблицаТоварыКПолучению Цикл
	//			Если СтрокаТаблицы.БезПраваПродажи Тогда
	//				СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ДокументПолучения;
	//			КонецЕсли;
	//		КонецЦикла;
	//			
	//		// Подготовка таблицы тара к получению
	//		ТаблицаТараКПолучению = ТаблицаПоТаре.Скопировать();
	//		ТаблицаТараКПолучению.Колонки.Добавить("ДокументРезерва");
	//			
	//		// Документ резерва - приходный ордрер без права продажи.
	//		Для каждого СтрокаТаблицы из ТаблицаТараКПолучению Цикл
	//			Если СтрокаТаблицы.БезПраваПродажи Тогда
	//				СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ДокументПолучения;
	//			КонецЕсли;
	//		КонецЦикла;
	//			
	//		// Движение по товарам к получению
	//		СтруктТаблицДокумента = Новый Структура;
	//		СтруктТаблицДокумента.Вставить("ТаблицаТоварыКПолучению", ТаблицаТоварыКПолучению);
	//		СтруктТаблицДокумента.Вставить("ТаблицаТараКПолучению",   ТаблицаТараКПолучению);
	//			
	//		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
	//				
	//		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",          Справочники.Качество.Новый);
	//		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаТоварыКПолучению");
	//		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",      Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаТараКПолучению");
	//			
	//		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	//		
	//	КонецЕсли;
	//		
	//КонецЕсли;
		
КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартийУпр()

// По результатам запросов формирует движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам,
	                          ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);


	//ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	//                          ТаблицаПоТаре, Отказ, Заголовок);

	//ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	//                                             Отказ, Заголовок, СтруктураШапкиДокумента);

	//ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, 
	//                          ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента);

							  
	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	//	ТаблицыДокумента = Новый Структура();
	//	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
	//	ТаблицыДокумента.Вставить("ТаблицаПоУслугам",ТаблицаПоУслугам);

	//	// Выполнить движения по спецрегистрам подсистемы учета НДС
	//	ТаблицаАвансов = Новый ТаблицаЗначений;
	//	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаАвансов, Отказ, Заголовок);
	//
	//КонецЕсли;

	// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить 
	// корректировку списания
	//Если ОтражатьВУправленческомУчете
	//	И ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

	//	Движения.ПартииТоваровНаСкладах.Записать();

	//	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

	//	Если Движения.СписанныеТовары.Количество()>0 Тогда
	//		ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
	//		ЗаписьРегистрации.Период      = Дата;
	//	КонецЕсли;

	//	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

	//		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	//	КонецЕсли;

	//КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
                                  ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
                                  Отказ, Заголовок);
	Если Не ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.

	ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок, СтруктураШапкиДокумента);

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если НЕ мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;

	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаАвансов, Отказ, Заголовок) Экспорт

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Поступление комиссионных товаров не отражается в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;

		Если ТабЧасть.Количество()> 0 Тогда 

			Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
				УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ);
			КонецЕсли;
			
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ, СтруктураШапкиДокумента.УчетАгентскогоНДС, ТаблицаАвансов, УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
	
		КонецЕсли; 
	КонецЦикла;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
		// На данный момент все наборы движений записаны.
		// Необходимо прочитать состояние набора "НДСПредъявленный"
		Движения_НДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураШапкиДокумента.Ссылка,РегистрыНакопления.НДСПредъявленный, Истина).Выгрузить();
		
        УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента,Движения_НДСПредъявленный,Движения);
	КонецЕсли; 
	
	//////////////////////////////////////////////////////////////////////
	// При необходимости, отражаем в регистре партионного учета для НДС
    ТаблицаДвиженийНДСПартии = Движения.НДСПартииТоваров;
	
	Если ТаблицыДокумента.ТаблицаПоТоварам.Количество()>0 
		Тогда
		ТаблицаДляНДСПартии = ТаблицыДокумента.ТаблицаПоТоварам.скопировать();
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
	КонецЕсли; 
	
	Движения.НДСПартииТоваров.Записать(Ложь);
	// При необходимости, отражаем в регистре партионного учета для НДС
	//////////////////////////////////////////////////////////////////////
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							  ТаблицаПоТаре, Отказ, Заголовок)
							  
	// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить корректировку списания
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		
		МассивПриходныхОрдеров = Новый Массив;
		Для каждого Строка Из ТаблицаПоТоварам Цикл
		
			Если  ТипЗнч(Строка.ДокументПолучения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			   И Строка.БезПраваПродажи =Ложь Тогда
			 МассивПриходныхОрдеров.Добавить(Строка.ДокументПолучения);
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого Строка Из ТаблицаПоТаре Цикл
		
			Если  ТипЗнч(Строка.ДокументПолучения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			   И Строка.БезПраваПродажи =Ложь Тогда
			 МассивПриходныхОрдеров.Добавить(Строка.ДокументПолучения);
			КонецЕсли;
		
		КонецЦикла;
		
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПриходныхОрдеров);
		
		// ПО РЕГИСТРУ СписанныеТовары: формируем запись с указанием приходного ордера, которая будет обрабатываться при списании
		НаборДвижений = Движения.СписанныеТовары;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		Инд = 0;
		Для каждого Элемент Из МассивПриходныхОрдеров Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.ПоступлениеПриходныйОрдер = Элемент;
			Инд = Инд+1;
			НоваяСтрока.НомерСтрокиДокумента = Инд;
			НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;

	КонецЕсли;

	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)


КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок) Экспорт

	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(Дата);
	
	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");
	
	Если ОтражатьВУправленческомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

////////////////////////////////////////////////////
// Подготовка и проверка структуры шапки документа

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Если есть колонка заказ, то заполнение поля Сделка не обязательно
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(Неопределено, ДоговорКонтрагента, "Поступление");
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов",                      "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов",                       "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация",                                "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора",                                "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах",                   "РасчетыВУсловныхЕдиницах");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС",                          "УчетАгентскогоНДС");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора",                      "ВидАгентскогоДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом",     "ВестиПоДокументамРасчетовСКонтрагентом");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",          "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "ВидОперации",                                "СделкаВидОперации");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "СписыватьПартииПриПроведенииДокументов",     "СписыватьПартииПриПроведенииДокументов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий",              "НеВключатьНДСВСтоимостьПартий");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам",                     "ВедениеУчетаПоПроектам");

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "ВидСклада",                              "ВидСклада");
	Иначе
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "Склад",                                  "СкладПриходногоОрдера");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "Склад.ВидСклада",                        "ВидСклада");
	КонецЕсли;

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "БезПраваПродажи"                   , "БезПраваПродажи");
	
	// Если сделка - Заказ поставщику, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка)
	   И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                       , "ВалютаЗаказа");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                    , "КурсВзаиморасчетовЗаказа");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"               , "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	Если не ЗначениеЗаполнено(СтруктураШапкиДокумента.УчетАгентскогоНДС) тогда 
		СтруктураШапкиДокумента.Вставить("УчетАгентскогоНДС", Ложь);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента() 

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	
	//***{+Редактирования}*** Тасмаджиев 01/08/2018// ->>
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
	                             |ВалютаДокумента, Контрагент, ДоговорКонтрагента,
	                             |КурсВзаиморасчетов, КратностьВзаиморасчетов");
   //***{-Редактирования}*** Тасмаджиев 01/08/2018// <<-
   
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти
	   И Товары.Количество() + ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
	КонецЕсли;

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ СтруктураШапкиДокумента.ЗаказВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Заказ поставщику""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Счет поставщика""!");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	// Если установлен призник "Обновлять цены поставщиков при поступлении товаров",
	// то надо обязательно указывать тип цен
	Если РегистрироватьЦеныПоставщика И ОтражатьВУправленческомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("ТипЦен", "Для обновления цен поставщиков необходимо указывать тип цен!");
	КонецЕсли;

КонецПроцедуры

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти 
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять поступление на НТТ!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Подготовка и проверка структуры шапки документа
////////////////////////////////////////////////////

////////////////////////////////////////////////////
// Подготовка и проверка таблиц документа (кроме таблицы по таре)

// Процедура формирует таблицы документа, вляиющие на состояние расчетов с контрагентами.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре) Экспорт

	СкладИзШапки = Не мУказаниеСкладовВТЧ;

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Вставить("Услуга"                               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                                , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                             , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Заказ"                      		   , "Заказ");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"                , "Заказ.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                     , "ЕдиницаИзмерения");
	Если СкладИзШапки и ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		СтруктураПолей.Вставить("Склад"                                , "Ссылка.СкладОрдер");
		СтруктураПолей.Вставить("ВидСкладаРазмещения"                  , "Ссылка.СкладОрдер.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("Склад"                                , "Склад");
		СтруктураПолей.Вставить("ВидСкладаРазмещения"                  , "Склад.ВидСклада");
	КонецЕсли;
	СтруктураПолей.Вставить("ДокументПолучения"                    , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения"        , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("БезПраваПродажи"                      , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("Цена"                                 , "Цена");
	СтруктураПолей.Вставить("НДС"                                  , "СуммаНДС");
	СтруктураПолей.Вставить("Коэффициент"                          , "Коэффициент");
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"                  , "ПриходныйОрдер.Склад");
	СтруктураПолей.Вставить("УчетПоСериям"                         , "Номенклатура.ВестиУчетПоСериям");
	СтруктураПолей.Вставить("СтранаПроисхождения"                  , "СерияНоменклатуры.СтранаПроисхождения");
	СтруктураПолей.Вставить("НомерГТД"                             , "СерияНоменклатуры.НомерГТД");
	СтруктураПолей.Вставить("ЗаказПоставщику"                      , "ЗаказПоставщику");
    //***{+Добавления}*** Тасмаджиев 01/08/2018// ->>
	СтруктураПолей.Вставить("Статус"                               , "Статус");
	//***{-Добавления}*** Тасмаджиев 01/08/2018// <<-
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);
		
	// Подготовим таблицы товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьТаблицыДокумента()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	 //{+Редактирования} Автор: Тасмаджиев 17/07/2018// ->>
	 //=!{Для реализации проводок в проекте нового документооборота}!= ->>
	//НМА 15.12.16 >> Оставляем только строки со складом Брак
	//ПараметрыОтбораБрака = Новый Структура("Склад",Справочники.Склады.НайтиПоНаименованию("Брак",Истина));
	//Если ТаблицаТоваров.Количество()>0 Тогда
	//	ТаблицаТоваров = ТаблицаТоваров.Скопировать(ПараметрыОтбораБрака);  //Оставляем только строки со складом Брак
	//КонецЕсли;
	//НМА 15.12.16 <<
	 //{-Редактирования} Автор: Тасмаджиев 17/07/2018// <<-
	 
	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));

	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ЕстьЦена = ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено;

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСкладаРазмещения");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСкладаРазмещения");
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	// Надо рассчитать стоимость без НДС.
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Считаем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий 
		   И НЕ (СтруктураШапкиДокумента.НДСВключенВСтоимость) 
		   И НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
			СтоимостьДляВзаиморасчетов = СтоимостьСНДС - СтрокаТаблицы.НДС;
		Иначе
			СтоимостьДляВзаиморасчетов = СтоимостьСНДС;
		КонецЕсли;
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьДляВзаиморасчетов, ВалютаДокумента, 
										 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, 
										 КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьДляВзаиморасчетов, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Цена нужна для проведения по заказам поставщиков, поэтому ее необходимо пересчитать в валюту заказа
		Если ЕстьЦена И ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) 
			И (ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
		       ИЛИ ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
			СтруктураКурсаВалютыЗаказа = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаЗаказа, Дата);
			СтрокаТаблицы.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, СтруктураШапкиДокумента.ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаЗаказа,
										 СтруктураШапкиДокумента.КурсДокумента,
										 СтруктураКурсаВалютыЗаказа.Курс, 
										 СтруктураШапкиДокумента.КратностьДокумента,
										 СтруктураКурсаВалютыЗаказа.Кратность);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)


КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа",           "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Цена",                           "Цена");

КонецПроцедуры


// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	//НМА 20.12.16
	// Укажем, что надо проверить:
	//СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения");
	//СтруктураОбязательныхПолей.Вставить("Сумма");
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ЕдиницаИзмерения");
	//НМА 20.12.16


	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидПоступления, ДоговорКонтрагента, "Поступление") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику");
	КонецЕсли;

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Если документ не является поступлением по ордеру, то НТТ быть не должно.
	// Поступление по ордеру может оформляться в НТТ (если товар сначала поступил на обычный склад,
	// а затем был перемещен в НТТ до поступления финансовых документов).
	Если СтруктураШапкиДокумента.ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка заполнения номера ГТД в серии
	УправлениеЗапасами.ПроверитьЧтоВСерииЗаполненНомерГТД(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПоставщику", Отказ, Заголовок);

	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ,
	                                                       Заголовок, "ВидСкладаРазмещения");

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиУслугиУпр(СтруктураОбязательныхПолей)


КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиУслугиУпр(СтруктураОбязательныхПолей);
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	Иначе
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, , СтруктураОбязательныхПолей);
	КонецЕсли;

	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидПоступления, ДоговорКонтрагента, "Поступление") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику");
	КонецЕсли;

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПоставщику", Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Подготовка и проверка таблиц документа (кроме таблицы по таре)
////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

//НМА Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{+Добавления} Автор: Тасмаджиев 16/07/2018// ->>
	Если ДанныеЗаполнения.Проведен Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.СкладОрдер) Тогда
				//=!{Получаем список дополнительных свойств склада}!= ->>
				ОбработкаОбъектЗначенияСвойств = Обработки.ЗначенияСвойствОбъекта.Создать();
				ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады;
				ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений =ДанныеЗаполнения.СкладОрдер;
				ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = ДанныеЗаполнения.СкладОрдер; 
				ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
				//=!{Получаем список дополнительных свойств склада}!= <<-
				Если НЕ ОбработкаОбъектЗначенияСвойств.ЭтотОбъект.СвойстваИЗначения.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Переведен на розницу")).Значение Тогда
					
					Если ОбработкаОбъектЗначенияСвойств.ЭтотОбъект.СвойстваИЗначения.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Претензионный склад")) <> Неопределено Тогда
						ПретензионныйСклад = ОбработкаОбъектЗначенияСвойств.ЭтотОбъект.СвойстваИЗначения.Найти(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Претензионный склад")).Значение;
					Иначе
						//Если НЕ ЗначениеЗаполнено(ПретензионныйСклад) Тогда
						
						Сообщить("Для склада "+ДанныеЗаполнения.СкладОрдер.Наименование+ 
						"дополнительной свойство ""Претензионный склад"" не заполнено, заполните значение дополнительного свойства ""Претензионный склад"" для склада "+ 
						ДанныеЗаполнения.СкладОрдер.Наименование,
						СтатусСообщения.Важное);
						
						Возврат; //<--<--<--RETURN<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--
						
					КонецЕсли;
					
				Иначе
					
					Сообщить("Для склада "+ДанныеЗаполнения.СкладОрдер.Наименование+ "дополнительной свойство Переведен на розницу установлено значение:ЛОЖЬ",СтатусСообщения.Важное)
					
				КонецЕсли;
				
			КонецЕсли;
			
			//{-Добавления} Автор: Тасмаджиев 16/07/2018// <<-
							
				//{+НАЧАЛО+Изменения} Автор: Тасмаджиев 14/06/2018//=============================================================================================
				//================================================!{Не проверялась разница в раазрезе номенклатуры}!=============================================
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ПоступлениеТоваровУслугТовары.Номенклатура,
				|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры,
				|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
				|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест,
				|	ПоступлениеТоваровУслугТовары.ПриходныйОрдер,
				|	ПоступлениеТоваровУслугТовары.ЗаказПоставщику,
				|	ПоступлениеТоваровУслугТовары.Цена,
				|	ПоступлениеТоваровУслугТовары.ЦенаИзДокумента,
				|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры,
				|	ПоступлениеТоваровУслугТовары.НомерГТДПоставщика,
				|	ПоступлениеТоваровУслугТовары.Коэффициент,
				|	СУММА(ПоступлениеТоваровУслугТовары.КоличествоПлан) КАК КоличествоПлан,
				|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
				|	СУММА(ПоступлениеТоваровУслугТовары.КоличествоПринято) КАК КоличествоПринято,
				|	СУММА(ПоступлениеТоваровУслугТовары.КоличествоМест) КАК КоличествоМест,
				|	СУММА(ПоступлениеТоваровУслугТовары.Сумма) КАК Сумма,
				|	СУММА(ПоступлениеТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
				|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
				|	СУММА(ПоступлениеТоваровУслугТовары.СуммаИзДокумента) КАК СуммаИзДокумента
				|ИЗ
				|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
				|ГДЕ
				|	ПоступлениеТоваровУслугТовары.КоличествоПлан <> ПоступлениеТоваровУслугТовары.КоличествоПринято
				|	И ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ПоступлениеТоваровУслугТовары.Номенклатура,
				|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
				|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест,
				|	ПоступлениеТоваровУслугТовары.Коэффициент,
				|	ПоступлениеТоваровУслугТовары.Цена,
				|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
				|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры,
				|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры,
				|	ПоступлениеТоваровУслугТовары.ПриходныйОрдер,
				|	ПоступлениеТоваровУслугТовары.ЗаказПоставщику,
				|	ПоступлениеТоваровУслугТовары.ЦенаИзДокумента,
				|	ПоступлениеТоваровУслугТовары.НомерГТДПоставщика";
				Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения.Ссылка);
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					// Заполнение шапки
					Дата = ТекущаяДата();
					ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию( ЭтотОбъект, ДанныеЗаполнения);
					Основание = ДанныеЗаполнения.Ссылка;
					Сделка =  ДанныеЗаполнения.Ссылка;
				Иначе
					
					Сообщить("В данном документе нет расхождений !",СтатусСообщения.Важное);
					
					Возврат;//<--<--<--RETURN<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--
					
				КонецЕсли;
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					//{-КОНЕЦ-Изменения} Автор: Тасмаджиев 14/06/2018//==============================================================================================
					
					//ТабЧасть										
					Если Выборка.КоличествоПлан <> Выборка.КоличествоПринято  Тогда
						
						НоваяСтрока = Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
						
						Если Выборка.КоличествоПринято > Выборка.КоличествоПлан  Тогда //Излишки
							
							НоваяСтрока.Количество = Выборка.КоличествоПринято - Выборка.КоличествоПлан;
							//{+Добавления} Автор: Тасмаджиев 16/07/2018// ->>
							НоваяСтрока.Статус = Перечисления._5LB_СтатусыПретензионныхТоваров.Излишек;
							//{-Добавления} Автор: Тасмаджиев 16/07/2018// <<-
						Иначе
							НоваяСтрока.Количество = Выборка.Количество;
							//{+Добавления} Автор: Тасмаджиев 16/07/2018// ->>
							НоваяСтрока.Статус = Перечисления._5LB_СтатусыПретензионныхТоваров.Недосдача;
							//{-Добавления} Автор: Тасмаджиев 16/07/2018// <<-
						КонецЕсли;
						
						НоваяСтрока.Склад = ПретензионныйСклад;
					КонецЕсли;
					
				КонецЦикла;
				
				СуммаДокумента = Товары.Итог("Сумма");
					
		КонецЕсли;
		
	Иначе	
		
		Сообщить("Ввод на основании непроведенного документа запрещен!");
		
	КонецЕсли;
	
КонецПроцедуры
//НМА

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры


// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Подготовим структуру шапки документа
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
	
	ПроводитьПоВзаиморасчетам = СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	//{+Редактирования} Автор: Тасмаджиев 17/07/2018// ->>
	//СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
	//мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	//УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	//                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
	//                                                Отказ, Заголовок);
	
	//{+Редактирования} Автор: Тасмаджиев 17/07/2018// ->>
	//СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары",ТаблицаПоТоварам);
	//{-Редактирования} Автор: Тасмаджиев 17/07/2018// <<-
	
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
	Отказ, Заголовок);
	
	//{-Редактирования} Автор: Тасмаджиев 17/07/2018// <<-
	
	// Проверить заполнение ТЧ
	//{+Редактирования} Автор: Тасмаджиев 17/07/2018// ->>
	//ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	//ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	//ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	//{-Редактирования} Автор: Тасмаджиев 17/07/2018// <<-
	
	//Проверим на возможность проведения в БУ и НУ.
	//{+Редактирования} Автор: Тасмаджиев 17/07/2018// ->>
	//Если ОтражатьВБухгалтерскомУчете 
	//	Или ОтражатьВНалоговомУчете Тогда
	//	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
	//	ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
	//	Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
	//	СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	//КонецЕсли;
	//{-Редактирования} Автор: Тасмаджиев 17/07/2018// <<-
	
	//{+НАЧАЛО+Редактирования} Автор: Тасмаджиев 06/06/2018//============================================================================================= 
	//ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);
	//{-КОНЕЦ-Редактирования} Автор: Тасмаджиев 06/06/2018//==============================================================================================
	
	// Движения по документу
	//{+Изменения} Автор: Тасмаджиев 17/07/2018// ->>
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
		ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	КонецЕсли;
	//{-Изменения} Автор: Тасмаджиев 17/07/2018// <<-
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаУдаленияПроведения

// Функция создает таблицу для формирования сторнирующих движений по рег. Партии товаров на складах, в случае поступления по ордеру
//
Функция СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТабТовары)

	ТаблицаПартииПоОрдерам = ТабТовары.Скопировать();
	ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
			
	Сч = 0;
	Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
	
		СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
		Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
			ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
		Иначе
			// Документ оприходования - приходный ордрер
			СтрокаТаблицы.ДокументОприходования = СтрокаТаблицы.ДокументПолучения;
			СтрокаТаблицы.Склад                 = СтрокаТаблицы.ПриходныйОрдерСклад;
			СтрокаТаблицы.Количество            = - СтрокаТаблицы.Количество;
			Если НЕ ТаблицаПартииПоОрдерам.Колонки.Найти("Заказ") = Неопределено Тогда
				СтрокаТаблицы.Заказ             = Неопределено;
			КонецЕсли;			
			
			// Если партионный учет по сериям не ведется, то надо очистить серию
			Если НЕ СтрокаТаблицы.ВестиПартионныйУчетПоСериям Тогда
				СтрокаТаблицы.СерияНоменклатуры = Неопределено;
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПартииПоОрдерам;
	
КонецФункции // СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТоварам)

Процедура ПриЗаписи(Отказ)
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПоставщику");

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();

//УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");

//мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
//                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);
мУказаниеСкладовВТЧ = Истина;


