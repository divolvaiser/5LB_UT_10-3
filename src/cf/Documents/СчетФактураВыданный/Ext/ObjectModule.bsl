Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мОбновлятьРеквизитыПриЗаписи Экспорт;

Перем мДокументЗаполнен Экспорт;

// Финкция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("СуммаВключаетНДС");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("Сумма");

	Возврат Товары;

КонецФункции

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ИсточникДанных) Экспорт
	
	ПараметрыСФ = Неопределено;
	
	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, ПараметрыСФ);
	
	Если не ПараметрыСФ.Организация = Неопределено 
		и не ПараметрыСФ.Организация = Организация 
		Тогда
		Номер = "";
		Организация		  = ПараметрыСФ.Организация;
	КонецЕсли; 			
	Если не ПараметрыСФ.Контрагент = Неопределено 
		и не ПараметрыСФ.Контрагент = Контрагент 
		Тогда
		Контрагент		  = ПараметрыСФ.Контрагент;
	КонецЕсли; 			
	Если не ПараметрыСФ.Договор = Неопределено 
		и не ПараметрыСФ.Договор = ДоговорКонтрагента 
		Тогда
		ДоговорКонтрагента		  = ПараметрыСФ.Договор;
	КонецЕсли; 			
	Если не СуммаДокумента = ПараметрыСФ.СуммаДокумента Тогда
		СуммаДокумента    = ПараметрыСФ.СуммаДокумента;
	КонецЕсли; 			
	Если не ПараметрыСФ.ВалютаДокумента = Неопределено 
		и не ВалютаДокумента = ПараметрыСФ.ВалютаДокумента 
		Тогда
		ВалютаДокумента   = ПараметрыСФ.ВалютаДокумента;
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли; 
	
КонецПроцедуры // ОпределениеПараметровСчетаФактуры()

// Процедура для определения параметров счета-фактуры на аванс
Процедура ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен) Экспорт
	
	Если ДокументыОснования.Количество()=0 
		Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	ТекущийДоговорКонтрагента = ДоговорКонтрагента;
		
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Организация,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
			|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.Сумма + ВЫБОР
			|			КОГДА ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.СуммаВключаетНДС = ИСТИНА
			|				ТОГДА 0
			|			ИНАЧЕ ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС
			|		КОНЕЦ) КАК Сумма,
			|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС) КАК СуммаНДС,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Сделка КАК СчетНаОплату
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.ДенежныеСредства КАК ОтчетКомиссионераОПродажахДенежныеСредства
			|ГДЕ
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка = &ДокументОснование
			|	И ОтчетКомиссионераОПродажахДенежныеСредства.ВидОтчетаПоПлатежам = &ВидОтчетаПоПлатежамАванс
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Сделка,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Организация,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
		Запрос.УстановитьПараметр("ВидОтчетаПоПлатежамАванс", Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс);
		
		Результат = Запрос.Выполнить();
		Сумма = 0;
		ДокументЗаполнен = Ложь;
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Дата >= '20060101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				ИначеЕсли Выборка.Дата >= '20080101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
					Продолжить;
				КонецЕсли;
				ДокументЗаполнен = Истина;
				
				Организация = Выборка.Организация;
				Контрагент = Выборка.Контрагент;
				ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
				
				Сумма = Сумма + Выборка.Сумма;
				
				Если Не Выборка.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
					СуммаАванса	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
															Выборка.ВалютаВзаиморасчетов,
															мВалютаРегламентированногоУчета,
															Выборка.КурсВзаиморасчетов, 1,
															Выборка.КратностьВзаиморасчетов, 1);
					СуммаНДС	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС,
															Выборка.ВалютаВзаиморасчетов,
															мВалютаРегламентированногоУчета,
															Выборка.КурсВзаиморасчетов, 1,
															Выборка.КратностьВзаиморасчетов, 1);
				Иначе
					СуммаАванса	= Выборка.Сумма;
					СуммаНДС = Выборка.СуммаНДС;
				КонецЕсли;
				
				СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[Выборка.СтавкаНДС]), СоответствиеСтавок[Выборка.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);
				ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(СуммаАванса, СуммаНДС, СтавкаНДС, Выборка.СчетНаОплату);
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);
				
			КонецЦикла;
			
			Если Выборка.РасчетыВУсловныхЕдиницах 
				Или Не ЗначениеЗаполнено(Выборка.ВалютаВзаиморасчетов) 
				Тогда
				ВалютаДокумента = мВалютаРегламентированногоУчета;
			Иначе
				ВалютаДокумента = Выборка.ВалютаВзаиморасчетов;
			КонецЕсли; 
			ВалютнаяСумма = Сумма;
			
			ОшибкаПриЗаполнении = Ложь;
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщенияТекущая;
			КонецЕсли;
			СуммаДокумента 	= Сумма;
		Иначе
			ДокументЗаполнен = Ложь;
		КонецЕсли;
	
	Иначе

		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
		Запрос.Текст = "ВЫБРАТЬ
		               |	НДСРасчетыСПокупателямиОбороты.Организация,
		               |	НДСРасчетыСПокупателямиОбороты.Покупатель КАК Контрагент,
		               |	НДСРасчетыСПокупателямиОбороты.ДоговорКонтрагента,
		               |	НДСРасчетыСПокупателямиОбороты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		               |	НДСРасчетыСПокупателямиОбороты.ВалютаРасчетов,
		               |	-1 * НДСРасчетыСПокупателямиОбороты.СуммаОборот КАК СуммаАванса,
		               |	-1 * НДСРасчетыСПокупателямиОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСуммаАванса
		               |ИЗ
		               |	РегистрНакопления.НДСРасчетыСПокупателями.Обороты(, , Регистратор, Документ = &ДокументОснование) КАК НДСРасчетыСПокупателямиОбороты
		               |ГДЕ
		               |	НДСРасчетыСПокупателямиОбороты.Регистратор = &ДокументОснование
		               |	И НДСРасчетыСПокупателямиОбороты.СуммаОборот < 0";
					   
		Результат = Запрос.Выполнить();

		ДокументЗаполнен = Ложь;
		Если Не Результат.Пустой() Тогда
			
			ДокАванса = ДокументыОснования[0].ДокументОснование;
			ДокАвансаДата = ?(ДокАванса.Метаданные().Реквизиты.Найти("ДатаОплаты") <> Неопределено И ЗначениеЗаполнено(ДокАванса.ДатаОплаты),
								ДокАванса.ДатаОплаты, ДокАванса.Дата);
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() И Не ДокументЗаполнен Цикл
				
				Организация = Выборка.Организация;
				Контрагент = Выборка.Контрагент;
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютаРасчетов) или Выборка.РасчетыВУсловныхЕдиницах Тогда
					//Незаполненное значение приравнивается к валюте регл. учета
					ВалютаДокумента = мВалютаРегламентированногоУчета;	
				Иначе
					ВалютаДокумента = Выборка.ВалютаРасчетов;     
				КонецЕсли; 
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.ЗаказПокупателя"));
				
				Если ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
					Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
						Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента Тогда
							Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
								ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
							Иначе
								ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
							КонецЕсли; 
							СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
							СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
							СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
							СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
							СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.Сделка;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
					СтрокаПоСтавке.Сумма = Выборка.СуммаАванса;
					СтрокаПоСтавке.ВалютнаяСумма = Выборка.ВалютнаяСуммаАванса;
					СтрокаПоСтавке.СчетНаОплату = ДокументыОснования[0].ДокументОснование.Сделка;
				Иначе
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
					СтрокаПоСтавке.Сумма = Выборка.СуммаАванса;
					СтрокаПоСтавке.ВалютнаяСумма = Выборка.ВалютнаяСуммаАванса;
				КонецЕсли;
					
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма, ВалютнаяСумма");
				
				//Распределение суммы рег учета
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 
				
				//Распределение валютной суммы
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					Если не МассивСумм = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				Иначе
					МассивСуммВал = ОбщегоНазначения.РаспределитьПропорционально(Выборка.ВалютнаяСуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("ВалютнаяСумма"));
					Если не МассивСуммВал = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСуммВал,"ВалютнаяСумма");
					Иначе
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				КонецЕсли; 
				
				СуммаДокумента = 0; 
				ВалютнаяСумма = 0;
				Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
					
					Если ДокАванса.Дата >= '20060101' 
						И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						// НДС с авансов под экспортные поставки не начисляется
						Продолжить;
					ИначеЕсли ДокАванса.Дата >= '20080101' 
						И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
						// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
						Продолжить;
					КонецЕсли;
					
					ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
					Если Выборка.ВалютаРасчетов <> мВалютаРегламентированногоУчета И Не Выборка.РасчетыВУсловныхЕдиницах Тогда
						СуммаДокумента = СуммаДокумента + СтрокаПоСтавке.ВалютнаяСумма;
					Иначе
						СуммаДокумента = СуммаДокумента + СтрокаПоСтавке.Сумма;
					КонецЕсли;
					ВалютнаяСумма = ВалютнаяСумма + СтрокаПоСтавке.ВалютнаяСумма;
					
					СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);
					ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаПоСтавке.Сумма, 
															УчетНДС.РассчитатьСуммуНДС(СтрокаПоСтавке.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)), 
															СтавкаНДС, 
															СтрокаПоСтавке.СчетНаОплату);
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);							
					ДокументЗаполнен = Истина;
					
				КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				Если ОшибкаПриЗаполнении Тогда
					ДокументЗаполнен = Ложь;
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					Прервать;
				КонецЕсли;
			
			КонецЦикла; // Пока Выборка.Следующий() Цикл
		КонецЕсли;
		
	КонецЕсли;
	
	Авансы.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");

	Если ОшибкаПриЗаполнении Тогда
		ДоговорКонтрагента = ТекущийДоговорКонтрагента;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Сумма = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуАвансовПоСчетуНаОплату(Сумма, СуммаНДС, СтавкаНДС, СчетНаОплату) Экспорт
	
	ТаблицаРезультата = Авансы.ВыгрузитьКолонки();
	
	Если ЗначениеЗаполнено(СчетНаОплату) Тогда

		СоответствиеСтавок = Новый Соответствие;
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
		СтавкиНДС = Новый СписокЗначений;
		СтавкиНДС.Добавить(СтавкаНДС);
		СтавкиНДС.Добавить(СоответствиеСтавок[СтавкаНДС]);
		Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
		Запрос.Текст = "ВЫБРАТЬ
					   |	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
		               |	&ПустаяСтрока КАК Содержание,
					   |	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
					   |	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюТовары.Сумма
					   |		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
					   |	КОНЕЦ КАК Сумма,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаНДС
					   |		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма
					   |	КОНЕЦ КАК СуммаБезНДС,
					   |	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
					   |	СчетНаОплатуПокупателюТовары.Ссылка.ВалютаДокумента,
					   |	1 КАК ID
					   |ИЗ
					   |	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
					   |ГДЕ
					   |	СчетНаОплатуПокупателюТовары.Ссылка = &СчетНаОплату
					   |	И СчетНаОплатуПокупателюТовары.СтавкаНДС В(&СтавкиНДС)
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
					   |
					   |ВЫБРАТЬ
					   |	СчетНаОплатуПокупателюУслуги.Номенклатура,
					   |	СчетНаОплатуПокупателюУслуги.Содержание,
					   |	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
					   |	СчетНаОплатуПокупателюУслуги.СуммаНДС,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма
					   |		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма + СчетНаОплатуПокупателюУслуги.СуммаНДС
					   |	КОНЕЦ,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма - СчетНаОплатуПокупателюУслуги.СуммаНДС
					   |		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма
					   |	КОНЕЦ,
					   |	СчетНаОплатуПокупателюУслуги.НомерСтроки,
					   |	СчетНаОплатуПокупателюУслуги.Ссылка.ВалютаДокумента,
					   |	2
					   |ИЗ
					   |	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
					   |ГДЕ
					   |	СчетНаОплатуПокупателюУслуги.Ссылка = &СчетНаОплату
					   |	И СчетНаОплатуПокупателюУслуги.СтавкаНДС В(&СтавкиНДС)
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	ID,
					   |	НомерСтроки";
					   
		Если ТипЗнч(СчетНаОплату) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СчетНаОплатуПокупателю", "Документ.ЗаказПокупателя");
		КонецЕсли;
					   
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() <> 0 Тогда
			
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
			
			Результат.Колонки.Добавить("СуммаРаспределение", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			Результат.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(Сумма, Результат.ВыгрузитьКолонку("Сумма")), "СуммаРаспределение");
			
			МассивРаспределения = Новый Массив;
			
			
			Для Каждого СтрокаРезультата Из Результат Цикл
				
				Если ДокументыОснования.Количество() = 0
					Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, Дата);
				Иначе
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, ДокументыОснования[0].ДокументОснование.Дата);
				КонецЕсли;
				
				Если СтрокаРезультата.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
					СтрокаРезультата.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.Сумма, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаБезНДС, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаНДС, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
				КонецЕсли;
				
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаБезНДС);
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаНДС);
				
				РезультатРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СтрокаРезультата.СуммаРаспределение, МассивРаспределения);
				
				Если Не РезультатРаспределения = Неопределено Тогда
					СтрокаРезультата.Сумма = Мин(СтрокаРезультата.СуммаРаспределение, СтрокаРезультата.Сумма);
					СтрокаРезультата.СуммаНДС = Мин(СтрокаРезультата.СуммаНДС, РезультатРаспределения[1]);
					СтрокаРезультата.СуммаБезНДС = СтрокаРезультата.Сумма - СтрокаРезультата.СуммаБезНДС; 
					
					ДобавитьСтрокуАвансы(ТаблицаРезультата, СтрокаРезультата.Номенклатура, СтрокаРезультата.Содержание, СтрокаРезультата.Сумма, СтрокаРезультата.СуммаНДС, СтавкаНДС);
					Сумма = Сумма - СтрокаРезультата.Сумма;
					СуммаНДС = СуммаНДС - СтрокаРезультата.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , Сумма, СуммаНДС, СтавкаНДС);
		КонецЕсли;
		
	Иначе
		ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , Сумма, СуммаНДС, СтавкаНДС);
	КонецЕсли;
	
	ТаблицаРезультата.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Процедура ДобавитьСтрокуАвансы(ТаблицаРезультата, Номенклатура, Содержание = "", Сумма, СуммаНДС, СтавкаНДС) Экспорт
	
	НоваяСтрока = ТаблицаРезультата.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Содержание = Содержание;
	
	Если ПустаяСтрока(НоваяСтрока.Содержание) 
		И ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
		И НоваяСтрока.Номенклатура.Услуга Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
		Если ПустаяСтрока(НоваяСтрока.Содержание) Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.Наименование;
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.Сумма     = Сумма;
	НоваяСтрока.СуммаНДС  = СуммаНДС;
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
		
КонецПроцедуры

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(СчетФактураНаАванс) Экспорт
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("ДокументСсылка.АккредитивПолученный"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"));
	
	Если СчетФактураНаАванс Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	Иначе
		// Типы документов оплаты исключаются из состава доступных типом.
		// Дополним типами, не выбираемыми вручную
		СписокТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатковНДС"));
		
		СписокТипов = Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);//.Типы();
		СписокТипов = СписокТипов.Типы();
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
Функция ЭтоПБОЮЛ(Организация)
	
	Возврат (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	
КонецФункции

// Функция собирает данные по документу основанию ОтчетаКомитенту и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомитентуОПродажах(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	Подразделение КАК Подразделение,
	|	Контрагент    КАК Покупатель,
	|	СуммаДокумента          КАК Сумма,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ВалютаДокумента         КАК Валюта,
	|	Товары.(
	|		СУММА(СуммаВознаграждения) КАК Сумма
	|	)
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ДокументОснование";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Если ВыборкаСтрокТовары.Следующий() Тогда
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Комиссионное вознаграждение";
		Строчка.ТоварНаименование   = "Комиссионное вознаграждение";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СтавкаНДС           = Шапка.СтавкаНДС;
		СуммаДляПечати              = ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
		Строчка.СуммаВключаетНДС    = Истина;
		Строчка.СуммаНДС            = УчетНДС.РассчитатьСуммуНДС(СуммаДляПечати, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Шапка.СтавкаНДС));
		Строчка.Сумма               = СуммаДляПечати;
		Строчка.Цена                = СуммаДляПечати;
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомитентуОПродажах()

// Функция собирает данные по документу основанию ОтчетаКомисиионера и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомиссионераОПродажах(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
 	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Подразделение КАК Подразделение,
	|	Контрагент    КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	СуммаДокумента          КАК Сумма,
	|	ВалютаДокумента         КАК Валюта,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		Номенклатура КАК Товар,
	|		ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|		СерияНоменклатуры.СтранаПроисхождения                    КАК СтранаПроисхождения,
	|		СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|		СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|		СерияНоменклатуры.НомерГТД.Представление                 КАК ПредставлениеГТД,
	|		ЕдиницаИзмерения,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)  + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СуммаВключаетНДС    = Шапка.СуммаВключаетНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Цена <> 0, ВыборкаСтрокТовары.Цена, 
		                                ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ВыборкаСтрокТовары.СуммаНДС) / ВыборкаСтрокТовары.Количество));
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомиссионераОПродажах()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияТоваровУслуг(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация                       КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Подразделение                     КАК Подразделение,
	|	Контрагент                        КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента                    КАК Сумма,
	|	ВалютаДокумента                   КАК Валюта,
	|	УчитыватьНДС                      КАК УчитыватьНДС,
	|	СуммаВключаетНДС                  КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	СерияНоменклатуры.СтранаПроисхождения                    КАК СтранаПроисхождения,
	|	СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|	СерияНоменклатуры.НомерГТД.Представление                 КАК ПредставлениеГТД,
	|	ЕдиницаИзмерения.Представление         КАК ЕдиницаИзмерения,
	|	Количество                             КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	Сумма                                  КАК Сумма,
	|	ХарактеристикаНоменклатуры             КАК Характеристика,
	|	СерияНоменклатуры                      КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки,
	|	1                                      КАК НомерТЧ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура                           КАК Товар,
	|	Содержание                             КАК ТоварНаименование,
	|	""""                                   КАК СтранаПроисхождения,
	|	NULL                                   КАК ПредставлениеСтраны,
	|	NULL                                   КАК НомерГТД,
	|	""""                                   КАК ПредставлениеГТД,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА Номенклатура.ЕдиницаХраненияОстатков = &ПустаяЕдиница
	|	ТОГДА 0 ИНАЧЕ Количество
	|	КОНЕЦ КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	Сумма                                  КАК Сумма,
	|	NULL                                   КАК Характеристика,
	|	NULL                                   КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки,
	|	2                                      КАК НомерТЧ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки
	|";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена = ?(ВыборкаСтрокТовары.Цена <> 0, ?(НЕ Шапка.СуммаВключаетНДС,?(ВыборкаСтрокТовары.Количество = 0, 0, ВыборкаСтрокТовары.Сумма / ВыборкаСтрокТовары.Количество),ВыборкаСтрокТовары.Цена),
		                 ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокТовары.СуммаНДС, 0)) / ВыборкаСтрокТовары.Количество));
		Строчка.СтавкаНДС           = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровПоставщику(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация                       КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Подразделение                     КАК Подразделение,
	|	Контрагент                        КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента                    КАК Сумма,
	|	ВалютаДокумента                   КАК Валюта,
	|	УчитыватьНДС                      КАК УчитыватьНДС,
	|	СуммаВключаетНДС                  КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	СерияНоменклатуры.СтранаПроисхождения                    КАК СтранаПроисхождения,
	|	СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|	СерияНоменклатуры.НомерГТД.Представление                 КАК ПредставлениеГТД,
	|	ЕдиницаИзмерения.Представление         КАК ЕдиницаИзмерения,
	|	Количество                             КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	Сумма                                  КАК Сумма,
	|	ХарактеристикаНоменклатуры             КАК Характеристика,
	|	СерияНоменклатуры                      КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки,
	|	1                                      КАК НомерТЧ
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки
	|";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Цена <> 0, ВыборкаСтрокТовары.Цена, 
		                                ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокТовары.СуммаНДС, 0)) / ВыборкаСтрокТовары.Количество));
		Строчка.СтавкаНДС           = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщику()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация                       КАК Поставщик,
	|	""он же"" КАК Грузоотправитель,
	|	Подразделение                     КАК Подразделение,
	|	Контрагент                        КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента                    КАК Сумма,
	|	ВалютаДокумента                   КАК Валюта,
	|	УчитыватьНДС                      КАК УчитыватьНДС,
	|	СуммаВключаетНДС                  КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщикуИзНТТ КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	СерияНоменклатуры.СтранаПроисхождения                    КАК СтранаПроисхождения,
	|	СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|	СерияНоменклатуры.НомерГТД.Представление                 КАК ПредставлениеГТД,
	|	ЕдиницаИзмерения.Представление         КАК ЕдиницаИзмерения,
	|	Количество                             КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	Сумма                                  КАК Сумма,
	|	ХарактеристикаНоменклатуры             КАК Характеристика,
	|	СерияНоменклатуры                      КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщикуИзНТТ.Товары КАК ВозвратТоваровПоставщикуТовары
	|
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Цена <> 0, ВыборкаСтрокТовары.Цена, 
		                                ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокТовары.СуммаНДС, 0)) / ВыборкаСтрокТовары.Количество));
		Строчка.СтавкаНДС           = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ()

// Функция собирает данные по документу основанию ОтражениеРеализацииТоваровИУслуг возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(ДокОснование)


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Контрагент    КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента	 КАК Сумма,
	|	""""			 КАК Валюта,
	|	Истина			 КАК УчитыватьНДС,
	|	Ложь			 КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС
	|
	|ГДЕ
	|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяСтранаПроисхождения", Справочники.КлассификаторСтранМира.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура КАК Товар,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.Представление КАК ТоварНаименование,
	               |	&ПустаяСтранаПроисхождения КАК СтранаПроисхождения,
	               |	"""" КАК ПредставлениеСтраны,
	               |	&ПустойНомерГТД КАК НомерГТД,
	               |	"""" КАК ПредставлениеГТД,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Количество,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ПредставлениеЕдиницыИзмерения,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Цена,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СтавкаНДС,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СуммаНДС,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Сумма
	               |ИЗ
	               |	Документ.ОтражениеРеализацииТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги
	               |ГДЕ
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Товар";
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ВыборкаСтрокТовары.ПредставлениеСтраны;
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ПредставлениеЕдиницыИзмерения;
		Строчка.СуммаВключаетНДС	= Ложь;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Цена <> 0, ВыборкаСтрокТовары.Цена, 
		                                ?(ВыборкаСтрокТовары.Количество = 0, 0, ВыборкаСтрокТовары.Сумма / ВыборкаСтрокТовары.Количество));
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтражениюРеализацииТоваровИУслуг()

// Функция собирает данные по текущему документу в случае, если это СФ на аванс
// 
Функция СобратьДанныеСФнаАвансИСуммовуюРазницу(ТекущееОснование)
	
	Если Не НаАванс Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	мНадписьПредоплата = ?(Дата >= '20060101', "Предварительная оплата", "Авансовый платеж");
	НадписьНаименование = мНадписьПредоплата;
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Организация КАК Поставщик,
	|	СчетФактураВыданный.Контрагент КАК Покупатель,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	СчетФактураВыданный.Сумма КАК Сумма,
	|	СчетФактураВыданный.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

				   
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	Товары = ИнициализацияТаблицыСтрок();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураВыданныйАвансы.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	               |	СУММА(СчетФактураВыданныйАвансы.Сумма) КАК Сумма,
	               |	СУММА(СчетФактураВыданныйАвансы.СуммаНДС) КАК СуммаНДС,
	               |	СчетФактураВыданныйАвансы.СтавкаНДС
	               |ИЗ
	               |	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
	               |ГДЕ
	               |	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СчетФактураВыданныйАвансы.СтавкаНДС,
	               |	СчетФактураВыданныйАвансы.Номенклатура,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000))";
	ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = ?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СтрокаТаблицы.Товар, НадписьНаименование);
		Строчка.ТоварНаименование   = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТаблицы.Содержание)), СокрЛП(СтрокаТаблицы.Содержание), 
										?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СокрЛП(СтрокаТаблицы.ТоварНаименование), НадписьНаименование));
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СуммаВключаетНДС    = Истина;
		Строчка.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
		Строчка.СуммаНДС  = СтрокаТаблицы.СуммаНДС;
		Строчка.Сумма     = СтрокаТаблицы.Сумма;
		
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

// Функция создает табличный документ ун. формы счета-фактуры
//
// Параметры 
//  ДанныеДляПечати - типизированная струтктура данных для заполнения параметров макета
//
Функция ПечатьСчетаФактуры(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;

	Если Дата < '20040216' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура575";
		Макет = ПолучитьОбщийМакет("СчетФактура575");
	ИначеЕсли Дата < '20060530' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура84";
		Макет = ПолучитьОбщийМакет("СчетФактура84");
	ИначеЕсли Дата < '20090609' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура283";
		Макет = ПолучитьОбщийМакет("СчетФактура283");
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура451";
		Макет = ПолучитьОбщийМакет("СчетФактура451");
	КонецЕсли;

	СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);
	
	ВыборкаПоТоварам = ДанныеДляПечати.ТабличнаяЧасть.Скопировать();
	ВыборкаПоТоварам.Свернуть("Товар");
	
	Если ВыборкаПоТоварам.Количество() > 0 Тогда
		ТолькоУслуги = Истина;
		Для Каждого СтрокаТовар Из ВыборкаПоТоварам Цикл
			Если (ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.Номенклатура")
			   И Не СтрокаТовар.Товар.Услуга)
			   Тогда
				ТолькоУслуги = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТолькоУслуги = Ложь;
	КонецЕсли;

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
	
	Если Дата < '20040216' Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: "                                 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                                    + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ИННпоставщика                 = "Идентификационный номер продавца (ИНН): "   + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ИНН,", Ложь); 
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "             + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), "", ?(ДанныеДляПечати.Грузоотправитель = "он же", ДанныеДляПечати.Грузоотправитель, ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")));
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "              + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), "", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,"));
		Строка_ПоДокументу = "";
		Для каждого ПараметрыДокуентаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
			Строка_ПоДокументу = Строка_ПоДокументу+ ?(ПустаяСтрока(Строка_ПоДокументу), "К платежно-расчетному документу № ",", ")
					+ПараметрыДокуентаОплаты.НомерПлатежноРасчетногоДокумента + " от " + Формат(ПараметрыДокуентаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
		КонецЦикла; 
		Если ПустаяСтрока(Строка_ПоДокументу) Тогда
			Строка_ПоДокументу = "К платежно-расчетному документу № -- от --"
		КонецЕсли; 
		ОбластьМакета.Параметры.ПоДокументу                   = Строка_ПоДокументу;
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                               + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                                    + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ИННПокупателя                 = "Идентификационный номер покупателя (ИНН): " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь);
	Иначе
		ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре = Константы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Получить();
		Если ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре <> '00010101'
			И ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре <= Дата Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,") + 
																	" (" + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Представление,") + ")";
		Иначе
			ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                            + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если  ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика                 = "ИНН/КПП продавца: "                 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		Если ТолькоУслуги Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: " + "-";
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "  + "-";
		Иначе
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: " + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), "", ?(ДанныеДляПечати.Грузоотправитель = "он же", ДанныеДляПечати.Грузоотправитель, ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")));
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "  + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), "", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,"));
		КонецЕсли;
		Строка_ПоДокументу = "";
		Для каждого ПараметрыДокуентаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
			Строка_ПоДокументу = Строка_ПоДокументу+ ?(ПустаяСтрока(Строка_ПоДокументу), "К платежно-расчетному документу № ",", ")
					+ПараметрыДокуентаОплаты.НомерПлатежноРасчетногоДокумента + " от " + Формат(ПараметрыДокуентаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
		КонецЦикла; 
		Если ПустаяСтрока(Строка_ПоДокументу) Тогда
			Строка_ПоДокументу = "К платежно-расчетному документу № -- от --"
		КонецЕсли; 
		ОбластьМакета.Параметры.ПоДокументу                   = Строка_ПоДокументу;
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                       + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                            + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
		Если  ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННПокупателя                 = "ИНН/КПП покупателя: "               + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
	КонецЕсли;
	
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ПовторятьПриПечатиСтроки =  ТабДокумент.Область("ЗаголовокТаблицы");

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");
	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		Если (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
		 Или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
		 Или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
			Если Не Строчка.СуммаВключаетНДС тогда
				Строчка.Цена = 0;
			КонецЕсли;
		Иначе
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
			Если Строчка.СуммаВключаетНДС тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		Если Не НаАванс И Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(?(Строчка.Количество = 0, 0, Строчка.СуммаБезНДС / Строчка.Количество), 2);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, ПредставлениеСтраны, НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		ОбластьМакета.Параметры.Заполнить(Строчка);
		
		Если Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.Россия Тогда
			ОбластьМакета.Параметры.ПредставлениеСтраны = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД    = "--";
		КонецЕсли;

		Количество  = Строчка.Количество;

		Если НаАванс  Тогда
			// В счетах-фактурах на аванс колонка 3, 4, 5 не выводится
			ОбластьМакета.Параметры.Стоимость  = 0;
			ОбластьМакета.Параметры.Количество = 0;
			ОбластьМакета.Параметры.Цена       = 0;
		Иначе
			ОбластьМакета.Параметры.Количество = Количество;
			ОбластьМакета.Параметры.Цена   = Строчка.Цена;
			ОбластьМакета.Параметры.Стоимость  = Строчка.СуммаБезНДС;
		КонецЕсли;	
			
		ОбластьМакета.Параметры.Всего      = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС  = Строчка.СтавкаНДС;

		ИтогоСуммаНДС = ИтогоСуммаНДС + Строчка.СуммаНДС;
		ИтогоВсего    = ИтогоВсего    + Строчка.СуммаСНДС;

		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если ВыборкаСтрокТовары.Количество()>0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.ИтогоВсего    = ИтогоВСего;
	
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	Если не Дата < '20040216' Тогда
		ОбластьМакета.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	КонецЕсли; 
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 13;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;

	ТабДокумент.ВерхнийКолонтитул.Выводить          = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаголовокДляПечати;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа  = "Лист [&НомерСтраницы]";

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если Найти(ИмяМакета, "СчетФактура") <> 0 Тогда
		ДанныеДляПечати = Неопределено;
		
		Для Каждого СтрДокОснования Из ДокументыОснования Цикл
			// Получить экземпляр документа на печать
			Если Не ЗначениеЗаполнено(СтрДокОснования.ДокументОснование) Тогда
				Продолжить;
			ИначеЕсли Не СтрДокОснования.ДокументОснование.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			ТипОснования = ТипЗнч(СтрДокОснования.ДокументОснование);

			Если НаАванс  Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеСФнаАвансИСуммовуюРазницу(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомитентуОПродажах(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщику(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомиссионераОПродажах(СтрДокОснования.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(СтрДокОснования.ДокументОснование);
			Иначе
				ЭкземплярДанныхДляПечати = Неопределено;
			КонецЕсли;
			
			Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
				Если ДанныеДляПечати = Неопределено Тогда
					ДанныеДляПечати = ЭкземплярДанныхДляПечати;
				Иначе
					Для Каждого СтрДанных Из ЭкземплярДанныхДляПечати Цикл
						
						Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
							СтараяТабЧасть = ДанныеДляПечати.ТабличнаяЧасть;
							НоваяТабЧасть = СтрДанных.Значение;
							
							Для Каждого НоваяСтрокаТабЧасти Из НоваяТабЧасть Цикл
								СтрокаТабЧасти = СтараяТабЧасть.Добавить();
								
								Для Каждого ТекКол Из НоваяТабЧасть.Колонки Цикл
									Если СтараяТабЧасть.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
										СтрокаТабЧасти[ТекКол.Имя] = НоваяСтрокаТабЧасти[ТекКол.Имя];
									КонецЕсли;
								КонецЦикла;
								
							КонецЦикла;
							
						Иначе
							Если Не ДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
								// Если данный параметр для печати шапки документа еще не  определен - то определяем его
								ДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;	
			
		Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
			Возврат;
		ИначеЕсли ДанныеДляПечати = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ТаблицаДатОплат = ДатаНомерДокументовОплаты.Выгрузить();
		ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
		СтрокиКУдалению = Новый массив();
		Для каждого СтрокаОплат Из ТаблицаДатОплат Цикл
			Если не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) 
				и ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
				СтрокиКУдалению.Добавить(СтрокаОплат);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДатОплат.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		
        ДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);

		ТабДокумент = ПечатьСчетаФактуры(ДанныеДляПечати);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура 283");
		СтруктураМакетов.Вставить("СчетФактура575", "Счет-фактура 575");
		СтруктураМакетов.Вставить("СчетФактура84" , "Счет-фактура 84");
	Иначе
		Если Дата < '20040216' Тогда
			СтруктураМакетов.Вставить("СчетФактура575", "Счет-фактура");
		ИначеЕсли Дата < '20060530' Тогда
			СтруктураМакетов.Вставить("СчетФактура84", "Счет-фактура");
		Иначе
			СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Сравнивает дату счета-фактуры и документов оснований
Функция ПроверитьДатуСчетаФактуры(СообщениеПользователю) Экспорт
	
	СписокДокументов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СообщениеПользователю = "";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(ДокументОснованиеСФ.Ссылка) КАК ПредставлениеДокумента,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ) < НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаСФМеньше,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаНеРавнаСФ
	               |ИЗ
	               |	Документ." + СписокДокументов[0].Метаданные().Имя + " КАК ДокументОснованиеСФ
	               |ГДЕ
	               |	ДокументОснованиеСФ.Ссылка В (&СписокДокументов)";
								  
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Результат.Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Если Результат.ДатаНеРавнаСФ Тогда
			СообщениеПользователю = "Дата счета-фактуры не равна дате документа-основания";
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Пока Результат.Следующий() Цикл
			Если Результат.ДатаСФМеньше Тогда
				СообщениеПользователю = СообщениеПользователю + Символы.ПС + Результат.ПредставлениеДокумента;
			КонецЕсли;
		КонецЦикла;
		Если СообщениеПользователю <> "" Тогда
			СообщениеПользователю = "Дата счета-фактуры меньше даты документов-оснований:" + СообщениеПользователю;
			Возврат Ложь;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецЕсли

Функция ПроверитьВозможностьЗаписиСФ(Отказ, УдалятьЛишниеСтроки = Ложь) Экспорт
	
	Отказ = Ложь;
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("НаАванс", НаАванс);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	Если НаАванс Тогда
		//Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
		СтруктураОтбора.Вставить("ДоговорКонтрагента"	, ДоговорКонтрагента);
		СтруктураОтбора.Вставить("СтавкиНДС"			, Авансы.ВыгрузитьКолонку("СтавкаНДС"));
		
		СуществующийСФ = Неопределено;
		ИсключитьСФ = Новый Массив;
		ИсключитьСФ.Добавить(Ссылка);
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, ИсключитьСФ);
		Пока СуществующийСФ <> Неопределено Цикл
			СтавкиНДС = "";
			СтрокиКУдалению = Новый Массив;
			Для Каждого СтрокаТаблицы Из СуществующийСФ.Авансы Цикл
				СтавкиНДС = СтавкиНДС + ?(СтавкиНДС = "", "", ", ") + СтрокаТаблицы.СтавкаНДС;
				Если УдалятьЛишниеСтроки Тогда
					СтрокиОтбора = Авансы.НайтиСтроки(Новый Структура("СтавкаНДС", СтрокаТаблицы.СтавкаНДС));
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокиКУдалению.Добавить(СтрокаОтбора);
					КонецЦикла;
					СтрокиКУдалению = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтрокиКУдалению);
				КонецЕсли;
			КонецЦикла;
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура на аванс 
			|по договору «"+ДоговорКонтрагента+"» со ставками НДС "+СтавкиНДС+":"+Символы.ПС
			+ " - «"+ Строка(СуществующийСФ)+"»";
			
			Если УдалятьЛишниеСтроки Тогда
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					Авансы.Удалить(СтрокаКУдалению);
				КонецЦикла;                                                         
				Сумма = Авансы.Итог("Сумма");
				СуммаДокумента = Сумма;
			КонецЕсли;
			Отказ = Отказ Или Не (УдалятьЛишниеСтроки И Авансы.Количество() <> 0);
			ИсключитьСФ.Добавить(СуществующийСФ);
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, ИсключитьСФ);
		КонецЦикла;
	Иначе
		СтрокаСообщенияНеНуженСчетФактура = "";
		Для каждого ТекущееОснование Из ДокументыОснования Цикл
			//Проверка наличия других счетов-фактур на основании документа
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
			
			Если не СуществующийСФ = неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения +Символы.ПС+" - "+?(ДокументыОснования.Количество()>1," строка № "+ТекущееОснование.НомерСтроки+": для «"+ТекущееОснование.ДокументОснование+"» зарегистрирован счет-фактура ","")+" «"+СуществующийСФ+"»";
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Запись еще одного документа ""Счет-фактура выданный"" не допускается!"
	КонецЕсли;
	Если Не ПустаяСтрока(СтрокаСообщенияНеНуженСчетФактура) Тогда
		СтрокаСообщения = СтрокаСообщения + СтрокаСообщенияНеНуженСчетФактура;
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции // ПроверитьВозможностьЗаписиСФ()
 
// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.НаАванс Тогда
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияНДС_СчетФактураВыданный(СтруктураШапкиДокумента, ТаблицаПоАвансам, Движения);
		
	КонецЕсли;
								  
КонецПроцедуры // ДвиженияПоРегистрам()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ДокументыОснования";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") 
			И Не СтрокаТЧ.ДокументОснование.Проведен Тогда
			ОбщегоНазначения.СообщитьОбОшибке( "Счет-фактуру можно вводить только на основании проведенного документа (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
		КонецЕсли;	
		Если СтрокаТЧ.ДокументОснование.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено
			И Не СтрокаТЧ.ДокументОснование.ОтражатьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке( "Счет-фактуру можно вводить только на основании документа, отражаемого в бухгалтерском учете (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Авансы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАвансам(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СтавкаНДС, Сумма");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      , "ДокументОснование");
	СтруктураПолей.Вставить("Организация"		     , "ДокументОснование.Организация");
	СтруктураПолей.Вставить("Контрагент"             , "ДокументОснование.Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"     , "ДокументОснование.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВалютаДокумента"        , "ДокументОснование.ВалютаДокумента");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"     , "ДокументОснование.КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов", "ДокументОснование.КратностьВзаиморасчетов");
	
	РезультатЗапросаПоДокументамОснованиям = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
		
	Если НаАванс Тогда
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Сумма",		"Сумма");
		СтруктураПолей.Вставить("СуммаНДС",		"СуммаНДС");
		СтруктураПолей.Вставить("СтавкаНДС",	"СтавкаНДС");
		
		РезультатЗапросаПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураПолей);
		
		ТаблицаПоАвансам = РезультатЗапросаПоАвансам.Выгрузить();
		
		ТаблицаПоАвансам.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		МассивРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаДокумента, ТаблицаПоАвансам.ВыгрузитьКолонку("Сумма"));
		
		Если Не МассивРаспределения = Неопределено Тогда
			Для К = 0 По ТаблицаПоАвансам.Количество() - 1 Цикл
				
				ТаблицаПоАвансам[К].ВалютнаяСумма = МассивРаспределения[К];			
												
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Дата = Основание.Дата;
	Организация = Основание.Организация;
	
	ДокументыОснования.Добавить().ДокументОснование = Основание.Ссылка;
	
	ДокументОснование = Основание.Ссылка;
	
	СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Истина);
	
	Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		НаАванс = Истина;
		
		ДатаНомерДокументовОплаты.Очистить();
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
			НомерПлатежноРасчетногоДокумента = Основание.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента =  Основание.ДатаВходящегоДокумента;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
			ДатаПлатежноРасчетногоДокумента =  Основание.Дата;
		Иначе
			НомерПлатежноРасчетногоДокумента = "";
			ДатаПлатежноРасчетногоДокумента =  Неопределено;
		КонецЕсли;
		
		СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
		
		мДокументЗаполнен = Ложь;
		ОпределениеПараметровСчетаФактурыНаАванс(мДокументЗаполнен);
		
		Если не мДокументЗаполнен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.");
		КонецЕсли; 
	Иначе
		ОпределениеПараметровСчетаФактуры(Основание);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоАвансам(Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ОбновитьПараметры = Истина)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка Или Не мОбновлятьРеквизитыПриЗаписи Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОснование) И ДокументыОснования.Найти(ДокументОснование) = Неопределено Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;
	
	Если ДокументОснование = Неопределено И ДокументыОснования.Количество() > 0 Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если ДатаНомерДокументовОплаты.Количество() > 0 Тогда
		ДатаПлатежноРасчетногоДокумента = ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента;
		НомерПлатежноРасчетногоДокумента = ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента;
	КонецЕсли;
	
	Если Не СформированПриВводеНачальныхОстатковНДС Тогда
		ОпределениеПараметровСчетаФактуры(Ссылка);
	КонецЕсли;

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	Префикс = ?(НаАванс,"А","")+Префикс;
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

//***{+Добавления}*** Тасмаджиев 09/08/2018// ->>
//***=!{Документооборот печть УПД}!=*** ->>
Функция СобратьДанныеДляПечатиПоДокументу(ДокОснование, ДанныеСчетаФактуры = Неопределено) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	Корректировочный = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;

	ТипОснования = ТипЗнч(ДокОснование);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеСФнаАвансИСуммовуюРазницу(ДокОснование);
	ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомитентуОПродажах(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщику(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомиссионераОПродажах(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если Корректировочный Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ДокОснование, Ссылка);
		Иначе
			ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиИсправленияСчетаФактуры(ДокОснование, Ссылка);
		КонецЕсли;
	Иначе
		ЭкземплярДанныхДляПечати = Неопределено;
	КонецЕсли;
	
	Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
		Если ВерсияПостановления = 2 И ВалютаДокумента <> мВалютаРегламентированногоУчета И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ПерезаполнитьСуммыПоУЕвРублях(ЭкземплярДанныхДляПечати, ДокОснование);
			ЭкземплярДанныхДляПечати.Валюта = мВалютаРегламентированногоУчета;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСчетаФактуры <> Неопределено Тогда
		ЭкземплярДанныхДляПечати.Вставить("Номер",            ДанныеСчетаФактуры.Номер);
		ЭкземплярДанныхДляПечати.Вставить("Дата",             ДанныеСчетаФактуры.Дата);
		ЭкземплярДанныхДляПечати.Вставить("НомерПРД",         ДанныеСчетаФактуры.НомерПлатежноРасчетногоДокумента);
		ЭкземплярДанныхДляПечати.Вставить("ДатаПРД",          ДанныеСчетаФактуры.ДатаПлатежноРасчетногоДокумента);
	КонецЕсли;
	
	Возврат ЭкземплярДанныхДляПечати;
	
КонецФункции 

Функция СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ТекущееОснование, Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
	|	КорректировкаРеализации.Подразделение КАК Подразделение,
	|	КорректировкаРеализации.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора
	|ПОМЕСТИТЬ ВТИсходныйДокумент
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсходныйДокумент.Организация,
	|	ВТИсходныйДокумент.Покупатель,
	|	ВТИсходныйДокумент.Грузополучатель,
	|	ВТИсходныйДокумент.Поставщик,
	|	ВТИсходныйДокумент.Грузоотправитель,
	|	ВТИсходныйДокумент.Сумма,
	|	ВТИсходныйДокумент.Валюта,
	|	ВТИсходныйДокумент.УчитыватьНДС,
	|	ВТИсходныйДокумент.СуммаВключаетНДС,
	|	ВТИсходныйДокумент.Подразделение,
	|	ВТИсходныйДокумент.ВидАгентскогоДоговора
	|ИЗ
	|	ВТИсходныйДокумент КАК ВТИсходныйДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Поставщик = Шапка.Поставщик;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ДанныеДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата,Исправление,ВидСчетаФактуры,НомерИсправления,СчетФактураБезНДС,КППКонтрагента,ВидСчетаФактуры,
																			|НомерИсправляемогоКорректировочногоДокумента,ДатаИсправляемогоКорректировочногоДокумента");
		ДанныеДокумента.Вставить("Номер",ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
		
	Иначе
		
		ДанныеДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата,Организация,Контрагент,ДоговорКонтрагента");
		
		ДанныеДокумента.Вставить("Номер",                            ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
		ДанныеДокумента.Вставить("ВидСчетаФактуры",                  Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		ДанныеДокумента.Вставить("Исправление",                      Ложь);
		ДанныеДокумента.Вставить("НомерИсправления",                 "");
		ДанныеДокумента.Вставить("НомерИсправляемогоКорректировочногоДокумента", "");
		ДанныеДокумента.Вставить("ДатаИсправляемогоКорректировочногоДокумента",  '00010101');
		ДанныеДокумента.Вставить("Продавец",                         ДанныеДокумента.Контрагент);
		ДанныеДокумента.Вставить("КППКонтрагента",                   "");
		ДанныеДокумента.Вставить("СчетФактураБезНДС",                Ложь);

	КонецЕсли;
		
	ДанныеДляПечати = Новый Структура();

	ДанныеДляПечати.Вставить("Организация",       	Шапка.Организация);
	ДанныеДляПечати.Вставить("Поставщик",         	Поставщик);
	ДанныеДляПечати.Вставить("Валюта",			  	Шапка.Валюта);
	ДанныеДляПечати.Вставить("Покупатель",        	Шапка.Покупатель);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС",  	Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("Подразделение",     	Шапка.Подразделение);
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",Шапка.ВидАгентскогоДоговора);	
	ДанныеДляПечати.Вставить("ДатаСчетФактуры",		ДанныеДокумента.Дата);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры",		ДанныеДокумента.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Ссылка",         		Ссылка);
	ДанныеДляПечати.Вставить("Номер",               ?(ДанныеДокумента.Исправление, ДанныеДокумента.НомерИсправляемогоКорректировочногоДокумента, ДанныеДокумента.Номер));
	ДанныеДляПечати.Вставить("Дата",                ?(ДанныеДокумента.Исправление, ДанныеДокумента.ДатаИсправляемогоКорректировочногоДокумента, ДанныеДокумента.Дата));
	ДанныеДляПечати.Вставить("НомерИсправления",    ?(ДанныеДокумента.Исправление, ДанныеДокумента.НомерИсправления, "--"));
	ДанныеДляПечати.Вставить("ДатаИсправления",     ?(ДанныеДокумента.Исправление, ДанныеДокумента.Дата, '00010101'));
	ДанныеДляПечати.Вставить("ДатаСчетФактуры",     ДанныеДокумента.Дата);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС",   ДанныеДокумента.СчетФактураБезНДС);
	ДанныеДляПечати.Вставить("КППКонтрагента",      ДанныеДокумента.КППКонтрагента);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры",     ДанныеДокумента.ВидСчетаФактуры);	
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, ДанныеДокумента.Дата);
	
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Ссылка,
	|	КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтроки,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеТовара,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА КорректировкаРеализацииТовары.КодТНВЭД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварКодТНВЭД,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.КодТНВЭДДоИзменения = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|						ТОГДА КорректировкаРеализацииТовары.КодТНВЭД
	|					ИНАЧЕ КорректировкаРеализацииТовары.КодТНВЭДДоИзменения
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварКодТНВЭДДоИзменения,
	|	КорректировкаРеализацииТовары.СерияНоменклатуры КАК Серия,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ИсходныйДокумент.СуммаВключаетНДС,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДСПослеИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.Количество КАК КоличествоПослеИзменения,
	|	КорректировкаРеализацииТовары.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииТовары.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) / КорректировкаРеализацииТовары.Количество
	|					ИНАЧЕ КорректировкаРеализацииТовары.Сумма / КорректировкаРеализацииТовары.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаПослеИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииТовары.КоличествоДоИзменения = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения) / КорректировкаРеализацииТовары.КоличествоДоИзменения
	|					ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения / КорректировкаРеализацииТовары.КоличествоДоИзменения
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма
	|	КОНЕЦ КАК СтоимостьБезНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения
	|	КОНЕЦ КАК СтоимостьБезНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС
	|	КОНЕЦ КАК СтоимостьСНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|	КОНЕЦ КАК СтоимостьСНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУвеличение,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	1 КАК НомерТЧ,
	|	КорректировкаРеализацииТовары.Номенклатура.Код КАК ТоварКод,
	|	КорректировкаРеализацииТовары.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииТовары.Количество <> КорректировкаРеализацииТовары.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Сумма <> КорректировкаРеализацииТовары.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.СуммаНДС <> КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Цена <> КорректировкаРеализацииТовары.ЦенаДоИзменения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.Ссылка,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.Содержание КАК СТРОКА(1000)),
	|	"""",
	|	"""",
	|	NULL,
	|	NULL,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	ИсходныйДокумент.СуммаВключаетНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииУслуги.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) / КорректировкаРеализацииУслуги.Количество
	|					ИНАЧЕ КорректировкаРеализацииУслуги.Сумма / КорректировкаРеализацииУслуги.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииУслуги.КоличествоДоИзменения = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|					ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	2,
	|	КорректировкаРеализацииУслуги.Номенклатура.Код,
	|	КорректировкаРеализацииУслуги.Номенклатура.Артикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииУслуги.Количество <> КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Сумма <> КорректировкаРеализацииУслуги.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.СуммаНДС <> КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Цена <> КорректировкаРеализацииУслуги.ЦенаДоИзменения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	Если ДанныеДокумента.Исправление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоИзменения", "ДоКорректировки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КодТНВЭДДоКорректировки", "КодТНВЭДДоИзменения");
	КонецЕсли;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Для Каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "ДоКорректировки", "ДоИзменения");
	КонецЦикла;
	
	Для Каждого Строчка Из ТаблицаРезультата Цикл
		Строчка.НаименованиеТовара = СокрЛП(Строчка.НаименованиеТовара) + ФормированиеПечатныхФорм.ПредставлениеСерий(Строчка);
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТаблицаРезультата); 
	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеДляПечатиКорректировочногоСчетаФактуры

Функция СобратьДанныеДляПечатиИсправленияСчетаФактуры(ТекущееОснование, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,		
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
	|	КорректировкаРеализации.ДокументРеализации КАК ДокументРеализации
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	ЗапросПоТоварам.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ТаблицаПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА ТаблицаПоТоварам.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ТаблицаПоТоварам.КодТНВЭД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварКодТНВЭД,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД.РегистрационныйНомер КАК РегистрационныйНомерТД,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаПоТоварам.Количество,
	|	ТаблицаПоТоварам.Цена,
	|	ТаблицаПоТоварам.Сумма,
	|	ТаблицаПоТоварам.СуммаНДС,
	|	ТаблицаПоТоварам.СтавкаНДС,
	|	ТаблицаПоТоварам.СерияНоменклатуры КАК Серия,
	|	ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
	|	""Товары"" КАК ВидПоступления,
	|	ТаблицаПоТоварам.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаПоТоварам.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ТаблицаПоТоварам
	|ГДЕ
	|	ТаблицаПоТоварам.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоУслугам.НомерСтроки,
	|	ТаблицаПоУслугам.Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаПоУслугам.Содержание КАК СТРОКА(1000)),
	|	"""",
	|	""Россия"",
	|	NULL,
	|	""Россия"",
	|	"""",
	|	"""",
	|	"""",
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	ТаблицаПоУслугам.Количество,
	|	ТаблицаПоУслугам.Цена,
	|	ТаблицаПоУслугам.Сумма,
	|	ТаблицаПоУслугам.СуммаНДС,
	|	ТаблицаПоУслугам.СтавкаНДС,
	|	NULL,
	|	NULL,
	|	""Услуги"",
	|	ТаблицаПоУслугам.Номенклатура.Код,
	|	ТаблицаПоУслугам.Номенклатура.Артикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК ТаблицаПоУслугам
	|ГДЕ
	|	ТаблицаПоУслугам.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПоступления,
	|	НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
    	
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата,Номер,НомерИсходногоДокумента,ДатаИсходногоДокумента");
    	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            РеквизитыСФ.НомерИсходногоДокумента);
	ДанныеДляПечати.Вставить("Дата",             РеквизитыСФ.ДатаИсходногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, РеквизитыСФ.Дата);

	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		ЕстьТовары = ЕстьТовары ИЛИ ВыборкаСтрокТовары.ВидПоступления = "Товары";
		ЕстьУслуги = ЕстьУслуги ИЛИ ВыборкаСтрокТовары.ВидПоступления = "Услуги";
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;

	КонецЦикла;

	Если НЕ ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	ТипДокументаРеализации = ТипЗнч(Шапка.ДокументРеализации);
	Если ТипДокументаРеализации = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		РеквизитыШапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.ДокументРеализации, "ОтпускПроизвел, ОтпускРазрешил");
		Если ЕстьТовары И ЗначениеЗаполнено(РеквизитыШапки.ОтпускПроизвел) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 				РеквизитыШапки.ОтпускПроизвел);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			РеквизитыСФ.Дата);
		ИначеЕсли ЕстьУслуги Тогда
			Если ЗначениеЗаполнено(РеквизитыШапки.ОтпускРазрешил) Тогда
				ДанныеДляПечати.Вставить("КладовщикДляУПД", 			РеквизитыШапки.ОтпускРазрешил);
				ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 		РеквизитыСФ.Дата);
			Иначе	
				ДанныеДляПечати.Вставить("ФИОКладовщика", 				Руководители.Руководитель);
				ДанныеДляПечати.Вставить("ДолжностьКладовщика", 		Руководители.РуководительДолжность);
			КонецЕсли;
		КонецЕсли;
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", Неопределено)
	КонецЕсли;

	Возврат ДанныеДляПечати;
		
КонецФункции // СобратьДанныеДляПечатиИсправленияСчетаФактуры

Процедура ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати, ТекущееОснование)
	
	ДокументОбъект = ТекущееОснование.ПолучитьОбъект();
	ЕстьДокументыРасчетов = ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("ДокументыРасчетовСКонтрагентом") <> Неопределено;
	
	Запрос = Новый Запрос();
	УниверсальныеМеханизмы.ОпределитьКурсыДокументаДляПечати(ДокументОбъект, Запрос);
	Курс      = Запрос.Параметры.Курс;
	Кратность = Запрос.Параметры.Кратность;
	
	Для Каждого СтрокаСчетаФактуры Из ДанныеДляПечати.ТабличнаяЧасть Цикл
		
		СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.Сумма * Курс / Кратность;
		СтрокаСчетаФактуры.СуммаНДС = СтрокаСчетаФактуры.СуммаНДС * Курс / Кратность;
		
	КонецЦикла;
	
	ПараметрыПересчета = УчетНДС.СтруктураПараметровДляПересчетаСуммВРубли();
	ПараметрыПересчета.СуммаАвансаВалИт     = Запрос.Параметры.СуммаАвансаВал;
	ПараметрыПересчета.СуммаАвансаРубИт     = Запрос.Параметры.СуммаАвансаРуб;
	ПараметрыПересчета.СуммаРеализацииВалИт = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОбъект);
	ПараметрыПересчета.ВалютаВзаиморасчетов = ТекущееОснование.ВалютаДокумента;
	ПараметрыПересчета.КурсРеализации       = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
	ПараметрыПересчета.КратностьРеализации  = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
	ПараметрыПересчета.СуммаВключаетНДС     = ТекущееОснование.СуммаВключаетНДС;
	ПараметрыПересчета.ДатаПересчета        = ТекущееОснование.Дата;
	УчетНДС.ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати.ТабличнаяЧасть, ПараметрыПересчета);
	
	ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения(0, "Цена");
		
КонецПроцедуры
//***=!{Документооборот печть УПД}!=*** <<-
//***{-Добавления}*** Тасмаджиев 09/08/2018// <<-

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мОбновлятьРеквизитыПриЗаписи = ИСТИНА;
мДокументЗаполнен = Ложь;
